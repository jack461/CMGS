// Cross recursion, with
// tail recursive calls.

var start = ptime();
var id = "T92";
var str92 = stralloc();
sprintf(str92, "%s-%d-Start [expect: %d]", id, thread(`idt), 4000000);
GM_Log(str92);
var str90 = stralloc();
var z = 0;
/*
var first_function = 3333;
sprintf(str92, "%s-%d-Code `first = `%s", id, thread(`idt), edn(str90, `first));
GM_Log(str92);
sprintf(str92, "%s-%d-Code `first_function = `%s", id, thread(`idt), edn(str90, `first_function));
GM_Log(str92);
sprintf(str92, "%s-%d-Code `second_function = `%s", id, thread(`idt), edn(str90, `second_function));
GM_Log(str92);
sprintf(str92, "%s-%d-Code `third_function = `%s", id, thread(`idt), edn(str90, `third_function));
GM_Log(str92);

sprintf(str92, "%s-%d-Code  %17g", id, thread(`idt), `first_function);
GM_Log(str92);
sprintf(str92, "%s-%d-Code  %s", id, thread(`idt), edn(str90, 'ABCD'));
GM_Log(str92);
*/

function first_function(x,y) (
   x <= 0 ? return(y);
   second_function(x,y);
);
function second_function(u, v)
local (x, y, z, t)
(
   x = u; y = v;
   z = x-1; t = 1;
   third_function(z, y, t);
);
function third_function(a, b, c)
(
   first_function(a, b+c);
);
var z = first_function (2000000, 2000000);


// z = first_function;

sprintf(str92, "%s-Duration:  %.2f s.", id, ptime() - start);
GM_Log(str92);
sprintf(str92, "%s-Result: %d", id, z);
GM_Log(str92);
sprintf(str92, "%s-%d-End", id, thread(`idt));
GM_Log(str92);

strfree(str92);
strfree(str90);



