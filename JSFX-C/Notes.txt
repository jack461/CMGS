Some utilities going with the Game Master


build_strings
=============

Lets you create a pool of JSFX strings from which you can allocate. Uses the fact that strings
internal references are consecutive, in order in which they appear in the source code.

Syntax:
    build_strings [-h] [-c count] [-w cols] [-o off] [-f first] [-l last] [-p pref]
        -h: print this help
        -c count: number of strings to generate
        -w cols: number of definitions on each line
        -f str: name for the first string
        -l str: name for the last string
        -p pref: prefix for the other strings
        -o off: a numeric offset added to the strings numbers

Example

    build_strings -c 20 -w 5 -f A_Str_First -l A_Str_Last -p A_str_ 

generate :

@init

#A_Str_First="";
#A_str_00002="";#A_str_00003="";#A_str_00004="";#A_str_00005="";#A_str_00006="";
#A_str_00007="";#A_str_00008="";#A_str_00009="";#A_str_00010="";#A_str_00011="";
#A_str_00012="";#A_str_00013="";#A_str_00014="";#A_str_00015="";#A_str_00016="";
#A_str_00017="";#A_str_00018="";#A_str_00019="";
#A_Str_Last="";



build_switch
============

Build an integer selector for JSFX, like a C switch,
    with continuous integer values from "first" to "last"
Syntax:
    build_switch [-f First] [-l Last] [-h] [-e Evar] [-v Vvar] [-i Inc] [-d] [-s Sep]
        [-c Cselect] [-p Pivot] [-x Expr] [-t Tab] 
where:
    First is the first value of the range to test (default: 0).
    Last is the last value of the range to test (default: 7).
    [-h] prints this help.
    [-d] Add "default" cases (actually, use First-1 and Last+1 to extends the switch).
    Vvar is the tested variable, with values from First to Last (default: "Cmd")
    Evar is an "error" variable, and is set to the tested variable as a default action. (default: "Err").
    Inc is the global increment (in spaces) for the whole construct.
    Tab is the additionnal increment (in spaces) for each case.
    Sep is the separator string, default "//===%i===//".
    Cselect lets you choose the comments you want around the action:
        0: no comment;  1: upper comment only;  2: lower comment only;  3: both comments.
    Pivot is a value in [First .. Last]. Default: (First+Last)/2.
    Expr is any JSFX expression inserted as default on the action. Default: "Err=n;".


Example

    build_switch -f 3 -l 9 -c 3 

generates:


    (Cmd<6)?((Cmd<4)?(
        //===3===//
        Err=3;
        //===3===//
    ):((Cmd<5)?(
        //===4===//
        Err=4;
        //===4===//
    ):(
        //===5===//
        Err=5;
        //===5===//
    ););):((Cmd<8)?((Cmd<7)?(
        //===6===//
        Err=6;
        //===6===//
    ):(
        //===7===//
        Err=7;
        //===7===//
    );):((Cmd<9)?(
        //===8===//
        Err=8;
        //===8===//
    ):(
        //===9===//
        Err=9;
        //===9===//
    );););




var_access
==========

Generate access to some GameMaster JSFX variable from mSL scripts

1) Update FR_var_names.txt

vi FR_var_names.txt

2) sort

sort < FR_var_names.txt  > z.txt
mv  z.txt FR_var_names.txt

3) generate

var_access FR_var_names.txt > u.txt

4) Update source

 mv  u.txt /Users/jjg4/GameMasterProject/GameMaster/GM-Libs/mSL_FR_Vars_Access.jsfx-inc

//====

vi GM_var_names.txt
sort < GM_var_names.txt > z.txt
mv  z.txt GM_var_names.txt
var_access GM_var_names.txt > u.txt
mv  u.txt /Users/jjg4/GameMasterProject/GameMaster/GM-Libs/mSL_GM_Vars_Access.jsfx-inc


