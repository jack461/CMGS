#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
%\usepackage{a4wide}
\usepackage{url}
\usepackage{times}
\usepackage{mathptm}
\usepackage{makeidx}
\usepackage{graphicx}
\usepackage{tikz}
\usepackage[T1]{fontenc}
\usepackage[latin1]{inputenc}
\pagestyle{headings}
\usepackage{babel}
\setcounter{secnumdepth}{3}
\setcounter{tocdepth}{3}
\usepackage{tikz}
\usepackage{pgfplots}
\include{scheme-aux}
\addtolength{\hoffset}{-0.25cm}
\addtolength{\textwidth}{0.50cm}
%\addtolength{\voffset}{-1.7cm}
%\addtolength{\textheight}{3.0cm}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding iso8859-1
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 4
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style swiss
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty} 
\backslash
vspace*{5.8cm} 
\backslash
begin{flushleft} 
\backslash
Huge
\backslash
bf Game Master 1.7.8 
\backslash

\backslash
 Manuel de R{
\backslash
'e}f{
\backslash
'e}rence 
\backslash
end{flushleft} 
\backslash
normalsize 
\backslash
vspace*{-0.3cm} 
\backslash
rule[-0.15cm]{
\backslash
textwidth}{3.2 pt} 
\backslash
rule[0.1cm]{
\backslash
textwidth}{1.8 pt} 
\backslash
begin{flushright} 
\backslash
vspace*{-0.3cm} 
\backslash
normalsize {
\backslash
it Document de travail
\backslash
/} 
\backslash

\backslash
 
\backslash
vspace*{5.8cm} 
\backslash
Large {
\backslash
bf Jean-Jacques Girardot} 
\backslash

\backslash
 {
\backslash
it Octobre 2024
\backslash
/} 
\backslash
end{flushright} 
\backslash
vspace*{-0.4cm} 
\backslash
rule[-0.15cm]{
\backslash
textwidth}{1.8 pt} 
\backslash
rule[0.04cm]{
\backslash
textwidth}{3.2 pt} 
\backslash
vspace*{-0.6cm} 
\backslash
begin{flushleft} 
\backslash
footnotesize {
\backslash
it J.J.
 Girardot {
\backslash
tt jj@girardot.name} 
\backslash

\backslash
 25 Rue Pierre Bérard 
\backslash

\backslash
 42000 Saint-Etienne C
\backslash
'edex
\backslash
/} 
\backslash
end{flushleft} 
\backslash
vfill 
\backslash
eject Document de travail.
 Release 146.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Copyright (c) J.J.Girardot, 2020, 2021, 2022, 2023, 2024.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Using :
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

pdfTeX 3.1415926-1.40.9-2.2 (Web2C 7.5.7)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

LyX Version 2.3.0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

PGF 
\backslash
pgfversion
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Date d'impression 
\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\backslash
cleardoublepage{}
\backslash
addcontentsline{toc}{section}{Table des Mati{
\backslash
`e}res}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\backslash
cleardoublepage{}
\end_layout

\end_inset


\end_layout

\begin_layout Part
Le Game Master
\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Section
Préambule
\begin_inset space ~
\end_inset

:
\begin_inset CommandInset label
LatexCommand label
name "sec:Le-Game-Master"

\end_inset

Le 
\emph on
Game Master
\emph default
, les concepts
\end_layout

\begin_layout Standard
La suite 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
Game Master
\series default
\emph default

\begin_inset Quotes crd
\end_inset

 est destinée à la génération semi-automatique de séquences électroacoustiques
 multicanales à partir de 
\begin_inset Quotes cld
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
clips
\end_layout

\end_inset

clips
\begin_inset Quotes crd
\end_inset

, échantillons sonores de courtes ou moyennes durées, typiquement de une
 seconde à quelques minutes.
 
\end_layout

\begin_layout Standard
On peut considérer le 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
Game Master
\series default
\emph default

\begin_inset Quotes crd
\end_inset

 comme un 
\emph on
échantillonneur logiciel
\emph default
, pouvant manipuler simultanément un grand nombre d'échantillons (jusqu'à
 10000), et disposant à l'heure actuelle de deux algorithmes de jeux
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
le 
\emph on
jeu continu
\emph default
, qui va jouer un 
\emph on
segment
\emph default
 du clip originel.
 Différents paramètres permettent de choisir la longueur et le début du
 segment, sa vitesse et son sens de lecture, ses enveloppes, etc.
\end_layout

\begin_layout Itemize
le 
\emph on
jeu de fragments
\emph default
, qui va extraire des 
\emph on
fragments
\emph default
 de l'échantillon, et les restituer avec différentes variations.
 Pour des fragments longs (quelques secondes à quelques dizaines de secondes),
 l'algorithme s'apparente à un 
\emph on
looper
\emph default
 lorsque ces fragments sont de même taille, débutent au même endroit dans
 le clip, et sont synchronisés.
 Pour des fragments courts (de quelques millisecondes à une seconde), on
 utilisera le terme de 
\emph on
grains
\emph default
, et l'on se retrouve alors dans le domaine de la 
\emph on
synthèse granulaire
\emph default
.
\end_layout

\begin_layout Standard
Ces deux algorithmes sont dits, pour des raisons historiques, mode 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
Play
\series default
\emph default

\begin_inset Quotes crd
\end_inset

 et mode 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
Loop
\series default
\emph default

\begin_inset Quotes crd
\end_inset

 – c'est cette terminologie qui est utilisée dans ce document.
\end_layout

\begin_layout Standard
Sans entrer dans les débats, et en référence à un article de Pierre Couprie
 aisément consultable sur internet 
\begin_inset CommandInset citation
LatexCommand cite
key "couprie-vocabulaire"
literal "false"

\end_inset

, on peut dire que les clips fournis au 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
Game Master
\series default
\emph default

\begin_inset Quotes crd
\end_inset

 sont, idéalement, des 
\begin_inset Quotes cld
\end_inset

objets sonores fixés
\begin_inset Quotes crd
\end_inset

 au sens Schaefferien du terme, voire des 
\begin_inset Quotes cld
\end_inset

objets convenables
\begin_inset Quotes crd
\end_inset

 ou des 
\begin_inset Quotes cld
\end_inset

objets musicaux
\begin_inset Quotes crd
\end_inset

.
 En s'appuyant sur des configurations de modes de fonctionnement choisies
 par l'utilisateur, le logiciel va transformer ces 
\begin_inset Quotes cld
\end_inset

objets sonores
\begin_inset Quotes crd
\end_inset

 en 
\begin_inset Quotes cld
\end_inset

images-de-sons
\begin_inset Quotes crd
\end_inset

 (terme dû à François Bayle), au travers de différents algorithmes de placement
 en espace et en temps.
\end_layout

\begin_layout Standard
La suite 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
Game Master
\series default
\emph default

\begin_inset Quotes crd
\end_inset

 peut fonctionner de manière entièrement automatique, à partir de préréglages
 enregistrés et de fichiers de configuration, ou encore travailler en mode
 interactif, voir en 
\begin_inset Quotes cld
\end_inset

live
\begin_inset Quotes crd
\end_inset

.
 Elle constitue un 
\begin_inset Quotes cld
\end_inset

studio
\begin_inset Quotes crd
\end_inset

 particulièrement adapté au 
\begin_inset Quotes cld
\end_inset

design sonore
\begin_inset Quotes crd
\end_inset

, qui permet d'expérimenter au travers de très nombreux réglages de paramètres.
\end_layout

\begin_layout Standard
Cette suite se compose de plug-ins de type 
\begin_inset Quotes cld
\end_inset

JSFX
\begin_inset CommandInset citation
LatexCommand cite
key "js-reaper,js-reaper-wiki"
literal "false"

\end_inset


\begin_inset Quotes crd
\end_inset

, c'est-à dire qu'elle ne va fonctionner 
\emph on
que
\emph default
 sous le logiciel 
\begin_inset Quotes cld
\end_inset

REAPER
\begin_inset Index idx
status open

\begin_layout Plain Layout
REAPER
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "reaper-manual,reaper-site"
literal "true"

\end_inset


\begin_inset Quotes crd
\end_inset

.
 Les différentes interactions s'effectuent au travers d'un plug-in unique,
 le 
\begin_inset Quotes cld
\end_inset


\emph on
Game Master
\emph default

\begin_inset Quotes crd
\end_inset

 et de son interface graphique, lui-même communiquant avec d'autres plug-ins
 grâce à une mémoire partagée commune.
\end_layout

\begin_layout Standard
Cette première partie décrit l'installation et la mise en œuvre de la suite
 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
Game Master
\series default
\emph default

\begin_inset Quotes crd
\end_inset

.
 Une seconde partie s'intéresse à 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
mSL
\series default
\emph default

\begin_inset Quotes crd
\end_inset

, le langage de script incorporé à la suite.
 La troisième partie aborde en détail les spécifications internes de l'outil,
 permettant à un utilisateur compétent dans le langage 
\begin_inset Quotes cld
\end_inset

JS
\begin_inset Quotes crd
\end_inset

 d'effectuer des modifications du logiciel.
\end_layout

\begin_layout Standard
Le 
\emph on
Game Master
\emph default
 est le résultat de plusieurs années de développements.
 Il doit son existence et nombre d'idées originales à 
\emph on
Jean-François Minjard
\begin_inset Index idx
status open

\begin_layout Plain Layout
Jean-François Minjard
\end_layout

\end_inset


\emph default
, qui a accompagné son évolution depuis le début.
 Qu'il en soit ici tout particulièrement remercié.
\end_layout

\begin_layout Section
Nouveautés
\end_layout

\begin_layout Standard
Les paragraphes qui suivent décrivent les évolutions récentes du logiciel.
 Si c'est votre premier contact avec celui-ci, vous pouvez directement sauter
 à la seconde partie, 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Mise-en-œuvre"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Pour ceux qui utilisent déjà le 
\begin_inset Quotes cld
\end_inset


\emph on
Game Master
\emph default

\begin_inset Quotes crd
\end_inset

, voici une description brève des modifications récentes du logiciel.
 Tous ces aspects sont mis à jour dans la documentation elle-même.
 Notons que la numérotation des versions du Game Master est constituée de
 trois nombres de deux chiffres, séparés par des points.
 La version 
\begin_inset Quotes cld
\end_inset

1.6.4
\begin_inset Quotes crd
\end_inset

 doit être comprise comme 
\begin_inset Quotes cld
\end_inset

01.06.04
\begin_inset Quotes crd
\end_inset

, et est antérieure à 
\begin_inset Quotes cld
\end_inset

1.6.15
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Subsection
Version 1.7.8
\end_layout

\begin_layout Standard
Octobre 2024.
 Tests sur Mac OS et Windows 11.
 Nécessite Reaper v7.25 ou ultérieure.
 La distribution se fait sous la forme d'un répertoire unique, de nom 
\begin_inset Quotes cld
\end_inset

CMGS
\begin_inset Quotes crd
\end_inset

 (pour, modestement, 
\begin_inset Quotes cld
\end_inset

Concrete Music Grand Studio
\begin_inset Quotes crd
\end_inset

), contenant les programmes, la documentation, etc.
\end_layout

\begin_layout Subsection
Versions 1.7.6 et 1.7.7
\end_layout

\begin_layout Standard
Versions intermédiaires non diffusées.
\end_layout

\begin_layout Subsection
Version 1.7.5
\end_layout

\begin_layout Standard
Diverses corrections dans les modes de jeu.
 Ajoût d'une nouvelle fonction dans les scripts 
\begin_inset Quotes cld
\end_inset

mSL
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset


\family typewriter
gui
\begin_inset Index idx
status open

\begin_layout Plain Layout
gui
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 (non encore documentée :) qui permet à un script de créer de nouveaux modules
 affichables.
 A noter que les dernières versions du 
\begin_inset Quotes cld
\end_inset

Game Master
\begin_inset Quotes crd
\end_inset

 ne sont 
\emph on
plus 
\emph default
opérationnelles sous Windows.
 L'enquête est ouverte (update: corrigé en 1.7.8).
\end_layout

\begin_layout Subsection
Version 1.7.4
\end_layout

\begin_layout Standard
Début de la mise en place des déplacements dynamiques dans l'espace.
\end_layout

\begin_layout Subsection
Version 1.7.3
\end_layout

\begin_layout Standard
Introduction des paramètres dynamiques, pour les modifications en cours
 de jeu.
\end_layout

\begin_layout Subsection
Version 1.7.2
\end_layout

\begin_layout Standard
Disponible fin Janvier 2024, cette version introduit quelques nouveaux aspects
 dans la définition des modes de jeu et des modes d'espace.
\end_layout

\begin_layout Subsection
Version 1.7.1
\end_layout

\begin_layout Standard
Disponible en Décembre 2023, cette version propose l'import direct de fichiers
 par 
\begin_inset Quotes cld
\end_inset

glisser-déposer
\begin_inset Quotes crd
\end_inset

 (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Glisser-déposer"
plural "false"
caps "false"
noprefix "false"

\end_inset

), et permet la lecture d'audio de grande taille.
\end_layout

\begin_layout Subsection
Version 1.7.0
\end_layout

\begin_layout Standard
Disponible depuis fin Novembre 2023.
 Elle a consisté en une grosse réécriture des 
\emph on
FileReaders
\emph default
, qui introduit la notion de 
\begin_inset Quotes cld
\end_inset

paramètres dynamiques
\begin_inset Quotes crd
\end_inset

 permettant d'intervenir durant le jeu même des clips, et propose un nouveau
 module pour la gestion de ces paramètres (c.f.
 le chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Les-Paramètres-Dynamiques"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Subsection
Version 1.6.16 du 31/08/2023
\end_layout

\begin_layout Standard
La distribution de cette version a été retardée du fait de problèmes d'implantat
ion de JSFX dans REAPER (aujourd'hui corrigés) ne permettant pas son utilisation
 sur Mac à processeurs M1.
 Cette version contourne ces problèmes, avec quelques améliorations dans
 la gestion des 
\emph on
clipsets
\begin_inset Index idx
status open

\begin_layout Plain Layout
clipsets
\end_layout

\end_inset


\emph default
 (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Configuration-des-ClipSets"
plural "false"
caps "false"
noprefix "false"

\end_inset

), du 
\begin_inset Quotes cld
\end_inset

Clip Selection
\begin_inset Quotes crd
\end_inset

 et des lecteurs.
 Le manuel a aussi subi relectures et corrections.
\end_layout

\begin_layout Subsection
Version 1.6.15 du 10/08/2023
\end_layout

\begin_layout Itemize
Intégration dans le manuel d’un chapitre consacré à la programmation en
 mSL.
\end_layout

\begin_layout Itemize
Intégration de la notion de « ClipSet », ensemble de clips.
 
\end_layout

\begin_layout Itemize
Quelques modifications dans la gestion du Play Log.
 
\end_layout

\begin_layout Itemize
Modification des File Readers, permettant d’éviter les RTxruns et drop-out
 du son.
 Les lectures de fichiers, antérieurement situées dans la section « @block
 » qui est une section temps réel audio, ont été déplacées dans la section
 « @gfx » ce qui fait que les lectures n’interfèrent plus avec la création
 de l’audio.
 
\end_layout

\begin_layout Subsection
Version 1.6.14 du 04/07/2023
\end_layout

\begin_layout Itemize
Intégration du Play Log (c.f.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Le-playlog"
plural "false"
caps "false"
noprefix "false"

\end_inset

), permettant d’enregistrer et de rejouer les séquences créées depuis le
 début de la session.
 
\end_layout

\begin_layout Subsection
Version 1.6.12r1 du 10/05/2023
\end_layout

\begin_layout Itemize
Nouvelle version du compactage des identificateurs longs.
 Evite les cas (rares) où deux identificateurs longs (+ 20 caractères) étaient
 reconnus identiques s’ils ne différaient que d’une lettre.
 
\end_layout

\begin_layout Itemize
Le menu de configuration du GUI peut être activé par « shift-clic droit
 » ou « alt-clic droit ».
 
\end_layout

\begin_layout Subsection
Version 1.6.12 du 05/05/2023
\end_layout

\begin_layout Itemize
Intégration de la nouvelle gestion de mémoire dynamique.
 Quelques optimisations.
 Demande possible de blocs alignés sur des frontières de 64k.
 
\end_layout

\begin_layout Itemize
Les tâches, listes et messages sont maintenant représentés par des blocs
 de mémoire pouvant être statiques ou dynamiques.
 
\end_layout

\begin_layout Itemize
Commande pour enregistrer « syslog » sous forme d’un fichier texte.
 
\end_layout

\begin_layout Subsection
Version 1.6.11 du 26/04/2023
\end_layout

\begin_layout Itemize
Intégration dans mSL des accès aux événements et messages, pour la communication
 avec des tâches du GM ou avec d’autres scripts mSL.
 
\end_layout

\begin_layout Itemize
Intégration dans «
\family typewriter
get
\family default
» et «
\family typewriter
set
\family default
» de l’accès semi-efficace aux variables des scripts JSFX.
 Il suffit d’ajouter les noms des variables que l’on veut pouvoir lire et
 écrire dans une liste, et d’exécuter un utilitaire annexe qui va générer
 automatiquement le code JSFX pour l’accès à ces variables.
 
\end_layout

\begin_layout Itemize
Intégration au moyen de la fonction « call » de l’accès (plus simple) à
 des fonctions JSFX du GM d’une importance réduite, ne nécessitant pas de
 « gaspiller » un des rares codes machine encore libres dans l’implantation.
 
\end_layout

\begin_layout Itemize
Premier usage réellement pertinent d’un script mSL complexe pour la gestion
 de l’installation du « cube » à « Chazelles ».
 
\end_layout

\begin_layout Subsection
Version 1.6.10 du 04/04/2023
\end_layout

\begin_layout Itemize
Modifications dans l’ergonomie de l’interface graphique.
 Nécessite une recréation des anciens préréglages (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Mise-en-œuvre"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Les fichiers de configuration des versions antérieures restent valables.
 
\end_layout

\begin_layout Itemize
Réécriture partielle des modules « Clips Selection » et « System Settings
 ».
 
\end_layout

\begin_layout Itemize
Intégration du concept de « 
\emph on
ClipSet
\begin_inset Index idx
status open

\begin_layout Plain Layout
ClipSet
\end_layout

\end_inset


\emph default
 » offrant une souplesse accrue dans le choix des clips.
 
\end_layout

\begin_layout Itemize
Ajoût de la commande « 
\family typewriter
PlFrSet
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlFrSet
\end_layout

\end_inset


\family default
 » (numéros 58/357) pour jouer un clip appartenant à un set.
 
\end_layout

\begin_layout Itemize
Mise à jour (partielle) de la documentation.
 
\end_layout

\begin_layout Subsection
Version 1.6.9 du 30/03/2023
\end_layout

\begin_layout Itemize
Intégration de la nouvelle version des menus.
 
\end_layout

\begin_layout Subsection
Version 1.6.8 du 03/03/2023
\end_layout

\begin_layout Itemize
Prise en compte du « glisser-déposer » pour les fichiers de configuration.
 C.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Glisser-déposer"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\end_layout

\begin_layout Itemize
Modifications dans l’ergonomie de l’interface graphique.
 
\end_layout

\begin_layout Itemize
Nouvelles actions GM.
 
\end_layout

\begin_layout Itemize
Corrections de problèmes d’affichage sur écrans « retina ».
 
\end_layout

\begin_layout Itemize
Diverses corrections internes.
 
\end_layout

\begin_layout Itemize
Vérification portage sous Windows.
\end_layout

\begin_layout Subsection
Version 1.6.6 du 20/02/2023
\end_layout

\begin_layout Itemize
Nécessite REAPER 6.75 ou ultérieure.
\end_layout

\begin_layout Itemize
Gestion du mode « retina » pour affichage sur Mac OSX.
\end_layout

\begin_layout Itemize
Version préliminaire et expérimentale (0.1.2) d’un script eel2, permettant
 au Game Master d’envoyer des commandes à Reaper.
 C.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Script-auxiliaire"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Version 1.6.5 du 20/01/2023
\end_layout

\begin_layout Itemize
Diverses corrections pour le portage sous Windows.
 Des tests plus complets restent à effectuer.
\end_layout

\begin_layout Subsection
Version 1.6.0 du 14/05/2022
\end_layout

\begin_layout Itemize
Première version du « play log », qui introduit la notion de « son figé
 » (un clip, avec l’ensemble des réglages afférents à son jeu), l’enregistrement
 de ces « sons », et la possibilité de rejouer une partie de la session
 depuis un moment précis.
 Version expérimentale servant de « proof of concept ».
\end_layout

\begin_layout Subsection
Version 1.5.5 du 18/01/2022
\end_layout

\begin_layout Itemize
Le Game Master reste entièrement opérationnel, même lorsque Reaper n’est
 pas en mode lecture, ou que l’interface graphique du Game Master est fermée.
\end_layout

\begin_layout Itemize
Tous les fichiers de configuration du Game Master sont désormais écrits
 dans son langage de script.
\end_layout

\begin_layout Itemize
La fonction « 
\family typewriter
sprintf
\family default
 » accepte maintenant jusqu’à 15 arguments.
\end_layout

\begin_layout Subsection
Version 1.5.4b du 28/12/2021
\end_layout

\begin_layout Itemize
Ensemble de petites corrections pour rendre homogènes les diverses commandes
 et raccourcis clavier.
\end_layout

\begin_layout Itemize
Développement des modules « Script Manager » et « Debugger ».
\end_layout

\begin_layout Itemize
Introduction de nouvelles fonctions dans le langage de script.
\end_layout

\begin_layout Itemize
Extensions de la fonction « 
\family typewriter
table()
\family default
 ».
 
\end_layout

\begin_layout Subsection
Version 1.5.4 du 19/9/2021
\end_layout

\begin_layout Itemize
Vitesses et sens de lecture corrigés (dans les playmodes).
\end_layout

\begin_layout Itemize
Restructuration de la gestion des commandes système.
\end_layout

\begin_layout Itemize
Possibilité de passage d’un Pad 3x3 à 2x2 dans les sensors par « 2 » ou
 « 3 » tapés au clavier, quand le pointeur est dans le pad des sensors.
\end_layout

\begin_layout Itemize
Nouvelles actions système (utilisables depuis les sensors) : 21/320 : lancement
 d’un clip du groupe courant.
 22/321, 23/322 : sélection temporaire d’un mode d’espace ou d’un mode de
 jeu ; 24/323, 25/324 : sélection « définitive » de mode d’espace et de
 mode de jeu ; 35/334 : lancement différé d’une suite de commande ; 36/335
 : exécution aléatoire d’une suite de commandes.
 
\end_layout

\begin_layout Itemize
Accès aux actions depuis « mSL » grâce à la fonction « action() ».
 
\end_layout

\begin_layout Itemize
Modification/création des tables de configuration grâce à la fonction «
 table() » (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Fichiers-de-configuration"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\end_layout

\begin_layout Itemize
Attribution d’un nom aux actions, qui peut être utilisé dans les commandes.
 
\end_layout

\begin_layout Itemize
Introduction de macro commandes.
 
\end_layout

\begin_layout Itemize
Le nombre de « pads » MIDI dans les capteurs passe de 8 à 20.
\end_layout

\begin_layout Subsection
Version 1.5.3 du 4/8/2021
\end_layout

\begin_layout Itemize
Révision du fonctionnement des players.
\end_layout

\begin_layout Itemize
Restructuration de la gestion des actions dans le dispatcher.
\end_layout

\begin_layout Itemize
Intégration quasi complète du langage d’extension « 
\emph on
mSL
\emph default
 ».
\end_layout

\begin_layout Itemize
Introduction des fonctions « wait() », « yield() », « exit() ».
 
\end_layout

\begin_layout Itemize
Ajoût des modules « 
\emph on
Script Manager
\emph default
 » et « 
\emph on
Debugger
\emph default
 ».
 
\end_layout

\begin_layout Itemize
Module «
\emph on
Links Manager
\emph default
» pour la gestion des raccourcis clavier, liens MIDI, etc.
\end_layout

\begin_layout Section
Note aux βετα-testeurs
\end_layout

\begin_layout Standard
Si vous lisez ce texte, c’est que vous ête devenu, par volonté délibérée,
 copinage, simple accident, voire à l’insu de votre plein gré, βετα-testeur.
 Si vous utilisez cette version, je suis intéressé par toutes vos remarques,
 suggestions, plaintes, etc.
 Lisez le manuel, nombre de réponses y existent.
 
\end_layout

\begin_layout Subsubsection*
Perspectives d’évolution
\end_layout

\begin_layout Standard
J’envisage, dans les mois à venir, de travailler sur les aspects suivants
 (présentés en ordre accidentel) :
\end_layout

\begin_layout Itemize
Redesign des diverses API (Application Programming Interface), création
 d’une API pour l’historique.
\end_layout

\begin_layout Itemize
Création d’une API pour la gestion de l’interface graphique.
\end_layout

\begin_layout Itemize
Editeur de séquences de sons.
\end_layout

\begin_layout Itemize
Refonte des FileReader, intégration de la lecture des longs fichiers.
\end_layout

\begin_layout Itemize
Redesign du play pad et intégration de quelques surfaces MIDI pour la commande
 du GameMaster.
\end_layout

\begin_layout Itemize
Exemples de sessions.
 Exemples de scripts.
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:InstallationBase"

\end_inset

Installation
\end_layout

\begin_layout Subsection
REAPER et ses extensions
\end_layout

\begin_layout Standard
Il est bien entendu nécessaire de disposer d'une version de REAPER, que
 l'on travaille sur Mac, ou, hélas, Windows ou Linux
\begin_inset Foot
status open

\begin_layout Plain Layout
J'entends par là que, travaillant et développant pour ma part sur Macintosh,
 je ne vous serai pas d'un grand secours si vous avez des soucis lorsque
 vous utilisez l'un de ces autres systèmes...
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Si REAPER n'est pas installé sur votre machine, se rendre sur le site de
 distribution du logiciel (
\begin_inset Quotes cld
\end_inset


\family typewriter
http://reaper.fm/
\family default

\begin_inset Quotes crd
\end_inset

), cliquer sur 
\begin_inset Quotes cld
\end_inset

DOWNLOAD REAPER
\begin_inset Quotes crd
\end_inset

 en haut à gauche, et choisir la version de REAPER appropriée à votre machine/op
érating system.
 Une fois le fichier d'installation téléchargé (un 
\begin_inset Quotes cld
\end_inset


\family typewriter
.exe
\family default

\begin_inset Quotes crd
\end_inset

 sous Windows, un 
\begin_inset Quotes cld
\end_inset


\family typewriter
.dmg
\family default

\begin_inset Quotes crd
\end_inset

 sous Mac, etc.), le double-cliquer pour démarrer l'installation.
 Ceci fait, installer également les extensions au logiciel, à récupérer
 depuis le site 
\begin_inset Quotes cld
\end_inset


\family typewriter
https://www.sws-extension.org/
\family default

\begin_inset Quotes crd
\end_inset

, en choisissant la version cohérente avec le REAPER que vous avez téléchargé.
 Installer cette extension comme vous l'avez fait pour REAPER.
 Il est possible enfin de charger des 
\begin_inset Quotes cld
\end_inset

packs de langues
\begin_inset Quotes crd
\end_inset

, le pack français permettant de 
\begin_inset Quotes cld
\end_inset

franciser
\begin_inset Quotes crd
\end_inset

 son installation.
 Je ne suis pas fanatique de cette opération, car les traductions sont parfois
 approximatives, certaines sont manquantes, et c'est se couper de toute
 la littérature (manuels, vidéos) consacrée à REAPER, qui est, elle, en
 anglais.
 Notons que la version actuelle du 
\emph on
Game Master
\emph default
 nécessite la version 
\emph on
v7.25 
\emph default
de REAPER, ou plus récent.
\end_layout

\begin_layout Standard
Vérifier le fonctionnement de votre installation, en lançant REAPER selon
 la procédure habituelle sur votre machine.
 Profitez de cette première ouverture du logiciel pour régler les paramètres
 relatifs à votre carte son.
 Choisissez le menu 
\begin_inset Quotes cld
\end_inset

REAPER\SpecialChar menuseparator
Préférences...
\begin_inset Quotes crd
\end_inset

, puis, dans la fenêtre qui s'ouvre, 
\begin_inset Quotes cld
\end_inset

Audio\SpecialChar menuseparator
Device
\begin_inset Quotes crd
\end_inset

.
 Sélectionnez la carte son que vous désirez utiliser, puis régler 
\begin_inset Quotes cld
\end_inset

Request sample rate
\begin_inset Quotes crd
\end_inset

 sur 48000, et 
\begin_inset Quotes cld
\end_inset

Request block size
\begin_inset Quotes crd
\end_inset

 sur 4096.
 Cliquez 
\begin_inset Quotes cld
\end_inset

OK
\begin_inset Quotes crd
\end_inset

 pour valider vos choix.
\end_layout

\begin_layout Standard
Vous pouvez éventuellement régler d'autres préférences.
 Voici celles que je conseillerais:
\end_layout

\begin_layout Itemize
Il est pratique de visualiser la piste 
\begin_inset Quotes cld
\end_inset


\emph on
Master
\emph default

\begin_inset Quotes crd
\end_inset

.
 Choisir le menu 
\begin_inset Quotes cld
\end_inset

View\SpecialChar menuseparator
Master Track
\begin_inset Index idx
status open

\begin_layout Plain Layout
Master Track
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 pour cocher cette option.
\end_layout

\begin_layout Itemize
On n'a pas besoin, pour utiliser le Game Master, de la vue du 
\emph on
Mixer
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Mixer
\end_layout

\end_inset

, ni de celle du 
\emph on
Docker
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Docker
\end_layout

\end_inset

.
 Choisir les menus 
\begin_inset Quotes cld
\end_inset

View\SpecialChar menuseparator
Mixer
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

View\SpecialChar menuseparator
Docker
\begin_inset Quotes crd
\end_inset

 pour décocher ces options.
\end_layout

\begin_layout Subsection
Le Game Master
\end_layout

\begin_layout Paragraph*
Caveat
\end_layout

\begin_layout Standard
Le contenu de la distribution évoluant au fil du temps, la description qui
 suit est probablement, en partie, incorrecte.
 Se fier de préférence au 
\begin_inset Quotes cld
\end_inset

Read-Me-First
\begin_inset Quotes crd
\end_inset

 associé à la version.
\end_layout

\begin_layout Subsubsection
Mise en œuvre [Octobre 2024]
\end_layout

\begin_layout Standard
L'installation consiste en un répertoire zippé (le répertoire est 
\begin_inset Quotes cld
\end_inset

CMGS
\begin_inset Quotes crd
\end_inset

) dont les éléments essentiels sont
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
un fichier 
\begin_inset Quotes cld
\end_inset

Read-Me-First
\begin_inset Quotes crd
\end_inset

, contenant des amendements éventuels à cette description.
\end_layout

\begin_layout Itemize
un répertoire, 
\begin_inset Quotes cld
\end_inset

GameMaster
\begin_inset Quotes crd
\end_inset

, qui contient les plug-ins 
\begin_inset Quotes cld
\end_inset

GamePlayer.jsfx
\begin_inset Quotes crd
\end_inset

 (l'essentiel des algorithmes), 
\begin_inset Quotes cld
\end_inset

FilePlayer.jsfx
\begin_inset Quotes crd
\end_inset

 (lecture et rendu des fichiers sons), 
\begin_inset Quotes cld
\end_inset

SmoothMultiLimiter
\begin_inset Quotes crd
\end_inset

 (un limiteur multicanaux), quelques plugs-ins auxiliaires, un sous-répertoire,
 
\begin_inset Quotes cld
\end_inset

GM-Lib
\begin_inset Quotes crd
\end_inset

, contenant tous les fichiers d'inclusion nécessaires à leur fonctionnement,
 et un autre sous-répertoire, 
\begin_inset Quotes cld
\end_inset

Scripts
\begin_inset Quotes crd
\end_inset

, où se trouvent les scripts utilisés par un projet spécifique, ainsi que
 GMAuxiliary.eel
\begin_inset Index idx
status open

\begin_layout Plain Layout
GMAuxiliary.eel
\end_layout

\end_inset

 qui est le script auxiliaire
\begin_inset Index idx
status open

\begin_layout Plain Layout
script auxiliaire
\end_layout

\end_inset

, utilisé par le Game Master pour transmettre des commandes à REAPER.
\end_layout

\begin_layout Itemize
un document PDF, de nom GameMaster-Doc-1.7.8.pdf, qui est la documentation
 de la version courante.
\end_layout

\begin_layout Standard
Les autres fichiers éventuels de ce répertoire ne sont utiles qu'au développeur,
 sauf indication spécifique dans le 
\begin_inset Quotes cld
\end_inset

Read-Me-First
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Un autre document également téléchargeable est le dossier zippé 
\begin_inset Quotes cld
\end_inset

GM-Octo
\begin_inset Quotes crd
\end_inset

, qui constitue un exemple de projet quasi directement utilisable.
 On y trouvera en particulier, dans 
\begin_inset Quotes cld
\end_inset

Data
\begin_inset Quotes crd
\end_inset

, un répertoire, 
\begin_inset Quotes cld
\end_inset

WAVES
\begin_inset Quotes crd
\end_inset

, qui contient tous les sons propres à ce projet spécifique.
\end_layout

\begin_layout Standard
Une 
\begin_inset Quotes cld
\end_inset

installation
\begin_inset Quotes crd
\end_inset

 (qu'elle soit destinée à un travail de composition, un projet live, un
 concert, etc.) consiste en un projet REAPER, dont l'organisation répond
 à une structure très précise, largement décrite dans ce document.
 Selon les besoins, les répertoires 
\begin_inset Quotes cld
\end_inset

GameMaster
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

WAVES
\begin_inset Quotes crd
\end_inset

 peuvent être placés à l'intérieur de ce projet REAPER, ce qui rend celui-ci
 autonome, et portable d'une machine à une autre, soit encore dans le répertoire
 des ressources de REAPER.
 Le Game Master est alors accessible à tout projet créé par l'utilisateur,
 sans qu'il soit nécessaire de copier son code à l'intérieur du projet.
 Notons que, compte tenu de la gestion des plug-ins de REAPER, ces deux
 modes de fonctionnement semblent actuellement incompatibles.
\end_layout

\begin_layout Standard
GM-Octo et son dossier WAVES constituent un simple exemple d'utilisation
 du Game Master, et ne sont pas indispensables au fonctionnement de ce dernier.
 Ignorez, mais ne supprimez pas les autres fichiers...
\end_layout

\begin_layout Standard
Il existe deux modes d'installation possibles pour le GameMaster
\begin_inset space ~
\end_inset

: le rendre accessible à tous les utilisateurs de la machine, ce qui implique
 d'avoir accès aux répertoires système de la machine, ou l'utiliser dans
 un projet unique.
 Ces deux modes d'installation sont détaillés ci-dessous.
\end_layout

\begin_layout Subsubsection
Le Game Master pour tous
\end_layout

\begin_layout Standard

\emph on
[obsolète, déconseillé; cf §
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Un-exemple-10-2024"
plural "false"
caps "false"
noprefix "false"

\end_inset

]
\end_layout

\begin_layout Standard
Une fois le logiciel REAPER installé, lancer son exécution, et chercher
 (au moyen du menu 
\begin_inset Quotes cld
\end_inset

Options\SpecialChar menuseparator
Show REAPER ressources path...
\begin_inset Quotes crd
\end_inset

) le répertoire des resources de REAPER.
 Un répertoire s'ouvre dans le Finder/Explorer, dans lequel se trouvent
 différents sous-répertoires, dont trois de noms 
\begin_inset Quotes cld
\end_inset


\emph on
Data
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Data (répertoire)
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\emph on
Effects
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Effects (répertoire)
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\emph on
Scripts
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Scripts (réperoire)
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Enumerate
(Dé)Placer dans le répertoire 
\begin_inset Quotes cld
\end_inset


\emph on
Effects
\emph default

\begin_inset Quotes crd
\end_inset

 le répertoire 
\begin_inset Quotes cld
\end_inset


\emph on
GameMaster
\emph default

\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Enumerate
(Dé)Placer dans le répertoire 
\begin_inset Quotes cld
\end_inset


\emph on
Data
\emph default

\begin_inset Quotes crd
\end_inset

 le répertoire de nom 
\begin_inset Quotes cld
\end_inset


\emph on
WAVES
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
(Dé)Placer dans le répertoire 
\begin_inset Quotes cld
\end_inset


\emph on
Scripts
\emph default

\begin_inset Quotes crd
\end_inset

 le fichier 
\begin_inset Quotes cld
\end_inset


\emph on
GMAuxiliary.eel
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Le répertoire du projet 
\begin_inset Quotes cld
\end_inset


\emph on
GM-Octo
\emph default

\begin_inset Quotes crd
\end_inset

 peut lui-même être placé n'importe où, par exemple sur le bureau ou dans
 votre répertoire d'accueil.
\end_layout

\begin_layout Enumerate
Pour lancer le projet, double-cliquez sur le fichier 
\begin_inset Quotes cld
\end_inset


\emph on
GM-Octo.RPP
\emph default

\begin_inset Quotes crd
\end_inset

 
\end_layout

\begin_layout Standard
Cette procédure permet l'installation du Game Master pour tous les utilisateurs
 de la machine.
 
\end_layout

\begin_layout Subsubsection
Le Game Master intégré au projet
\end_layout

\begin_layout Standard

\emph on
[obsolète.
 cf §
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Un-exemple-10-2024"
plural "false"
caps "false"
noprefix "false"

\end_inset

]
\end_layout

\begin_layout Standard
Il est possible de placer le Game Master dans un 
\emph on
projet spécifique.

\emph default
 Il ne sera alors accessible que par ce projet, mais cette approche permet
 de ne pas modifier l'installation de REAPER sur la machine.
 Elle est pertinente si vous n'avez pas accès aux répertoires du système.
\end_layout

\begin_layout Enumerate
Installer le répertoire 
\begin_inset Quotes cld
\end_inset


\emph on
GM-Octo
\emph default

\begin_inset Quotes crd
\end_inset

 dans un endroit accessible, par exemple sur le bureau ou dans votre répertoire
 d'accueil.
\end_layout

\begin_layout Enumerate
Créer dans le répertoire 
\begin_inset Quotes cld
\end_inset


\emph on
GM-Octo
\emph default

\begin_inset Quotes crd
\end_inset

 un nouveau répertoire, de nom 
\begin_inset Quotes cld
\end_inset


\emph on
Effects
\emph default

\begin_inset Quotes crd
\end_inset

, et y placer le répertoire de nom 
\begin_inset Quotes cld
\end_inset


\emph on
GameMaster
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Créer dans le répertoire 
\begin_inset Quotes cld
\end_inset


\emph on
GM-Octo
\emph default

\begin_inset Quotes crd
\end_inset

 un nouveau répertoire, de nom 
\begin_inset Quotes cld
\end_inset


\emph on
Data
\emph default

\begin_inset Quotes crd
\end_inset

, et y placer le répertoire de nom 
\begin_inset Quotes cld
\end_inset


\emph on
WAVES
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Créer dans le répertoire 
\begin_inset Quotes cld
\end_inset


\emph on
GM-Octo
\emph default

\begin_inset Quotes crd
\end_inset

 un nouveau répertoire, de nom 
\begin_inset Quotes cld
\end_inset


\emph on
Scripts
\emph default

\begin_inset Quotes crd
\end_inset

, et y placer le fichier 
\begin_inset Quotes cld
\end_inset


\emph on
GMAuxiliary.eel
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Pour lancer le projet, double-cliquez sur le fichier 
\begin_inset Quotes cld
\end_inset


\emph on
GM-Octo.RPP
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Section
Premier contact
\end_layout

\begin_layout Standard
Double-cliquez sur le fichier 
\family typewriter
GM-Octo.RPP
\family default
.
 Cette action lance REAPER, qui charge le projet, et affiche quelque chose
 de similaire à la figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Session-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, ou comme 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Session-1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 si le Game Master n'a pas été configuré...
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/Full-Screen.tiff
	lyxscale 48
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Session-1"

\end_inset

Une session 
\emph on
Game Master
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Screen-01.png
	lyxscale 40
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Session-1-1"

\end_inset

Le 
\emph on
Game Master
\emph default
 non configuré
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si vous êtes dans ce dernier cas, il est bon de lire les paragraphes suivants,
 qui détaillent les différents aspects du logiciel.
 Sinon, tentez le bouton 
\begin_inset Quotes cld
\end_inset

Auto-play
\begin_inset Quotes crd
\end_inset

 du module 
\begin_inset Quotes cld
\end_inset

Play Control
\begin_inset Quotes crd
\end_inset

 en haut à gauche de la fenêtre du Game Master...
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Mise-en-œuvre"

\end_inset

Mise en œuvre d'une nouvelle version
\end_layout

\begin_layout Standard
Le travail décrit ici est à faire une seule fois, lors d'une nouvelle installati
on du GameMaster sur votre machine.
 La raison en est qu'il faut créer un fichier initial de préréglages adaptés
 à votre machine, pour le GameMaster lorsqu'il est intégré à un projet.
 Voici l'algorithme à utiliser à partir de la session de démonstration,
 de nom 
\begin_inset Quotes cld
\end_inset

GM-Octo
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Si des versions antérieures du GM avaient été installées, il peut être nécessair
e de supprimer les anciens 
\emph on
préréglages
\emph default
, lorsqu'ils ne sont plus compatibles, voire de supprimer le fichier de
 sauvegarde des préréglages du GM.
 Pour ce faire, aller dans le 
\begin_inset Quotes cld
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
rrR
\end_layout

\end_inset

rrR
\begin_inset Quotes crd
\end_inset

 (répertoire des resources de REAPER
\begin_inset Index idx
status open

\begin_layout Plain Layout
répertoire des resources de REAPER
\end_layout

\end_inset

), descendre dans 
\begin_inset Quotes cld
\end_inset


\family typewriter
presets
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
presets
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, et supprimer (ou déplacer, ou renommer) les fichiers de noms 
\begin_inset Quotes cld
\end_inset


\family typewriter
js-GameMaster_GamePlayer_jsfx.ini
\family default

\begin_inset Quotes crd
\end_inset

 ou (si le GM était intégré à un projet) 
\begin_inset Quotes cld
\end_inset


\family typewriter
js-_Project__GamePlayer_jsfx.ini
\family default

\begin_inset Quotes crd
\end_inset

.
 Supprimer également, ou mettre de côté, la version antérieure du Game Master
 (située dans 
\begin_inset Quotes cld
\end_inset

<rrR>/Effects
\begin_inset Quotes crd
\end_inset

, probablement sous le nom 
\begin_inset Quotes cld
\end_inset

Game-Master
\begin_inset Quotes crd
\end_inset

 ou équivalent).
\end_layout

\begin_layout Enumerate
Double cliquer sur le fichier 
\begin_inset Quotes cld
\end_inset


\family typewriter
GM-Octo.RPP
\family default

\begin_inset Quotes crd
\end_inset

.
 Ceci lance la session, et affiche la fenêtre du 
\begin_inset Quotes cld
\end_inset

GameMaster
\begin_inset Quotes crd
\end_inset

.
 Si cette fenêtre ne s'affiche pas immédiatement, cliquer sur la boîte (verte)
 
\begin_inset Quotes cld
\end_inset

FX
\begin_inset Quotes crd
\end_inset

 de la piste 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

, de nom 
\begin_inset Quotes cld
\end_inset

GAME PLAYER
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Si la fenêtre affichée n'est pas entièrement vierge, il se peut qu'elle
 ait déjà été configurée, et la session sauvegardée, avant la création de
 la distribution.
 Elle comporte alors vraisemblablement un cadre, de nom 
\begin_inset Quotes cld
\end_inset


\emph on
System Log
\emph default

\begin_inset Quotes crd
\end_inset

, qui trace les différentes étapes de l'initialisation du logiciel, jusqu'à
 affichage du message 
\begin_inset Quotes cld
\end_inset

** GAME MASTER READY **
\begin_inset Quotes crd
\end_inset

.
 Si vous avez déjà configuré votre installation de REAPER il suffit alors
 de repérer dans le cadre 
\begin_inset Quotes cld
\end_inset


\emph on
Play Control
\emph default

\begin_inset Quotes crd
\end_inset

 le bouton 
\begin_inset Quotes cld
\end_inset


\emph on
Auto-play (off)
\emph default

\begin_inset Quotes crd
\end_inset

 et de le cliquer pour lancer le mode 
\begin_inset Quotes cld
\end_inset

auto-play
\begin_inset Quotes crd
\end_inset

, qui doit produire, au bout de quelques instants, une séquence sonore.
 Si tout vous semble correct, passer à l'étape 9 pour sauvegarder ce preset.
\end_layout

\begin_layout Enumerate
Si rien ne marche à cette étape 2, quoi que la fenêtre affiche, choisir
 dans le menu des préréglages (ligne tout en haut de la fenêtre du 
\begin_inset Quotes cld
\end_inset

GameMaster
\begin_inset Quotes crd
\end_inset

) 
\begin_inset Quotes cld
\end_inset

Reset to factory default
\begin_inset Quotes crd
\end_inset

.
 Le menu affiche alors 
\begin_inset Quotes cld
\end_inset

No preset
\begin_inset Quotes crd
\end_inset

 à cet emplacement, le reste du plug-in étant vierge à l'exception des tabulatio
ns 
\begin_inset Quotes cld
\end_inset

Main
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Studio A
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Studio B
\begin_inset Quotes crd
\end_inset

, etc.
 Cliquer 
\begin_inset Quotes cld
\end_inset

Main
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Placer le curseur de la souris dans la partie gauche de la zone vierge du
 plug-in, et faire un 
\begin_inset Quotes cld
\end_inset

shift-clic-droit
\begin_inset Quotes crd
\end_inset

.
 Un nouveau menu s'affiche, qui permet de choisir les modules (c.f.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-panneaux-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Afficher 
\begin_inset Quotes cld
\end_inset

Modules\SpecialChar menuseparator
Play Control
\begin_inset Quotes crd
\end_inset

 (avec lequel on lancera les players), 
\begin_inset Quotes cld
\end_inset

Modules\SpecialChar menuseparator
Sound Units
\begin_inset Quotes crd
\end_inset

 (qui va permettre de suivre l'activation des players) et 
\begin_inset Quotes cld
\end_inset

Modules\SpecialChar menuseparator
System Settings
\begin_inset Quotes crd
\end_inset

 (qui servira à l'initialisation).
 Choisir également 
\begin_inset Quotes cld
\end_inset

Panes Arrangement\SpecialChar menuseparator
2 panes
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Enumerate
Placer le curseur de la souris dans la partie droite de la fenêtre du plug-in,
 et afficher 
\begin_inset Quotes cld
\end_inset

Modules\SpecialChar menuseparator
System-Log
\begin_inset Quotes crd
\end_inset

, grâce auquel on pourra suivre la trace des opérations du plug-in.
\end_layout

\begin_layout Enumerate
Appuyer sur la touche 
\begin_inset Quotes cld
\end_inset

ctrl
\begin_inset Quotes crd
\end_inset

 (Mac) ou 
\begin_inset Quotes cld
\end_inset

Windows
\begin_inset Quotes crd
\end_inset

 (Windows).
 Le bouton 
\begin_inset Quotes cld
\end_inset

Refresh
\begin_inset Quotes crd
\end_inset

 du module 
\begin_inset Quotes cld
\end_inset

System Settings
\begin_inset Quotes crd
\end_inset

 passe à l'orange en affichant 
\begin_inset Quotes cld
\end_inset

Reset
\begin_inset Quotes crd
\end_inset

.
 Le cliquer, relâcher la touche.
 Cliquer ensuite sur 
\begin_inset Quotes cld
\end_inset

Refresh
\begin_inset Quotes crd
\end_inset

.
 Ceci lance une réinitialisation des configurations, et diverses traces
 s'affichent dans le 
\begin_inset Quotes cld
\end_inset

System Log
\begin_inset Quotes crd
\end_inset

.
 Quand la dernière trace s'est affichée (
\begin_inset Quotes cld
\end_inset

...GM_mSL_ini...
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

** GAME MASTER READY **
\begin_inset Quotes crd
\end_inset

), on peut essayer de cliquer le bouton 
\begin_inset Quotes cld
\end_inset

Auto-play (off)
\begin_inset Quotes crd
\end_inset

 du module 
\begin_inset Quotes cld
\end_inset

Play Control
\begin_inset Quotes crd
\end_inset

.
 Si tout s'est bien passé, le 
\begin_inset Quotes cld
\end_inset

GameMaster
\begin_inset Quotes crd
\end_inset

 doit produire des sons – peut-être au bout d'une ou deux minutes, le temps
 que l'exploration de tous les clips se termine).
\end_layout

\begin_layout Enumerate
Il peut être pertinent, dans la mesure où la session proposée est en octophonie,
 d'indiquer que l'on va utiliser 8 canaux en sortie.
 Pour ceci, afficher dans l'un des paneaux le module 
\begin_inset Quotes cld
\end_inset

Modules\SpecialChar menuseparator
Parameters A
\begin_inset Quotes crd
\end_inset

, puis dans ce module, par un 
\begin_inset Quotes cld
\end_inset

clic-droit
\begin_inset Quotes crd
\end_inset

 sur le texte 
\begin_inset Quotes cld
\end_inset

(unset entry)
\begin_inset Quotes crd
\end_inset

, ajouer le slider 
\begin_inset Quotes cld
\end_inset

Channels #
\begin_inset Quotes crd
\end_inset

, qui est par défaut réglé sur 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

.
 Le passer à 
\begin_inset Quotes cld
\end_inset

8
\begin_inset Quotes crd
\end_inset

 (ou au nombre de HP de votre configuration).
 Naturellement, le nombre de canaux dans les différentes pistes doit correspondr
e: pour 
\begin_inset Quotes cld
\end_inset

MASTER
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Mixing
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Player
\begin_inset Quotes crd
\end_inset

 (toutes ! – il faut, pour voir ces pistes, cliquer, dans la piste 
\begin_inset Quotes cld
\end_inset

4
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Mixing
\begin_inset Quotes crd
\end_inset

, sur le petit triangle noir, en haut, à gauche) ou 
\begin_inset Quotes cld
\end_inset

Phone Mix
\begin_inset Quotes crd
\end_inset

, sélectionner la boîte [Route], et vérifier que le réglage 
\begin_inset Quotes cld
\end_inset

Track channels
\begin_inset Quotes crd
\end_inset

 est bien réglé à 8.
 On notera cependant que passer le réglage 
\begin_inset Quotes cld
\end_inset

Channels #
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

 permet d'obtenir une réduction en stéréophonie de la sortie, tous les canaux
 étant alors repliés sur les deux premiers lors du lancement de nouveaux
 clips.
\end_layout

\begin_layout Enumerate
Sauvegarder le préréglage du 
\begin_inset Quotes cld
\end_inset

GamePlayer
\begin_inset Quotes crd
\end_inset

 (touche [+] tout en haut de la fenêtre, à gauche de [Param]), choisir dans
 le menu 
\begin_inset Quotes cld
\end_inset

Save Preset...
\begin_inset Quotes crd
\end_inset

, et introduire le nom de votre choix dans la fenêtre qui s'affiche.
 Faire 
\begin_inset Quotes cld
\end_inset

Ok
\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Enumerate
De même on peut régler le plugin 
\begin_inset Quotes cld
\end_inset


\emph on
SmoothMultichannelLimiter
\emph default

\begin_inset Quotes crd
\end_inset

 (effet sur la piste 
\begin_inset Quotes cld
\end_inset

6
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Mixing
\begin_inset Quotes crd
\end_inset

) sur 8 canaux (slider 
\begin_inset Quotes cld
\end_inset

channels
\begin_inset Quotes crd
\end_inset

).
 Sauvegarder ensuite le préréglage pour ce plugin ([+], etc...)
\end_layout

\begin_layout Enumerate
Sauvegarder la session (
\begin_inset Quotes cld
\end_inset

File\SpecialChar menuseparator
Save Project
\begin_inset Quotes crd
\end_inset

) et quitter REAPER.
\end_layout

\begin_layout Standard
La session sera automatiquement relancée au prochain lancement de REAPER,
 avec le plug-in du GameMaster correctement configuré.
\end_layout

\begin_layout Subsection
Et ensuite ?
\end_layout

\begin_layout Standard

\emph on
[obsolète.
 cf §
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Un-exemple-10-2024"
plural "false"
caps "false"
noprefix "false"

\end_inset

]
\end_layout

\begin_layout Standard
Dès lors, si tout marche bien, on peut décider d'installer le 
\begin_inset Quotes cld
\end_inset

GameMaster
\begin_inset Quotes crd
\end_inset

 pour tous, afin qu'il soit utilisable depuis tout nouveau projet.
 Tout d'abord, faire une sauvegarde du projet 
\begin_inset Quotes cld
\end_inset

GM-Project
\begin_inset Quotes crd
\end_inset

, par exemple, en en faisant un zip.
 Ensuite, suivre les directives de la Doc § 1.3.2.1.
 En pratique, les 5 éléments d'une distribution du 
\begin_inset Quotes cld
\end_inset

GameMaster
\begin_inset Quotes crd
\end_inset

, telle qu'expliquée en Doc § 1.3.2, vont s'obtenir et se mettre en place
 de la manière suivante:
\end_layout

\begin_layout Description
GameMaster changer dans 
\begin_inset Quotes cld
\end_inset

GM-Octo
\begin_inset Quotes crd
\end_inset

 le nom 
\begin_inset Quotes cld
\end_inset

Effects
\begin_inset Quotes crd
\end_inset

 en 
\begin_inset Quotes cld
\end_inset

GameMaster
\begin_inset Quotes crd
\end_inset

, et le déplacer hors du projet 
\begin_inset Quotes cld
\end_inset

GM-Project
\begin_inset Quotes crd
\end_inset

 pour l'installer, comme expliqué dans le répertoire des ressources de REAPER.
\end_layout

\begin_layout Description
GMAuxiliary.eel ce fichier est situé à l'intérieur du répertoire 
\begin_inset Quotes cld
\end_inset

GM-Project/ReaScripts
\begin_inset Quotes crd
\end_inset

.
 Le déplacer selon les directives de Doc § 1.3.2.1.
 On peut alors supprimer du projet 
\begin_inset Quotes cld
\end_inset

GM-Octo
\begin_inset Quotes crd
\end_inset

 le dossier 
\begin_inset Quotes cld
\end_inset

ReaScripts
\begin_inset Quotes crd
\end_inset

 maintenant vide.
\end_layout

\begin_layout Description
GameMaster-Doc-1.6.pdf Elle se trouve au premier niveau de la distribution.
 Ce document peut être placé n'importe où.
\end_layout

\begin_layout Description
GM-Octo est le répertoire 
\begin_inset Quotes cld
\end_inset

GM-Octo
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
WAVES ce fichier se drouve dans 
\begin_inset Quotes cld
\end_inset

GM-Octo/Data
\begin_inset Quotes crd
\end_inset

.
 Le déplacer de même.
 On doit alors supprimer du projet 
\begin_inset Quotes cld
\end_inset

GM-Octo
\begin_inset Quotes crd
\end_inset

 le dossier 
\begin_inset Quotes cld
\end_inset

Data
\begin_inset Quotes crd
\end_inset

 maintenant vide.
\end_layout

\begin_layout Standard
On a donc installé le 
\begin_inset Quotes cld
\end_inset

GameMaster pour tous
\begin_inset Quotes crd
\end_inset

, selon la procédure expliquée en Doc § 1.3.2.2.
\end_layout

\begin_layout Standard
Il est dès lors possible de relancer le projet, en double cliquant à nouveau
 sur 
\begin_inset Quotes cld
\end_inset

GM-Octo.RPP
\begin_inset Quotes crd
\end_inset

.
 Selon les systèmes, il se peut que la configuration soit encore opérationnelle,
 ou ne soit plus.
 Si nous sommes dans ce dernier cas, il faut:
\end_layout

\begin_layout Itemize
remplacer dans toutes les pistes (
\begin_inset Quotes cld
\end_inset

MASTER
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Mixing
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Player
\begin_inset Quotes crd
\end_inset

 (toutes !), 
\begin_inset Quotes cld
\end_inset

Phone Mix
\begin_inset Quotes crd
\end_inset

, etc.) tous les plug-ins 
\begin_inset Quotes cld
\end_inset

manquants
\begin_inset Quotes crd
\end_inset

 (car ils ont été déplacés, et ne sont plus dans le répertoire du projet,
 que REAPER appelle 
\begin_inset Quotes cld
\end_inset

<Project>
\begin_inset Quotes crd
\end_inset

).
 Ainsi, 
\begin_inset Quotes cld
\end_inset

JS: <Project>/GamePlayer.jsfx
\begin_inset Quotes crd
\end_inset

 doit être remplacé par 
\begin_inset Quotes cld
\end_inset

GamePlayer.jsfx
\begin_inset Quotes crd
\end_inset

.
 Cliquer pour chaque piste sur la boîte [FX], et, pour chaque plug-in intitulé
 
\begin_inset Quotes cld
\end_inset

JS: <Project>/toto.jsfx
\begin_inset Quotes crd
\end_inset

, faire 
\begin_inset Quotes cld
\end_inset

Add
\begin_inset Quotes crd
\end_inset

 et sélectionner le plug-in correspondant, de nom 
\begin_inset Quotes cld
\end_inset

JS: toto.jsfx
\begin_inset Quotes crd
\end_inset

, le déplacer immédiatement sous 
\begin_inset Quotes cld
\end_inset

JS: <Project>/toto.jsfx
\begin_inset Quotes crd
\end_inset

, puis faire 
\begin_inset Quotes cld
\end_inset

Remove
\begin_inset Quotes crd
\end_inset

 de ce dernier.
\end_layout

\begin_layout Itemize
sauvegarder le projet.
\end_layout

\begin_layout Itemize
effectuer à nouveau la procédure décrite au §2 ci-dessus.
 A nouveau, la raison en est qu'il faut créer un fichier initial de préréglages
 adaptés à votre machine, pour le GameMaster lorsqu'il est installé pour
 tous les utilisateurs.
\end_layout

\begin_layout Standard
Là encore, ce travail ne nécessite d'être fait qu'une fois, et le GameMaster
 pourra dès lors être utilisé dans tout nouveau projet, comme expliqué dans
 Doc § 1.7.
\end_layout

\begin_layout Section
Les mécanismes
\end_layout

\begin_layout Standard
Le 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
Game Master
\series default
\emph default

\begin_inset Quotes crd
\end_inset

 permet donc la génération semi-automatique de séquences électroacoustiques
 multicanales à partir de 
\begin_inset Quotes cld
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
clips
\end_layout

\end_inset

clips
\begin_inset Quotes crd
\end_inset

.
 Les clips sont eux-même des séquences audio courtes (de une seconde à quelques
 minutes), représentées dans des formats acceptés par le logiciel REAPER
 (wave, aiff, flac, mp3, etc.), typiquement stéréo, mais aussi multicanales.
 Le logiciel va jouer ces séquences en leur appliquant des transformations
 simples (changements de vitesse, de volume, extraction de sous-séquences
 et de grains), et envoyer les sons ainsi générés sur certains des canaux
 audio de l'installation.
 
\end_layout

\begin_layout Standard
Ce travail est pris en charge par un premier plug-in, le 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
Game Master
\series default
\emph default

\begin_inset Quotes crd
\end_inset

 proprement dit, qui gère l'interface utilisateur et les différents algorithmes,
 et plusieurs plug-in auxiliaires, les 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
Players
\series default
\emph default

\begin_inset Quotes crd
\end_inset

, dont le rôle est de 
\begin_inset Quotes cld
\end_inset

jouer
\begin_inset Quotes crd
\end_inset

 les clips.
 Très précisément, chaque player joue, à un moment donné, un seul clip à
 la fois, et c'est le nombre de players installés dans le projet qui détermine
 la polyphonie effective de l'ensemble.
 Selon la puissance de la CPU disponible, il est possible de jouer de 10
 à 20 clips simultanément, en sachant que les players inactifs utilisent
 relativement peu de CPU.
\end_layout

\begin_layout Standard
Les clips sont donc des fichiers audio, conservés dans un répertoire unique,
 et leur nom doit respecter une syntaxe spécifique
\begin_inset space ~
\end_inset

: préfixe 
\begin_inset Quotes cld
\end_inset


\family typewriter
clip1
\family default

\begin_inset Quotes crd
\end_inset

, suivi de 4 chiffres correspondant à un numéro de clip (de 0 à 9999), et
 enfin un suffixe indiquant la représentation du clip (
\begin_inset Quotes cld
\end_inset


\family typewriter
.wav
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
.mp3
\family default

\begin_inset Quotes crd
\end_inset

, etc.).
 On obtient ainsi, par exemple, 
\begin_inset Quotes cld
\end_inset


\family typewriter
clip10132.flac
\family default

\begin_inset Quotes crd
\end_inset

 pour désigner le clip 132, qui se trouve être représenté au format 
\begin_inset Quotes cld
\end_inset

flac
\begin_inset Quotes crd
\end_inset

.
 Le système accepte tous les types de fichiers audio reconnus par REAPER,
 sans limitation sur la fréquence d'échantillonnage ou le nombre de canaux.
 On peut légitimement trouver fastidieux de se plier à cette obligation,
 mais nous verrons qu'un certain nombre d'outils existent, qui permettent
 d'alléger sensiblement ce travail( cf § 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Emplacement-des-fichiers-sons"
plural "false"
caps "false"
noprefix "false"

\end_inset

, ainsi que 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Emplacement-des-fichiers-sons"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Le fonctionnement du 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
Game Master
\series default
\emph default

\begin_inset Quotes crd
\end_inset

 est régulé par un grand nombre de paramètres, plusieurs centaines.
 Il serait fastidieux de régler chacun de ces paramètres pour chacun des
 clips que l'on désire jouer.
 On va donc rassembler des ensembles de paramètres qui s'appliquent peu
 ou prou à un même aspect du logiciel, puis indiquer que tel ou tel clip
 est géré par tel ou tel ensemble.
\end_layout

\begin_layout Standard
Les aspects retenus sont les suivants
\begin_inset space ~
\end_inset

: le 
\begin_inset Quotes cld
\end_inset

mode de jeu
\begin_inset Quotes crd
\end_inset

, qui définit quelles transformations vont s'appliquer aux clips, le 
\begin_inset Quotes cld
\end_inset

mode d'espace
\begin_inset Quotes crd
\end_inset

, qui définit de quelle manière les séquences audio vont être restituées
 sur les canaux audio de l'installation, et enfin le 
\begin_inset Quotes cld
\end_inset

cadre algorithmique
\begin_inset Quotes crd
\end_inset

 qui va définir de quelle manière, et à quels moments, s'effectuent les
 choix de jeux des clips.
\end_layout

\begin_layout Subsection
Le mode de jeu
\begin_inset Index idx
status open

\begin_layout Plain Layout
mode de jeu
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le mode de jeu définit de quelle manière un clip va être joué (ou 
\begin_inset Quotes cld
\end_inset

interprété
\begin_inset Quotes crd
\end_inset

) par un player.
 Les players proposent deux types de jeu
\begin_inset space ~
\end_inset

: le jeu séquentiel (
\begin_inset Quotes cld
\end_inset


\emph on
play
\emph default

\begin_inset Quotes crd
\end_inset

), et le jeu granulaire (
\begin_inset Quotes cld
\end_inset


\emph on
loop
\emph default

\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Standard
Pour le jeu séquentiel, les paramètres suivants entrent en compte
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Enumerate
La vitesse de lecture du clip.
 Le player se comporte à la manière d'un magnétophone
\begin_inset space ~
\end_inset

: une vitesse plus lente correspond à un décalage des fréquences vers le
 grave et une durée de jeu plus longue
\begin_inset space ~
\end_inset

; une vitesse plus élevée correspond à un décalage des fréquences vers l'aigu,
 et une durée de jeu plus courte.
 On notera que la vitesse de lecture peut être négative, le clip étant ainsi
 lu à l'envers.
 Les vitesses de lecture sont typiquement comprises entre 0.1 et 4, 1 corresponda
nt à une lecture normale.
\end_layout

\begin_layout Enumerate
La durée de jeu, qui peut être choisie de manière quasi-indépendante de
 celle du clip.
 On peut donc ne lire qu'une partie du clip.
\end_layout

\begin_layout Enumerate
Le point de départ de lecture du clip, qui n'est pas forcément le début
 de celui-ci.
\end_layout

\begin_layout Enumerate
Le volume du jeu, et les variations éventuelles de celui-ci.
\end_layout

\begin_layout Enumerate
L'utilisation (et la nature) de fade-in et fade-out lors de la lecture du
 clip.
\end_layout

\begin_layout Standard
Pour le jeu 
\begin_inset Quotes cld
\end_inset

granulaire
\begin_inset Quotes crd
\end_inset

, dans lequel sont lus des segments extraits du clip, interviennent en outre
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Enumerate
La durée des segments lus, de quelques millisecondes à quelques secondes.
\end_layout

\begin_layout Enumerate
La densité de jeu, c'est-à-dire le nombre de segments joués simultanément.
\end_layout

\begin_layout Enumerate
La position dans le clip du début de chaque segment.
\end_layout

\begin_layout Enumerate
L'utilisation (et la nature) de fade-in et fade-out pour ces segments.
\end_layout

\begin_layout Standard
Un mode de jeu ne va pas nécessairement définir une valeur fixe pour ces
 paramètres, mais des intervalles de variation, qui peuvent être absolus
 ou relatifs.
 Ainsi, une vitesse de lecture peut être décrite comme étant à choisir dans
 l'intervalle 
\begin_inset Formula $\left[0.6\;1.1\right]$
\end_inset

.
\end_layout

\begin_layout Standard
Le choix de l'ensemble de ces paramètres constitue donc 
\emph on
un
\emph default
 mode de jeu, et il est possible de définir des dizaines ou des centaines
 de mode de jeu différents.
 Ces modes de jeu se décrivent dans des 
\emph on
scripts
\begin_inset Index idx
status open

\begin_layout Plain Layout
scripts
\end_layout

\end_inset


\emph default
, fichiers externes au format texte, dans une syntaxe relativement simple,
 qui est exposée au paragraphe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Modes-de-jeu"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Le-mode-d'espace"

\end_inset

Le mode d'espace
\begin_inset Index idx
status open

\begin_layout Plain Layout
mode d'espace
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le mode d'espace définit vers quels canaux audio de l'installation vont
 être dirigés les sons produits par un player.
 Une installation peut elle-même comporter une quantité très variable de
 haut-parleurs (de deux à une centaine), et il ferait peu de sens de dire,
 dans l'absolu, que tel son va être dirigé vers le canal 11, par exemple.
 Nous allons donc définir des 
\begin_inset Quotes cld
\end_inset

espaces conceptuels
\begin_inset Quotes crd
\end_inset

, qui seront 
\begin_inset Quotes cld
\end_inset

plaqués
\begin_inset Quotes crd
\end_inset

 sur l'installation disponible.
 Ces espaces conceptuels vont être, par exemple
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
un haut-parleur choisi au hasard
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
un groupe de haut-parleurs proches les uns des autres
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
tous les haut-parleurs de l'arrière
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
un des haut-parleurs du plafond
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
tous les hauts-parleurs disponibles, etc.
\end_layout

\begin_layout Standard
Le mode d'espace va ainsi pemettre de choisir un type de groupe, puis d'indiquer
 quel pourcentage de haut-parleurs va être utilisé, et de quelle manière
 le 
\emph on
player
\emph default
 va utiliser ces haut-parleurs (simultanément, en séquence, en mono ou multiphon
ie, etc.).
 Ces modes d'espace se décrivent dans des scripts, fichiers externes au
 format texte, dans une syntaxe relativement simple, qui est exposée au
 paragraphe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Modes-d-espace"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Pour chaque installation spécifique, un fichier doit donc être défini, décrivant
 les associations entre les numéros de canaux et les positions physiques
 des haut-parleurs.
 
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:partiels-banques-groupes"

\end_inset

Les partiels
\begin_inset Index idx
status open

\begin_layout Plain Layout
partiels
\end_layout

\end_inset

, banques
\begin_inset Index idx
status open

\begin_layout Plain Layout
banques
\end_layout

\end_inset

 et groupes
\begin_inset Index idx
status open

\begin_layout Plain Layout
groupes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dans une finalité compositionnelle, il semble légitime de regouper les objets
 sonores spécifiques choisis par un compositeur pour créer une certaine
 structure musicale.
 Nous parlerons de 
\emph on
groupe
\emph default
 pour désigner un tel regroupement.
\end_layout

\begin_layout Standard
Une fois les modes de jeu et les modes d'espace définis, il est pratique
 de regrouper les clips du 
\emph on
groupe
\emph default
 utilisant les mêmes modes de jeu et mode d'espace.
 Les 
\begin_inset Quotes cld
\end_inset


\emph on
partiels
\emph default

\begin_inset Quotes crd
\end_inset

 vont associer des ensembles de clips à un mode de jeu et un mode d'espace.
 Les partiels sont eux-même rassemblés dans des 
\emph on
banques
\emph default
, et cet ensemble de banques constitue le 
\emph on
groupe
\emph default
.
 Chaque partiel précise
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
le groupe auquel il appartient
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
la banque à laquelle il appartient
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
une séquence de clips (définie par un intervalle, par exemple, tous les
 clips de 100 à 122, ou encore une structure plus générale, dite 
\begin_inset Quotes cld
\end_inset

ClipSet
\begin_inset Index idx
status open

\begin_layout Plain Layout
ClipSet
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

)
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
un mode de jeu
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
un mode d'espace
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
un 
\begin_inset Quotes cld
\end_inset

poids
\begin_inset Quotes crd
\end_inset

 associé au partiel, permettant de modifier la probabilité d'utilisation
 du partiel
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
une variation de volume, définie par des bornes minimale et maximale
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
une 
\begin_inset Quotes cld
\end_inset

classe
\begin_inset Quotes crd
\end_inset

 associée aux clips du partiel, permettant une sélection de certains types
 de clips dans l'ensemble des partiels
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
des indicateurs supplémentaires, autorisant ou excluant certaines transformation
s appliquées aux clips.
\end_layout

\begin_layout Standard
On notera que des partiels différents peuvent faire appels à des clips,
 des modes de jeu ou des modes d'espace identiques.
 Toutes ces notions, groupe, banque, mode de jeu, mode d'espace sont représentée
s par des nombres entiers choisis par l'utilisateur.
 
\end_layout

\begin_layout Standard
Ces partiels se décrivent se décrivent dans des scripts, fichiers externes
 au format texte, dans une syntaxe relativement simple, qui est exposée
 au paragraphe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Banques-format"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Les 
\begin_inset Quotes cld
\end_inset

images-de-sons
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Une 
\begin_inset Quotes cld
\end_inset

image-de-son
\begin_inset Quotes crd
\end_inset

 est le résultat du jeu d'un clip, déterminé par les paramètres associés
 au mode de jeu et au mode d'espace, eux-mêmes modulés par un 
\emph on
aléa
\emph default
, lorsque ces modes de jeu et d'espaces autorisent des variations.
 Il est possible de conserver l'ensemble des paramètres associés à un son
 sous une forme relativement compacte, et ainsi de reproduire ultérieurement,
 à l'identique, un son ou une séquence de sons.
 C'est le but du 
\emph on
playlog
\emph default
.
\end_layout

\begin_layout Standard
Par défaut, le 
\emph on
Play Log
\emph default
 est activé au début de la session.
 Ses différents aspects sont accessibles au travers du module 
\begin_inset Quotes cld
\end_inset

Play Log
\begin_inset Quotes crd
\end_inset

.
 Il comporte un axe temporel, sur lequel sont notés les sons joués avec
 leur date et leurs caractéristiques.
 Un lecteurs permet d'explorer cet axe, à des vitesses comprises entre -10
 et 10 fois la vitesse 
\begin_inset Quotes cld
\end_inset

normale
\begin_inset Quotes crd
\end_inset

.
 Il est également possible de 
\begin_inset Quotes cld
\end_inset

noter
\begin_inset Quotes crd
\end_inset

 à la volée des instants, et d'y revenir ultérieurement.
\end_layout

\begin_layout Subsection
Les algorithmes
\end_layout

\begin_layout Standard
La classification en partiels, banques et groupes, et les caractéristiques
 auxiliaires de partiels (classe, indicateurs) vont permettre l'écriture
 d'algorithmes décidant des modalités de jeu des clips.
\end_layout

\begin_layout Standard
En plus des caractéristiques liées aux partiels, ces algorithmes vont pouvoir
 décider des moments où jouer des clips, modifier des paramètres globaux
 influant le volume général, la densité de jeu, la longueur des jeux individuels
, etc.
\end_layout

\begin_layout Standard
Pour l'heure, il est possible
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
d'utiliser le 
\emph on
Game Master
\emph default
 en mode 
\begin_inset Quotes cld
\end_inset

live
\begin_inset Quotes crd
\end_inset

, en associant des partiels, banques, groupes, ou clips individuels à des
 
\begin_inset Quotes cld
\end_inset

pads
\begin_inset Quotes crd
\end_inset

, en en déclenchant ceux-ci manuellement, soit par la souris, soit en utilisant
 une surface de contrôle (Korg nanoPAD, Akai APCmini, Arturia BeatStep,
 etc.)
\end_layout

\begin_layout Itemize
de déclencher des clips, ou d'autres types d'actions, aux travers de capteurs
 spéciaux (par exemple, capteurs infrarouges).
\end_layout

\begin_layout Itemize
de laisser l'application choisir les clips à jouer en mode aléatoire (controlé
 par nombre de réglages).
 On parle alors d'un mode 
\begin_inset Quotes cld
\end_inset

génératif
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
On peut définir des algorithmes complexes (ou évolués), en utilisant 
\begin_inset Quotes cld
\end_inset


\emph on
mSL
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
mSL
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

, un 
\begin_inset Quotes cld
\end_inset


\emph on
micro script langage
\begin_inset Index idx
status open

\begin_layout Plain Layout
micro script langage
\end_layout

\end_inset


\emph default

\begin_inset Quotes crd
\end_inset

 écrit pour l'occasion, et intégré au logiciel.
 L'ensemble de ces algorithmes repose sur plusieurs centaines de fonctions
 élémentaires incorporées au logiciel, et directement accessibles depuis
 
\emph on
mSL
\emph default
.
\end_layout

\begin_layout Subsection
Les ClipSets
\begin_inset Index idx
status open

\begin_layout Plain Layout
ClipSet
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un ensemble de clips peut être défini soit par un simple intervale (tous
 les clips entre deux numéros, par exemple de 
\begin_inset Quotes cld
\end_inset

de 120 à 135
\begin_inset Quotes crd
\end_inset

), soit encore par une structure plus complexe, dite 
\begin_inset Quotes cld
\end_inset

ClipSet
\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Standard
Un ClipSet est un ensemble de clips, définis de manière cumulative, par
 :
\end_layout

\begin_layout Itemize
une liste de numéros de clips
\end_layout

\begin_layout Itemize
un intervalle de numéros de clips
\end_layout

\begin_layout Itemize
une liste de clips exclus de l'ensemble précédemment décrit
\end_layout

\begin_layout Itemize
des conditions spécifiques imposées à ces clips
\begin_inset space ~
\end_inset

: durée minimale, durée maximale, etc.
\end_layout

\begin_layout Standard
La description de la configuration des ClipSets est abordée plus en détail
 au §
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Configuration-des-ClipSets"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Section
L'interface utilisateur
\end_layout

\begin_layout Standard
L'installation du plug-in sur une piste audio ouvre une interface utilisateur
 qui présente une apparence que l'on peut qualifier de 
\begin_inset Quotes cld
\end_inset

sobre
\begin_inset Quotes crd
\end_inset

 (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GM-W0"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
 
\begin_inset Graphics
	filename PIX/GM-Window-0.tiff
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-W0"

\end_inset

L'interface du 
\emph on
Game Master
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Une première 
\begin_inset Quotes cld
\end_inset

barre
\begin_inset Quotes crd
\end_inset

 d'information, en haut de la fenêtre du plug-in, est gérée par REAPER,
 et affiche le nom du préréglage courant (ici 
\begin_inset Quotes cld
\end_inset


\family typewriter
P01
\family default

\begin_inset Quotes crd
\end_inset

), ainsi que des flèches de sélection vers le haut et vers le bas, une boîte
 avec un 
\begin_inset Quotes cld
\end_inset

+
\begin_inset Quotes crd
\end_inset

 permettant la sauvegarde de nouveaux préréglages, et les boutons 
\begin_inset Quotes cld
\end_inset

Param
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Edit...
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

MIDI
\begin_inset Quotes crd
\end_inset

.
 Un potentiomètre circulaire permet de 
\begin_inset Quotes cld
\end_inset

doser
\begin_inset Quotes crd
\end_inset

 l'effet (réglage 
\begin_inset Quotes cld
\end_inset

dry/wet
\begin_inset Quotes crd
\end_inset

), et enfin une case, cochée, indique que l'effet est actif.
 On notera qu'il ne doit y avoir qu'une seule instance du plug-in 
\begin_inset Quotes cld
\end_inset

Game Master
\begin_inset Quotes crd
\end_inset

, dans la mesure où tous les plug-ins intervenant utilisent un même espace
 partagé.
 On verra cependant plus tard qu'il est possible d'utiliser, dans une même
 session et au prix de petites modifications, plusieurs instances du plug-in,
 chacune utilisant ses propres players.
\end_layout

\begin_layout Subsection
Le plug-in
\end_layout

\begin_layout Standard
Le restant de la fenêtre concerne le plug-in proprement dit.
 Sur cette vue, n'apparaît qu'une barre d'onglets (rectangle horizontal
 tout en haut de la fenêtre), qui permet, par un clic gauche sur l'un d'eux,
 de sélectionner l'affichage de la page correspondante.
 Sur l'image, c'est l'onglet 
\begin_inset Quotes cld
\end_inset

Studio B
\begin_inset Quotes crd
\end_inset

 qui est sélectionné, désespérément vide.
\end_layout

\begin_layout Standard
La barre des onglets affiche également à sa droite un ruban coloré, qui
 reflète, en passant du bleu à l'orange, le pourcentage de 
\emph on
players
\emph default
 et 
\emph on
loopers
\emph default
 actifs, ou qui reste gris si aucun son n'est généré.
 
\end_layout

\begin_layout Standard
Un clic droit dans la barre d'onglets fait apparaître un menu (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-W1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Window-1.png
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-W1"

\end_inset

L'interface : le menu de configuration de l'apparence
\end_layout

\end_inset


\end_layout

\end_inset

) qui permet de modifier le 
\begin_inset Quotes cld
\end_inset

look and feel
\begin_inset Quotes crd
\end_inset

 du plug-in.
 Notons encore que la fenêtre du plug-in est redimensionnable, permettant
 de l'adapter aux besoins des utilisateurs et à l'espace d'affichage disponible
 sur l'écran.
\end_layout

\begin_layout Standard
Enfin, un clic droit dans le reste de la fenêtre avec la touche 
\begin_inset Quotes cld
\end_inset

shift
\begin_inset Quotes crd
\end_inset

 maintenue fait apparaître le menu de configuration des panneaux (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-panneaux-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Main-2.png
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-panneaux-1"

\end_inset

L'interface : le menu de configuration des panneaux
\end_layout

\end_inset


\end_layout

\end_inset

).
 Il contient une liste des modules d'interaction que l'on peut afficher
 dans le panneau courant, ainsi que des commandes permettant de déplacer
 ou supprimer les modules.
 Notons que le même module peut être affiché dans différents panneaux.
 Ces modules sont décrits en détail au chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Modules-de-commande"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
En résumé, l'interface utilisateur consiste en divers écrans, dits 
\begin_inset Quotes cld
\end_inset


\emph on
onglets
\emph default

\begin_inset Quotes crd
\end_inset

.
 On passe d'un 
\emph on
onglet
\emph default
 à un autre en cliquant sur son nom dans la 
\begin_inset Quotes cld
\end_inset

barre d'onglets
\begin_inset Quotes crd
\end_inset

 située tout en haut de l'écran, ou encore par les touches 
\emph on
tab
\begin_inset Index idx
status open

\begin_layout Plain Layout
tab
\end_layout

\end_inset


\emph default
 ou 
\emph on
shift-tab
\begin_inset Index idx
status open

\begin_layout Plain Layout
shift-tab
\end_layout

\end_inset


\emph default
.
 Chaque onglet comporte un ou plusieurs 
\emph on
modules
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
modules
\end_layout

\end_inset

.
 Chaque module contient lui-même un ou plusieurs éléments graphiques (sliders,
 afficheurs, pads, etc.), que l'on qualifiera parfois de 
\begin_inset Quotes cld
\end_inset


\emph on
widgets
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
widgets
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

), permettant les interactions avec l'utilisateur.
 Les 
\emph on
modules
\emph default
 et les 
\emph on
onglets
\begin_inset Index idx
status open

\begin_layout Plain Layout
onglets
\end_layout

\end_inset


\emph default
 font l'objet d'une description spécifique dans les paragraphes suivants
 
\end_layout

\begin_layout Subsection
Onglets, Modules, Widgets et interactions
\end_layout

\begin_layout Standard
Deux outils interviennent dans les interactions
\begin_inset space ~
\end_inset

: la souris et le clavier.
 L'interface tente d'être cohérente, ergonomique et efficiente.
 Pour ce faire, tous les widgets, et tous les items de ces widgets, réagissent
 de la même manière aux mêmes interactions.
\end_layout

\begin_layout Standard
La cohérence des interactions est liée à la position de la souris, qui va
 être :
\end_layout

\begin_layout Itemize
dans un 
\emph on
item
\begin_inset Index idx
status open

\begin_layout Plain Layout
item
\end_layout

\end_inset


\emph default
 d'un 
\emph on
widget
\emph default

\begin_inset space ~
\end_inset

: une cellule d'un pad, ou, dans le cas d'un slider, le label, le slider
 lui-même, ou encore le bouton de liaison à un générateur d'aléa.
\end_layout

\begin_layout Itemize
dans le widget
\begin_inset space ~
\end_inset

: pad ou slider.
\end_layout

\begin_layout Itemize
dans le module.
\end_layout

\begin_layout Itemize
dans l'onglet.
\end_layout

\begin_layout Standard
L'autre aspect de la cohérence est liée à la nature de la grandeur représentée
 par le 
\emph on
widget
\emph default
, ou l'item spécifique de ce 
\emph on
widget
\emph default
.
 Si une 
\emph on
cellule
\emph default
 d'un 
\emph on
pad
\emph default
 représente un numéro de clip modifiable, toutes les cellules ayant cette
 finalité, dans tous les 
\emph on
pads
\emph default
, réagissent de la même façon aux mêmes commandes.
\end_layout

\begin_layout Subsection
Les éléments graphiques
\end_layout

\begin_layout Standard
La figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-plug-in-config-1"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Main-Window.tiff
	lyxscale 54
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-plug-in-config-1"

\end_inset

Le plug-in configuré
\end_layout

\end_inset


\end_layout

\end_inset

 offre un exemple du plug-in configuré en deux panneaux, avec une interface
 
\begin_inset Quotes cld
\end_inset

claire
\begin_inset Quotes crd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Non pas au sens de 
\begin_inset Quotes cld
\end_inset

compréhensible
\begin_inset Quotes crd
\end_inset

, mais au sens de 
\begin_inset Quotes cld
\end_inset

non foncée
\begin_inset Quotes crd
\end_inset

.
\end_layout

\end_inset

.
 On y distingue, de haut en bas, différents modules
\begin_inset space ~
\end_inset

: à gauche, 
\begin_inset Quotes cld
\end_inset

Sound Units
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Main Infos
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Studio Play Pad
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Scheduler
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Play Control
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Control Sliders
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

; à droite 
\begin_inset Quotes cld
\end_inset

Random States
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Clips Section
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Generator A
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Banks Definition
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Ces modules sont constitués de différents éléments graphiques
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
Pads
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pads
\end_layout

\end_inset

 qui sont des groupes de 
\emph on
cellules
\emph default
 colorées assemblées en lignes et en colonnes (c.f.
 
\begin_inset Quotes cld
\end_inset

Sound Units
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

Studio Play Pad
\begin_inset Quotes crd
\end_inset

), avec lesquels des interactions sont possibles grâce au clavier ou à la
 souris.
\end_layout

\begin_layout Description
Sliders
\begin_inset Index idx
status open

\begin_layout Plain Layout
Sliders
\end_layout

\end_inset

 qui sont des réglages traditionnels (semblables à des potentiomètres linéaires
 horizontaux), comme dans les modules 
\begin_inset Quotes cld
\end_inset

Control Sliders
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

Random States
\begin_inset Quotes crd
\end_inset

.
 Certains sliders de ce dernier groupe comportent des boîtes juxtaposées,
 permettant d'activer ou de désactiver la fonction associée.
\end_layout

\begin_layout Description
Afficheurs
\begin_inset Index idx
status open

\begin_layout Plain Layout
Afficheurs
\end_layout

\end_inset

 dont le rôle est d'afficher des valeurs et les étiquettes correspondantes
 (c.f.
 
\begin_inset Quotes cld
\end_inset

Main Infos
\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Subsection
Note
\end_layout

\begin_layout Standard
L'interface est basée sur le module 
\begin_inset Quotes cld
\end_inset


\family typewriter
ui-lib.jsfx-inc
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ui-lib.jsfx-inc
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 réalisé par Geraint Luff
\begin_inset Index idx
status open

\begin_layout Plain Layout
Geraint Luff
\end_layout

\end_inset

.
 Qu'il en soit ici remercié.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Un-exemple-10-2024"

\end_inset

Un exemple de mise en œuvre [Octobre 2024]
\end_layout

\begin_layout Standard
Nous décrivons ici la mise en œuvre du logiciel en mode 
\begin_inset Quotes cld
\end_inset

génératif
\begin_inset Quotes crd
\end_inset

 (ou mode 
\begin_inset Quotes cld
\end_inset

live
\begin_inset Quotes crd
\end_inset

, lorsqu'il est connecté à des contrôleurs MIDI, susceptibles de lui envoyer
 des informations de toutes natures).
 On suppose que les mises en place décrites au paragraphe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:InstallationBase"
plural "false"
caps "false"
noprefix "false"

\end_inset

 ont déjà été effectuées.
 
\end_layout

\begin_layout Standard
Il est possible sous REAPER de lier des paramètres de plug-in (dans le cas
 de JSFX, ils sont au nombre maximum de 64) à des messages MIDI venant de
 contrôleurs externes, mais nous privilégions ici l'optique d'une mise en
 œuvre sous la forme d'un plug-in situé dans la chaîne d'entrée audio/MIDI,
 qui va donc pouvoir recevoir, sans aucun filtrage, l'ensemble des informations
 MIDI provenant d'un périphérique donné.
 Cette approche nécessite un certain nombre de réglages, décrits ci-dessous.
\end_layout

\begin_layout Subsection
Préférences
\end_layout

\begin_layout Standard
Après nombre de tests, voici les réglages de REAPER appropriés à cet usage.
\end_layout

\begin_layout Paragraph*
Options\SpecialChar menuseparator
Preferences\SpecialChar menuseparator
General\SpecialChar menuseparator
Maximum undo memory use 
\end_layout

\begin_layout Standard
A régler à 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

.
 La raison en est que, pour nombre d'opérations du plug-in, REAPER effectue
 une sauvegarde (afin de pouvoir faire des 
\begin_inset Quotes cld
\end_inset

undo
\begin_inset Quotes crd
\end_inset

).
 Or, la taille d'un préréglage du Game Master est énorme, et cette sauvegarde
 (inutile) fait perdre un temps CPU et des E/S disque considérables, au
 détriment d'opérations plus utiles...
\end_layout

\begin_layout Paragraph*
Options\SpecialChar menuseparator
Preferences\SpecialChar menuseparator
Audio\SpecialChar menuseparator
Close audio device when stopped and application is
 inactive 
\end_layout

\begin_layout Standard
A désactiver.
\end_layout

\begin_layout Paragraph*
Options\SpecialChar menuseparator
Preferences\SpecialChar menuseparator
Audio\SpecialChar menuseparator
Buffering\SpecialChar menuseparator
Allow live FX multiprocessing on 
\begin_inset Quotes cld
\end_inset

x
\begin_inset Quotes crd
\end_inset

 CPUs
\end_layout

\begin_layout Standard
Activer.
 Choisir un nombre raisonnable de CPUs ou conserver le défaut qui est de
 4 ou 8 selon les machines.
\end_layout

\begin_layout Paragraph*
Options\SpecialChar menuseparator
Preferences\SpecialChar menuseparator
Audio\SpecialChar menuseparator
Playback\SpecialChar menuseparator
Run FX when stopped
\end_layout

\begin_layout Standard
Activer.
 Ceci permet au GM de fonctionner, même quand REAPER n'est pas en lecture.
\end_layout

\begin_layout Paragraph*
Options\SpecialChar menuseparator
Preferences\SpecialChar menuseparator
Audio\SpecialChar menuseparator
MIDI Device
\end_layout

\begin_layout Standard
Choisir l'unité (ou les unités) qui va/vont envoyer les commandes.
 Activer pour chaque unité 
\begin_inset Quotes cld
\end_inset

Enable input
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

Enable input for control messages
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Subsection
Structure d'une session
\end_layout

\begin_layout Standard
Une session autonome « REAPER » du Game Master est un répertoire avec la
 structure suivante : 
\end_layout

\begin_layout Itemize
« projet » [[[le nom est arbitraire]]] 
\end_layout

\begin_deeper
\begin_layout Itemize
« projet ».RPP [[[fichier REAPER décrivant le projet]]] 
\end_layout

\begin_layout Itemize
Effects [[[répertoire contenant les effets]]] 
\end_layout

\begin_layout Itemize
Data [[[données utilisateur et REAPER]]] 
\end_layout

\begin_deeper
\begin_layout Itemize
Scripts [[[scripts « mSL » propres au projet]]] 
\end_layout

\begin_layout Itemize
Sounds [[[Sons de l'utilisateur, au format quelconque]]] 
\end_layout

\begin_layout Itemize
WAVES [[[sons au format « clip1xxx.ttt »]]]
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
Le « Game Master » doit être installé sur la machine dans un répertoire
 accessible, mais non dans les ressources du répertoire de REAPER.
 
\end_layout

\begin_layout Paragraph*
Exemple sur Mac
\end_layout

\begin_layout Standard
Dans mon cas, je travaille sur un Macintosh, le Game Master est installé
 dans le répertoire de l'utilisateur « jjg4 », sous le nom « CMGS », et
 je veux créer, par exemple sur le bureau (aka « Desktop »), une session
 nouvelle, « JAG2024 ».
 Cette création va se dérouler de la manière suivante.
 
\end_layout

\begin_layout Standard
Lancer REAPER, fermer éventuellement la session en cours, créer une nouvelle
 session, et la sauvegarder immédiatement à l'emplacement de son choix.
 Ici, je choisis comme nom « JAG2024.RPP », comme emplacement « Desktop »,
 file type « *.RPP », et je coche « Create subdirectory for project ».
 Ceci fait, on peut quitter REAPER.
 
\end_layout

\begin_layout Standard
Sous le Finder, on peut constater que la session que l'on vient de créer
 se trouve bien sur le bureau, dans un répertoire de même nom, répertoire
 contenant le fichier « JAG2024.RPP ».
 La session contient également un répertoire pour les fichiers audio (ici
 « Audio ») qui ne sera pas utilisé.
\end_layout

\begin_layout Standard
Le Game Master est installé sur le disque, et on veut l'utiliser sans avoir
 à le dupliquer.
 On va donc créer dans la session un lien vers le Game Master.
 Pour ceci, lancer un terminal (application 
\begin_inset Quotes cld
\end_inset

Terminal
\begin_inset Quotes crd
\end_inset

), aller à l'intérieur de la session : 
\end_layout

\begin_layout LyX-Code
cd /Users/jjg4/Desktop/JAG2024
\end_layout

\begin_layout Standard
(à noter que pour obtenir cette ligne, on peut taper simplement « 
\family typewriter
cd   
\family default
», puis glisser/déposer le dossier du projet dans le terminal, où s'inscrit
 alors, magiquement, le path du dossier).
 Taper : 
\end_layout

\begin_layout LyX-Code
ln -s /Users/jjg4/CMGS Effects
\end_layout

\begin_layout Standard
qui crée un lien symbolique de nom « Effects » vers la dernière version
 en date du Game Master.
 On va également créer le répertoire « Data » qui va contenir les scripts
 utilisés par l'installation.
 
\end_layout

\begin_layout LyX-Code
mkdir Data
\end_layout

\begin_layout Standard
ainsi que le répertoire où l'on placera les scripts.
 
\end_layout

\begin_layout LyX-Code
mkdir Data/Scripts
\end_layout

\begin_layout Standard
et éventuellement, le répertoire où l'on placera les fichiers sons utilisés.
 
\end_layout

\begin_layout LyX-Code
mkdir Data/Sounds
\end_layout

\begin_layout Standard
Si l'on utilise des sons dont la nomenclature correspond à la convention
 du Game Master, on peut également créer le répertoire WAVES où ils seront
 placés : 
\end_layout

\begin_layout LyX-Code
mkdir Data/WAVES
\end_layout

\begin_layout Standard
Pour que tout ceci marche correctement, il importe qu'il n'y ait qu'un exemplair
e du Game Master dans le système.
 Dans ces conditions, lorsque dans la session on insère des effets dans
 une piste, ils apparaissent sous la forme « JS:<project>/effet.jsfx ».
\end_layout

\begin_layout Paragraph*
Exemple sur Windows 11
\end_layout

\begin_layout Standard
Dans mes tests sur Windows, le Game Master est installé dans le 
\begin_inset Quotes cld
\end_inset

Desktop
\begin_inset Quotes crd
\end_inset

 de l'utilisateur 
\begin_inset Quotes cld
\end_inset

JJG
\begin_inset Quotes crd
\end_inset

, sous le nom 
\begin_inset Quotes cld
\end_inset

CMGS
\begin_inset Quotes crd
\end_inset

 (c'est une version identique à celle du Mac).
 Mes sessions REAPER sont dans le dossier 
\begin_inset Quotes cld
\end_inset

ReaProjects
\begin_inset Quotes crd
\end_inset

 situé sur le bureau.
 J'accède aux fichiers et répertoires en utilisant 
\begin_inset Quotes cld
\end_inset

File Explorer
\begin_inset Quotes crd
\end_inset

, et je rentre les commandes dans un 
\begin_inset Quotes cld
\end_inset

Command Prompt
\begin_inset Quotes crd
\end_inset

 lancé comme 
\begin_inset Quotes cld
\end_inset

administrator
\begin_inset Quotes crd
\end_inset

.
 Après avoir créé ma session REAPER à l'emplacement de mon choix (le dossier
 
\begin_inset Quotes cld
\end_inset

ReaProjects
\begin_inset Quotes crd
\end_inset

), je vais exécuter des commandes similaires à celles que l'on effectue
 sous mac :
\end_layout

\begin_layout LyX-Code
cd C:
\backslash
Users
\backslash
JJG
\backslash
Desktop
\backslash
ReaProjects
\backslash
JAG2024
\end_layout

\begin_layout Standard
(à noter que pour obtenir cette ligne, on peut taper simplement « 
\family typewriter
cd   
\family default
», puis dans un 
\begin_inset Quotes cld
\end_inset

File Explorer
\begin_inset Quotes crd
\end_inset

 sélecter le dossier 
\begin_inset Quotes cld
\end_inset

JAG2024
\begin_inset Quotes crd
\end_inset

 et (clic droit) choisir 
\begin_inset Quotes cld
\end_inset

copy as path
\begin_inset Quotes crd
\end_inset

, et enfin coller ce résultat dans le 
\begin_inset Quotes cld
\end_inset

Command Prompt
\begin_inset Quotes crd
\end_inset

.) On va ensuite taper :
\end_layout

\begin_layout LyX-Code
mklink /d Effects C:
\backslash
Users
\backslash
JJG
\backslash
Desktop
\backslash
CMGS
\end_layout

\begin_layout Standard
qui va créer le lien symbolique de nom 
\begin_inset Quotes cld
\end_inset

Effects
\begin_inset Quotes crd
\end_inset

 vers notre version (unique) du Game Master (attention: source et cible
 sont en ordre inverse sur Mac et Windows).
 On va enfin construire les différents répertoires de travail dont nous
 aurons besoin :
\end_layout

\begin_layout LyX-Code
mkdir Data
\end_layout

\begin_layout LyX-Code
mkdir Data
\backslash
Scripts
\end_layout

\begin_layout LyX-Code
mkdir Data
\backslash
Sounds
\end_layout

\begin_layout LyX-Code
mkdir Data
\backslash
WAVES
\end_layout

\begin_layout Paragraph*
Remarque
\end_layout

\begin_layout Standard
A noter qu'il est possible de créer une session totalement autonome, en
 copiant le GameMaster dans le dossier « Effects ».
 Très précisément, placer le dossier « Effects » dans la corbeille, copier
 le dossier « CMGS » dans le répertoire du projet, et le renommer « Effects ».
\end_layout

\begin_layout Paragraph*
Remarque 2
\end_layout

\begin_layout Standard
Il est possible de garder plusieurs versions du Game Master sur une même
 machine.
 Pour ce faire, rajouter au nom 
\begin_inset Quotes cld
\end_inset

CMGS
\begin_inset Quotes crd
\end_inset

 par exemple le numéro de version, 
\begin_inset Quotes cld
\end_inset

1.7.8
\begin_inset Quotes crd
\end_inset

.
 Les commandes de création d'un lien deviennent ainsi
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
ln -s /Users/jjg4/CMGS-1.7.8 Effects
\end_layout

\begin_layout Standard
Il est ainsi possible très aisément de disposer de sessions qui utilisent
 telle ou telle version du Game Manager, de passer de l'une à l'autre, de
 revenir à une version antérieure, etc.
\end_layout

\begin_layout Subsection
Pistes
\end_layout

\begin_layout Standard
On peut dès lors réouvrir notre session, pour compléter sa construction.
 Voici comment configurer les différents éléments pour obtenir une projet
 utilisable.
 
\end_layout

\begin_layout Standard
Il faut au préalable décider du nombre de canaux que l'on désire utiliser
 en sortie dans l'installation (jusqu'à 128, mais souvent moins).
 Ce nombre va conditionner les réglages à effectuer sur les différentes
 pistes.
 La figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-REAP-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 représente une première étape de ce travail.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-REAP-1.png
	lyxscale 54
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-REAP-1"

\end_inset

Fenêtre REAPER, haut gauche.
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Subsubsection
Master Track
\end_layout

\begin_layout Standard
Dans la piste 
\begin_inset Quotes cld
\end_inset

Master
\begin_inset Quotes crd
\end_inset

 (si elle n'est pas affichée, choisir le menu 
\begin_inset Quotes cld
\end_inset

View\SpecialChar menuseparator
Master
\begin_inset space ~
\end_inset

Track), cliquer sur la boîte 
\begin_inset Quotes cld
\end_inset

Route
\begin_inset Quotes crd
\end_inset

.
 Dans la fenêtre qui s'affiche, régler 
\begin_inset Quotes cld
\end_inset

Track
\begin_inset space ~
\end_inset

channels
\begin_inset Quotes crd
\end_inset

 à 128 (ou moins, en fonction de la configuration de HP utilisée), et ajuster
 les sorties hardware 
\begin_inset Quotes cld
\end_inset

Audio Hardware Outputs
\begin_inset Quotes crd
\end_inset

 pour envoyer toutes les pistes vers les sorties voulues de la carte son.
 
\end_layout

\begin_layout Standard
On peut placer aussi, dans les 
\begin_inset Quotes cld
\end_inset

FX
\begin_inset Quotes crd
\end_inset

, un vu-mêtre multicanal qui permet de tracer les volumes des sorties.
 Pour ceci, cliquer, dans la piste MASTER, sur la boîte 
\begin_inset Quotes cld
\end_inset

FX
\begin_inset Quotes crd
\end_inset

.
 Le sélecteur d'effets s'affiche.
 Cliquer sur 
\begin_inset Quotes cld
\end_inset

Add
\begin_inset Quotes crd
\end_inset

.
 Une nouvelle fenêtre s'affiche, la liste des effets disponibles.
 Dans la colonne de gauche, choisir 
\begin_inset Quotes cld
\end_inset

JS
\begin_inset Quotes crd
\end_inset

 dans 
\begin_inset Quotes cld
\end_inset

All Plugins
\begin_inset Quotes crd
\end_inset

.
 Dans la colonne de droite, choisir 
\end_layout

\begin_layout Quote
\begin_inset Quotes cld
\end_inset


\emph on
JS:<project>/GameMaster/Multichannel-VU-meter.jsfx
\begin_inset Index idx
status open

\begin_layout Plain Layout
JS:Multichannel-VU-meter.jsfx
\end_layout

\end_inset


\emph default

\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Standard
Cliquer 
\begin_inset Quotes cld
\end_inset

Add
\begin_inset Quotes crd
\end_inset

 en bas à droite.
 On revient à la fenêtre précédente, où l'on note que le plugin est maintenant
 affiché dans la partie droite.
 Le plug-in a été inséré dans la piste, il est loisible de fermer la fenêtre.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Game-Player"

\end_inset

Game Player
\end_layout

\begin_layout Standard
Créer une première piste indépendante, dite 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 (par exemple, par le menu 
\begin_inset Quotes cld
\end_inset

Track\SpecialChar menuseparator
Insert new track
\begin_inset Quotes crd
\end_inset

).
 Dans 
\begin_inset Quotes cld
\end_inset

Route
\begin_inset Quotes crd
\end_inset

, choisir le minimum de canaux (stéréo), désactiver 
\begin_inset Quotes cld
\end_inset

Master Send
\begin_inset Quotes crd
\end_inset

.
 Placer le plug-in 
\end_layout

\begin_layout Quote
\begin_inset Quotes cld
\end_inset


\emph on
JS:<project>/GameMaster/GamePlayer.jsfx
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
GamePlayer.jsfx
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
dans les 
\begin_inset Quotes cld
\end_inset

FX
\begin_inset Quotes crd
\end_inset

.
 On peut nommer cette piste 
\begin_inset Quotes cld
\end_inset

Game Player
\begin_inset Quotes crd
\end_inset

 en double-cliquant sur la boîte textuelle, à côté du bouton rouge.
\end_layout

\begin_layout Subsubsection
File Players
\end_layout

\begin_layout Standard
Créer une seconde piste indépendante, dite 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

, avec le nombre de canaux désirés (128 ou moins), qui va envoyer ses sorties
 dans la piste master (Dans 
\begin_inset Quotes cld
\end_inset

Route
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Master
\begin_inset space ~
\end_inset

Send
\begin_inset Quotes crd
\end_inset

 coché).
 Nommons 
\begin_inset Quotes cld
\end_inset

Mixing
\begin_inset Quotes crd
\end_inset

 cette piste.
 Il n'est pas inutile d'y placer, parmi les effets, le compresseur multicanal
 
\end_layout

\begin_layout Quote
\begin_inset Quotes cld
\end_inset


\emph on
JS:<project>/GameMaster/SmoothMultiLimiter.jsfx
\emph default

\begin_inset Quotes crd
\end_inset

,
\end_layout

\begin_layout Standard
dans lequel on règlera 
\begin_inset Quotes cld
\end_inset

channels
\begin_inset Quotes crd
\end_inset

 à la valeur appropriée.
\end_layout

\begin_layout Standard
Créer une troisième piste, avec le nombre de canaux désirés et avec envoi
 des sorties vers la piste parent (Dans 
\begin_inset Quotes cld
\end_inset

Route
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Parent
\begin_inset space ~
\end_inset

Send
\begin_inset Quotes crd
\end_inset

 coché).
 Sur cette piste, placer dans les effets (
\begin_inset Quotes cld
\end_inset

FX
\begin_inset Quotes crd
\end_inset

) un plugin 
\end_layout

\begin_layout Quote
\begin_inset Quotes cld
\end_inset


\emph on
JS:<project>/GameMaster/
\emph default

\begin_inset Quotes cld
\end_inset


\emph on
FilePlayer.jsfx
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
FilePlayer.jsfx
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Standard
Nommons 
\begin_inset Quotes cld
\end_inset

Player
\begin_inset Quotes crd
\end_inset

 cette piste, et transformons la en une sous-piste de la piste 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

.
 Pour ceci, cliquer sur la petite icône grise située en-dessous du numéro
 de piste 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

.
 La piste 
\begin_inset Quotes cld
\end_inset

3
\begin_inset Quotes crd
\end_inset

 se retrouve alors légèrement en retrait, tandis qu'un petit triangle noir
 apparaît au-dessus du numéro de piste 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Cliquer à nouveau sur 
\begin_inset Quotes cld
\end_inset

Route
\begin_inset Quotes crd
\end_inset

, puis, dans la boîte de dialogue, sur 
\begin_inset Quotes cld
\end_inset

Add new receive...
\begin_inset Quotes crd
\end_inset

.
 Choisir la piste 
\begin_inset Quotes cld
\end_inset

Game Player
\begin_inset Quotes crd
\end_inset

 (c.f.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Game-Player"
plural "false"
caps "false"
noprefix "false"

\end_inset

), et, dans les réglages qui apparaissent, changer le menu 
\begin_inset Quotes cld
\end_inset

Post-Fader
\begin_inset Index idx
status open

\begin_layout Plain Layout
Post-Fader
\end_layout

\end_inset

 (Post-Pan)
\begin_inset Quotes crd
\end_inset

 en 
\begin_inset Quotes cld
\end_inset

Pre-Fader
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pre-Fader
\end_layout

\end_inset

 (Post-Fx)
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Dupliquer cette piste 
\begin_inset Quotes cld
\end_inset

3
\begin_inset Quotes crd
\end_inset

 autant de fois que nécessaire, créant autant de 
\emph on
players
\emph default
, pour obtenir la polyphonie désirée (typiquement, 8 à 20).
 Toutes ces pistes, étant des sous-pistes de la piste 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

, vont donc envoyer leurs sorties vers la piste 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

, intermédiaire, qui elle-même va envoyer vers la piste 
\emph on
master
\emph default
.
\end_layout

\begin_layout Standard
On verra ultérieurement apparaître ces players dans le module
\emph on
 
\begin_inset Quotes cld
\end_inset

Sound
\begin_inset space ~
\end_inset

Units
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
En cliquant sur le triangle noir de la piste 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

, on peut réduire au minimum la hauteur occupée par ses sous-pistes.
\end_layout

\begin_layout Subsubsection
Pistes MIDI
\end_layout

\begin_layout Standard
Créer éventuellement des pistes destinées à échanger des informations avec
 des périphériques MIDI.
 Par exemple, si l'on utilise les sensors, on créera une piste de ce nom
 (typiquement juste après la piste « Game Master ».
 La placer en enregistrement (bouton rouge), et dans les « in FX » (et non
 pas « FX »), choisir « 
\emph on
JS:<project>/GameMaster/MIDIduino.jsfx 
\emph default
».
 Dans « Route », désactiver « Master send... »
\end_layout

\begin_layout Subsubsection
Génération multiphonique, écoute stéréo.
\end_layout

\begin_layout Standard
Dans certains cas, l'on ne dispose pas, par exemple au moment d'une composition,
 du dispositif complet qui va être utilisé pour la restitution de l'œuvre.
 Ainsi, l'on peut préparer un travail pour une pièce en 24 canaux, mais
 se retrouver avec 3 heures disponibles dans un train, son portable, et
 une paire d'écouteurs.
 Une manière de contourner le problème est le suivant.
\end_layout

\begin_layout Standard
Créer une nouvelle piste (que l'on placera n'importe ou, par exemple entre
 
\begin_inset Quotes cld
\end_inset

GAME PLAYER
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

Mixing
\begin_inset Quotes crd
\end_inset

), à laquelle on donnera le nom de 
\begin_inset Quotes cld
\end_inset

Phone Mix
\begin_inset Quotes crd
\end_inset

.
 Dans la fenêtre 
\begin_inset Quotes cld
\end_inset

Route
\begin_inset Quotes crd
\end_inset

 de cette piste, on effectuera les modifications suivantes:
\end_layout

\begin_layout Enumerate
Régler le nombre de pistes 
\begin_inset Quotes cld
\end_inset

Track channels
\begin_inset Quotes crd
\end_inset

 au nombre utilisé pour la session, par exemple 24 dans l'exemple ci-dessus.
\end_layout

\begin_layout Enumerate
Décocher l'option 
\begin_inset Quotes cld
\end_inset

Master send channels from...
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Enumerate
Cliquer sur 
\begin_inset Quotes cld
\end_inset

Add new receive...
\begin_inset Quotes crd
\end_inset

 et choisir la piste 
\begin_inset Quotes cld
\end_inset

Mixing
\begin_inset Quotes crd
\end_inset

.
 Régler le nombre de canaux reçus au nombre utilisé pour la session.
\end_layout

\begin_layout Enumerate
Cliquer sur 
\begin_inset Quotes cld
\end_inset

Add new hardware output...
\begin_inset Quotes crd
\end_inset

 et choisir la sortie 
\begin_inset Quotes cld
\end_inset

headphone
\begin_inset Quotes crd
\end_inset

 de l'ordinateur.
 Lui associer les canaux audio 1 et 2.
\end_layout

\begin_layout Standard
Dans la fenêtre 
\begin_inset Quotes cld
\end_inset

FX
\begin_inset Quotes crd
\end_inset

 de cette piste, choisir un plug-in qui va permettre de réduire à 2 le nombre
 de canaux écoutés.
 Suivant les cas, on peut utiliser 
\begin_inset Quotes cld
\end_inset

8xMono to 1xStereo Mixer
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

ReaSurround
\begin_inset Quotes crd
\end_inset

, ou tout autre outil, tel le simplissime 
\begin_inset Quotes cld
\end_inset

CheapChannelReducer.jsfx
\begin_inset Quotes crd
\end_inset

 de la distribution.
\end_layout

\begin_layout Standard
Il est dès lors possible de travailler sur l'installation, en mode multiphonique
, en mutant la piste 
\begin_inset Quotes cld
\end_inset

Phone Mix
\begin_inset Quotes crd
\end_inset

, ou encore en mode nomade stéréo, en mutant la piste 
\begin_inset Quotes cld
\end_inset

Master
\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Unités MIDI
\end_layout

\begin_layout Standard
Créer éventuellement des pistes destinées à échanger des informations avec
 des périphériques MIDI.
 Sur chaque piste, on va placer dans les 
\begin_inset Quotes cld
\end_inset

IN FX
\begin_inset Quotes crd
\end_inset

 un plug-in spécialisé destiné à recevoir des informations depuis un périphériqu
e spécifique, et dans les 
\begin_inset Quotes cld
\end_inset

FX
\begin_inset Quotes crd
\end_inset

 de la même piste, un autre plug-in spécialisé, qui pour sa part va envoyer
 des commandes à ce périphérique.
 Ces plug-ins communiquent par l'intermédiaire de la mémoire partagée 
\family typewriter
gmem
\family default
 entre les différents plug-in JSFX.
\end_layout

\begin_layout Standard
A l'heure actuelle, il existe des plug-ins destinés à communiquer avec 
\emph on
l'Akai APC Mini
\emph default
, et avec le 
\emph on
Korg nanoKontrol 2
\emph default
.
\end_layout

\begin_layout Subsubsection
Personnalisation de la session
\end_layout

\begin_layout Standard
Celle-ci concerne principalement la configuration du Game Master, pour qu'il
 affiche les blocs d'information désirés (c.f.
 Doc, § 1.7).
 Configurer (comme décrit dans la Doc, § 2.2) le Game Master.
 En particulier, afficher un module « System Log » pour avoir une trace
 de l'opération suivante : glisser/déposer le fichier « projet.RPP » dans
 la fenêtre du GameMaster, puis enregistrer la session.
 Cette opération crée (et sauvegarde) différentes variables qui vont dès
 lors permettre au GM de gérer correctement l'ensemble des fichiers qu'il
 utilise.
 
\end_layout

\begin_layout Standard
Après avoir relancé REAPER, le projet est prêt à recevoir des fichiers sons
 (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Emplacement-des-fichiers-sons"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Subsection
Utilisation du Game Master
\end_layout

\begin_layout Standard
Cette configuration est capable de recevoir des commandes MIDI, et d'y répondre.
\end_layout

\begin_layout Standard
A titre d'exemple, 
\emph on
Game Master
\emph default
 va jouer les touches du 
\emph on
PlayPad
\emph default
 à la réception des notes C3 à D4# sur le canal MIDI 1, venant de n'importe
 quel périphérique (le 
\emph on
Virtual MIDI Keyboard
\emph default
 réglé sur 
\begin_inset Quotes cld
\end_inset

MIDI channel 1
\begin_inset Quotes crd
\end_inset

 convient parfaitement).
\end_layout

\begin_layout Paragraph*
Notes
\end_layout

\begin_layout Standard
Un plug-in (dans les 
\begin_inset Quotes cld
\end_inset

IN FX
\begin_inset Quotes crd
\end_inset

) peut recevoir des entrées depuis un seul périphérique MIDI ou depuis tous,
 mais est assuré de recevoir tout ce qui est envoyé.
 S'il devient nécessaire d'utiliser plusieurs périphériques MIDI en entrée
 (optique d'un live), on peut demander à recevoir toutes les entrées MIDI.
 Il y a alors des réglages à faire pour éviter les interférences entre des
 commandes identiques de différentes unités, mais ça marche en général.
 Contre-exemples
\begin_inset space ~
\end_inset

: l'APC mini d'AKAI, par exemple, est programmé pour envoyer tout sur le
 canal MIDI 1, et l'on ne peut rien y changer.
 Le X-touch mini de Behringer envoie sur le canal 11.
 Si l'on veut utiliser un autre contrôleur en même temps, c'est celui-ci
 qu'il faut régler pour qu'il envoie sur un autre canal MIDI que le 1 ou
 le 11 :-(.
 
\end_layout

\begin_layout Standard
Notons que REAPER offre aujourd'hui la possibilité de transposer les messages
 MIDI venant d'un périphérique donné, en changeant le numéro de canal référencé
 dans les commandes MIDI.
 Il est donc possible de connecter plusieurs interfaces utilisant les mêmes
 canaux, à condition de transposer ceux-ci.
\end_layout

\begin_layout Standard
On peut aussi juger préférable de créer des 
\begin_inset Quotes cld
\end_inset

lecteurs MIDI spécialisés
\begin_inset Quotes crd
\end_inset

 placés chacun en entrée d'une piste dédiée, recevant et traitant les données
 MIDI d'un périphérique unique, puis envoyant des 
\begin_inset Quotes cld
\end_inset

événements
\begin_inset Quotes crd
\end_inset

 au 
\emph on
Game Master
\emph default
.
 Ceci permet de reporter toutes les idiosyncrasies d'un périphérique donné
 au sein d'un seul outil spécialisé.
\end_layout

\begin_layout Subsection
Remarques
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Emplacement-des-fichiers-sons"

\end_inset

Emplacement des fichiers sons
\end_layout

\begin_layout Standard
Les versions antérieures du GameMaster imposaient une nomenclature stricte
 des fichiers sons, sous la forme « clip1xxxx.ttt », où « xxxx » était le
 numéro du clip, de « 0000 » à « 9999 », et « ttt » son format (wav, aiff,
 mp3, etc.).
 Ces fichiers, placés dans le répertoire « WAVES », sont immédiatement reconnus
 et utilisables, et ne posent pas de problèmes lors du déplacement de la
 session.
 
\end_layout

\begin_layout Standard
Une autre manière d'intégrer des fichiers consiste à glisser/déposer des
 fichiers sons dans le module « Clips Selection ».
 Afficher ce module, choisir avec les sliders la banque dans laquelle on
 veut utiliser ces fichiers (positionner le curseur dans le cadre des clips,
 faire « Shift-Up », « Shift-Down » ou « % », jusqu'à afficher les numéros
 de clips), et glisser/déposer dans le premier numéro de clips souhaité
 une liste de fichiers sons choisis dans une fenêtre du Finder.
 Notons que les sons ne sont pas copiés dans le projet, mais que seul leur
 nom est conservé.
 Si le projet est déplacé vers une nouvelle machine, ces sons ne seront
 probablement plus disponibles.
 
\end_layout

\begin_layout Standard
Il est possible d'intégrer les sons au projet, en les copiant préalablement
 dans le répertoire « Data/Sounds ».
 Lors d'un glisser/déposer, le GameMaster gardera uniquement le nom local
 du son par rapport à ce répertoire.
 Le lien restera donc correctement établi en cas de déplacement du projet
 vers un autre emplacement, ou vers une autre machine.
 
\end_layout

\begin_layout Paragraph*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Caveat-Clips"

\end_inset

Caveat
\end_layout

\begin_layout Standard
Lors du lancement du Game Master, celui-ci va explorer l'ensemble du répertoire
 « WAVES », en tentant d'ouvrir tous les clips potentiellement présents
 (soit 10000), dans la plupart des formats reconnus par REAPER (soit une
 dizaine).
 Ceci donne donc lieu à environ 100000 tentatives d'ouvertures de fichiers.
 Ce travail est effectué en parallèle avec les autres opérations du Game
 Master, et a en principe peu d'impact sur ses performances.
 C'est le cas sur Mac, où la séquence d'ouverture d'une dizaine de fichiers
 ne prend que 2ms environ.
 Il se trouve que ce n'est plus le cas sur PC, où cette même séquence nécessite
 une seconde environ, et où cette initialisation peut bloquer la machine
 pendant plusieurs dizaines de minutes.
 Une solution consiste à créer à créer, dans le répertoire « WAVES » (et
 même, et surtout, si celui-ci est vide) un fichier de nom 
\begin_inset Quotes cld
\end_inset

Clips.txt
\begin_inset Quotes crd
\end_inset

 contenant la liste des fichiers du répertoire.
 Pour ce faire, sous Mac, dans un terminal, aller dans le répertoire 
\begin_inset Quotes cld
\end_inset

WAVES
\begin_inset Quotes crd
\end_inset

, et faire (en continuant sur l'exemple de la cession évoqué ci-dessus)
 :
\end_layout

\begin_layout LyX-Code
cd /Users/jjg4/Desktop/JAG2024/Data/WAVES
\end_layout

\begin_layout LyX-Code
ls > Clips.txt
\end_layout

\begin_layout Standard
Pour Windows 11, on utilisera :
\end_layout

\begin_layout LyX-Code
cd C:
\backslash
Users
\backslash
JJG
\backslash
Desktop
\backslash
ReaProjects
\backslash
JAG2024
\backslash
Data
\backslash
WAVES
\end_layout

\begin_layout LyX-Code
dir > Clips.txt
\end_layout

\begin_layout Standard
Au lancement suivant de la session, le Game Master se basera sur le contenu
 du fichier pour décider quels clips sont présents dans le répertoire, et
 quel clips seront indiqués inexistants (erreur 
\begin_inset Quotes cld
\end_inset

404
\begin_inset Quotes crd
\end_inset

).
 Cette opération ne prend que quelques secondes.
\end_layout

\begin_layout Standard
En cas de modification du contenu du répertoire 
\begin_inset Quotes cld
\end_inset

WAVES
\begin_inset Quotes crd
\end_inset

 (ajoût ou suppression de clips), il n'est pas nécessaire de quitter le
 Game Master.
 Après ces modifications, recréer le fichier 
\begin_inset Quotes cld
\end_inset

Clips.txt
\begin_inset Quotes crd
\end_inset

 comme indiqué ci-dessus, puis faire un 
\begin_inset Quotes cld
\end_inset

glisser/déposer
\begin_inset Quotes crd
\end_inset

 du fichier dans la fenêtre du Game Master 
\end_layout

\begin_layout Subsubsection
Déplacement d'une session
\end_layout

\begin_layout Standard
Du fait de la présence au sein d'une session GameMaster de références à
 des fichiers externes, le code du programme lui-même, et éventuellement
 des fichiers sons, le déplacement d'une session peut s'avérer délicat.
 
\end_layout

\begin_layout Standard
Si la session doit être déplacée un jour, il est préférable de le prévoir
 au départ.
 Différents cas peuvent se présenter.
 
\end_layout

\begin_layout Standard
Si la session reste sur la même machine (passant éventuellement d'un disque
 dur à un autre), et que l'emplacement des fichiers sons externes n'est
 pas modifié, ou si tous les fichiers sons utilisés ont été placés dans
 le répertoire « Data/Sounds », il suffit, après déplacement, de lancer
 la session, de glisser/déposer le fichier « .RPP » décrivant le projet dans
 la fenêtre du GameMaster, et de sauver à nouveau la session.
 Au lancement suivant, tous les fichiers nécessaires devraient être automatiquem
ent retrouvés.
 
\end_layout

\begin_layout Standard
Si la session est déplacée vers une autre machine, il convient de mettre
 à jour la localisation du répertoire du GameMaster.
 Après déplacement de la session, et avant de la lancer, supprimer l'alias
 « Effects », puis, dans un terminal, aller à l'intérieur de la session :
 
\end_layout

\begin_layout LyX-Code
cd /Users/Alfred/REAPER_Projects/JAG2024
\end_layout

\begin_layout Standard
(si la session a été placée à cet emplacement par Alfred), et taper : 
\end_layout

\begin_layout LyX-Code
ln -s /Users/Alfred/GM/CMGS Effects
\end_layout

\begin_layout Standard
(là encore, si le répertoire 
\begin_inset Quotes cld
\end_inset

CMGS
\begin_inset Quotes crd
\end_inset

 du GameMaster a été placé à cet endroit).
 Lancer alors la session (la fenêtre du GameMaster doit s'afficher), et,
 comme ci-dessus, glisser/déposer le fichier « .RPP » dans la fenêtre du
 GameMaster.
 Enregistrer, fermer, relancer, et tout doit fonctionner correctement.
 
\end_layout

\begin_layout Section
Mise en œuvre de contrôleurs MIDI
\end_layout

\begin_layout Standard
Il est raisonnablement simple d'utiliser des contrôleurs MIDI matériels
 pour interagir avec l'application.
 Ceci implique cependant d'écrire, pour chaque contrôleur, un couple de
 plug-ins simples, mais spécialisés.
 L'un de ces plug-ins va servir à la réception des commandes MIDI depuis
 le contrôleur, l'autre à l'émission, vers ce contrôleur, de commandes MIDI
 servant de feed-back ou de configurateur.
\end_layout

\begin_layout Standard
Soit le contrôleur 
\begin_inset Quotes cld
\end_inset

STARplus
\begin_inset Quotes crd
\end_inset

 pour lequel on a développé deux plug-ins, 
\begin_inset Quotes cld
\end_inset


\emph on
STARplus In
\emph default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\emph on
STARplus Out
\emph default

\begin_inset Quotes crd
\end_inset

.
 Nous allons les intégrer dans le système de la manière suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
S'assurer que le contrôleur est bien visible par REAPER.
 Dans 
\begin_inset Quotes cld
\end_inset

Options\SpecialChar menuseparator
Preferences\SpecialChar menuseparator
MIDI Device
\begin_inset Quotes crd
\end_inset

, mettre l'entrée du contrôleur en 
\begin_inset Quotes cld
\end_inset

Enabled+Control
\begin_inset Quotes crd
\end_inset

, sa sortie en 
\begin_inset Quotes cld
\end_inset

Enabled
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
Créer une piste indépendante, avec le minimum de canaux (stéréo).
 Placer le plug-in 
\begin_inset Quotes cld
\end_inset


\emph on
STARplus In
\emph default

\begin_inset Quotes crd
\end_inset

 dans les 
\begin_inset Quotes cld
\end_inset

IN FX
\begin_inset Quotes crd
\end_inset

, et 
\begin_inset Quotes cld
\end_inset


\emph on
STARplus Out
\emph default

\begin_inset Quotes crd
\end_inset

 dans les 
\begin_inset Quotes cld
\end_inset

FX
\begin_inset Quotes crd
\end_inset

.
 Choisir dans les entrées 
\emph on
Input:
\begin_inset space ~
\end_inset

MIDI\SpecialChar menuseparator
STARplus\SpecialChar menuseparator
All
\begin_inset space ~
\end_inset

channels
\emph default
.
 Armer la piste en enregistrement.
 Dans 
\begin_inset Quotes cld
\end_inset

ROUTE
\begin_inset Quotes crd
\end_inset

, désactiver 
\begin_inset Quotes cld
\end_inset

Master Send
\begin_inset Quotes crd
\end_inset

, ajouter un 
\begin_inset Quotes cld
\end_inset

MIDI Hardware Output
\begin_inset Quotes crd
\end_inset

 vers le contrôleur 
\begin_inset Quotes cld
\end_inset

STARplus
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
Les deux plug-ins doivent apparaître dans 
\begin_inset Quotes cld
\end_inset


\emph on
Game Master\SpecialChar menuseparator
Units
\emph default

\begin_inset Quotes crd
\end_inset

 (ou non, selon certaines options de configuration).
\end_layout

\begin_layout Section
Caveat
\end_layout

\begin_layout Standard
La documentation est traditionnellement en retard sur l'implantation.
 Ce qui est décrit dans ce manuel a probablement été opérationnel à une
 époque.
 La documentation peut encore être d'actualité, ou être devenue obsolète
 du fait de modifications dans le logiciel non encore documentées, ou de
 régression du logiciel suite à son évolution.
 Ne pas hésiter, si l'une de ces questions se pose, à contacter l'auteur...
\end_layout

\begin_layout Standard
Notez cependant que 
\emph on
seule la dernière version en date du logiciel est maintenue
\emph default
.
 Si vous avez des problèmes avec une version antérieure, passez à la dernière
 version, et tentez de reproduire l'erreur.
 
\end_layout

\begin_layout Section
Caveat 2 : 
\begin_inset CommandInset label
LatexCommand label
name "sec:IASIAS"

\end_inset

IASIAS
\end_layout

\begin_layout Standard
Ce sigle, 
\begin_inset Quotes cld
\end_inset

IASIAS
\begin_inset Index idx
status open

\begin_layout Plain Layout
IASIAS
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

, revient à l'occasion comme justificatif de certaines décisions de spécificatio
ns ou d'implémentation.
 Sa signification est la suivante
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset

I'm A Script In A Sandbox
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Je suis un script dans un bac à sable
\begin_inset Quotes crd
\end_inset

.
 En effet, REAPER se protège, et protège l'utilisateur, des scripts écrits
 en JSFX en restreignant leurs possibilités d'interférer avec le reste du
 monde.
 Ainsi, un script ne peut pas écrire dans un fichier disque, ne peut pas
 connaître les fichiers disque existant dans son environnement, ne peut
 pas communiquer avec le système d'exploitation, etc.
\end_layout

\begin_layout Standard
Aussi, afin que le 
\begin_inset Quotes cld
\end_inset

Game Master
\begin_inset Quotes crd
\end_inset

 connaisse les scripts et fichiers disponibles, il est nécessaire de lui
 en fournir la liste dans des fichiers texte, dont le nom est convenu à
 l'avance, et dont chaque ligne contient un nom de fichier, qu'il sera dès
 lors possible d'accéder.
 Ces fichiers sont les suivants
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
GM_txt_configs.txt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GM_txt_configs.txt
\end_layout

\end_inset


\family default
 est le fichier qui va contenir les noms de tous les fichiers de type 
\begin_inset Quotes cld
\end_inset

texte
\begin_inset Quotes crd
\end_inset

 qui contiennent des fichiers utiles au 
\begin_inset Quotes cld
\end_inset

Game Master
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
GM_mSL_scripts.txt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GM_mSL_scripts.txt
\end_layout

\end_inset


\family default
 est le fichier qui va contenir les noms des fichiers 
\begin_inset Quotes cld
\end_inset

scripts
\begin_inset Quotes crd
\end_inset

, c'est à dire écrits en 
\begin_inset Quotes cld
\end_inset


\emph on
mSL
\emph default

\begin_inset Quotes crd
\end_inset

 (c.f.
 chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Presentation-mSL"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
Un script, 
\begin_inset Quotes cld
\end_inset


\family typewriter
mkConfigs.sh
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mkConfigs.sh
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 permet, si l'utilisateur le juge utile, de recréer automatiquement ces
 fichiers d'information, en explorant le répertoire du 
\begin_inset Quotes cld
\end_inset

Game Master
\begin_inset Quotes crd
\end_inset

.
 Ce script, qui n'est adapté qu'à 
\emph on
Mac OS
\emph default
, et peut, peut-être, fonctionner sous 
\emph on
Linux,
\emph default
 se lance dans une fenêtre de terminal, positionné dans le répertoire du
 plug-in, par la commande
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
./mkConfigs.sh
\end_layout

\begin_layout Standard
Ces fichiers sont lus et analysés au lancement du plug-in.
 En cas de modification ultérieure de leur contenu, il sera nécessaire de
 quitter et de relancer REAPER, après avoir sauvé l'état du Game Master
 sous forme d'un préréglage, 
\emph on
puis
\emph default
 la session REAPER.
\end_layout

\begin_layout Standard
Par ailleurs, JSFX, en tant que langage, présente beaucoup de qualités,
 mais aussi de nombreuses restrictions dont certaines sont gênantes dans
 la pratique
\begin_inset space ~
\end_inset

: type de données unique, les flottants doubles, fonctions non récursives,
 et références en avant non possibles, variables non déclarées, avec les
 erreurs de programmation inévitables que cela implique, absence de construction
 équivalente au 
\begin_inset Quotes cld
\end_inset

switch
\begin_inset Quotes crd
\end_inset

 du langage 
\begin_inset Quotes cld
\end_inset

C
\begin_inset Quotes crd
\end_inset

, absence de pointeurs sur des fonctions, choix incongrus pour les variables
 locales, la représentation des objets, etc.
 Tous ces inconvenients sont contournés du mieux possible, mais peuvent,
 à leur tour, contribuer à des difficultés, ou des quasi impossibilités,
 dans la programmation ou dans les fonctionnalités du logiciel...
 Que l'utilisateur pardonne au concepteur
\begin_inset space ~
\end_inset

!
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Modules-de-commande"

\end_inset

Modules de commande standard
\end_layout

\begin_layout Standard
L'interface du 
\emph on
Game Master
\emph default
, on l'a indiqué, est 
\emph on
modulable
\emph default
, c'est à dire qu'un certain nombre de modules de commandes sont disponibles,
 et que chaque panneau de chaque onglet est susceptible de recevoir un,
 ou plusieurs, de ces modules.
 On choisit ces modules par un 
\begin_inset Quotes cld
\end_inset

clic-droit
\begin_inset Quotes crd
\end_inset

 avec la touche 
\begin_inset Quotes cld
\end_inset

shift
\begin_inset Quotes crd
\end_inset

 (ou 
\begin_inset Quotes cld
\end_inset

alt
\begin_inset Quotes crd
\end_inset

) enfoncée.
 Le pop-up menu qui s'affiche alors permet d'afficher (ou de supprimer)
 un module, et de déplacer verticalement ces modules les uns par rapport
 aux autres.
\end_layout

\begin_layout Standard
Il existe aussi un petit nombre de commandes, toujours accessibles, quels
 que soient les onglets et les modules affichés.
 Dans tous les cas, on se souviendra que le 
\emph on
Game Master
\emph default
 ne reçoit les commandes que lorsqu'il est 
\emph on
réceptif
\emph default
, 
\emph on
car on a cliqué dans sa fenêtre
\emph default
, et que le curseur de la souris est positionné à l'intérieur de celle-ci.
\end_layout

\begin_layout Section
Commandes globales
\end_layout

\begin_layout Standard
Elles sont accessibles, soit par utilisation de la souris, soit par des
 touches clavier.
 Ainsi, cliquer sur l'un des onglets 
\begin_inset Quotes cld
\end_inset

Main
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Studio A
\begin_inset Quotes crd
\end_inset

, etc, permet d'afficher l'onglet correspondant.
 La touche 
\begin_inset Quotes cld
\end_inset

Tab
\begin_inset Quotes crd
\end_inset

 du clavier permet également de passer d'un onglet au suivant.
\end_layout

\begin_layout Subsection
Souris
\end_layout

\begin_layout Standard
Un clic droit dans la barre des onglets (en haut de la fenêtre) permet d'affiche
r un menu de configuration, qui permet de choisir un 
\begin_inset Quotes cld
\end_inset

look and feel
\begin_inset Quotes crd
\end_inset

 pour l'ensemble du plug-in - c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-W1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Un shift-clic-droit dans l'un des panneaux permet de visualiser, choisir,
 ou déplacer les modules affichés dans ce panneau - c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-panneaux-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Clavier
\end_layout

\begin_layout Standard
Quelques raccourcis claviers sont 
\begin_inset Quotes cld
\end_inset

globaux
\begin_inset Quotes crd
\end_inset

, c'est à dire actifs quelle que soit la position de la souris dans la fenêtre
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
\begin_inset Quotes cld
\end_inset

tab
\begin_inset Quotes crd
\end_inset

 Passe à la tabulation suivante
\end_layout

\begin_layout Description
\begin_inset Quotes cld
\end_inset

shift-tab
\begin_inset Quotes crd
\end_inset

 Passe à la tabulation précédente
\end_layout

\begin_layout Description
\begin_inset Quotes cld
\end_inset

<
\begin_inset Quotes crd
\end_inset

 Active ou désactive le mode 
\begin_inset Quotes cld
\end_inset

autoplay
\begin_inset Quotes crd
\end_inset

 - c.f.
 section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Module-Play-Control"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Description
\begin_inset Quotes cld
\end_inset

backspace
\begin_inset Quotes crd
\end_inset

 Arrête l'un des players actifs.
\end_layout

\begin_layout Description
\begin_inset Quotes cld
\end_inset

&
\begin_inset Quotes crd
\end_inset

 Marque l'instant présent dans le playlog (c.f.
 chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Le-playlog"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Description
\begin_inset Quotes cld
\end_inset

#
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset


\begin_inset Quotes cld
\end_inset

suppr
\begin_inset Quotes crd
\end_inset

 Arrête l'ensemble des players.
 
\end_layout

\begin_layout Description
\begin_inset Quotes cld
\end_inset

$
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset


\begin_inset Quotes cld
\end_inset


\begin_inset Formula $\searrow$
\end_inset


\begin_inset Quotes crd
\end_inset

 Déclenche le jeu d'un clip du groupe courant.
 
\end_layout

\begin_layout Description
\begin_inset Quotes cld
\end_inset

@
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset


\begin_inset Quotes cld
\end_inset

ù
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset


\begin_inset Quotes cld
\end_inset

F17
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset


\begin_inset Quotes cld
\end_inset


\begin_inset Formula $\bowtie$
\end_inset


\begin_inset Quotes crd
\end_inset

 Verrouille l'ensemble des players actifs - c.f.
 section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Module-Sound-Units"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Les autres raccourcis claviers définis dans le plug-in sont propres à un
 module spécifique, voire à une cellule particulière d'un module.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Interactions-typiques"

\end_inset

Interactions génériques typiques
\end_layout

\begin_layout Subsubsection
Cellules
\end_layout

\begin_layout Standard
Lorsqu'une cellule d'un PAD affiche une valeur numérique modifiable, cette
 valeur peut être modifiée par les interactions suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Paragraph*

\emph on
souris
\end_layout

\begin_layout Description
clic-gauche diminue la valeur d'une unité.
\end_layout

\begin_layout Description
ctrl-clic-gauche diminue la valeur d'une dizaine.
\end_layout

\begin_layout Description
shift-clic-gauche diminue la valeur d'une centaine.
\end_layout

\begin_layout Description
ctrl-shift-clic-gauche diminue la valeur d'un millier.
\end_layout

\begin_layout Description
clic-droit augmente la valeur d'une unité.
\end_layout

\begin_layout Description
ctrl-clic-droit augmente la valeur d'une dizaine.
\end_layout

\begin_layout Description
shift-clic-droit augmente la valeur d'une centaine.
\end_layout

\begin_layout Description
ctrl-shift-clic-droit augmente la valeur d'un millier.
\end_layout

\begin_layout Paragraph*

\emph on
clavier
\end_layout

\begin_layout Description
0
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

9 Les chiffres permettent d'introduire une valeur, comprise entre 0 et 9999.
\end_layout

\begin_layout Description
z
\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset


\begin_inset Formula $\nwarrow$
\end_inset

 Remet la valeur courante à 0.
\end_layout

\begin_layout Description
: diminue la valeur courante d'une unité.
\end_layout

\begin_layout Description
= augmente la valeur courante d'une unité.
\end_layout

\begin_layout Description
'left'
\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset

'rght' (flèches de direction gauche et droite du clavier, 
\begin_inset Quotes cld
\end_inset


\begin_inset Formula $\blacktriangleleft$
\end_inset


\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\begin_inset Formula $\blacktriangleright$
\end_inset


\begin_inset Quotes crd
\end_inset

)
\begin_inset space ~
\end_inset

: passage à la valeur 
\begin_inset Quotes cld
\end_inset

significative
\begin_inset Quotes crd
\end_inset

 précédente ou suivante du nombre.
 Ce passage est en général 
\begin_inset Quotes cld
\end_inset

intelligent
\begin_inset Quotes crd
\end_inset

, c'est-à-dire que le passage se fait à une valeur correspondant à un objet
 effectivement défini dans la configuration.
 On sautera ainsi du clip 
\begin_inset Quotes cld
\end_inset

2179
\begin_inset Quotes crd
\end_inset

 au clip 
\begin_inset Quotes cld
\end_inset

3001
\begin_inset Quotes crd
\end_inset

 si aucun autre clip n'est défini dans cet intervalle.
\end_layout

\begin_layout Description
\begin_inset Quotes cld
\end_inset

b
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset


\begin_inset Quotes cld
\end_inset

n
\begin_inset Quotes crd
\end_inset

 (pour 
\begin_inset Quotes cld
\end_inset

back
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

next
\begin_inset Quotes crd
\end_inset

)
\begin_inset space ~
\end_inset

: même effet qu'avec les touches 
\begin_inset Quotes cld
\end_inset


\begin_inset Formula $\blacktriangleleft$
\end_inset


\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\begin_inset Formula $\blacktriangleright$
\end_inset


\begin_inset Quotes crd
\end_inset

 ci-dessus.
\end_layout

\begin_layout Description
'up'
\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset

'down' (flèches 
\begin_inset Quotes cld
\end_inset


\begin_inset Formula $\blacktriangle$
\end_inset


\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\begin_inset Formula $\blacktriangledown$
\end_inset


\begin_inset Quotes crd
\end_inset

 du clavier)
\begin_inset space ~
\end_inset

: passage rapide (par pas de 10 ou de 100) à la valeur significative suivante
 ou précédente.
\end_layout

\begin_layout Description
'pgup'
\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset

'pgdn' (
\begin_inset Quotes cld
\end_inset

page up
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

page down
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\begin_inset Formula $\Uparrow$
\end_inset


\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\begin_inset Formula $\Downarrow$
\end_inset


\begin_inset Quotes crd
\end_inset

)
\begin_inset space ~
\end_inset

: passage ultra-rapide (par pas de 100 ou de 1000) à la valeur significative
 suivante ou précédente.
\end_layout

\begin_layout Standard
Notons que lorsque le nombre édité représente un numéro de clip, de groupe,
 de banque, de mode de jeu ou de mode d'espace, une 
\begin_inset Quotes cld
\end_inset

correction intelligente
\begin_inset Quotes crd
\end_inset

 se produit quelques secondes après une interaction
\begin_inset space ~
\end_inset

: le nombre introduit par l'utilisateur est automatiquement incrémenté ou
 décrémenté jusqu'à correspondre à un objet (clip, groupe, etc.) existant
 dans le système.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Sliders"

\end_inset

Sliders
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GPLM-slider-gain.tiff
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:slider-ex"

\end_inset

Exemple de slider
\end_layout

\end_inset


\end_layout

\end_inset

Les sliders permettent une interaction directe de l'utilisateur avec un
 paramètre de réglage du plug-in.
 Dans l'exemple de la figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GamePlayer:slider-ex"
plural "false"
caps "false"
noprefix "false"

\end_inset

, on distingue, de droite à gauche, les éléments graphiques suivants
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
le nom de paramètre affiché, ici 
\begin_inset Quotes cld
\end_inset

Lp.Gain
\begin_inset Quotes crd
\end_inset

, qui concerne donc le volume sonore des 
\begin_inset Quotes cld
\end_inset

loopers
\begin_inset Quotes crd
\end_inset

, ainsi que la valeur courante de ce paramètre, ici 
\begin_inset Quotes cld
\end_inset

-6.2 dB
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
un indicateur de forme carré, indiquant par sa présence que le paramètre
 peut être associé à un générateur d'aléa.
 En l'occurrence, l'association est active, et le genérateur associé est
 le générateur n°2, représenté par la couleur 
\begin_inset Quotes cld
\end_inset

orange
\begin_inset Quotes crd
\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
Notons que le générateur d'aléa, malgré sa présence dans ce manuel depuis
 2021, n'a jamais été implémenté :-(
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
le slider proprement dit, qui va permettre le réglage du paramètre entre
 deux valeurs limites, dans ce cas précis entre -120
\begin_inset space ~
\end_inset

dB et +12
\begin_inset space ~
\end_inset

dB.
 Le carré bleu est le 
\begin_inset Quotes cld
\end_inset

curseur
\begin_inset Quotes crd
\end_inset

 du slider, qui symbolise la valeur du paramètre entre les bornes de variation.
\end_layout

\begin_layout Standard
Les interactions possibles avec un slider sont les suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
clic-gauche dans la zone de réglage du slider positionne celui-ci à l'endroit
 cliqué.
 On peut déplacer le curseur du slider en bougeant la souris tout en maintenant
 le bouton gauche enfoncé.
\end_layout

\begin_layout Description
double
\begin_inset space ~
\end_inset

clic-gauche permet de rétablir la valeur par défaut du paramètre, ici 
\begin_inset Quotes cld
\end_inset

0
\begin_inset space ~
\end_inset

dB
\begin_inset Quotes crd
\end_inset

.
 On obtient le même résultat avec 
\begin_inset Quotes cld
\end_inset

ctrl+shift+clic-gauche
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
clic-gauche sur l'indicateur d'association permet d'activer ou de désactiver
 l'association avec le générateur d'aléa.
 Activé, l'indicateur affiche la couleur associée au générateur d'aléa choisi
\begin_inset space ~
\end_inset

; désactivé, il passe au gris.
\end_layout

\begin_layout Description
clic-droit sur l'indicateur d'association déclenche l'affichage d'un menu,
 qui permet de choisir un générateur d'aléa parmi huit.
\end_layout

\begin_layout Description
clic (gauche ou droit) sur le nom du paramètre peut provoquer l'affichage
 d'une entrée indiquant les bornes effectives de la variation du paramètre,
 en fonction du générateur d'aléa utilisé.
\end_layout

\begin_layout Subsubsection
Notes
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-001.png
	lyxscale 60
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:reload-button"

\end_inset

Le bouton 
\begin_inset Quotes cld
\end_inset

Reload
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-002.png
	lyxscale 60
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:reload-button-1"

\end_inset

Le bouton 
\begin_inset Quotes cld
\end_inset

Reload
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Plusieurs modules affichent des informations relatives à des fichiers de
 configuration, avec en particulier un bouton noté 
\begin_inset Quotes cld
\end_inset

Reload
\begin_inset Quotes crd
\end_inset

 (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GamePlayer:reload-button"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Le fichier de configuration correspondant a été en principe chargé au lancement
 du plug-in.
 Lorsque l'analyse du fichier est correcte (ici, le fichier de description
 des partiels), les cellules correspondantes sont de couleur bleue, et affichent
 le numéro 
\begin_inset Quotes cld
\end_inset

d'évolution
\begin_inset Quotes crd
\end_inset

 du fichier, renseigné dans celui-ci (1.0.27), et le nombre de partiels définis
 (246), ainsi que le nombre total possible (5000).
 
\end_layout

\begin_layout Standard
Il peut arriver qu'une erreur soit détectée dans le fichier ; la couleur
 passe alors au rouge, et la cellule précédente affiche un numéro d'erreur,
 et une 
\begin_inset Quotes cld
\end_inset

position
\begin_inset Quotes crd
\end_inset

, qui est le numéro de l'objet que le décodeur du fichier tentait de définir.
 (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GamePlayer:reload-button-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Dans cet exemple précis, 
\begin_inset Quotes cld
\end_inset

721
\begin_inset Quotes crd
\end_inset

 indique un mot-clef inattendu, et 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 indique que l'erreur survient tout au début du fichier.
\end_layout

\begin_layout Standard
Il est possible alors de corriger le fichier dans une application externe
 (notepad, textedit, etc.), puis de le recharger en cliquant sur 
\begin_inset Quotes cld
\end_inset

Reload
\begin_inset Quotes crd
\end_inset

.
 Il est également possible de choisir un autre fichier, par un clic droit
 sur 
\begin_inset Quotes cld
\end_inset

Reload
\begin_inset Quotes crd
\end_inset

.
 Un menu apparait, qui propose divers fichiers pouvant répondre à l'attente
 de l'utilisateur.
 Choisir celui qui convient, qui devient dès lors le fichier par défaut
 associé au préréglage.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Glisser-déposer"

\end_inset

Glisser-déposer
\end_layout

\begin_layout Standard
Cette opération permet à un logiciel de recevoir un fichier affiché dans
 une fenêtre du Finder/Explorer.
 Cliquer sur le fichier de cette fenêtre, et, tout en maintenant appuyé
 le bouton de la souris, 
\begin_inset Quotes cld
\end_inset

déplacer
\begin_inset Quotes crd
\end_inset

 le fichier jusqu'à la fenêtre du Game Master, et enfin relâcher le bouton
 de la souris.
\end_layout

\begin_layout Standard
Cette opération n'est prise en compte, pour l'instant, que pour les fichiers
 scripts, dont le nom comporte le suffixe 
\begin_inset Quotes cld
\end_inset


\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
.mSL
\end_layout

\end_inset

.mSL
\family default

\begin_inset Quotes crd
\end_inset

.
 Il est ainsi possible:
\end_layout

\begin_layout Itemize
de choisir un fichier de description propre à un aspect du Game Master (par
 exemple, un fichier décrivant les modes de jeu, les modes d'espace, etc.)
 et de le glisser dans le module spécifique gérant cet aspect.
\end_layout

\begin_layout Itemize
de glisser un fichier script n'importe où dans la fenêtre du Game Master,
 et de le lâcher en maintenant la touche 
\begin_inset Quotes cld
\end_inset

alt
\begin_inset Quotes crd
\end_inset

 enfoncée.
 
\end_layout

\begin_layout Standard
Si, de plus, lors de cette opération la touche 
\begin_inset Quotes cld
\end_inset

alt
\begin_inset Quotes crd
\end_inset

 était appuyée au moment où l'on relâche la bouton de la souris, le script
 est alors immédiatement exécuté.
\end_layout

\begin_layout Section
Configuration globale
\end_layout

\begin_layout Standard
Le Game Master propose donc plusieurs tabulations, qu'il est possible de
 configurer indépendamment, chaque tabulation pouvant comporter de 1à 4
 colonnes (ou 
\begin_inset Quotes cld
\end_inset

panneaux
\begin_inset Quotes crd
\end_inset

), et chaque colonne un ou plusieurs modules..
 Cette configuration s'effectue au travers d'un menu unique, obtenu par
 un 
\begin_inset Quotes cld
\end_inset

shift-clic-droit
\begin_inset Quotes crd
\end_inset

 dans la fenêtre du plug-in (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-panneaux-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Ce menu comporte cinq rubriques, chacune disposant de sous-rubriques:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Modules Donne accès à la liste alphabétique des différents modules pouvant
 être installés dans la colonne courante, ceux qui s'y trouvent déjà étant
 repérés par une 
\begin_inset Quotes cld
\end_inset

tick-mark
\begin_inset Quotes crd
\end_inset

.
 Les nouveaux modules sont insérés en dessous des précédents.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Modules
\begin_inset space ~
\end_inset

Disposition Permet de déplacer le module courant (dont le nom apparait en
 première place dans le menu) d'une position vers le haut ou vers de bas,
 de le placer tout en haut ou tout en bas de la colonne, de le faire glisser
 dans la colonne de gauche ou la colonne de droite, ou encore de copier
 sa référence, pour ensuite en placer une copie dans une autre colonne ou
 une autre tabulation.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Panes
\begin_inset space ~
\end_inset

Arrangement Permet d'échanger la colonne courante avec celle qui est située
 à sa droite ou à sa gauche, de déplacer l'ensemble des colonnes vers la
 droite ou la gauche, de copier le contenu d'une colonne pour le coller
 dans une autre colonne.
 Il est également possible de partager la tabulation en différents panneaux
 (colonnes), de 1 à 4.
 
\begin_inset Quotes cld
\end_inset

Reset Sizes
\begin_inset Quotes crd
\end_inset

 permet d'affecter à tous les panneaux la même largeur (au cas où celle-ci
 avait été antérieurement modifiée), 
\begin_inset Quotes cld
\end_inset

Clear Pane
\begin_inset Quotes crd
\end_inset

 de retirer tous les modules du panneau courant, 
\begin_inset Quotes cld
\end_inset

Clear All Panes
\begin_inset Quotes crd
\end_inset

 de supprimer tous les modules de tous les panneaux de toutes les tabulations...
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Tabs
\begin_inset space ~
\end_inset

Management Permet de déplacer l'ensemble des panneaux d'une tabulation vers
 la tabulation précédente ou la suivante, et de choisir un autre nom à la
 places des étiquettes prédéfinies, 
\begin_inset Quotes cld
\end_inset

Main
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Studio A
\begin_inset Quotes crd
\end_inset

, etc.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Thème Permet le choix du thème de présentation de l'interface.
\end_layout

\begin_layout Standard
Si l'on a cliqué dans un module pour faire apparaître le menu, le nom de
 ce module s'affiche en tête de ce menu.
 Il suffit alors de choisir ce nom pour retirer le module du panneau.
 Les propriétés d'un module (par exemple, dans le cas d'un module 
\begin_inset Quotes cld
\end_inset

Parameters X
\begin_inset Quotes crd
\end_inset

, la liste des paramètres affichés) restent associées à ce module, même
 si celui-ci n'apparaît nulle part dans l'interface.
\end_layout

\begin_layout Standard
Notons encore qu'il est possible, au moyen des touches de clavier 
\begin_inset Quotes cld
\end_inset

shift-
\begin_inset Formula $\blacktriangleleft$
\end_inset


\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

shift-
\begin_inset Formula $\blacktriangleright$
\end_inset


\begin_inset Quotes crd
\end_inset

 d'augmenter la largeur d'une colonne, au détriment de celle de sa voisine,
 en 
\begin_inset Quotes cld
\end_inset

poussant
\begin_inset Quotes crd
\end_inset

 vers la gauche ou vers la droite la limite entre les deux colonnes.
\end_layout

\begin_layout Standard
La configuration globale fait partie du 
\begin_inset Quotes cld
\end_inset

préréglage
\begin_inset Quotes crd
\end_inset

 et est sauvegardée par la procédure habituelle (clic gauche sur la case
 [+] de la barre REAPER de la fenêtre du plug-in, choix d'une option, etc.).
\end_layout

\begin_layout Section
Module 
\begin_inset Quotes cld
\end_inset

Main Infos
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Main-4.tiff
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-Main-Infos"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Main Infos
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
Main Infos
\series default
\emph default

\begin_inset Quotes crd
\end_inset

 (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-Main-Infos"
plural "false"
caps "false"
noprefix "false"

\end_inset

) a pour seule vocation d'afficher les différentes caractéristiques du plug-in
\begin_inset space ~
\end_inset

: version, heure de début d'exécution, et nombre d'autres informations,
 souvent dispensables ou incompréhensibles.
 Sa configuration exacte varie en fonction de l'évolution des versions.
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Module-System-Log"

\end_inset

Module 
\begin_inset Quotes cld
\end_inset

System Log
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-008.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-Sys-Log-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

System Log
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

System Log
\begin_inset Quotes crd
\end_inset

 permet l'affichage de messages générés par les différents processus.
 Sur la figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-Sys-Log-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, dont la capture a été effectuée immédiatement après le lancement du plug-in,
 différents messages indiquent successivement la version du système, l'heure
 de lancement, puis le fait qu'une sauvegarde de la configuration a été
 exécutée automatiquement par REAPER (ce qui lui permet la réinitialisation
 
\begin_inset Quotes cld
\end_inset

Reset to factory default
\begin_inset Quotes crd
\end_inset

), et enfin qu'un chargement d'un autre préréglage a été exécuté.
 Suite à ce chargement, le plug-in reconstruit certaines tables, et recharge
 certains fichiers de configuration.
 
\end_layout

\begin_layout Standard
De manière générale, ce module affiche nombre d'informations d'un grand
 intérêt, comme 
\begin_inset Quotes cld
\end_inset

Il est maintenant très exactement 22 heures
\begin_inset Quotes crd
\end_inset

, ou encore 
\begin_inset Quotes cld
\end_inset

Une grave erreur système est arrivée, il serait plus prudent d'évacuer la
 salle
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Il est possible de modifier certaines options d'affichage, au moyen d'un
 menu obtenu par un clic droit: passer à un affichage sur 1, 2, 3 ou 4 colonnes,
 augmenter ou diminuer l'espace entre les lignes, ou encore effacer l'écran.
\end_layout

\begin_layout Standard
Enfin, un certain nombre de commandes claviers sont accessibles, lorsque
 le curseur est dans le module :
\end_layout

\begin_layout Itemize
espace, ou 
\begin_inset Quotes cld
\end_inset

cr 
\begin_inset Quotes crd
\end_inset

: ajouter une ligne blanche au log.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

3
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

4
\begin_inset Quotes crd
\end_inset

 : afficher sur 1, 2, 3 ou 4 colonnes.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset

j
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

k
\begin_inset Quotes crd
\end_inset

 : déplacer l'ensemble des lignes vers le haut ou vers le bas.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset

down
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

up
\begin_inset Quotes crd
\end_inset

 : déplacer l'ensemble des lignes vers le haut ou vers le bas de dix positions.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset

z
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

left
\begin_inset Quotes crd
\end_inset

 : revenir à la dernière ligne affichée.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset

m
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

l
\begin_inset Quotes crd
\end_inset

 : augmenter ou diminuer l'intervalle entre les lignes.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset

t
\begin_inset Quotes crd
\end_inset

 : insérer date et heure dans le log.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset

v
\begin_inset Quotes crd
\end_inset

 : insérer les informations de version et configuration dans le log.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset

p
\begin_inset Quotes crd
\end_inset

 : si le script auxiliaire est actif, enregistrer le contenu du log dans
 un fichier texte (nom : 
\begin_inset Quotes cld
\end_inset

syslog
\begin_inset Quotes crd
\end_inset

 suivi de la date).
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Modules-Parameters"

\end_inset

Modules 
\begin_inset Quotes cld
\end_inset

Parameters
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-003.png
	lyxscale 70
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:Sliders-1"

\end_inset

Trois modules 
\begin_inset Quotes cld
\end_inset

Parameters
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-005.png
	lyxscale 70
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:Sliders-2"

\end_inset

Configuration du module 
\begin_inset Quotes cld
\end_inset

Parameters
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Il existe 8 modules 
\begin_inset Quotes cld
\end_inset

Parameters
\begin_inset Quotes crd
\end_inset

, notés 
\begin_inset Quotes cld
\end_inset

A
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

F
\begin_inset Quotes crd
\end_inset

, dont les fonctionnements sont identiques, chacun pouvant être configuré
 différemment.
 La figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GamePlayer:Sliders-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 montre trois exemples de configurations.
 Les valeurs des sliders sont contrôlées par la souris (clic gauche).
 Un clic droit (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GamePlayer:Sliders-2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) permet de remplacer le slider sur lequel on a cliqué par un autre, par
 un espace, de le supprimer ou de le déplacer vers le haut ou vers le bas.
 Cliquer sur l'entrée 
\begin_inset Quotes cld
\end_inset

(unset entry)
\begin_inset Quotes crd
\end_inset

 permet de rajouter un slider dans le module.
 Le menu permet aussi de configurer le module pour afficher une ou deux
 colonnes.
\end_layout

\begin_layout Standard
De manière générale, les sliders proposés à l'affichage correspondent aux
 différents paramètres du logiciel, dont la liste est donnée au chapitre
 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Liste-des-paramètres"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Le même paramètre peut être référencé dans différents modules, voire plusieurs
 fois dans le même module, si utile.
 Toutes les occurences d'un même paramètre sont synchronisées dans tous
 les affichages.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-PC-1.png
	lyxscale 60
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-PlayControl-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Play Control
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Module-Play-Control"

\end_inset

Module 
\begin_inset Quotes cld
\end_inset

Play Control
\begin_inset Quotes crd
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Module Play Control
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le module 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
Play Control
\series default
\emph default

\begin_inset Quotes crd
\end_inset

 (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-PlayControl-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) est constitué d'un PAD de 16 cellules.
 Son utilisation est liée au mode 
\begin_inset Quotes cld
\end_inset

génération automatique
\begin_inset Quotes crd
\end_inset

.
 Les cellules sont cliquables, et certains raccourcis clavier leur sont
 associés.
 Les cellules grisées sont celles dont le contenu n'est pas significatif
 pour le mode de jeu choisi.
\end_layout

\begin_layout Standard
Voici une description des différentes cellules (numérotées de gauche à droite
 et de haut en bas), et des interactions possibles avec elles.
\end_layout

\begin_layout Description
1
\begin_inset space ~
\end_inset

Auto-play
\begin_inset Index idx
status open

\begin_layout Plain Layout
Auto-play
\end_layout

\end_inset

 Mode 
\begin_inset Quotes cld
\end_inset

Auto-play
\begin_inset Quotes crd
\end_inset

, pouvant être 
\emph on
off
\emph default
 (grisé) ou 
\emph on
on
\emph default
 (vert clair).
 Lorsque 
\emph on
l'auto-play
\emph default
 est actif, il y a génération (aléatoire et réglable par différents paramètres)
 de lecture de clips.
 Le mode est activé ou désactivé par un clic gauche sur la cellule correspondant
e, ou par la touche 
\begin_inset Quotes cld
\end_inset


\family typewriter
<
\family default

\begin_inset Quotes crd
\end_inset

.
 Un clic droit verrouille tous les lecteurs et interrompt la génération
 automatique, de même que la touche 
\begin_inset Quotes cld
\end_inset

@
\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Description
2
\begin_inset space ~
\end_inset

Mode
\begin_inset space ~
\end_inset

global Actuellement, un seul mode global de fonctionnement existe, le mode
 
\begin_inset Quotes cld
\end_inset

Default
\begin_inset Quotes crd
\end_inset

.
 
\begin_inset Quotes cld
\end_inset

Default
\begin_inset Quotes crd
\end_inset

 indique que le studio est en mode de génération algorithmique par défaut.
 Dans ce mode, il est uniquement fait appel au générateur par défaut, qui,
 en gros, tire au hasard les clips à jouer.
 Son fonctionnement est décrit plus en détail ci-après.
 
\end_layout

\begin_layout Description
3
\begin_inset space ~
\end_inset

Sélection Cette cellule indique quelle sélection est appliquée sur les clips
 joués en mode 
\emph on
auto-play
\emph default
.
 La sélection s'opère au travers d'un menu, ouvert par un clic droit sur
 la cellule.
 Les options de ce choix sont les suivantes (sachant que 
\begin_inset Quotes cld
\end_inset

choisi
\begin_inset Quotes crd
\end_inset

 signifie ici 
\begin_inset Quotes cld
\end_inset

tiré au hasard
\begin_inset Quotes crd
\end_inset

)
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Description
Studio
\begin_inset space ~
\end_inset

Pad le prochain clip joué sera choisi dans les clips associés au 
\begin_inset Quotes cld
\end_inset


\emph on
Studio Play Pad
\emph default

\begin_inset Quotes crd
\end_inset

 (c.f.
 section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Module-Studio-Pads"
plural "false"
caps "false"
noprefix "false"

\end_inset

)
\end_layout

\begin_layout Description
Group le prochain clip joué sera choisi dans les clips associés au groupe
 dont le numéro est affiché dans la cellule 4.
\end_layout

\begin_layout Description
Bank le prochain clip joué sera choisi dans les clips associés au groupe
 et à la banque du groupe, dont les numéros respectifs sont affichés dans
 les cellules 4 et 5.
\end_layout

\begin_layout Description
Partiel le prochain clip joué sera choisi dans les clips associés au partiel
 dont le numéro est affiché dans la cellule 6.
\end_layout

\begin_layout Description
Clip le prochain clip joué sera le clip dont le numéro a été sélecté dans
 la cellule 14, en lui appliquant les caractéristiques du partiel dont le
 numéro est indiqué dans la cellule 6.
\end_layout

\begin_layout Description
Range le prochain clip joué sera choisi dans la sélection définie par les
 cellules 15 et 16, en leur appliquant les caractéristiques du partiel dont
 le numéro est indiqué dans la cellule 6.
\end_layout

\begin_layout Description
Any
\begin_inset space ~
\end_inset

Clip joue n'importe que clip du répertoire, avec les paramètres de jeu définis
 par le partiel choisi dans la cellule 6.
\end_layout

\begin_layout Description
Any
\begin_inset space ~
\end_inset

Bank Choisit au hasard une banque, ou plus précisément, un partiel, et joue
 un clip de ce partiel.
 Dans ce cas particulier, le choix dans l'ensemble des partiels est équiprobable.
\end_layout

\begin_layout Standard
Un clic gauche sur cette cellule joue un clip, choisi par le mode courant.
\end_layout

\end_deeper
\begin_layout Description
4
\begin_inset space ~
\end_inset

Groupe Cette cellule affiche le paramètre associé au mode de sélection indiqué
 dans la cellule 3.
 Ce paramètre est le numéro de groupe.
\end_layout

\begin_layout Description
5
\begin_inset space ~
\end_inset

Bank Cette cellule affiche le paramètre associé au mode de sélection indiqué
 dans la cellule 3.
 Ce paramètre est le numéro de banque.
\end_layout

\begin_layout Description
6
\begin_inset space ~
\end_inset

Partiel Cette cellule affiche le paramètre associé au mode de sélection
 indiqué dans la cellule 3.
 Ce paramètre est le numéro de partiel.
\end_layout

\begin_layout Description
7
\begin_inset space ~
\end_inset

Mode
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

Jeu (
\begin_inset Quotes cld
\end_inset

P.Mode
\begin_inset Quotes crd
\end_inset

 pour 
\begin_inset Quotes cld
\end_inset

Play Mode
\begin_inset Quotes crd
\end_inset

) Cette cellule permet de choisir un mode de jeu qui sera affecté au partiel
 0.
 Les deux cellules 7 et 8 sont activées lorsque le partiel 0 est sélectionné
 (cellule 6), en grisé sinon.
\end_layout

\begin_layout Description
8
\begin_inset space ~
\end_inset

Mode
\begin_inset space ~
\end_inset

d'espace (
\begin_inset Quotes cld
\end_inset

S.Mode
\begin_inset Quotes crd
\end_inset

 pour 
\begin_inset Quotes cld
\end_inset

Space Mode
\begin_inset Quotes crd
\end_inset

) Cette cellule permet de choisir un mode d'espace qui sera affecté au partiel
 0.
\end_layout

\begin_layout Description
9
\begin_inset space ~
\end_inset

Stop
\begin_inset space ~
\end_inset

Play Un clic gauche sur cette cellule permet d'interrompre tous les players
 actifs, un clic droit les interrompt également, mais de plus désactive
 le mode Autoplay.
\end_layout

\begin_layout Description
10
\begin_inset space ~
\end_inset

Players
\begin_inset space ~
\end_inset

actifs Cette cellule affiche à tout moment le nombre de players actifs.
\end_layout

\begin_layout Description
11
\begin_inset space ~
\end_inset

Dernier
\begin_inset space ~
\end_inset

Clip Cette cellule affiche à tout moment le numéro du dernier clip joué.
 Un clic gauche sur cette cellule rejoue à l'identique le clip.
\end_layout

\begin_layout Description
12
\begin_inset space ~
\end_inset

Modes Cette cellule affiche le mode de jeu et le mode d'espace du dernier
 clip joué.
\end_layout

\begin_layout Description
13
\begin_inset space ~
\end_inset

Erreur Cette cellule affiche le numéro de la dernière erreur survenue.
\end_layout

\begin_layout Description
14
\begin_inset space ~
\end_inset

Clip Cette cellule permet le choix d'un numéro de clip, qui est joué lorsque
 l'option 
\begin_inset Quotes cld
\end_inset

Clip
\begin_inset Quotes crd
\end_inset

 de la cellule 
\begin_inset Quotes cld
\end_inset

3
\begin_inset space ~
\end_inset

Sélection
\begin_inset Quotes crd
\end_inset

 est activée.
\end_layout

\begin_layout Description
15
\begin_inset space ~
\end_inset

et
\begin_inset space ~
\end_inset

16
\begin_inset space ~
\end_inset

Intervalle Ces deux cellules définissent un intervalle de numéros de clips,
 qui sera affecté au partiel 0.
\end_layout

\begin_layout Paragraph*
\begin_inset CommandInset label
LatexCommand label
name "par:Partiel-zéro"

\end_inset

Partiel zéro
\end_layout

\begin_layout Standard
C'est le seul partiel que l'on peut modifier interactivement, avec la possibilit
é de choisir le mode de jeu (cellule 7), le mode d'espace (cellule 8), et
 l'intervalle des clips (cellules 15 et 16).
 Les valeurs de 
\begin_inset Quotes cld
\end_inset


\emph on
Grp
\emph default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\emph on
Bnk
\emph default

\begin_inset Quotes crd
\end_inset

 sont également utilisées pour définir le partiel 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

.
 Ce partiel peut être référencé, comme tout autre partiel, dans le 
\begin_inset Quotes cld
\end_inset


\emph on
Studio Play Pad
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Paragraph*
\begin_inset CommandInset label
LatexCommand label
name "par:Générateur-algorithmique"

\end_inset

Générateur algorithmique par défaut
\end_layout

\begin_layout Standard
\begin_inset Quotes cld
\end_inset


\emph on
Default
\emph default

\begin_inset Quotes crd
\end_inset

 est la seule heuristique de jeu disponible à l'heure actuelle.
 Elle consiste à déclencher des sons tant que le nombre de clips joués simultané
ment est inférieur à la polyphonie choisie (réglée par le curseur 
\begin_inset Quotes cld
\end_inset


\emph on
Generators
\emph default

\begin_inset Quotes crd
\end_inset

, ajustable de 0 jusqu'au nombre de générateurs disponibles dans la session).
 Dans ce mode, le son choisi est déterminé par la valeur de la troisième
 cellule du pad.
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Module-Studio-Pads"

\end_inset

Module 
\begin_inset Quotes cld
\end_inset

Studio Play Pad
\begin_inset Index idx
status open

\begin_layout Plain Layout
Module Studio Play Pad
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Stud-1.png
	lyxscale 60
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-Studio-Play-Pad-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Studio Play Pad
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Ce module est spécifiquement conçu pour les expérimentations en studio,
 ou encore pour des performances en mode 
\begin_inset Quotes cld
\end_inset

live
\begin_inset Quotes crd
\end_inset

.
 Il affiche 64 cellules 
\begin_inset Quotes cld
\end_inset

cliquables
\begin_inset Quotes crd
\end_inset

 (clic gauche), arrangées sous la forme de 8 lignes par 8 colonnes, permettant,
 dans la mesure de la disponibilité des lecteurs, le lancement immédiat
 de la lecture d'un clip choisi dans une famille particulière, configurable
 individuellement pour chaque cellule.
 Chaque cellule (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-Studio-Play-Pad-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) peut ainsi jouer un clip spécifique, ou un clip extrait d'un groupe, d'une
 banque, d'un partiel, d'un intervalle, etc.
 Cette configuration s'effectue au moyen d'un menu, ouvert par un clic droit
 sur la cellule, puis en choisissant (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Interactions-typiques"
plural "false"
caps "false"
noprefix "false"

\end_inset

) une valeur appropriée pour un groupe, une banque, un clip, etc.
 Précisément, il est possible de définir les 
\begin_inset Quotes cld
\end_inset

familles
\begin_inset Quotes crd
\end_inset

 suivantes de clips
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
un partiel (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:partiels-banques-groupes"
plural "false"
caps "false"
noprefix "false"

\end_inset

), défini par son numéro.
 Il comporte des indications sur les modes de jeu et les modes d'espace,
 ainsi qu'un intervalle de clips.
 Un clip de cet intervalle est joué avec les paramètres définis dans le
 partiel.
 Dans l'exemple de la fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-Studio-Play-Pad-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, la première ligne comporte, de gauche à droite, cinq cellules, d'une couleur
 
\begin_inset Quotes cld
\end_inset

vert clair
\begin_inset Quotes crd
\end_inset

 (précisément, 
\begin_inset Quotes cld
\end_inset

Dark Sea Green
\begin_inset Quotes crd
\end_inset

) réglées sur les partiels 10, 0, 22, 13 et 42 respectivement.
 
\end_layout

\begin_layout Itemize
un groupe, défini par un numéro de partiel comportant ce groupe.
 La cellule comporte une coloration plus sombre (
\begin_inset Quotes cld
\end_inset

Dark Green 
\begin_inset Quotes crd
\end_inset

) que celle d'un partiel et affiche le numéro du groupe.
 Cliquer sur la cellule va provoquer la lecture d'un clip du groupe, tiré
 au hasard (ex
\begin_inset space ~
\end_inset

: ligne 2, cellule 2).
 
\end_layout

\begin_layout Itemize
un groupe et une banque, également définis par le numéro de partiel - cellule
 de couleur vert olive (
\begin_inset Quotes cld
\end_inset

Dark Olive Green
\begin_inset Quotes crd
\end_inset

).
 La cellule affiche les numéros du groupe et de la banque.
 Cliquer sur la cellule va provoquer la lecture d'un clip de la banque du
 groupe indiquée, tiré au hasard (ligne 3, cellule 2) ; rappelons qu'une
 banque peut être composée de plusieurs partiels.
\end_layout

\begin_layout Itemize
un clip spécifique.
 La cellule est jaune clair (
\begin_inset Quotes cld
\end_inset

Clear_Yellow
\begin_inset Quotes crd
\end_inset

) et comporte le numéro du clip (ligne 4, cellule 2).
 Ce clip va être joué avec les paramètres du partiel, même s'il ne fait
 pas partie des clips associés au partiel.
\end_layout

\begin_layout Itemize
un intervalle de numéros de clips.
 La cellule est jaune orangé (
\begin_inset Quotes cld
\end_inset

Goldenrod
\begin_inset Quotes crd
\end_inset

) et comporte les bornes de l'intervalle (ligne 4, cellule 6).
 Le clip, tiré au hasard dans l'intervalle, sera joué avec les paramètres
 du partiel, même s'il ne fait pas partie des clips associés au partiel.
\end_layout

\begin_layout Standard
Chaque touche peut être configurée en mode 
\begin_inset Quotes cld
\end_inset

jeu unique
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

jeu répétitif
\begin_inset Quotes crd
\end_inset

.
 On passe d'un mode à l'autre par 
\emph on
cmd-clic-gauche
\emph default
 sur la cellule.
 Celle-ci est marquée d'un liseret colorée lorsqu'elle se trouve en mode
 
\begin_inset Quotes cld
\end_inset

jeu répétitif
\begin_inset Quotes crd
\end_inset

 (ex: ligne 2, cellule 6, ou ligne 3, cellule 3).
 
\end_layout

\begin_layout Standard
En mode 
\begin_inset Quotes cld
\end_inset

jeu unique
\begin_inset Quotes crd
\end_inset

, un clic déclenche une lecture unique d'un clip, extrait d'une famille
 spécifique.
 Plusieurs clics successifs vont lancer autant de lectures indépendantes
 de clips extraits de cette même famille.
 
\end_layout

\begin_layout Standard
En mode 
\begin_inset Quotes cld
\end_inset

jeu répétitif
\begin_inset Quotes crd
\end_inset

, le clip dont la lecture a été déclenchée est répété jusqu'à ce qu'un nouveau
 clic sur la même cellule désactive la répétition.
 Tant que le clip joue, la cellule prend la forme d'un cercle pour indiquer
 le mode 
\begin_inset Quotes cld
\end_inset

répétition
\begin_inset Quotes crd
\end_inset

 (ex : ligne 1, cellule 6).
\end_layout

\begin_layout Standard
Il est possible d'associer ce module à un contrôleur MIDI externe, afin
 de pouvoir déclencher chaque son depuis ce contrôleur.
 
\end_layout

\begin_layout Standard
Signalons enfin que le module, tout en n'affichant que 64 cellules, peut
 en comporter plus.
 Les raccourcis claviers 
\begin_inset Quotes cld
\end_inset

(
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

)
\begin_inset Quotes crd
\end_inset

 permettent de déplacer de deux lignes la partie visible des cellules, et
 
\begin_inset Quotes cld
\end_inset

>
\begin_inset Quotes crd
\end_inset

 se repositionne tout en haut.
\end_layout

\begin_layout Subsection
Commandes globales
\end_layout

\begin_layout Standard
Les touches du clavier 
\begin_inset Quotes cld
\end_inset


\series bold
a
\series default

\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset


\series bold
i
\series default

\begin_inset Quotes crd
\end_inset

 permettent de jouer les clips de la première ligne du pad, les touches
 
\begin_inset Quotes cld
\end_inset


\series bold
q
\series default

\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset


\series bold
k
\series default

\begin_inset Quotes crd
\end_inset

 ceux de la seconde (association réalisée sur un clavier Mac français :-).
\end_layout

\begin_layout Description
w passe temporairement les cellules du PAD en mode 
\begin_inset Quotes cld
\end_inset

partiel
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
v passe temporairement les cellules du PAD en mode 
\begin_inset Quotes cld
\end_inset

groupe
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
b passe temporairement les cellules du PAD en mode 
\begin_inset Quotes cld
\end_inset

banque
\begin_inset Quotes crd
\end_inset

 (groupe et banque dans le groupe)
\end_layout

\begin_layout Description
c passe temporairement les cellules du PAD en mode 
\begin_inset Quotes cld
\end_inset

clip
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
l passe temporairement les cellules du PAD en mode 
\begin_inset Quotes cld
\end_inset

intervalle
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
x passe temporairement les cellules du PAD en mode 
\begin_inset Quotes cld
\end_inset

affichage des erreurs
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Subsection
Commandes locales
\end_layout

\begin_layout Standard
Un clic gauche sur une cellule provoque le lancement du clip correspondant,
 ou (mode 
\begin_inset Quotes cld
\end_inset

jeu répétitif
\begin_inset Quotes crd
\end_inset

) l'arrêt de celui-ci.
 
\emph on
cmd-clic-gauche
\emph default
 sur la cellule change le mode de jeu de la cellule (unique ou répétitif).
\end_layout

\begin_layout Standard
Un clic droit déclenche un menu, permettant de choisir le mode (clip unique,
 groupe, groupe et banque, etc.) dans lequel opère la cellule.
\end_layout

\begin_layout Standard
Un clic central passe au mode 
\begin_inset Quotes cld
\end_inset

suivant
\begin_inset Quotes crd
\end_inset

 de la cellule.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Module-Sound-Units"

\end_inset

Module 
\begin_inset Quotes cld
\end_inset

Sound Units
\begin_inset Index idx
status open

\begin_layout Plain Layout
Module Sound Units
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-SU-2.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-SoundUnits-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset


\emph on
Sound Units
\emph default

\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset


\emph on
Sound Units
\emph default

\begin_inset Quotes crd
\end_inset

 (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-SoundUnits-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) est constitué d'un PAD affichant l'état des différents players.
 Ce nombre est variable, et à tout instant il est possible d'ajouter ou
 de supprimer des pistes comportant des players dans leurs effets.
 Dans la figure représentée, il y a 38 players actifs, numérotés de 1 à
 38, représentés par les cellules d'un PAD de taille 5 par 8, les 2 dernières
 cellules, grisées, étant inactives.
\end_layout

\begin_layout Standard
Chaque cellule représente l'un des players et affiche son état : 
\begin_inset Quotes cld
\end_inset

Player
\begin_inset Quotes crd
\end_inset

 (fond vert olive, première entrée par exemple) pour un player inactif,
 ou encore 
\begin_inset Quotes cld
\end_inset

Loop
\begin_inset Quotes crd
\end_inset

 (fond rouge pâle - ligne 4 entrée 1, clip 3219) ou 
\begin_inset Quotes cld
\end_inset

Play
\begin_inset Quotes crd
\end_inset

 (fond bleu, ligne 3, entrée 7, clip 3211) pour un player jouant un clip
 en mode loop ou en mode play, en précisant le numéro du clip joué.
\end_layout

\begin_layout Standard
Lorsqu'un player est choisi pour jouer un clip, il devient actif, charge
 le clip en mémoire, le joue, puis redevient inactif.
 Il est possible de 
\emph on
verrouiller
\emph default
 un player.
 La case correspondante est alors entourée d'un petit liseret, et sa teinte
 est changée pour indiquer l'état du player (c'est le cas de l'entrée 5,
 ligne 1, clip 2516, ou de l'entrée 4, ligne 3, clip 2502).
 Dans ce cas, le clip est joué en permanence, jusqu'à ce que le lecteur
 soit déverrouillé.
 Enfin, un clip peut être verrouillé, et en mode silencieux
\begin_inset space ~
\end_inset

: le player est actif, mais son volume de sortie est réglé à 0 (cas du player
 18; ligne 3 entrée 2, clip 2511, ou du player 28, entrée 4, ligne 4, clip
 2127).
\end_layout

\begin_layout Standard
Lorsqu'un player a terminé son travail, il redevient inactif.
 La couleur affichée passe alors progressivement du bleu au vert (ex: Players
 17, 15, 13) ou du rouge au vert (Players 22, 12, 4, 29).
 Un player peut être indisponible (on a supprimé sa piste, ou celle-ci a
 été mutée).
 Il s'affiche alors avec une couleur violette.
 Ainsi, pour cette capture d'écran, les players 11 et 16 ont été mutés.
 
\end_layout

\begin_layout Standard
Le module propose un certain nombre de commandes globales (s'appliquant
 à tous les players, quelle que soit la position de la souris à l'intérieur
 du module), ou des commandes locales, s'appliquant à la cellule - et donc
 au player correspondant - sur laquelle est positionné le pointeur de la
 souris.
\end_layout

\begin_layout Subsection
Commandes globales
\end_layout

\begin_layout Description
@ Verrouille tous les players, coupe l'autoplay.
\end_layout

\begin_layout Description
# Déverrouille tous les players.
\end_layout

\begin_layout Description
del Interrompt tous les players.
\end_layout

\begin_layout Description
bs Interrompt l'un des players.
\end_layout

\begin_layout Description
ctrl-shift-left-clic Verrouille tous les players, coupe l'autoplay.
\end_layout

\begin_layout Description
shift-left-clic Déverrouille tous les players.
\end_layout

\begin_layout Description
f 
\begin_inset Quotes cld
\end_inset

full volume
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

: rétablit le volume standard de jeu des clips actifs
\end_layout

\begin_layout Description
g coupe ou lance l'autoplay.
\end_layout

\begin_layout Description
h 
\begin_inset Quotes cld
\end_inset

half volume
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

: passe les clips actifs en 
\begin_inset Quotes cld
\end_inset

demi
\begin_inset Quotes crd
\end_inset

 volume.
 
\end_layout

\begin_layout Description
i passe les changements de volumes en mode 
\begin_inset Quotes cld
\end_inset

immédiat
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
l Verrouille tous les players, coupe l'autoplay.
\end_layout

\begin_layout Description
n commute l'affichage des players par numéro de player, ou par numéro de
 piste.
\end_layout

\begin_layout Description
o passe les changements de volumes en mode 
\begin_inset Quotes cld
\end_inset

semi-rapide
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
p passe les changements de volumes en mode 
\begin_inset Quotes cld
\end_inset

ultra lent
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
q commute entre affichage des numéros de players ou de piste, et l'affichage
 des numéros des derniers clips joués.
\end_layout

\begin_layout Description
r Déverrouille, démute tous les players et relance l'autoplay.
\end_layout

\begin_layout Description
u Verrouille et démute tous les players.
\end_layout

\begin_layout Description
w Déverrouille tous les players.
\end_layout

\begin_layout Description
z Verrouille et mute tous les players, coupe l'autoplay.
\end_layout

\begin_layout Subsection
Commandes locales
\end_layout

\begin_layout Standard
Elles s'appliquent au player sur lequel est positionné la souris
\end_layout

\begin_layout Description
left-clic sélectionne le player pour édition éventuelle dans le module 
\begin_inset Quotes cld
\end_inset

Dynamic Play Parameters
\begin_inset Quotes crd
\end_inset

.
 Il affiche alors le numéro du dernier clip joué.
 Si le player est actif, il est en outre verrouillé
\end_layout

\begin_layout Description
right-clic Si le player est inactif, le dernier clip joué par ce player
 est relancé.
 Si le player est actif, cette action le verrouille, et le mute ou le démute.
\end_layout

\begin_layout Description
ctrl-right-clic tue le player courant, qui redevient inactif.
\end_layout

\begin_layout Description
a affiche les informations détaillées sur le player concerné dans le module
 
\begin_inset Quotes cld
\end_inset

Générateur A
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
b affiche les informations détaillées sur le player concerné dans le module
 
\begin_inset Quotes cld
\end_inset

Générateur B
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
c affiche les informations détaillées sur le player concerné dans le module
 
\begin_inset Quotes cld
\end_inset

Générateur C
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
d affiche les informations détaillées sur le player concerné dans le module
 
\begin_inset Quotes cld
\end_inset

Générateur D
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
e rejoue le clip précédemment joué par ce lecteur.
\end_layout

\begin_layout Description
E rejoue et verrouille le clip précédemment joué par ce lecteur.
\end_layout

\begin_layout Description
k 
\begin_inset Quotes cld
\end_inset

kill
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

: interrompt le player courant, qui redevient inactif.
\end_layout

\begin_layout Description
m verrouille et mute ou démute le player.
\end_layout

\begin_layout Description
s passe en mode 
\begin_inset Quotes cld
\end_inset

solo
\begin_inset Quotes crd
\end_inset

 le player correspondant, et le sélectionne pour édition éventuelle dans
 le module 
\begin_inset Quotes cld
\end_inset

Dynamic Play Parameters
\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Description
t verrouille/déverrouille le player
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Module-Generator-X"

\end_inset

Module 
\begin_inset Quotes cld
\end_inset

Displayer
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Gen-1.tiff
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-Generator-B-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Displayer A
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Il existe en fait 4 modules identiques, les 
\begin_inset Quotes cld
\end_inset


\emph on
Displayers
\emph default

\begin_inset Quotes crd
\end_inset

 A, B, C, D.
 Chacun de ces modules (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-Generator-B-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) peut afficher l'état détaillé de l'un des générateurs sonores (les seuls
 players pour l'instant), dont les états sont résumés dans le module 
\begin_inset Quotes cld
\end_inset


\emph on
Sound Units
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Sound Units
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 - c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Module-Sound-Units"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Chaque displayer comporte un PAD, dont la première cellule affiche 
\begin_inset Quotes cld
\end_inset

Reader
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Last
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Edit
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

Selected
\begin_inset Quotes crd
\end_inset

.
 On passe d'un mode à un autre par un clic (gauche ou droit) sur la cellule.
 En mode 
\begin_inset Quotes cld
\end_inset

Reader
\begin_inset Quotes crd
\end_inset

, il y a affichage permanent du lecteur indiqué.
 En mode 
\begin_inset Quotes cld
\end_inset

Last
\begin_inset Quotes crd
\end_inset

, il y a affichage du dernier lecteur actif.
 En mode 
\begin_inset Quotes cld
\end_inset

Selected
\begin_inset Quotes crd
\end_inset

, il y a affichage du dernier lecteur sélecté dans le module 
\begin_inset Quotes cld
\end_inset


\emph on
Sound Units
\emph default

\begin_inset Quotes crd
\end_inset

.
 Enfin, en mode 
\begin_inset Quotes cld
\end_inset

Edit
\begin_inset Quotes crd
\end_inset

, il y a affichage permanent du lecteur indiqué, complété d'un certain nombre
 de sliders, permettant d'influer en temps réel sur le fonctionnement du
 lecteur.
 
\end_layout

\begin_layout Standard
La seconde cellule indique le numéro du player affiché.
 On passe au lecteur suivant par un clic droit, au lecteur précédent par
 un clic gauche.
\end_layout

\begin_layout Standard
La troisième cellule affiche le numéro du clip joué par le player, la cellule
 4 indique que le numéro du clip affiché est celui du clip actuellement
 joué par le player, la cellule 5 indique le numéro de configuration des
 canaux (et donc des haut-parleurs) utilisés, et la cellule 6 va proposer
 certains réglages qui seront décrits ultérieurement.
\end_layout

\begin_layout Standard
Le reste du module est consacré à l'affichage des caractéristique du clip
 joué, et des réglages correspondants.
\end_layout

\begin_layout Standard
Les informations affichées, et les contrôles disponibles sont modulables.
 Un clic droit sur l'un des affichages, ou sur l'un des sliders, ou sur
 l'entrée spéciale 
\begin_inset Quotes cld
\end_inset


\family typewriter
(unset
\begin_inset space ~
\end_inset

entry)
\family default

\begin_inset Quotes crd
\end_inset

 ouvre un menu qui permet d'ajuster les informations affichées à ses besoins
 du moment.
\end_layout

\begin_layout Paragraph*
Note
\end_layout

\begin_layout Standard
Ce module est obsolète pour l'instant, n'ayant pas encore été adapté à la
 nouvelle version des players.
 
\end_layout

\begin_layout Subsection
Configuration des afficheurs
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Gen-2.tiff
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-Generator-B-2"

\end_inset

Menu de configuration des afficheurs
\end_layout

\end_inset


\end_layout

\end_inset

Les 
\begin_inset Quotes cld
\end_inset

afficheurs
\begin_inset Quotes crd
\end_inset

 sont répartis en quatre colonnes, et vont présenter des informations relatives
 au player ou au clip en cours de jeu.
 Leur description complète est explicitée dans la sections consacrée aux
 paramètres du 
\begin_inset Quotes cld
\end_inset

Game Master
\begin_inset Quotes crd
\end_inset

.
 La figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-Generator-B-2"
plural "false"
caps "false"
noprefix "false"

\end_inset

 montre le menu de configuration des afficheurs.
 Il est déclenché par un clic droit sur l'un des afficheurs, ou sur une
 entrée notée 
\begin_inset Quotes cld
\end_inset

(unset entry)
\begin_inset Quotes crd
\end_inset

.
 Le menu lui-même va permettre d'effectuer l'une des actions suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
déplacer un afficheur, vers le haut, le bas, la gauche ou la droite
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
supprimer l'afficheur sur lequel on a cliqué (
\begin_inset Quotes cld
\end_inset

remove
\begin_inset Quotes crd
\end_inset

), ou encore tous les afficheurs (
\begin_inset Quotes cld
\end_inset

clear all
\begin_inset Quotes crd
\end_inset

)
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
remplacer l'afficheur sur lequel on a cliqué par un autre sélectionné dans
 la liste, ou, si l'on a cliqué sur une entrée 
\begin_inset Quotes cld
\end_inset

(Unset)
\begin_inset Quotes crd
\end_inset

, d'ajouter un nouvel afficheur en fin de liste, ou encore (
\begin_inset Quotes cld
\end_inset

blank
\begin_inset Quotes crd
\end_inset

), d'insérer une ligne blanche pour augmenter la lisibilité.
 
\end_layout

\begin_layout Itemize
présenter les afficheurs sur une ou deux colonnes.
\end_layout

\begin_layout Standard
On notera qu'il est possible, si cela est jugé utile, d'afficher plusieurs
 fois la même information à différentes positions.
\end_layout

\begin_layout Subsection
Configuration des contrôleurs
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Gen-3.tiff
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-Generator-B-3"

\end_inset

Menu de configuration des contrôleurs
\end_layout

\end_inset


\end_layout

\end_inset

Tout comme les afficheurs, la présentation des contrôleurs (réglages de
 type 
\emph on
slider
\emph default
 permettant de modifier interactivement le comportement des players) est
 modulable au moyen d'un menu spécialisé (c.f.
 figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GM-Generator-B-3"
plural "false"
caps "false"
noprefix "false"

\end_inset

), qui va permettre d'effectuer l'une des actions suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
déplacer un contrôleur, vers le haut ou vers le bas
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
supprimer un contrôleur sur lequel on a cliqué (
\begin_inset Quotes cld
\end_inset

remove
\begin_inset Quotes crd
\end_inset

), ou encore tous les contrôleurs (
\begin_inset Quotes cld
\end_inset

clear all
\begin_inset Quotes crd
\end_inset

)
\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Itemize
remplacer le contrôleur sur lequel on a cliqué par un autre sélectionné
 dans la liste, ou, si l'on a cliqué sur une entrée 
\begin_inset Quotes cld
\end_inset

(Unset)
\begin_inset Quotes crd
\end_inset

, d'ajouter un nouveau contrôleur en fin de liste, ou encore (
\begin_inset Quotes cld
\end_inset

blank
\begin_inset Quotes crd
\end_inset

), d'insérer une ligne blanche pour augmenter la lisibilité.
 
\end_layout

\begin_layout Itemize
présenter les contrôleurs sur une ou deux colonnes.
\end_layout

\begin_layout Subsection
Réglages globaux
\end_layout

\begin_layout Standard
Le menu 
\begin_inset Quotes cld
\end_inset

Settings
\begin_inset Quotes crd
\end_inset

, obtenu par un clic droit dans la cellule de ce nom, va permettre différents
 types d'interactions avec les players.
 
\end_layout

\begin_layout Standard
Rappelons ici quelques notions
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
les 
\begin_inset Quotes cld
\end_inset

Players
\begin_inset Quotes crd
\end_inset

 génèrent un signal sonore à partir de différents réglages, dont le numéro
 du clip à jouer.
 Ces réglages leur sont transmis par le 
\begin_inset Quotes cld
\end_inset

Game Master
\begin_inset Quotes crd
\end_inset

 en fonction des algorithmes utilisés.
\end_layout

\begin_layout Itemize
chaque 
\begin_inset Quotes cld
\end_inset

Displayer
\begin_inset Quotes crd
\end_inset

 peut afficher l'état d'un player.
 L'affichage des réglages d'un player est déterminé par le 
\begin_inset Quotes cld
\end_inset

layout
\begin_inset Quotes crd
\end_inset

 du displayer, c'est à dire la mise en page, configurée par l'utilisateur,
 des contrôleurs et des afficheurs.
\end_layout

\begin_layout Itemize
les 
\begin_inset Quotes cld
\end_inset

Réglages
\begin_inset Quotes crd
\end_inset

 déterminent eux la manière dont un clip va être joué par un player.
\end_layout

\begin_layout Standard
Il existe simultanément 8 layouts, nommés de 
\begin_inset Quotes cld
\end_inset

A
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

H
\begin_inset Quotes crd
\end_inset

.
 Les layouts 
\begin_inset Quotes cld
\end_inset

A
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

D
\begin_inset Quotes crd
\end_inset

 sont utilisés pour la présentation des 
\begin_inset Quotes cld
\end_inset

Displayers
\begin_inset Quotes crd
\end_inset

 
\begin_inset Quotes cld
\end_inset

A
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

D
\begin_inset Quotes crd
\end_inset

.
 Les layouts 
\begin_inset Quotes cld
\end_inset

E
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

F
\begin_inset Quotes crd
\end_inset

 sont conservés dans un préréglage global du 
\begin_inset Quotes cld
\end_inset

Game Master
\begin_inset Quotes crd
\end_inset

, les layouts 
\begin_inset Quotes cld
\end_inset

G
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

H
\begin_inset Quotes crd
\end_inset

 sont propres à une session, et peuvent être utilisés comme données temporaires
 pour échanger des layouts entre deux préréglages.
 Il est possible (au moyen du menu 
\begin_inset Quotes cld
\end_inset

Settings
\begin_inset Quotes crd
\end_inset

), de copier un layout depuis un autre.
\end_layout

\begin_layout Standard
Chaque 
\begin_inset Quotes cld
\end_inset

Réglage
\begin_inset Quotes crd
\end_inset

 est propre à un player, et peut être modifié interactivement au moyen du
 displayer.
 Le menu 
\begin_inset Quotes cld
\end_inset

Settings
\begin_inset Quotes crd
\end_inset

 va permettre
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
de relancer l'exécution d'un player, avec les derniers paramètres qui lui
 ont été transmis, en mode 
\begin_inset Quotes cld
\end_inset

Play
\begin_inset Quotes crd
\end_inset

 ou en mode 
\begin_inset Quotes cld
\end_inset

Loop
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
de changer le numéro du clip utilisé par le player, ou le numéro de la configura
tion de HP utilisée.
\end_layout

\begin_layout Itemize
de dupliquer un réglage, en le transmettant à l'un des players inactifs.
\end_layout

\begin_layout Section
Module 
\begin_inset Quotes cld
\end_inset

Clips Settings
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GPLM-clips-settings.tiff
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Module-Clips-Settings"

\end_inset

Modules
\begin_inset space ~
\end_inset

: Clips Settings
\end_layout

\end_inset


\end_layout

\end_inset

Ce module (c.f.
 figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Module-Clips-Settings"
plural "false"
caps "false"
noprefix "false"

\end_inset

) propose l'affichage de certaines propriétés des clips, et permet de recharger
 le fichier de configuration des 
\emph on
volumes
\emph default
 des clips, de nom 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-Clips.mSL
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
config-Clips.mSL
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

.
 Il contient un 
\emph on
pad
\emph default
 unique, d'une seule ligne, dont les cellules, de gauche à droite, ont les
 fonctions suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
1 – affichage du numéro de clip courant.
 Ce numéro n'est lié à aucune action spécifique du reste de l'application.
 On peut le modifier au moyen des interactions usuelles (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Interactions-typiques"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Itemize
2 – affichage de la valeur de correction de volume appliquée au clip corresponda
nt.
 Cette cellule n'est pas modifiable.
\end_layout

\begin_layout Itemize
3 – affichage du nombre de canaux du clip et de sa durée.
 Cette cellule n'est pas modifiable.
\end_layout

\begin_layout Itemize
4 – affichage du type du clip et de sa fréquence d'échantillonage.
 Celle cellule n'est pas modifiable.
\end_layout

\begin_layout Itemize
5 – affichage du nom du répertoire des clips.
\end_layout

\begin_layout Itemize
6 – numéro de version du fichier 
\begin_inset Quotes cld
\end_inset

config-Clips.mSL
\begin_inset Quotes crd
\end_inset

 si celle-ci est précisée dans l'en-tête du clip.
\end_layout

\begin_layout Itemize
7 – nombre de clips concernés par les modifications décrites dans le fichier
 
\begin_inset Quotes cld
\end_inset

config-Clips.mSL
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
8 – bouton, permettant (clic gauche) de recharger le fichier 
\begin_inset Quotes cld
\end_inset

config-Clips.mSL
\begin_inset Quotes crd
\end_inset

, après une modification éventuelle de celui-ci au moyen d'un éditeur extérieur.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Ce bouton devient 
\begin_inset Quotes cld
\end_inset

Remove
\begin_inset Quotes crd
\end_inset

 si l'on appuie sur 
\begin_inset Quotes cld
\end_inset

ctrl
\begin_inset Quotes crd
\end_inset

.
 Cliquer a pour effet d'effacer le nom du fichier de configuration.
 En cas de réinitialisation, aucun fichier ne sera rechargé.
 
\end_layout

\begin_layout Itemize
Le bouton devient 
\begin_inset Quotes cld
\end_inset

Reset
\begin_inset Quotes crd
\end_inset

 si l'on appuie sur 
\begin_inset Quotes cld
\end_inset

alt
\begin_inset Quotes crd
\end_inset

.
 Cliquer a pour effet de réinitialiser le nom du fichier de configuration
 à 
\begin_inset Quotes cld
\end_inset

config-Clips.mSL
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
Glisser-déposer un fichier 
\begin_inset Quotes cld
\end_inset


\emph on
mSL
\emph default

\begin_inset Quotes crd
\end_inset

 à l'intérieur du cadre du module remplace le nom du fichier de configuration
 par celui du fichier qui vient d'être déposé.
 Si l'on appuie sur 
\begin_inset Quotes cld
\end_inset

alt
\begin_inset Quotes crd
\end_inset

 durant cette opération, ce nouveau fichier de configuration est également
 exécuté, changeant immédiatement les caractéristiques des clips.
 Notons que l'opération entraîne également un nouveau scan de l'ensemble
 des clips (celui-ci s'exécutant en parallèle avec les autres opérations
 du Game Master).
\end_layout

\end_deeper
\begin_layout Standard
Si une erreur est détectée lors de la lecture du fichier 
\begin_inset Quotes cld
\end_inset

config-Clips.mSL
\begin_inset Quotes crd
\end_inset

, la couleur des deux dernières cellules passe au rouge foncé, et l'avant-derniè
re cellule affiche le numéro de l'erreur détectée, ainsi que le dernier
 numéro 
\begin_inset Quotes cld
\end_inset

valide
\begin_inset Quotes crd
\end_inset

 de clip rencontré dans le fichier, indications permettant de corriger celui-ci.
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Module-HP-Configuration"

\end_inset

Module 
\begin_inset Quotes cld
\end_inset

HP Configuration
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-HP-Conf-1.tiff
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-HP-Conf-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

HP Configuration
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

HP Configuration
\begin_inset Quotes crd
\end_inset

 (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-HP-Conf-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) permet l'affichage des différentes configurations de haut-parleurs, ou
 plus précisément, de canaux de sorties, qui, en général, alimentent directement
 les haut-parleurs.
 Les configurations sont décrites par un fichier texte externe (c.f.
 section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Configuration-des-canaux-hp"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Le nom par défaut de ce fichier externe est 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-HP.mSL
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
config-HP.mSL
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

, mais d'autres fichiers de configuration peuvent être choisis.
 Il suffit d'exécuter un clic-droit sur le bouton 
\begin_inset Quotes cld
\end_inset

Reload
\begin_inset Quotes crd
\end_inset

 pour choisir un autre fichier texte, qui sera utilisé comme configuration
 des HP.
\end_layout

\begin_layout Itemize
La première cellule affiche le numéro d'une configuration de haut-parleur.
 On passe aux configurations précédentes ou suivantes par des 
\emph on
clic-gauche
\emph default
 et 
\emph on
clic-droit
\emph default
, et l'on peut aussi taper directement, lorsque le pointeur de la souris
 est dans cette première cellule, le numéro de la configuration que l'on
 veut visualiser.
\end_layout

\begin_layout Itemize
La seconde cellule permet de choisir le mode de visualisation d'une configuratio
n, sous la forme de la liste des HP, ou sous la forme de la position de
 ces HP.
 La troisième cellule indique le nombre de HP de la configuration.
\end_layout

\begin_layout Itemize
La sixième cellule indique le numéro de version du fichier de configuration,
 la septième précise sous la forme 
\begin_inset Quotes cld
\end_inset


\emph on
N\SpecialChar menuseparator
P
\emph default

\begin_inset Quotes crd
\end_inset

 le nombre total de HP, 
\emph on
N
\emph default
, et le nombre de configurations définies, 
\emph on
P
\emph default
.
\end_layout

\begin_layout Itemize
La dernière cellule permet, par un 
\emph on
clic-gauche
\emph default
, de recharger le fichier de configuration (après modification éventuelle
 de ce dernier), et par un 
\emph on
clic-droit
\emph default
 de choisir un autre fichier, dont le nom sera dès lors attaché au préréglage.
\end_layout

\begin_deeper
\begin_layout Itemize
Ce bouton devient 
\begin_inset Quotes cld
\end_inset

Remove
\begin_inset Quotes crd
\end_inset

 si l'on appuie sur 
\begin_inset Quotes cld
\end_inset

ctrl
\begin_inset Quotes crd
\end_inset

.
 Cliquer a pour effet d'effacer le nom du fichier de configuration.
 En cas de réinitialisation, aucun fichier ne sera rechargé, mais une configurat
ion par défaut sera créée, appropriée à une utilisation stéréo.
\end_layout

\begin_layout Itemize
Le bouton devient 
\begin_inset Quotes cld
\end_inset

Reset
\begin_inset Quotes crd
\end_inset

 si l'on appuie sur 
\begin_inset Quotes cld
\end_inset

alt
\begin_inset Quotes crd
\end_inset

.
 Cliquer a pour effet de réinitialiser le nom du fichier de configuration
 à 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-HP.mSL
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
Glisser-déposer un fichier 
\begin_inset Quotes cld
\end_inset


\emph on
mSL
\emph default

\begin_inset Quotes crd
\end_inset

 à l'intérieur du cadre du module remplace le nom du fichier de configuration
 par celui du fichier qui vient d'être déposé.
 Si l'on appuie sur 
\begin_inset Quotes cld
\end_inset

alt
\begin_inset Quotes crd
\end_inset

 durant cette opération, ce nouveau fichier de configuration est également
 exécuté, changeant immédiatement les caractéristiques de la configuration
 des HP.
\end_layout

\end_deeper
\begin_layout Standard
Si le fichier de configuration comporte une erreur de syntaxe, ces dernières
 cellules sont affichées en rouge, et indiquent le numéro de la dernière
 configuration valide rencontrée, et un numéro d'erreur.
 En général, ces deux indications suffisent pour corriger le fichier dans
 un éditeur externe, et le recharger immédiatement.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Module-Space-Modes"

\end_inset

Module 
\begin_inset Quotes cld
\end_inset

Space Modes
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-006.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:space-modes-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Space Modes
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Ce module (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GamePlayer:space-modes-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) permet d'afficher les différents modes d'espace disponibles dans la configurat
ion.
 Les modes d'espace sont décrits par un fichier texte externe, dont le nom
 par défaut est 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-SModes.mSL
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
config-SModes.mSL
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

, mais d'autres fichiers de configuration peuvent être choisis.
 Il suffit d'exécuter un clic-droit sur le bouton 
\begin_inset Quotes cld
\end_inset

Reload
\begin_inset Quotes crd
\end_inset

 pour choisir un autre fichier texte, qui sera utilisé comme configuration
 des modes d'espace.
\end_layout

\begin_layout Standard
La partie haute du module comporte un 
\emph on
pad
\emph default
 d'une ligne.
 La première cellule indique le numéro de la configuration affichée.
 On passe d'un mode au suivant ou au précédent par un clic (droit ou gauche)
 dans la cellule.
 Le numéro de la configuration peut aussi être modifié grâce au clavier,
 lorsque le pointeur de la souris est à l'intérieur du module
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
flèches gauche et droite, pour passer au numéro de configuration précédent
 ou suivant, flèches haute et basses pour se déplacer de 10 en 10.
\end_layout

\begin_layout Itemize
chiffres, pour taper un numéro de configuration à afficher.
\end_layout

\begin_layout Standard
Les cellules 2, 3, 4, 5 sont inutilisées, la cellule 6 indique la version
 du fichier de définition, la cellule 7 nombre de modes définis dans le
 fichier, et le nombre total d'entrées disponibles, et la cellule 8 comporte
 le bouton 
\begin_inset Quotes cld
\end_inset

Reload
\begin_inset Quotes crd
\end_inset

.
 Un clic gauche recharge le fichier de définition (utile si on vient de
 le modifier avec un éditeur externe), un clic droit permet de choisir,
 avec un menu, un nouveau fichier de définition.
\end_layout

\begin_layout Standard
Sous le 
\emph on
pad
\emph default
, sont affichés divers indicateurs décrivant les caractéristiques du mode
 d'espace : numéro de la configuration de haut-parleurs à utiliser (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Module-HP-Configuration"
plural "false"
caps "false"
noprefix "false"

\end_inset

), nombre de HP minimal et maximal à utiliser, modes de ces HP (en fait,
 indication inutilisée), indicateurs associés à ce mode.
\end_layout

\begin_layout Section
Module 
\begin_inset Quotes cld
\end_inset

Play Modes
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-007.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:play-modes-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Play Modes
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Ce module (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GamePlayer:play-modes-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) permet les différents modes de jeu dans la configuration.
 Les modes de jeu sont décrits par un fichier texte externe, dont le nom
 par défaut est 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-PModes.mSL
\begin_inset Index idx
status open

\begin_layout Plain Layout
config-PModes.mSL
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, mais d'autres fichiers de configuration peuvent être choisis.
 Il suffit d'exécuter un clic-droit sur le bouton 
\begin_inset Quotes cld
\end_inset

Reload
\begin_inset Quotes crd
\end_inset

 pour choisir un autre fichier texte, qui sera utilisé comme configuration
 des modes de jeu.
\end_layout

\begin_layout Standard
La partie haute du module comporte un 
\emph on
pad
\emph default
 d'une ligne.
 La première cellule indique le numéro de la configuration affichée.
 On passe d'un mode au suivant ou au précédent par un clic (droit ou gauche)
 dans la cellule.
 Le numéro de la configuration peut aussi être modifié grâce au clavier,
 lorsque le pointeur de la souris est à l'intérieur du module
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
flèches gauche et droite, pour passer au numéro de configuration précédent
 ou suivant, flèches haute et basse pour se déplacer de 10 en 10.
\end_layout

\begin_layout Itemize
chiffres, pour taper un numéro de configuration à afficher.
\end_layout

\begin_layout Standard
Les cellules 2, 3, 4, 5 sont inutilisées, la cellule 6 indique la version
 du fichier de définition, la cellule 7 nombre de modes définis dans le
 fichier, et le nombre total d'entrées disponibles, et la cellule 8 comporte
 le bouton 
\begin_inset Quotes cld
\end_inset

Reload
\begin_inset Quotes crd
\end_inset

.
 Un clic gauche recharge le fichier de définition (utile si on vient de
 le modifier avec un éditeur externe), un clic droit permet de choisir,
 avec un menu, un nouveau fichier de définition.
\end_layout

\begin_layout Standard
Sous le 
\emph on
pad
\emph default
, sont affichés divers indicateurs décrivant les caractéristiques du mode
 de jeu : commande 
\begin_inset Quotes cld
\end_inset

Play
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

Loop
\begin_inset Quotes crd
\end_inset

, vitesses minimales et maximales de jeu, direction de la lecture (normale,
 0, ou inverse, 1), volume minimal et maximal, exprimés en dB.
 Des valeurs supplémentaires sont liées au mode 
\begin_inset Quotes cld
\end_inset

Loop
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

: tailles maximale et minimale des grains, nombre maximal et minimal de
 grains à jouer simultanément.
\end_layout

\begin_layout Section
Module 
\begin_inset Quotes cld
\end_inset

Banks Definition
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-004.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:banks-def-2"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Banks Definition
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Ce module (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GamePlayer:banks-def-2"
plural "false"
caps "false"
noprefix "false"

\end_inset

) permet d'afficher les différentes banques présentes dans la configuration.
 Les configurations sont décrites par un fichier texte externe, dont le
 nom par défaut est 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-Banks.mSL
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
config-Banks.mSL
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

, mais d'autres fichiers de configuration peuvent être choisis.
 Il suffit d'exécuter un clic-droit sur le bouton 
\begin_inset Quotes cld
\end_inset

Reload
\begin_inset Quotes crd
\end_inset

 pour choisir un autre fichier texte, qui sera utilisé comme configuration
 des banques.
\end_layout

\begin_layout Standard
La partie haute du module comporte un 
\emph on
pad
\emph default
 de deux lignes.
 La première cellule indique le numéro du partiel affiché, le partiel étant
 l'objet de base de la définition des banques.
 On passe d'un partiel au suivant ou au précédent par un clic (droit ou
 gauche) dans la cellule.
 Le numéro de partiel peut aussi être modifié grâce au clavier, lorsque
 le pointeur de la souris est à l'intérieur du module
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
flèches gauche et droite, pour passer au partiel précédent ou suivant, flèches
 haute et basse pour se déplacer de 10 en 10.
\end_layout

\begin_layout Itemize
chiffres, pour taper un numéro de partiel à afficher.
\end_layout

\begin_layout Standard
La modification d'un numéro de partiel met à jour les diverses entrées
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Enumerate
Le numéro de partiel lui-même.
 Les partiels sont numérotés automatiquement lors de leur définition.
 Le partiel 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 a un statut particulier, et peut être modifié dynamiquement.
\end_layout

\begin_layout Enumerate
Le numéro du groupe auquel est rataché le partiel.
\end_layout

\begin_layout Enumerate
Le numéro de la banque dans le groupe
\end_layout

\begin_layout Enumerate
Le numéro du partiel dans la banque.
\end_layout

\begin_layout Enumerate
Le nombre de clips référencés dans le partiel
\end_layout

\begin_layout Enumerate
La version du fichier de définition
\end_layout

\begin_layout Enumerate
Le nombre de partiel définis dans le fichier, et le nombre total d'entrées
 disponibles
\end_layout

\begin_layout Enumerate
Le bouton 
\begin_inset Quotes cld
\end_inset

Reload
\begin_inset Quotes crd
\end_inset

.
 Un clic gauche recharge le fichier de définition (utile si on vient de
 le modifier avec un éditeur externe), un clic droit permet de choisir,
 avec un menu, un nouveau fichier de définition.
\end_layout

\begin_layout Enumerate
Le numéro du premier clip référencé dans le partiel
\end_layout

\begin_layout Enumerate
Le numéro du dernier clip référencé dans le partiel
\end_layout

\begin_layout Enumerate
Le mode de jeu spécifié dans le partiel.
\end_layout

\begin_layout Enumerate
Le mode d'espace spécifié dans le partiel
\end_layout

\begin_layout Enumerate
Le 
\begin_inset Quotes cld
\end_inset

poids
\begin_inset Quotes crd
\end_inset

 associé à ce partiel
\end_layout

\begin_layout Enumerate
Divers indicateurs associé à ce partiel
\end_layout

\begin_layout Enumerate
Le volume 
\begin_inset Quotes cld
\end_inset

minimal
\begin_inset Quotes crd
\end_inset

 de jeu des clips du partiel
\end_layout

\begin_layout Enumerate
Le volume 
\begin_inset Quotes cld
\end_inset

maximal
\begin_inset Quotes crd
\end_inset

 de jeu des clips du partiel.
 Les deux valeurs sont exprimées en dB et peuvent être identiques.
\end_layout

\begin_layout Standard
Sous le pad de contrôle, sont situées deux zones, affichant des indications
 complémentaires relatives au mode de jeu et au mode d'espace référencés
 par le partiel.
 On notera par exemple que le mode de jeu comporte des indications sur le
 volume auquel doit être joué le clip auquel ce mode de jeu est appliqué.
 Cette variation potentielle de volume est combinée avec celle qui est indiquée
 dans le partiel pour donner le volume définitif de jeu du clip.
 
\end_layout

\begin_layout Section
Module 
\begin_inset Quotes cld
\end_inset

Scheduler
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-010.png
	lyxscale 120
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:Scheduler-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Scheduler
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Scheduler
\begin_inset Quotes crd
\end_inset

 permet de contrôler les 
\begin_inset Quotes cld
\end_inset

processus légers
\begin_inset Quotes crd
\end_inset

 implémentés dans le plug-in.
 Ceci inclut les tâches écrites en 
\emph on
mSL
\emph default
 (c.f.
 chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Presentation-mSL"
plural "false"
caps "false"
noprefix "false"

\end_inset

), les actions liées au jeu automatique, les opérations impliquant un délai,
 etc.
 Autant dire que lorsque le scheduleur est arrêté, la plus grande partie
 des opérations du logiciel sont inopérantes.
 Le rôle et les fonctions du Scheduler sont abordés très en détail au chapitre
 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Processus"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 On se contente ici des décrire les interactions avec ce mécanisme proposées
 par ce module.
\end_layout

\begin_layout Standard
Un pad à 16 cellules permet les interactions avec le Scheduler.
 Ses cellules ont les fonctions suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
1.
 Bouton 
\begin_inset Quotes cld
\end_inset

on/off
\begin_inset Quotes crd
\end_inset

.
 Passe du vert au gris et réciproquement, indiquant si le scheduler est
 en fonctionnement ou non.
 Un clic (droit ou gauche) relance le scheduler, un ctrl-clic l'interrompt.
\end_layout

\begin_layout Itemize
2.
 Indicateur de la première tâche en attente (n° 7 sur la figure).
\end_layout

\begin_layout Itemize
3.
 Période d'attente avant le lancement de cette tâche, en secondes.
\end_layout

\begin_layout Itemize
4.
 
\begin_inset Quotes cld
\end_inset

Now
\begin_inset Quotes crd
\end_inset

: cliquer sur ce bouton lance la tâche immédiatement, sans attendre la durée
 affichée en (3).
 Un 
\begin_inset Quotes cld
\end_inset

ctrl-clic
\begin_inset Quotes crd
\end_inset

 tue la tâche.
\end_layout

\begin_layout Itemize
5.
 
\begin_inset Quotes cld
\end_inset

Kill
\begin_inset Quotes crd
\end_inset

 supprime la tâche en attente.
\end_layout

\begin_layout Itemize
6 à 16: lancement par un clic gauche de la tâche correspondante (de 
\begin_inset Quotes cld
\end_inset

A
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

K
\begin_inset Quotes crd
\end_inset

).
 Des processus peuvent être ainsi déclanchés.
 Un clic droit retire la tâche correspondante de la file d'attente.
 Des interfaces internes permettent d'associer un code (écrit en 
\emph on
JSFX
\emph default
 ou en 
\emph on
mSL
\emph default
) à l'une des tâches.
\end_layout

\begin_layout Standard
Les tâches actives sont repérées par une couleur différentes (ici, tâches
 B et C).
 Dans l'état actuel des choses, trois tâches sont 
\begin_inset Quotes cld
\end_inset

prédéfinies
\begin_inset Quotes crd
\end_inset

 dans le GM, correspondant aux tâches 
\begin_inset Quotes cld
\end_inset

A
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

B
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

C
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
A: provoque, à intervalles irréguliers, l'incrémentation du numéro courant
 de Groupe.
 Lorsque le GM est en mode 
\begin_inset Quotes cld
\end_inset


\emph on
Auto-play
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
Auto-play
\end_layout

\end_inset


\emph default

\begin_inset Quotes crd
\end_inset

, le numéro de groupe est utilisé pour choisir les clips qui vont être joués.
 Le délai moyen entre deux changements de groupes est réglé par le paramètre
 
\begin_inset Quotes cld
\end_inset


\family typewriter
Grp Sw.
 Time
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Grp Sw.
 Time
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Itemize
B: changement du volume moyen utilisé par les générateur.
 Le délai moyen entre deux changements de volume est réglé par le paramètre
 
\begin_inset Quotes cld
\end_inset


\family typewriter
Vol Sw.
 Time
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Vol Sw.
 Time
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
 Les paramètres 
\begin_inset Quotes cld
\end_inset


\family typewriter
Vol min
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Vol min
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
Vol max
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Vol max
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 déterminent les bornes de variation du volume, exprimé en dB, 
\begin_inset Quotes cld
\end_inset


\family typewriter
Vol Variation
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Vol Variation
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 permet de choisir, à son minimum, de petites variations autour de la moyenne
 de 
\begin_inset Quotes cld
\end_inset


\family typewriter
Vol min
\family default

\begin_inset Quotes crd
\end_inset

 et 
\family typewriter
Vol max
\family default

\begin_inset Quotes crd
\end_inset

, et à son maximum, des nombres qui sont plus proches des limites.
 Enfin, 
\begin_inset Quotes cld
\end_inset


\family typewriter
Vol.glob.bias
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Vol.glob.bias
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 détermine la durée de la transition entre le volume précédent et le nouveau
 volume.
 Cette transition est très rapide pour de petites valeurs du paramètre,
 très lente pour la valeur maximale.
\end_layout

\begin_layout Itemize
C: changement du nombre de générateurs (players ou loopers).
 Le délai moyen est réglé par le paramètre 
\begin_inset Quotes cld
\end_inset


\family typewriter
G# Sw.
 Time
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
G Sw.
 Time
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
 Les paramètres 
\begin_inset Quotes cld
\end_inset


\family typewriter
Gen min #
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Gen min
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
Gen max #
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Gen max
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 déterminent les bornes de variation du nombre de générateur, et le paramètre
 
\begin_inset Quotes cld
\end_inset


\family typewriter
G# variation
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
G variation
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 permet de choisir, à son minimum, de petites variations autour de la moyenne
 de 
\begin_inset Quotes cld
\end_inset


\family typewriter
Gen min #
\family default

\begin_inset Quotes crd
\end_inset

 et 
\family typewriter

\begin_inset Quotes cld
\end_inset

Gen max #
\family default

\begin_inset Quotes crd
\end_inset

, et à son maximum, des nombres qui sont plus proches des limites.
\end_layout

\begin_layout Section
Module 
\begin_inset Quotes cld
\end_inset

Links Manager
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-016.png
	lyxscale 50
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:MIDI-Manager-0"

\end_inset

Le plug-in d'interface MIDI
\end_layout

\end_inset


\end_layout

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Links Manager
\begin_inset Quotes crd
\end_inset

 va permettre de gérer, au sein du Game Master, la création de liens entre
 une 
\begin_inset Quotes cld
\end_inset


\emph on
source
\emph default

\begin_inset Quotes crd
\end_inset

, événement spécifique (message MIDI, utilisation d'un Slider, événement
 interne, touche du clavier de l'ordinateur) et une 
\begin_inset Quotes cld
\end_inset


\emph on
cible
\emph default

\begin_inset Quotes crd
\end_inset

, opération particulière du logiciel (réglage d'un paramètre, exécution
 d'une commande interne).
 
\end_layout

\begin_layout Subsection
Nature des sources
\end_layout

\begin_layout Standard
Le module accepte à l'heure actuelle quatre types de sources
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
Les messages MIDI, venus d'un périphérique externe ou d'un autre logiciel.
\end_layout

\begin_layout Itemize
Les sliders natifs des plug-ins JSFX, au nombre de 64, qui peuvent être
 automatisés.
\end_layout

\begin_layout Itemize
Les raccourcis clavier (touche clavier, avec modificateurs éventuels)
\end_layout

\begin_layout Itemize
Les événements internes, créés par le logiciel lui-même.
\end_layout

\begin_layout Standard
Le choix des sources s'effectue par des clics gauches et droits (avec/sans
 
\begin_inset Quotes cld
\end_inset

ctrl
\begin_inset Quotes crd
\end_inset

) dans la cellule 1.
\end_layout

\begin_layout Subsection
Natures des cibles
\end_layout

\begin_layout Standard
Le module définit à l'heure actuelle deux types de cibles
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
Les paramètres (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Modules-Parameters"
plural "false"
caps "false"
noprefix "false"

\end_inset

) qui influent sur les différents aspects de l'exécution du Game Master
\begin_inset space ~
\end_inset

; On choisit cette cible en manipulant l'un des paramètres affichés dans
 un module 
\begin_inset Quotes cld
\end_inset

Parameters
\begin_inset Quotes crd
\end_inset

, puis éventuellement, en modifiant son numéro par des clics gauches et
 droits (avec/sans 
\begin_inset Quotes cld
\end_inset

ctrl
\begin_inset Quotes crd
\end_inset

) dans la cellule 5.
\end_layout

\begin_layout Itemize
Les actions internes, qui correspondent à nombre d'opérations du Game Master.
 On choisit cette cible par un clic droit dans la cellule 11, qui affiche
 un menu permettant le choix d'une action spécifique.
 
\emph on
Notons que les liens vers les actions ne sont pas encore opérationnels
\emph default
.
\end_layout

\begin_layout Subsection
Trace
\end_layout

\begin_layout Standard
Il est possible de tracer les événements entrants, ainsi que la gestion
 des liens, en activant la trace des actions (cellule 9).
\end_layout

\begin_layout Subsection
Utilisation de périphériques MIDI
\end_layout

\begin_layout Standard
On s'intéresse dans un premier temps aux diverses commandes qu'un périphérique
 MIDI est susceptible d'envoyer à l'application.
 Pour ce faire, on passe par un plug-in specifique, qui peut être écrit
 spécifiquement pour le périphérique connecté, ou par un plug-in 
\begin_inset Quotes cld
\end_inset

généraliste
\begin_inset Quotes crd
\end_inset

, qui se contentera de transmettre les informations reçues.
 C'est ce dernier, 
\begin_inset Quotes cld
\end_inset


\family typewriter
MIDI_In
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MIDI_In
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, qui est illustré à la figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GamePlayer:MIDI-Manager-0"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Pour l'utiliser, il convient:
\end_layout

\begin_layout Itemize
de créer une piste spécifique, ici la n°2, nommée 
\begin_inset Quotes cld
\end_inset

MIDI In
\begin_inset Quotes crd
\end_inset

, que l'on commute en enregistrement (clic gauche sur le bouton rouge sombre,
 qui devient actif, rouge clair)
\end_layout

\begin_layout Itemize
de placer le plug-in 
\begin_inset Quotes cld
\end_inset

MIDI_In
\begin_inset Quotes crd
\end_inset

 dans les 
\series bold
plug-in d'entrée de la piste
\series default
 (ici, la 
\begin_inset Quotes cld
\end_inset

flèche
\begin_inset Quotes crd
\end_inset

 verte, à gauche, de nom 
\begin_inset Quotes cld
\end_inset

IN FX
\begin_inset Quotes crd
\end_inset

, et non les plug-in de sortie, de nom 
\begin_inset Quotes cld
\end_inset

FX
\begin_inset Quotes crd
\end_inset

 tout court).
\end_layout

\begin_layout Itemize
de choisir le périphérique MIDI connecté en entrée, ici un 
\emph on
Korg nanoKONTROL2
\emph default
, au moyen du menu associé au sélecteur placé immédiatement à droite de
 la flêche 
\begin_inset Quotes cld
\end_inset

IN FX
\begin_inset Quotes crd
\end_inset

, clic-droit, 
\begin_inset Quotes cld
\end_inset


\emph on
Input: MIDI\SpecialChar menuseparator
Korg Inc.
 - nanoKONTROL2\SpecialChar menuseparator
All channels
\emph default

\begin_inset Quotes crd
\end_inset

 (Il conviendra préalablement de signaler, dans les préférences de REAPER,
 que l'on va utiliser ce périphérique).
\end_layout

\begin_layout Standard
Les commandes actionnées sur le périphérique MIDI sont dès lors tracées
 dans la fenêtre du plug-in.
 Ici, par exemple, 
\begin_inset Quotes cld
\end_inset

B1 13 4F
\begin_inset Quotes crd
\end_inset

 (les valeurs sont en hexadécimal) a été envoyé par action sur le contrôleur
 (le 
\begin_inset Quotes cld
\end_inset

B
\begin_inset Quotes crd
\end_inset

 initial) du canal MIDI 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

, de numéro 19 (hexadécimal 
\begin_inset Quotes cld
\end_inset

13
\begin_inset Quotes crd
\end_inset

), qui a envoyé la valeur 
\begin_inset Quotes cld
\end_inset

79
\begin_inset Quotes crd
\end_inset

 (hexadécimal 
\begin_inset Quotes cld
\end_inset

4F
\begin_inset Quotes crd
\end_inset

).
 Le quatrième nombre indique une date en secondes depuis l'ouverture de
 la session.
 Les traces antérieures (de haut en bas, et de gauche à droite) montrent
 que l'on a fait varier la position de ce contrôleur (l'un des potentiomètres)
 de la position 
\begin_inset Quotes cld
\end_inset

5C
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

4F
\begin_inset Quotes crd
\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-024.png
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:MIDI-Manager-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Links Manager
\begin_inset Quotes crd
\end_inset

, mode trace
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-026.png
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:MIDI-Manager-2"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Links Manager
\begin_inset Quotes crd
\end_inset

, choix des éléments du lien
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il est possible de vérifier que les commandes MIDI reçues par le plug-in
 
\begin_inset Quotes cld
\end_inset

MIDI_In
\begin_inset Quotes crd
\end_inset

 sont bien transmises au Game Master en cliquant sur le bouton 
\begin_inset Quotes cld
\end_inset

MIDI Log
\begin_inset Quotes crd
\end_inset

 du module 
\begin_inset Quotes cld
\end_inset

Links Manager
\begin_inset Quotes crd
\end_inset

 (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GamePlayer:MIDI-Manager-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 La trace des commandes MIDI est alors affichée dans le journal de bord
 (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Module-System-Log"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Subsection
Connexion d'un contrôleur MIDI
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-027.png
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:Links-Manager-5"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Links Manager
\begin_inset Quotes crd
\end_inset

, lien établi
\end_layout

\end_inset


\end_layout

\end_inset

Vérifier que la cellule 2 (type de la source) affiche bien 
\begin_inset Quotes cld
\end_inset

MIDI
\begin_inset Quotes crd
\end_inset

 (au besoin, cliquer sur la cellule pour changer de mode).
 On peut dès lors associer un contrôleur du périphérique à un paramètre
 du logiciel
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
cliquer le bouton 
\begin_inset Quotes cld
\end_inset

Learn
\begin_inset Quotes crd
\end_inset

 (cellule 1), qui passe au vert en devenant actif.
 Le module affiche également le slider de réglage du paramètre 
\begin_inset Quotes cld
\end_inset

courant
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Itemize
choisir un paramètre que l'on désire contrôler.
 Dans la figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GamePlayer:MIDI-Manager-2"
plural "false"
caps "false"
noprefix "false"

\end_inset

, l'on a cliqué, quelque part dans un des modules 
\begin_inset Quotes cld
\end_inset

Parameters
\begin_inset Quotes crd
\end_inset

, sur le contrôleur 
\begin_inset Quotes cld
\end_inset

Loop Dur(ation)
\begin_inset Quotes crd
\end_inset

, dont une copie s'affiche dès lors dans le module.
 Les caractéristiques du paramètre, numéro interne (31), nom, valeur minimale
 et valeur maximale, s'affichent également dans les cellules 5 à 8 du Pad.
 Des clics gauches et droits (avec/sans 
\begin_inset Quotes cld
\end_inset

ctrl
\begin_inset Quotes crd
\end_inset

) dans la cellule 5 permettent de passer aux paramètres précédents ou suivant
\end_layout

\begin_layout Itemize
choisir l'un des contrôleurs du périphérique MIDI, en le manipulant (déplacement
 du slider, rotation du potentiomètre, appui sur une touche).
 Le numéro de ce contrôleur, ainsi que sa valeur, s'affichent dans les cellules
 3 et 4 du Pad.
 On notera que la cellule 10 affiche 
\begin_inset Quotes cld
\end_inset

Link
\begin_inset Quotes crd
\end_inset

 sur un fond blanc, montrant que la création d'une liaison entre le paramètre
 et le contrôle est possible.
\end_layout

\begin_layout Itemize
cliquer (clic gauche) sur ce bouton 
\begin_inset Quotes cld
\end_inset

Link
\begin_inset Quotes crd
\end_inset

 (cellule 10), qui passe au cyan et affiche 
\begin_inset Quotes cld
\end_inset

Linked
\begin_inset Quotes crd
\end_inset

, montrant que la liaison est établie (fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GamePlayer:Links-Manager-5"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Les cellules 11 à 16 affichent dès lors les caractéristiques de la liaison.
 On peut vérifier que toute la course du contrôleur MIDI permet d'obtenir
 toutes les valeurs permises du paramètre.
 
\end_layout

\begin_layout Itemize
Pour supprimer la liaison, cliquer (clic gauche) dans la cellule 11 ou la
 cellule 13.
\end_layout

\begin_layout Paragraph*
Note
\end_layout

\begin_layout Standard
Si un contrôleur MIDI est déjà utilisé dans un lien, l'action associée est
 affichée dans les cellules 11 et 12.
 Il est possible de supprimer cette association par un clic gauche dans
 la cellule 11.
 Si la cible du lien (le paramètre à commander) est déjà utilisée dans un
 lien, la commande associée est affichée dans les cellules 13 à 16.
 On peut supprimer cette association par un clic gauche dans la cellule
 11.
 Notons qu'une commande particulière (un contrôleur MIDI spécifique) ne
 peut être associé qu'à un seul paramètre, mais que plusieurs commandes
 différentes peuvent être associées au même paramètre.
 Dans ce dernier cas, les cellules 13 à 16 affichent successivement (avec
 un délai de l'ordre de 5 secondes) les différentes commandes associées
 à ce paramètre.
\end_layout

\begin_layout Subsubsection
Sélectivité
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-028.png
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:MIDI-Manager-3"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Links Manager
\begin_inset Quotes crd
\end_inset

, bornes de variations modifiées
\end_layout

\end_inset


\end_layout

\end_inset

On peut également ne choisir qu'un sous-ensemble des valeurs permises au
 paramètre.
 C'est ce que montre la figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GamePlayer:MIDI-Manager-3"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Pour ce faire,
\end_layout

\begin_layout Itemize
choisir la valeur du réglage du paramètre, ici 
\begin_inset Quotes cld
\end_inset

Lp.
 Fade In
\begin_inset Quotes crd
\end_inset

, à laquelle on veut voir correspondre le 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 du contrôleur, par exemple, 180
\begin_inset space ~
\end_inset

ms.
 Cliquer sur la cellule 7, qui va maintenant afficher cette valeur, au lieu
 du 
\begin_inset Quotes cld
\end_inset

2
\begin_inset space ~
\end_inset

ms
\begin_inset Quotes crd
\end_inset

 initial.
\end_layout

\begin_layout Itemize
choisir la valeur du réglage du paramètre à laquelle on veut voir correspondre
 la valeur maximale du contrôleur (127, en termes de MIDI), par exemple
 780
\begin_inset space ~
\end_inset

ms.
 Cliquer sur la cellule 8, qui affiche alors 780
\begin_inset space ~
\end_inset

ms au lieu de 30000.
\end_layout

\begin_layout Itemize
cliquer enfin sur 
\begin_inset Quotes cld
\end_inset

Link
\begin_inset Quotes crd
\end_inset

 pour réétablir la liaison.
 On peut vérifier que les positions extrêmes du contrôleur MIDI correspondent
 maintenant à ces deux valeurs.
 
\end_layout

\begin_layout Standard
Quand les liaisons souhaîtées ont été réalisées, il convient de repasser
 
\begin_inset Quotes cld
\end_inset

Learn
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

MIDI log
\begin_inset Quotes crd
\end_inset

 en mode 
\begin_inset Quotes cld
\end_inset

off
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Certains périphériques MIDI utilisent des boutons (on/off) comme contrôleurs.
 Ainsi, sur le Korg nanoKONTROL2, tous les boutons sont associés à des contrôleu
rs, chacun envoyant alternativement ce contrôleur avec la valeur 
\begin_inset Quotes cld
\end_inset

00
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

7F
\begin_inset Quotes crd
\end_inset

 (127).
 Ces boutons peuvent, de la même façon, être associés à un paramètre, et
 vont donc pouvoir envoyer alternativement deux valeurs différentes.
\end_layout

\begin_layout Paragraph*
Note
\end_layout

\begin_layout Standard
Il est également possible d'établir un lien qui, quelle que soit la valeur
 du contrôleur, envoie toujours la même valeur.
 Pour ceci, après le choix du contrôleur MIDI et du paramètre à contrôler,
 cliquer sur la cellule 3, qui affiche dès lors 
\begin_inset Quotes cld
\end_inset

MIDI CC/SV
\begin_inset Quotes crd
\end_inset

 (pour 
\begin_inset Quotes cld
\end_inset

single value
\begin_inset Quotes crd
\end_inset

).
 Choisir, avec le slider de réglage du paramètre la valeur désirée, puis
 cliquer la cellule 10, 
\begin_inset Quotes cld
\end_inset

Link
\begin_inset Quotes crd
\end_inset

.
 Le contrôleur enverra alors toujours la même valeur au paramètre.
\end_layout

\begin_layout Subsection
Connexion d'une note MIDI
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-029.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:MIDI-Manager-6"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Links Manager
\begin_inset Quotes crd
\end_inset

, Lien à une note MIDI
\end_layout

\end_inset


\end_layout

\end_inset

De la même manière, il est possible d'associer, à une note MIDI, une valeur
 spécifique d'un contrôleur.
 Dans l'exemple de la figure 
\begin_inset CommandInset ref
LatexCommand nameref
reference "fig:GamePlayer:MIDI-Manager-6"
plural "false"
caps "false"
noprefix "false"

\end_inset

, le contrôleur a envoyé la note MIDI 40.
 La cellule 2 affiche alors 
\begin_inset Quotes cld
\end_inset

MIDI Note
\begin_inset Quotes crd
\end_inset

.
 L'utilisateur a choisi le paramètre 
\begin_inset Quotes cld
\end_inset

Gr.
 Density
\begin_inset Quotes crd
\end_inset

 (numéro interne 100), qu'il a réglé à 10, puis cliqué sur la cellule 
\begin_inset Quotes cld
\end_inset

Link
\begin_inset Quotes crd
\end_inset

 (10), qui affiche maintenant 
\begin_inset Quotes cld
\end_inset

Linked
\begin_inset Quotes crd
\end_inset

.
 Tout appui sur la touche correspondant à la note MIDI 40 va dès lors régler
 le paramètre 
\begin_inset Quotes cld
\end_inset

Gr.
 Density
\begin_inset Quotes crd
\end_inset

 à la valeur 10.
\end_layout

\begin_layout Subsection
Utilisation d'un slider JSFX
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-030.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:MIDI-Manager-7"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Links Manager
\begin_inset Quotes crd
\end_inset

, Lien à un slider natif
\end_layout

\end_inset


\end_layout

\end_inset

Les plug-ins JSFX peuvent déclarer jusqu'à 64 sliders.
 C'est le cas du Game Master, mais ces sliders sont masqués, et ne sont
 donc pas accessibles par l'interface utilisateur.
 La raison en est que l'approche graphique utilisée par le Game Master offre
 plus de souplesse dans les caractéristiques des réglages, et permet d'en
 utiliser un plus grand nombre.
 Cependant, les sliders natifs JSFX peuvent être automatisés.
 Le module 
\begin_inset Quotes cld
\end_inset

Links Manager
\begin_inset Quotes crd
\end_inset

 va permettre d'associer n'importe quel slider natif à n'importe quel paramètre,
 qui pourra dès lors bénéficier de l'utilisation des courbes d'automation
 offertes par REAPER.
\end_layout

\begin_layout Standard
Pour ceci, on va régler la source des liens sur 
\begin_inset Quotes cld
\end_inset

Slider
\begin_inset Quotes crd
\end_inset

 (clics gauche/droit dans la cellule 2).
 Le slider natif courant (initialement, le numéro 1) s'affiche alors dans
 l'interface, tout en haut de la fenêtre, juste au-dessus de la barre des
 onglets.
 
\end_layout

\begin_layout Itemize
Choisir le numéro de slider désiré (de 1 à 64), par des clics gauches ou
 droits (avec/sans 
\begin_inset Quotes cld
\end_inset

ctrl
\begin_inset Quotes crd
\end_inset

) dans la cellule 3.
\end_layout

\begin_layout Itemize
Choisir le paramètre à commander, soit en cliquant sur son nom dans l'un
 des modules 
\begin_inset Quotes cld
\end_inset

Parameters
\begin_inset Quotes crd
\end_inset

, soit par des clics gauches ou droits (avec/sans 
\begin_inset Quotes cld
\end_inset

ctrl
\begin_inset Quotes crd
\end_inset

) dans la cellule 5.
\end_layout

\begin_layout Itemize
Manipuler le slider natif, d'un bout à l'autre de sa course, pour permettre
 au Game Master de repérer les bornes extrêmes de son réglage.
\end_layout

\begin_layout Itemize
cliquer enfin sur 
\begin_inset Quotes cld
\end_inset

Link
\begin_inset Quotes crd
\end_inset

 pour réétablir la liaison.
 On peut vérifier que la manipulation du slider natif permet dès lors de
 modifier le paramètre choisi.
\end_layout

\begin_layout Standard
Tout comme avec un contrôleur MIDI, il est possible de restreindre l'intervalle
 des valeurs commandées par le slider
\begin_inset space ~
\end_inset

: manipuler le réglage du paramètre pour obtenir une première valeur, cliquer
 la cellule 7, choisir une seconde valeur, cliquer la cellule 8, et enfin
 cliquer sur la cellule 
\begin_inset Quotes cld
\end_inset

Link
\begin_inset Quotes crd
\end_inset

 (10) pour réétablir le lien.
\end_layout

\begin_layout Subsection
Raccourcis clavier
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-031.png
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:MIDI-Manager-7-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Links Manager
\begin_inset Quotes crd
\end_inset

, Lien à une touche clavier
\end_layout

\end_inset


\end_layout

\end_inset

Il est également possible de créer des raccourcis clavier, en associant
 une touche du clavier (et d'éventuels modifieurs, shift, command, alt ou
 control) à une action spécifique, ou à une valeur d'un paramètre.
 
\end_layout

\begin_layout Itemize
Choisir (cellule 2) le mode 
\begin_inset Quotes cld
\end_inset

Key
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Itemize
taper une touche du clavier, avec des modificateurs.
 La touche s'affiche (cellules 3 et 4), ici 
\begin_inset Quotes cld
\end_inset

alt-W
\begin_inset Quotes crd
\end_inset

 
\end_layout

\begin_layout Itemize
Choisir le paramètre à commander, soit en cliquant sur son nom dans l'un
 des modules 
\begin_inset Quotes cld
\end_inset

Parameters
\begin_inset Quotes crd
\end_inset

, soit par des clics gauches ou droits (avec/sans 
\begin_inset Quotes cld
\end_inset

ctrl
\begin_inset Quotes crd
\end_inset

) dans la cellule 5.
\end_layout

\begin_layout Itemize
Choisir la valeur désirée pour le paramètre, ici 
\begin_inset Quotes cld
\end_inset

7
\begin_inset Quotes crd
\end_inset

 pour le paramètre 
\begin_inset Quotes cld
\end_inset

Loopers #
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
cliquer enfin sur 
\begin_inset Quotes cld
\end_inset

Link
\begin_inset Quotes crd
\end_inset

 pour réétablir la liaison (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GamePlayer:MIDI-Manager-7"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\end_layout

\begin_layout Standard
On notera que les raccourcis claviers sont désactivés en mode 
\begin_inset Quotes cld
\end_inset

Learn on
\begin_inset Quotes crd
\end_inset

, et qu'il faut repasser en 
\begin_inset Quotes cld
\end_inset

Learn off
\begin_inset Quotes crd
\end_inset

 pour tester le raccourcis qui vient d'être créé.
\end_layout

\begin_layout Subsection
Evénement interne.
\end_layout

\begin_layout Standard
L'interface est définie, mais les événements internes ne sont pas encore
 implémentés en tant que déclencheurs d'actions.
\end_layout

\begin_layout Section
Module « Sensors »
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-017.png
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:Sensors-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Sensors
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Sensors
\begin_inset Quotes crd
\end_inset

 permet de travailler avec une configuration spécifique de capteurs de mouvement
 (détecteurs infra-rouge) communiquant en MIDI sur USB avec l'ordinateur.
 Dans cette configuration, neufs capteurs sont utilisés, qui envoient les
 notes midi de 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

8
\begin_inset Quotes crd
\end_inset

.
 Le module a donc été conçu spécifiquement pour cette configuration, mais
 les concepts généraux développés permettraient de l'adapter aisément à
 tout autre configuration.
\end_layout

\begin_layout Standard
Il repose sur l'utilisation d'un fichier de commandes, le fichier 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-Sensors.mSL
\begin_inset Index idx
status open

\begin_layout Plain Layout
config-Sensors.mSL
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, qui contient un ensemble de commandes décrivant, sous forme de séquences
 de nombres et de mots-clefs, le comportement attendu du Game Master en
 réponse aux informations venant des capteurs.
 La syntaxe de ce fichier est décrite au § 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Senseurs"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Le module propose, à gauche, un premier pad de six cellules, servant à l'interfa
ce avec la partie du logiciel gérant les capteurs.
 Les cellules ont la fonction suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Enumerate
Sensors on/off.
 Permet de diriger les entrées MIDI vers le module, ou de les ignorer.
\end_layout

\begin_layout Enumerate
Play Ctl.
 on/off.
 Gère la multiphonie des sons déclanchés par interaction avec les capteurs.
 Lorsque ce contrôle est activé, le paramètre 
\begin_inset Quotes cld
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Max players
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 permet de définir le nombre maximal de players actifs.
 Que ce nombre est atteint, si un nouveau son est lancé, le son le plus
 anciennement déclanché est arrêté.
\end_layout

\begin_layout Enumerate
Unlock/Stop.
 Un clic gauche déverrouille tous les capteurs inhibés.
 Un clic droit interrompt tous les sons.
\end_layout

\begin_layout Enumerate
Mode
\begin_inset space ~
\end_inset

: permet de passer (clic gauche/clic droit) au mode précédent ou suivant
 (de 0 à 7).
 A chaque mode est associé un comportement spécifique de l'ensemble des
 capteurs, et une couleur spécifique.
\end_layout

\begin_layout Enumerate
indique le nombre de commandes définies dans le fichier de configuration,
 ou affiche un numéro d'erreur et sa position.
\end_layout

\begin_layout Enumerate
permet (clic gauche) de recharger, après modification externe, le fichier
 de configuration, ou (clic droit) d'en choisir un nouveau dans une liste
 proposée.
\end_layout

\begin_layout Standard
A la droite du pad de commande, un second pad à 9 cellules, une par capteur,
 indique l'activation des capteurs.
 Chaque cellule prend initialement la couleur du mode courant, couleur qui
 passe progressivement au gris en une vingtaine de secondes.
 Il est possible de passer d'une configuration 3x3 à 2x2 en tapant 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

3
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Quelques indicateurs supplémentaires permettent d'afficher la dernière commande
 MIDI reçue, et la dernière fonction exécutée par le module.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Module-Random-States"

\end_inset

Module « Random States »
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-018.png
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:Random-States-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Random States
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Le module « Random States » est mentionné seulement en passant, dans la
 mesure où ses fonctionnalités ne sont pas encore connectées au restant
 de l'application.
 Il devrait, à terme, faire office de modulateur pour les différents paramètres,
 en proposant diverses formes et sources de modulation.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Module-System-Settings"

\end_inset

Module « System Settings »
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Settings-1.png
	lyxscale 50
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:System-Settings-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

System Settings
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Le module « System Settings » permet de modifier, au moyen de scripts, nombre
 de paramètres associés au Game Master.
 Les cellules ont les fonctions suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Enumerate
Le bouton 
\begin_inset Quotes cld
\end_inset

Refresh
\begin_inset Quotes crd
\end_inset

 permet de recharger l'ensemble des fichiers de configuration du logiciel,
 et de relancer l'exploration des clips, étape nécessaire si de nouveaux
 clips sont ajoutés alors que le Game Master est actif.
\end_layout

\begin_layout Enumerate
Le bouton 
\begin_inset Quotes cld
\end_inset

Load script
\begin_inset Quotes crd
\end_inset

 permet (clic droit) d'afficher le menu de la liste des scripts connus du
 plug-in.
 Un script sélecté est immédiatement chargé et exécuté.
 Son nom apparait en outre dans la liste des derniers scripts chargés, liste
 occupant les lignes suivantes du pad.
\end_layout

\begin_layout Enumerate
Le bouton 
\begin_inset Quotes cld
\end_inset

Script
\begin_inset Quotes crd
\end_inset

 (inactif) peut être commuté en 
\begin_inset Quotes cld
\end_inset

Kill Scripts
\begin_inset Quotes crd
\end_inset

 (par appui sur la touche 
\begin_inset Quotes cld
\end_inset


\family typewriter
ctrl
\family default

\begin_inset Quotes crd
\end_inset

), qui permet d'interrompre l'exécution de tous les scripts 
\begin_inset Quotes cld
\end_inset


\emph on
mSL
\emph default

\begin_inset Quotes crd
\end_inset

 actifs.
\end_layout

\begin_layout Enumerate
Inutilisé
\end_layout

\begin_layout Enumerate
Imprime dans le log la liste des 
\emph on
fichiers
\emph default
 utilisés pour configurer le Game Master.
\end_layout

\begin_layout Enumerate
Le bouton 
\begin_inset Quotes cld
\end_inset

Aux.
 Script
\begin_inset Quotes crd
\end_inset

 envoie au script auxiliaire (écrit en 
\begin_inset Quotes cld
\end_inset

eel2
\begin_inset Quotes crd
\end_inset

), s'il est présent, la commande définie par (
\begin_inset Quotes cld
\end_inset

Aux command
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Aux par 1
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Aux par2
\begin_inset Quotes crd
\end_inset

, etc.).
 Ce bouton est coloré en gris lorsque le script n'a pas été lancé.
 Il est vert lorsque le script est actif, et prêt à répondre à une commande,
 orangé-brun lorsqu'il est occupé à traiter une commande longue.
 Par appui sur la touche 
\begin_inset Quotes cld
\end_inset


\family typewriter
ctrl
\family default

\begin_inset Quotes crd
\end_inset

, le bouton passe au rouge, et permet d'interrompre le script par l'envoi
 d'une commande d'arrêt.
 Si celle-ci ne fonctionne pas, utiliser le menu REAPER 
\begin_inset Quotes cld
\end_inset

Action
\begin_inset Quotes crd
\end_inset

 (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Script-auxiliaire"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Enumerate
\begin_inset Quotes cld
\end_inset

Action Flag
\begin_inset Quotes crd
\end_inset

 permet de sélecter par un menu (clic droit) l'un des flags du système.
 La valeur correspondante est alors affichée, en hexadécimal ou en décimal
 (taper 'X' pour alterner), dans la cellule suivante.
 'up' et 'down' permettent de se déplacer dans la liste des flags.
\end_layout

\begin_layout Enumerate
Taper un nombre (en hexadécimal ou décimal) permet de modifier le flag dont
 le nom apparaît dans la cellule précédente.
 Les valeurs introduites sont immédiatement affectées à l'indicateur choisi
 par la cellule 7.
 Selon le mode, différents caractères sont reconnus:
\end_layout

\begin_deeper
\begin_layout Enumerate
Mode hexadécimal: les caractères '0' à '9', 'A' à 'F' et 'a' à 'f' permettent
 de composer le nombre.
 Les touches 'left' et 'rght' génèrent des décalages à gauche (insertion
 de 0) ou à droite (suppression du caractère de droite).
 '+' et '-' incrémentent ou décrémentent le nombre.
 'Z' le remet à zéro.
\end_layout

\begin_layout Enumerate
Mode décimal: les caractères '0' à '9'.
 Les touches 'left' et 'rght' permettent de décaler le point décimal.
 '+' et '-' incrémentent ou décrémentent le nombre.
 'backspace' supprime la partie décimale du nombre.
 'Z' le remet à zéro.
\end_layout

\end_deeper
\begin_layout Standard
Les autres cellules affichent les noms des derniers scripts 
\begin_inset Quotes cld
\end_inset


\emph on
mSL
\emph default

\begin_inset Quotes crd
\end_inset

 exécutés.
 Cliquer sur l'une d'elles relance le script correspondant.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Script-auxiliaire"

\end_inset

Script auxiliaire
\begin_inset Index idx
status open

\begin_layout Plain Layout
Script auxiliaire
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ce module permet des interactions avec un script auxiliaire, écrit en 
\begin_inset Quotes cld
\end_inset

eel2
\begin_inset Quotes crd
\end_inset

, qui peut être lancé depuis REAPER.
 L'implémentation décrite ici est expérimentale, et sera très probablement
 modifiée dans les versions ultérieures du Game Master.
 Voici comment installer et charger ce script:
\end_layout

\begin_layout Enumerate
Lancer REAPER.
 Choisir le menu 
\begin_inset Quotes cld
\end_inset

Options \SpecialChar menuseparator
Show REAPER Resource path in Explorer/Finder
\begin_inset Quotes crd
\end_inset

.
 REAPER affiche alors son répertoire des resources.
 
\end_layout

\begin_layout Enumerate
Installer le fichier 
\begin_inset Quotes cld
\end_inset


\family typewriter
GMAuxiliary.eel
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
GMAuxiliary.eel
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 dans le répertoire 
\begin_inset Quotes cld
\end_inset

Scripts
\begin_inset Quotes crd
\end_inset

 du répertoire des resources de REAPER.
 
\end_layout

\begin_layout Enumerate
Choisir dans le menu 
\begin_inset Quotes cld
\end_inset

Actions
\begin_inset Quotes crd
\end_inset

 l'option 
\begin_inset Quotes cld
\end_inset

Show actions list
\begin_inset Quotes crd
\end_inset

.
 Ceci ouvre la fenêtre des actions.
\end_layout

\begin_layout Enumerate
Dans cette fenêtre, cliquer sur le bouton 
\begin_inset Quotes cld
\end_inset

New action...
\begin_inset Quotes crd
\end_inset

.
 Un menu s'affiche, choisir 
\begin_inset Quotes cld
\end_inset

Load Reascript
\begin_inset Quotes crd
\end_inset

.
 Le sélecteur de fichiers s'affiche, montrant le répertoire des resources
 de REAPER.
 Naviguer, choisir le fichier que vous venez d'installer, 
\begin_inset Quotes cld
\end_inset


\family typewriter
GMAuxiliary.eel
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Le nom 
\begin_inset Quotes cld
\end_inset

Script: GMAuxiliary.eel
\begin_inset Quotes crd
\end_inset

 s'affiche en 
\begin_inset Quotes cld
\end_inset

Description
\begin_inset Quotes crd
\end_inset

 dans la liste des actions de REAPER.
 Ce travail (rubriques 1 à 5) se fait une seule fois, le script apparaissant
 dès lors dans la liste des actions de REAPER à chaque nouveau lancement
 de celui-ci.
\end_layout

\begin_layout Enumerate
Le script est maintenant connu de REAPER, mais est inactif.
 Pour l'exécuter, sélectionner son nom dans la fenêtre des actions, et cliquer
 le bouton 
\begin_inset Quotes cld
\end_inset

Run
\begin_inset Quotes crd
\end_inset

 en bas à droite.
 On peut alors fermer la fenêtre des actions (bouton 
\begin_inset Quotes cld
\end_inset

Close
\begin_inset Quotes crd
\end_inset

).
 Le script affiche une fenêtre (
\begin_inset Quotes cld
\end_inset

ReaScript console output
\begin_inset Quotes crd
\end_inset

), avec un premier message, 
\begin_inset Quotes cld
\end_inset

GMA started
\begin_inset Quotes crd
\end_inset

 suivi de la date s'il est arrivé à établir une connexion avec le Game Master.
\end_layout

\begin_layout Enumerate
Le script est maintenant susceptible de répondre aux commandes venues du
 Game Master.
 Dans le module 
\begin_inset Quotes cld
\end_inset

System Settings
\begin_inset Quotes crd
\end_inset

, le bouton 
\begin_inset Quotes cld
\end_inset

Aux.
 Script
\begin_inset Quotes crd
\end_inset

 doit s'afficher en vert.
\end_layout

\begin_layout Enumerate
Notons que dans le menu 
\begin_inset Quotes cld
\end_inset

Actions
\begin_inset Quotes crd
\end_inset

 s'affiche une nouvelle rubrique: 
\begin_inset Quotes cld
\end_inset

Running script: GMAuxiliary.eel
\begin_inset Quotes crd
\end_inset

.
 Si l'on choisit cette rubrique, le dialogue 
\begin_inset Quotes cld
\end_inset

ReaScript task control
\begin_inset Quotes crd
\end_inset

 s'affiche, qui permet d'arrêter le script en cliquant sur 
\begin_inset Quotes cld
\end_inset

Terminate instances
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Aux lancements suivants de REAPER, le script apparaît dans la fenêtre des
 actions.
 Il suffit de le choisir et de cliquer 
\begin_inset Quotes cld
\end_inset

Run
\begin_inset Quotes crd
\end_inset

 pour qu'il devienne actif.
\end_layout

\begin_layout Standard
Les différentes actions proposées par le script sont explicitées au chapitre
 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Actions"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Précisons ici que le fonctionnement du Script est 
\emph on
asynchrone
\emph default
 par rapport au Game Master: celui positionne certaines valeurs dans la
 mémoire partagée, puis doit attendre l'intervention du Script.
 Celui-ci consulte la mémoire partagée à chaque frame graphique (soit entre
 20 et 30 fois par seconde), et exécute l'action demandée, positionne diverses
 valeurs dans la mémoire partagée, puis se remet en attente.
 On ne peut donc envoyer qu'une commande à la fois au script, et l'exécution
 de celle-ci est asynchrone.
\end_layout

\begin_layout Subsection
Commande du script auxiliaire depuis le module « System Settings » 
\end_layout

\begin_layout Standard

\emph on
Lorsque la souris est sur l'un des boutons 7 ou 8
\emph default
, il est possible d'envoyer des commandes au script auxiliaire.
 Attention: ces commandes sont décrites au chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Actions"
plural "false"
caps "false"
noprefix "false"

\end_inset

, mais seules les commandes effectivement réalisées par le script, c'est-à-dire
 à partir du numéro 111 et jusqu'à 140 seront reconnues, les autres étant
 ignorées.
\end_layout

\begin_layout Standard
Supposons que l'on désire exécuter la commande 
\begin_inset Quotes cld
\end_inset

quitter REAPER
\begin_inset Quotes crd
\end_inset

 depuis le module System Settings.
 Cette commande, nous dit la liste des Actions de REAPER, a pour numéro
 40004.
 On effectuera la suite de manœuvres suivantes:
\end_layout

\begin_layout Enumerate
Choisir dans la cellule 7 
\begin_inset Quotes cld
\end_inset

Aux command
\begin_inset Quotes crd
\end_inset

 (soit par le menu: clic droit, soit en se déplaçant au moyen des touches
 
\begin_inset Quotes cld
\end_inset

up
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

down
\begin_inset Quotes crd
\end_inset

).
 
\end_layout

\begin_layout Enumerate
Passer éventuellement l'affichage en mode décimal: touche 
\begin_inset Quotes cld
\end_inset

X
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Taper le numéro de la commande du script qui permet d'exécuter des actions
 REAPER, 125 dans la liste du chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Actions"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Enumerate
Choisir maintenant 
\begin_inset Quotes cld
\end_inset

Aux par 1
\begin_inset Quotes crd
\end_inset

 qui permet d'introduire le premier (et ici unique) paramètre de cette commande
 125.
\end_layout

\begin_layout Enumerate
Taper la valeur 40004, qui est le numéro d'action associée à la commande
 
\begin_inset Quotes cld
\end_inset

Quit
\begin_inset Quotes crd
\end_inset

 dans les Actions de REAPER.
\end_layout

\begin_layout Enumerate
Envoyer la commande au script, soit en tapant 
\begin_inset Quotes cld
\end_inset

$
\begin_inset Quotes crd
\end_inset

, soit en cliquant la cellule 6, 
\begin_inset Quotes cld
\end_inset

Aux Script
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Subsection
Commande du script auxiliaire depuis un script 
\begin_inset Quotes cld
\end_inset


\emph on
mSL
\emph default

\begin_inset Quotes crd
\end_inset

 ou depuis un pad...
\end_layout

\begin_layout Standard
L'envoi de commandes au script auxiliaire s'effectue, depuis un programme
 
\emph on
mSL
\emph default
, par la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
action
\begin_inset Index idx
status open

\begin_layout Plain Layout
action
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
 Ainsi, la commande décrite ci-dessus pour arrêter REAPER peut s'écrire
 tout simplement:
\end_layout

\begin_layout LyX-Code
action(125, 40004);
\end_layout

\begin_layout Standard
Pour enchaîner plusieurs actions du script auxiliaire, il faut les lancer
 une par une, avec un temps d'attente de l'ordre d'un dizième de secondes.
 Ex: se positionner au marqueur de numéro 3, puis lancer la lecture, s'écrira:
\end_layout

\begin_layout LyX-Code
action(113, 3); wait(0.1); action(114);
\end_layout

\begin_layout Standard
Dans une action liée à un pad de senseurs, par exemple: 
\begin_inset Quotes cld
\end_inset

le capteur 2 sélectionne le marqueur de numéro 3, puis lance la lecture
 de REAPER
\begin_inset Quotes crd
\end_inset

, on utilisera de même un 
\begin_inset Quotes cld
\end_inset

Wait
\begin_inset Quotes crd
\end_inset

 explicite:
\end_layout

\begin_layout LyX-Code
...
 DefSeq 2 DoKmd 113 3 Wait 0.1 114 ...
\end_layout

\begin_layout Standard
Notons que ces valeurs 113 et 114 peuvent être représentées par leurs codes,
 en 
\emph on
mSL
\emph default
:
\end_layout

\begin_layout LyX-Code
action(`GoMark, 3); wait(0.1); action(`StrtRead);
\end_layout

\begin_layout Standard
ou encore (notez la subtile différence, les actions sont réunies dans un
 bloc 
\begin_inset Quotes cld
\end_inset


\family typewriter
data
\family default

\begin_inset Quotes crd
\end_inset

 unique)
\end_layout

\begin_layout LyX-Code
action(`(GoMark 3 Wait 0.1 StrtRead));
\end_layout

\begin_layout Standard
Et pour les pads de senseurs:
\end_layout

\begin_layout LyX-Code
...
 DefSeq 2 DoKmd GoMark 3 Wait 0.1 StrtRead ...
\end_layout

\begin_layout Section
Module « Script Manager »
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-020.png
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:Script-Manager-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Script Manager
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Le module « Script Manager
\begin_inset Quotes crd
\end_inset

 offre un début de gestion des scripts écrits en 
\begin_inset Quotes cld
\end_inset


\emph on
mSL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
mSL
\end_layout

\end_inset


\emph default

\begin_inset Quotes crd
\end_inset

.
 Son utilisation est essentiellement réservée, pour l'instant, au test de
 tels scripts.
 L'utilisateur curieux peut (menu accessible par un clic droit sur le bouton
 
\begin_inset Quotes cld
\end_inset

Load
\begin_inset Quotes crd
\end_inset

) lancer le chargement et l'exécution du script choisi.
 La trace de ces opérations s'affiche dans le 
\begin_inset Quotes cld
\end_inset

log
\begin_inset Quotes crd
\end_inset

 du système (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Module-System-Log"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Plusieurs scripts peuvent être simultanément actifs.
 On notera que l'exécution de ces scripts, qui consomment pour certains
 (et 
\begin_inset Quotes cld
\end_inset

c'est étudié pour
\begin_inset Quotes crd
\end_inset

) énormément de CPU, ne perturbe pas le fonctionnement normal du Game Master.
\end_layout

\begin_layout Standard
Après exécution de quelques scripts, il est possible de lancer le 
\begin_inset Quotes cld
\end_inset


\emph on
Garbage Collector
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
Garbage Collector
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 par le bouton 
\begin_inset Quotes cld
\end_inset


\emph on
Run GC
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
Run GC
\end_layout

\end_inset


\emph default

\begin_inset Quotes crd
\end_inset

, clic gauche (mode silencieux) ou clic droit (mode bavard), et vérifier
 que les valeurs affichées dans 
\begin_inset Quotes cld
\end_inset

Mem size
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

Free mem
\begin_inset Quotes crd
\end_inset

 sont identiques.
\end_layout

\begin_layout Standard
Les valeurs concernant la gestion dynamique de la mémoire ne sont pas affichées
 en temps réel.
 Pour en obtenir une vision instantannée, il faut cliquer sur la cellule
 
\begin_inset Quotes cld
\end_inset

Show Mem.
\begin_inset Quotes crd
\end_inset

 ce qui lance les calculs (rapides) correspondants.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Module-Memory"

\end_inset

Module « Memory »
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-021.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:Debugger-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Memory
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Le module « Memory
\begin_inset Quotes crd
\end_inset

 est utilisé pour la mise au point du système et de scripts écrits en 
\begin_inset Quotes cld
\end_inset

mSL
\begin_inset Quotes crd
\end_inset

.
 Son utilisation apporte une aide pertinente lors de l'écriture de scripts,
 de test des sensors, etc.
 
\end_layout

\begin_layout Standard
L'ensemble de ses fonctions sera décrit ultérieurement.
 
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "sec:Module-Clips-Selection"

\end_inset

 Le module 
\begin_inset Quotes cld
\end_inset

Clips Selection
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/ishot-009.png
	lyxscale 120
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:clips-selection-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Clips Selection
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Clips Selection
\begin_inset Quotes crd
\end_inset

 permet de configurer et d'explorer l'ensemble des clips disponibles dans
 un répertoire de fichiers approprié à un projet spécifique du Game Master.
 
\end_layout

\begin_layout Standard
Rappelons les concepts
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
chaque projet REAPER utilisant le Game Master peut disposer d'un répertoire
 spécifique, dans lequel peuvent être situés les clips pertinents à ce projet.
 Ce répertoire a pour nom 
\begin_inset Quotes cld
\end_inset

WAVES
\begin_inset Quotes crd
\end_inset

, et est situé dans le dossier 
\begin_inset Quotes cld
\end_inset

data
\begin_inset Quotes crd
\end_inset

, lui-même placé dans le répertoire du projet.
 Cette configuration permet de disposer d'un projet entièrement autonome,
 qui peut être installé n'importe où sans problème.
\end_layout

\begin_layout Itemize
ce répertoire contient des fichiers dont le nom obéit à la syntaxe suivante
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset


\family typewriter
clip1nnnn.xxx
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
clip1nnnn.xxx
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, dans laquelle 
\begin_inset Quotes cld
\end_inset


\family typewriter
nnnn
\family default

\begin_inset Quotes crd
\end_inset

 est un numéro à 4 chiffres, allant de 
\begin_inset Quotes cld
\end_inset

0000
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

9999
\begin_inset Quotes crd
\end_inset

, et 
\begin_inset Quotes cld
\end_inset


\family typewriter
xxx
\family default

\begin_inset Quotes crd
\end_inset

 est l'extension associée au fichier son, qui peut être 
\begin_inset Quotes cld
\end_inset


\family typewriter
wav
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
aif
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
aiff
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
flac
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
mp3
\family default

\begin_inset Quotes crd
\end_inset

, etc., selon le format de ce dernier.
 Il peut donc y avoir jusqu'à 10000 fichiers dans un tel répertoire, chacun
 étant accessible aux différents lecteurs.
\end_layout

\begin_layout Itemize
si le projet ne fait pas appel à un répertoire spécifique, il peut utiliser
 un répertoire global (avec la même hiérarchie : 
\begin_inset Quotes cld
\end_inset

data/WAVES
\begin_inset Quotes crd
\end_inset

 placé dans le dossier des ressources de REAPER (répertoire accessible par
 le menu 
\begin_inset Quotes cld
\end_inset

Options\SpecialChar menuseparator
Show REAPER resource path in explorer/finder...
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Section
Description
\end_layout

\begin_layout Standard
Le module comporte, en haut, deux sliders, permettant la sélection d'un
 groupe de 100 fichiers (le premier slider varie de 0000 à 9000 par pas
 de 1000, le second de 0000 à 0900 par pas de 100).
 
\end_layout

\begin_layout Standard
Le mini-pad d'une ligne, placé sous les sliders, indique, pour les dix groupes
 de 100 fichiers situés dans la même zone de 1000 déterminée par le premier
 slider, le nombre de fichiers joués dans chaque groupe.
 Ainsi, on peut voir qu'aucun fichier n'a été joué dans les trois premiers
 groupes (2000 à 2099, 2100 à 2199, 2200 à 2299), que 47 fichiers ont été
 joués dans le groupe 2300 à 2399, celui qui est affiché, que 4 l'ont été
 dans le groupe suivant, etc.
\end_layout

\begin_layout Standard
Ce groupe courant de 100 fichiers est affiché dans un pad de taille 10 par
 10, les fichiers y étant implicitement numérotés de 00 à 99.
 Dans la capture d'écran de la figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GamePlayer:clips-selection-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, les sliders définissent le groupe des fichiers de numéros compris entre
 2300 et 2399, et l'affichage du groupe résume l'état des différents fichiers
\begin_inset space ~
\end_inset

: le numéro 
\begin_inset Quotes cld
\end_inset

404
\begin_inset Quotes crd
\end_inset

 sur fond gris caractérise un fichier inexistant, un numéro sur fond rouge
 signale des erreurs ayant pu se produire lors de la lecture du fichier
 correspondant, et les numéros sur fond jaune à vert indiquent le nombre
 de fois où le fichier a été joué.
 Ainsi, le fichier 2301 a été joué 2 fois, le fichier 2307 trois fois, le
 fichier 2322, 4 fois, etc.
\end_layout

\begin_layout Standard
Si la touche 
\begin_inset Quotes cld
\end_inset

cmd
\begin_inset Quotes crd
\end_inset

 est enfoncée, ce sont les numéros de clips qui sont affichés dans le pad.
 On peut changer l'affichage par défaut par 
\begin_inset Quotes cld
\end_inset

shift-
\begin_inset Formula $\blacktriangle$
\end_inset


\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

shift-
\begin_inset Formula $\blacktriangledown$
\end_inset


\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

: numéros des clips, volumes par défaut, durées.
\end_layout

\begin_layout Standard
Positionner le pointeur de la souris sur une case affiche les caractéristiques
 du clip correspondant dans la dernière ligne du texte situé sous le pad.
 Un clic gauche va jouer ce clip, un clic droit va le sélectionner pour
 une opération ultérieure.
\end_layout

\begin_layout Standard
Notons que l'exploration de l'ensemble des clips est coûteuse en temps.
 Elle n'est pas exécutée immédiatement au lancement du Game Master, mais
 s'exécute, en parallèle du fonctionnement de celui-ci, au cours des premières
 minutes de l'exécution.
\end_layout

\begin_layout Section
Interactions
\end_layout

\begin_layout Itemize
Les sliders permettent de choisir le groupe de 100 clips qui va être affiché.
\end_layout

\begin_layout Itemize
Dans la barre de sélection (pad de 10 cellules, situé sous les sliders)
 :
\end_layout

\begin_deeper
\begin_layout Itemize
Clic-gauche dans l'un des pads affiche le groupe de 100 clips correspondant.
\end_layout

\begin_layout Itemize
Clic-gauche+Ctrl : relance une exploration des clips ayant rencontré une
 erreur lors de l'exploration initiale.
\end_layout

\begin_layout Itemize
Clic-gauche+Ctrl+Alt : relance une exploration systématique de tous les
 clips.
\end_layout

\begin_layout Standard
Clavier
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
Les flèches (
\begin_inset Quotes cld
\end_inset

up
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

down
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

left
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

right
\begin_inset Quotes crd
\end_inset

) permettent de passer au groupe ou à la banque précédent(e) ou suivant(e).
\end_layout

\end_deeper
\begin_layout Itemize
Dans le pad d'affichage du groupe : 
\end_layout

\begin_deeper
\begin_layout Itemize
Appuyer sur 
\begin_inset Quotes cld
\end_inset

cmd
\begin_inset Quotes crd
\end_inset

 affiche les numéros de clips.
\end_layout

\begin_layout Itemize
Clic-gauche : joue le clip choisi avec les caractéristiques (play mode et
 space mode) du partiel 0.
\end_layout

\begin_layout Itemize
Clic-gauche+Ctrl: joue et verrouille le clip choisi avec les caractéristiques
 (play mode et space mode) du partiel 0.
\end_layout

\begin_layout Itemize
Clic-gauche+Alt : interrompt les clips en cours de jeu, et joue le clip
 choisi avec les caractéristiques (play mode et space mode) du partiel 0.
\end_layout

\begin_layout Itemize
Clic-gauche+Alt+Shift : interrompt les clips en cours de jeu, et joue et
 verrouille le clip choisi avec les caractéristiques (play mode et space
 mode) du partiel 0.
\end_layout

\begin_layout Itemize
Clic-gauche+Shift: remet à 0 les caractéristiques d'un clip.
 S'il doit être joué, il sera vérifié à nouveau.
\end_layout

\begin_layout Itemize
Clic-gauche+Alt+Shift: remet à 0 toutes les caractéristiques des clips situés
 entre cette case et la position antérieurement sélectionnée par un 
\begin_inset Quotes cld
\end_inset

cd
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
Clic-gauche+Ctrl+Shift: active ou désactive le clip (un clip désactivé n'est
 pas joué, et affiche en rouge sombre 
\begin_inset Quotes cld
\end_inset

999
\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Itemize
Clic-droit : sélectionne le clip correspondant.
\end_layout

\begin_layout Itemize
Clic-droit+Cmd : force une revérification du clip.
\end_layout

\begin_layout Itemize
Clic-droit+Ctrl+Shift
\begin_inset space ~
\end_inset

: supprime tous les clips importés par glisser-déposer situés entre cette
 case et la position antérieurement sélectionnée par un 
\begin_inset Quotes cld
\end_inset

cd
\begin_inset Quotes crd
\end_inset

.
 Les fichiers audio originaux ne sont naturellement pas modifiés.
\end_layout

\begin_layout Itemize
Clic-droit+Ctrl+Shift+Alt: remet à 0 les caractéristiques de l'ensemble
 des clips du système, et relance un check de ceux-ci.
 Ceci permet de changer le répertoire 
\begin_inset Quotes cld
\end_inset

WAVES
\begin_inset Quotes crd
\end_inset

, puis de vérifier l'ensemble des clips, sans avoir à relancer la session.
\end_layout

\begin_layout Standard
Clavier
\begin_inset space ~
\end_inset

: il est possible, en n'utilisant que les touches du clavier, de se déplacer
 dans l'ensemble des clips et de faire appel à toutes les fonctions du module.
\end_layout

\begin_layout Itemize
Les flèches (
\begin_inset Quotes cld
\end_inset

up
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

down
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

left
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

right
\begin_inset Quotes crd
\end_inset

) premettent de se 
\begin_inset Quotes cld
\end_inset

déplacer
\begin_inset Quotes crd
\end_inset

 dans la banque en sélectionnant le clip voisin (en haut, bas, etc.) du clip
 courant.
\end_layout

\begin_layout Itemize
Les flèches (
\begin_inset Quotes cld
\end_inset

up
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

down
\begin_inset Quotes crd
\end_inset

), avec 
\begin_inset Quotes cld
\end_inset

shift
\begin_inset Quotes crd
\end_inset

, commutent les différents modes d'affichage.
\end_layout

\begin_layout Itemize
Espace ou 
\begin_inset Quotes cld
\end_inset

Return
\begin_inset Quotes crd
\end_inset

 : joue le clip choisi avec les caractéristiques (play mode et space mode)
 du partiel 0.
\end_layout

\begin_layout Itemize
Touches 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

9
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

a
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

z
\begin_inset Quotes crd
\end_inset

, puis 
\begin_inset Quotes cld
\end_inset

Shift+A
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

Shift+Z
\begin_inset Quotes crd
\end_inset

 : jouent le clip choisi avec les caractéristiques (play mode et space mode)
 du partiel 
\begin_inset Quotes cld
\end_inset


\emph on
N
\emph default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\emph on
N
\emph default

\begin_inset Quotes crd
\end_inset

 étant déduit de la touche choisie (0 à 9 pour les chiffres, 
\begin_inset Quotes cld
\end_inset

10
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

35
\begin_inset Quotes crd
\end_inset

 pour les minuscules, et 
\begin_inset Quotes cld
\end_inset

36
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

61
\begin_inset Quotes crd
\end_inset

 pour les majuscules), et donc compris entre 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

61
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
Touche 
\begin_inset Quotes cld
\end_inset

:
\begin_inset Quotes crd
\end_inset

 : remet à 0 les caractéristiques du clip.
 S'il doit être joué, il sera vérifié à nouveau.
\end_layout

\begin_layout Itemize
Touche 
\begin_inset Quotes cld
\end_inset

!
\begin_inset Quotes crd
\end_inset

 : supprime l'alias importé à cet emplacement.
\end_layout

\begin_layout Itemize
Touche 
\begin_inset Quotes cld
\end_inset

/
\begin_inset Quotes crd
\end_inset

 : remet à 0 les caractéristiques de chaque clip du bloc.
 Si un clip est joué, il sera vérifié à nouveau.
\end_layout

\begin_layout Itemize
Touche 
\begin_inset Quotes cld
\end_inset

=
\begin_inset Quotes crd
\end_inset

 : active ou désactive le clip (un clip désactivé n'est pas joué, et affiche
 en rouge sombre 
\begin_inset Quotes cld
\end_inset

999
\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Itemize
Touche 
\begin_inset Quotes cld
\end_inset

+
\begin_inset Quotes crd
\end_inset

 : active ou désactive chaque clip du bloc.
\end_layout

\end_deeper
\begin_layout Standard
On notera qu'il est particulièrement pratique de définir explicitement des
 partiels (de numéro 0 à 63, c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Modes-de-jeu"
plural "false"
caps "false"
noprefix "false"

\end_inset

) avec des modes d'espace et des modes de jeu spécifiques.
 On peut alors sélecter un clip (par 
\begin_inset Quotes cld
\end_inset

clic-droit
\begin_inset Quotes crd
\end_inset

), puis par l'une des touches chiffre ou lettre, écouter de quelle manière
 il 
\begin_inset Quotes cld
\end_inset

sonne
\begin_inset Quotes crd
\end_inset

 avec les caractéristiques choisies pour ce partiel (et interrompre son
 jeu avec 
\begin_inset Quotes cld
\end_inset

suppr
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

del
\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Glisser-déposer"

\end_inset

Glisser-déposer
\end_layout

\begin_layout Standard
La version 1.7.1 introduit le 
\begin_inset Quotes cld
\end_inset

glisser-déposer
\begin_inset Quotes crd
\end_inset

 de fichiers audio.
 Cette opération consiste à sélectionner, hors de REAPER, un ou plusieurs
 fichiers audio, dans le Finder du Mac ou dans l'Explorer de Windows, à
 déplacer le pointeur de la souris jusqu'à l'une des cent cases du groupe
 affiché dans le module.
 Relâcher le bouton de la souris
\begin_inset space ~
\end_inset

: les fichiers choisis sont associés à ce numéro de clip et aux numéros
 de clips suivants.
 Il est possible 
\begin_inset Quotes cld
\end_inset

d'importer
\begin_inset Quotes crd
\end_inset

 ainsi environ une centaine de clips par opération.
 Notons les aspects suivants
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
Les fichiers 
\begin_inset Quotes cld
\end_inset

clip1xxx.ttt
\begin_inset Quotes crd
\end_inset

 antérieurement associés aux numéros de clips choisis ne sont ni effacés
 ni modifiés.
 Ils sont simplement 
\begin_inset Quotes cld
\end_inset

masqués
\begin_inset Quotes crd
\end_inset

 par cette opération d'importation.
\end_layout

\begin_layout Itemize
Les fichiers 
\begin_inset Quotes cld
\end_inset

importés
\begin_inset Quotes crd
\end_inset

 ne sont ni modifiés, ni effacés, ni déplacés.
 L'opération consiste simplement à conserver un chemin d'accès à ces fichiers.
\end_layout

\begin_layout Itemize
Cette association temporaire disparaît à la fin de la session, sauf si celle-ci
 est sauvegardée par la commande 
\begin_inset Quotes cld
\end_inset

save
\begin_inset Quotes crd
\end_inset

 de REAPER.
 Il est également possible de sauvegarder un préset dans le GM, qui permettra,
 en le rechargeant, de retrouver ces importations.
\end_layout

\begin_layout Itemize
L'importation d'un nouveau fichier à l'emplacement d'un clip remplace toute
 importation antérieure.
\end_layout

\begin_layout Itemize
La suppression d'un alias fait réapparaître un clip 
\begin_inset Quotes cld
\end_inset

classique
\begin_inset Quotes crd
\end_inset

 éventuellement caché.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Le-playlog"

\end_inset

Le playlog
\end_layout

\begin_layout Standard
Comme signalé antérieurement, il est possible de conserver l'ensemble des
 paramètres associés à un son sous une forme relativement compacte, et ainsi
 de reproduire ultérieurement, à l'identique, un son ou une séquence de
 sons.
 C'est le but du 
\emph on
playlog
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
playlog
\end_layout

\end_inset

.
 Par défaut, le Play Log est activé au début de la session.
 Il se comporte comme un axe temporel, sur lequel sont notés les sons joués
 avec leur date et leurs caractéristiques.
 Un lecteur permet d'explorer cet axe, à des vitesses comprises entre -10
 et 10 fois la vitesse 
\begin_inset Quotes cld
\end_inset

normale
\begin_inset Quotes crd
\end_inset

.
 Il est également possible de 
\begin_inset Quotes cld
\end_inset

noter
\begin_inset Quotes crd
\end_inset

 à la volée des instants, et d'y revenir ultérieurement.
\end_layout

\begin_layout Standard
Ses différents aspects sont accessibles au travers du module 
\begin_inset Quotes cld
\end_inset

Play Log
\begin_inset Quotes crd
\end_inset

 (fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GamePlayer:PlayLog-1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Section
Concepts généraux
\end_layout

\begin_layout Standard
L'
\emph on
enregistreur
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
enregistreur
\end_layout

\end_inset

, lorsqu'il est actif, conserve en mémoire partagée tous les paramètres
 essentiels concernant un son (environ 80 valeurs).
 Il leur associe une date d'enregistrement.
 Le temps de l'enregistrement progresse à la vitesse relative 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 en mode enregistrement, mais ne varie pas lorsque l'enregistreur est en
 pause ou à l'arrêt.
 L'on pourrait assimiler cet axe des temps à une 
\begin_inset Quotes cld
\end_inset

piste
\begin_inset Quotes crd
\end_inset

 d'un enregistreur MIDI, qui conserverait beaucoup plus d'informations que
 de simples données MIDI.
 Notons que les sons déclenchés en mode 
\begin_inset Quotes cld
\end_inset

stop
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

pause
\begin_inset Quotes crd
\end_inset

 ne sont pas enregistrés.
 Le GameMaster peut conserver jusqu'à 80000 sons ainsi représentés, ce qui
 correspond à une session de plusieurs dizaines d'heures.
 Il n'est pas possible actuellement de sauvegarder ces sons sous cette forme,
 mais il est loisible de préparer une séquence, et de l'enregistrer sous
 forme audio au moyen de la commande 
\begin_inset Quotes cld
\end_inset

Save live ouput to disk...
\begin_inset Quotes crd
\end_inset

 de REAPER.
\end_layout

\begin_layout Standard
Le 
\emph on
lecteur
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
lecteur
\end_layout

\end_inset

, lorsqu'il est actif, va suivre cette 
\begin_inset Quotes cld
\end_inset

piste
\begin_inset Quotes crd
\end_inset

, et déclencher le jeu des sons au fur et à mesure qu'il les rencontre.
 Le lecteur peut fonctionner à vitesse normale, accélérée ou ralentie, voire
 en sens inverse.
 Cette 
\begin_inset Quotes cld
\end_inset

vitesse
\begin_inset Quotes crd
\end_inset

 ne change ni la hauteur, ni la durée des sons joués
\begin_inset space ~
\end_inset

; il faut la considérer comme un 
\begin_inset Quotes cld
\end_inset

tempo
\begin_inset Quotes crd
\end_inset

, qui n'agit que sur l'intervalle temporel entre les sons.
 Le lecteur est indépendant de l'enregistreur, et les deux peuvent être
 actifs simultanément.
\end_layout

\begin_layout Standard
Enfin, à tout moment, soit pendant l'enregistrement, soit pendant la lecture,
 il est possible de 
\begin_inset Quotes cld
\end_inset

marquer
\begin_inset Quotes crd
\end_inset

 un point précis de la piste.
 Ces 
\begin_inset Quotes cld
\end_inset


\emph on
marqueurs
\begin_inset Index idx
status open

\begin_layout Plain Layout
marqueurs
\end_layout

\end_inset


\emph default

\begin_inset Quotes crd
\end_inset

 jouent un double rôle, car ils conservent également la liste des sons joués
 à cet instant, qu'il sera possible de rejouer ultérieurement.
 On peut sauter, en lecture, vers n'importe quel marqueur, ou encore utiliser
 une paire de marqueurs pour délimiter une boucle de lecture.
\end_layout

\begin_layout Section
Interface utilisateur
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Play-Log-1.png
	lyxscale 120
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GamePlayer:PlayLog-1-1"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Play Log
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

La figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GamePlayer:PlayLog-1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 décrit, de haut en bas, les trois éléments qui composent l'interface avec
 le play log
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
un premier pad, dit 
\begin_inset Quotes cld
\end_inset


\emph on
pad principal
\emph default

\begin_inset Quotes crd
\end_inset

, qui comporte les diverses commandes (boutons et afficheurs)
\end_layout

\begin_layout Itemize
deux sliders, qui permettent de régler la position et la vitesse du 
\begin_inset Quotes cld
\end_inset

replay
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Itemize
un second pad, dans lequel on va pouvoir noter jusqu'à 64 marqueurs.
\end_layout

\begin_layout Section
Commandes d'enregistrement et de rejouage
\end_layout

\begin_layout Standard
Ces fonctions sont assurées par le premier pad de huit cellules, dont les
 rôles sont les suivants:
\end_layout

\begin_layout Enumerate
Mode d'enregistrement.
 Cette cellule affiche trois états: 
\begin_inset Quotes cld
\end_inset

Stopped
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Paused
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

Recording
\begin_inset Quotes crd
\end_inset

.
 Un clic-gauche assure le passage du mode 
\begin_inset Quotes cld
\end_inset

Recording
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

Paused
\begin_inset Quotes crd
\end_inset

, et d'un autre mode à 
\begin_inset Quotes cld
\end_inset

Recording
\begin_inset Quotes crd
\end_inset

.
 Un 
\begin_inset Quotes cld
\end_inset

cmd-cg
\begin_inset Quotes crd
\end_inset

 (clic-gauche avec la touche 
\begin_inset Quotes cld
\end_inset

cmd
\begin_inset Quotes crd
\end_inset

) a la même action, mais applique en plus cette action au mode rejouage
 (c.f.
 cellule 5), ce qui permet de synchroniser les deux fonctions.
 Un 
\begin_inset Quotes cld
\end_inset

cd
\begin_inset Quotes crd
\end_inset

 (clic-droit) affiche un menu, grâce auquel on peut choisir l'un des trois
 modes, et deux options
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Description
Lock
\begin_inset space ~
\end_inset

sounds
\begin_inset space ~
\end_inset

on
\begin_inset space ~
\end_inset

pause cette option a pour effet de verrouiller les sons qui jouent lorsque
 l'on passe en mode pause.
 Les sons sont déverrouillés lorsque l'on repasse en mode 
\begin_inset Quotes cld
\end_inset

Recording
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
Record
\begin_inset space ~
\end_inset

replayed
\begin_inset space ~
\end_inset

sounds indique si l'on doit, ou non, lorsque l'on est en mode 
\begin_inset Quotes cld
\end_inset

Recording
\begin_inset Quotes crd
\end_inset

, enregister également les sons générés par le mode 
\begin_inset Quotes cld
\end_inset

Replay
\begin_inset Quotes crd
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
Record time.
 La valeur affichée correspond à la durée d'enregistrement.
 Elle ne progresse que lorsque la cellule (1) est en mode 
\begin_inset Quotes cld
\end_inset

Recording
\begin_inset Quotes crd
\end_inset

.
 Un 
\begin_inset Quotes cld
\end_inset

cg
\begin_inset Quotes crd
\end_inset

 passe de l'affichage en heures-minutes-secondes à secondes-milisecondes
 et réciproquement.
 Cette commutation s'applique à toutes les cellules affichant une durée.
 Un 
\begin_inset Quotes cld
\end_inset

cd
\begin_inset Quotes crd
\end_inset

 commute l'option 
\begin_inset Quotes cld
\end_inset

Locks sounds on pause
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Item count.
 Affichage du nombre effectif de sons enregistrés depuis le début de la
 session.
 Un 
\begin_inset Quotes cld
\end_inset

cd
\begin_inset Quotes crd
\end_inset

 commute le mode 
\begin_inset Quotes cld
\end_inset

Record replayed sounds
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Auto-Play.
 Cette cellule reproduit la cellule correspondante du module 
\begin_inset Quotes cld
\end_inset

play control
\begin_inset Quotes crd
\end_inset

.
 Un clic gauche permet de passer l'auto-play de 
\begin_inset Quotes cld
\end_inset

on
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

off
\begin_inset Quotes crd
\end_inset

 et réciproquement.
 Un 
\begin_inset Quotes cld
\end_inset

cmd-cg
\begin_inset Quotes crd
\end_inset

 coupe tous les sons.
 Un 
\begin_inset Quotes cld
\end_inset

cd
\begin_inset Quotes crd
\end_inset

 coupe tous les sons et arrête l'auto-play.
\end_layout

\begin_layout Enumerate
Mode de rejouage.
 Cette cellule affiche trois états
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset

Stopped
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

Paused
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

Replaying
\begin_inset Quotes crd
\end_inset

.
 Un clic-gauche assure le passage du mode 
\begin_inset Quotes cld
\end_inset

Replaying
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

Paused
\begin_inset Quotes crd
\end_inset

, et d'un autre mode à 
\begin_inset Quotes cld
\end_inset

Replaying
\begin_inset Quotes crd
\end_inset

.
 Un clic droit affiche un menu, qui permet de choisir l'un des trois modes,
 
\begin_inset Quotes cld
\end_inset

Rewind
\begin_inset Quotes crd
\end_inset

 qui remet à 0 la date de lecture, et diverses options
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Description
Auto
\begin_inset space ~
\end_inset

stop cette option a pour effet de passer le lecteur en 
\begin_inset Quotes cld
\end_inset

Stop
\begin_inset Quotes crd
\end_inset

 lorsque le dernier son de la piste a été joué.
 Dans le cas contraire, la lecture (silencieuse, donc) se poursuit jusqu'au
 bout de la piste enregistrée.
\end_layout

\begin_layout Description
Pause
\begin_inset space ~
\end_inset

after
\begin_inset space ~
\end_inset

each
\begin_inset space ~
\end_inset

sound lorsque cette option est activée, le lecteur passe en pause après
 chaque nouveau son joué.
\end_layout

\begin_layout Description
Lock
\begin_inset space ~
\end_inset

replayed
\begin_inset space ~
\end_inset

sounds
\begin_inset space ~
\end_inset

(K) verrouille chaque son rejoué.
\end_layout

\begin_layout Description
Mute
\begin_inset space ~
\end_inset

replayed
\begin_inset space ~
\end_inset

sounds
\begin_inset space ~
\end_inset

(M) cette option inhibe le rejouage des sons
\end_layout

\begin_layout Description
Markers
\begin_inset space ~
\end_inset

include
\begin_inset space ~
\end_inset

replayed
\begin_inset space ~
\end_inset

sounds
\begin_inset space ~
\end_inset

(G) lorsque cette option est sélectionnée, les sons rejoués par le rejoueur
 sont aussi enregistés par l'enregistreur.
 A noter que cette option utilise peu d'espace, car elle génère simplement
 plusieurs références au même son enregistré.
\end_layout

\begin_layout Description
Step
\begin_inset space ~
\end_inset

mode
\begin_inset space ~
\end_inset

(S) si cette option est activée, le lecteur saute immédiatement au son suivant,
 le rejoue, puis s'arrête.
\end_layout

\begin_layout Description
Immediate
\begin_inset space ~
\end_inset

jump
\begin_inset space ~
\end_inset

into
\begin_inset space ~
\end_inset

loop
\begin_inset space ~
\end_inset

(J) si cette option est activée, le lecteur saute immédiatement en début
 de boucle dès que celle-ci est activée, au lieu d'attendre que la lecture
 atteigne la boucle.
\end_layout

\begin_layout Description
Skip
\begin_inset space ~
\end_inset

long
\begin_inset space ~
\end_inset

silences
\begin_inset space ~
\end_inset

(E) Lorsque cette option est activée, les silences de plus de 30 secondes
 environ sont sautés lors de la lecture.
 
\end_layout

\begin_layout Description
Repeat
\begin_inset space ~
\end_inset

mode
\begin_inset space ~
\end_inset

(L) arrivé en fin de piste, le lecteur, au lieu de s'interrompre, repart
 au début.
\end_layout

\end_deeper
\begin_layout Enumerate
Play
\begin_inset space ~
\end_inset

time.
 La valeur affichée correspond à la position du lecteur dans la piste.
 Un 
\begin_inset Quotes cld
\end_inset

cg
\begin_inset Quotes crd
\end_inset

 passe de l'affichage en heures-minutes-secondes à secondes-milisecondes
 et réciproquement.
 Cette commutation s'applique à toutes les cellules affichant une durée.
 Un 
\begin_inset Quotes cld
\end_inset

cd
\begin_inset Quotes crd
\end_inset

 commute le mode 
\begin_inset Quotes cld
\end_inset

Repeat
\begin_inset Quotes crd
\end_inset

.
 Dans ce mode, le rejouage repart du début lors de l'arrivée en fin de piste.
\end_layout

\begin_layout Enumerate
Item number.
 La valeur affichée est le numéro d'enregistrement du son qui va être joué
 en mode 
\begin_inset Quotes cld
\end_inset

replay
\begin_inset Quotes crd
\end_inset

, ou 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 si aucun son n'est à jouer.
 Un 
\begin_inset Quotes cld
\end_inset

cd
\begin_inset Quotes crd
\end_inset

 commute le mode 
\begin_inset Quotes cld
\end_inset

Markers include replayed sounds
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Next play.
 Cette cellule indique dans combien de temps le prochain son va être rejoué
 en mode 
\begin_inset Quotes cld
\end_inset

replay
\begin_inset Quotes crd
\end_inset

.
 Cette valeur est une durée réelle, et tient compte de la vitesse de rejouage.
 Un 
\begin_inset Quotes cld
\end_inset

cd
\begin_inset Quotes crd
\end_inset

 commute le mode 
\begin_inset Quotes cld
\end_inset

Play Control
\begin_inset Quotes crd
\end_inset

.
 Dans ce mode, le réglage 
\begin_inset Quotes cld
\end_inset

Max Players
\begin_inset Quotes crd
\end_inset

 permet de limiter le nombre maximal de players actifs à un moment donné.
 La cellule est de couleur bleu en mode 
\begin_inset Quotes cld
\end_inset

replay
\begin_inset Quotes crd
\end_inset

, vert en mode 
\begin_inset Quotes cld
\end_inset

Play control
\begin_inset Quotes crd
\end_inset

, brun en mode 
\begin_inset Quotes cld
\end_inset

Replay mute
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Section
Réglages de position et de vitesse
\end_layout

\begin_layout Standard
Sous ce premier pad, deux potentiomètres permettent de régler dans la piste
 enregistrée la 
\begin_inset Quotes cld
\end_inset

position
\begin_inset Quotes crd
\end_inset

 de la 
\begin_inset Quotes cld
\end_inset

tête de lecture
\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset

Virtual Time
\begin_inset Quotes crd
\end_inset

), ainsi que la vitesse de lecture (
\begin_inset Quotes cld
\end_inset

Time Speed
\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Subsection
Le temps virtuel
\end_layout

\begin_layout Standard
Il s'agit ici de la date associée au lecteur.
 La valeur affichée est en secondes (mais aussi inscrite dans la cellule
 6 du premier pad).
 Elle est réglable de 0 secondes jusqu'à la taille de la piste enregistrée.
 Après toute modification, la lecture se poursuit à la nouvelle valeur sélectée,
 celle-ci évoluant au fur et à mesure de la lecture.
\end_layout

\begin_layout Standard
Lorsque la souris est positionnée sur le 
\begin_inset Quotes cld
\end_inset

label
\begin_inset Quotes crd
\end_inset

 du réglage, à gauche du slider proprement dit, les commandes suivantes
 peuvent être utilisées:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cd
\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset

cg Le clic droit (resp.
 clic gauche) avance (resp.
 retarde) la position temporelle de 10 secondes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-cd
\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset

cmd-cg Associé à la touche 
\begin_inset Quotes cld
\end_inset

cmd
\begin_inset Quotes crd
\end_inset

, le clic droit (resp.
 clic gauche) avance (resp.
 retarde) la position temporelle de 60 secondes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
alt-cd
\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset

alt-cg Associé à la touche 
\begin_inset Quotes cld
\end_inset

alt
\begin_inset Quotes crd
\end_inset

, le clic droit (resp.
 clic gauche) avance (resp.
 retarde) la position temporelle d'une seconde.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-alt-cd
\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset

cmd-alt-cg Associé aux touches 
\begin_inset Quotes cld
\end_inset

cmd
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

alt
\begin_inset Quotes crd
\end_inset

, le clic droit (resp.
 clic gauche) avance (resp.
 retarde) la position temporelle d'un dizième de seconde.
\end_layout

\begin_layout Subsection
La vitesse temporelle
\end_layout

\begin_layout Standard
Ce second réglage affiche le rapport entre le temps de la lecture et le
 temps réel.
 Une valeur de 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 indique que la lecture s'exécute à la même vitesse que l'enregistrement,
 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

 signifie qu'elle se produit deux fois plus vite, 
\begin_inset Quotes cld
\end_inset

0.5
\begin_inset Quotes crd
\end_inset

 deux fois plus lentement, et 
\begin_inset Quotes cld
\end_inset

-1
\begin_inset Quotes crd
\end_inset

 en vitesse inverse (la 
\begin_inset Quotes cld
\end_inset

partition
\begin_inset Quotes crd
\end_inset

 est en quelque sorte lue à l'envers, mais les sons ne sont pas transformés).
 Ce rapport de temps de lecture est réglable entre -10 et +10.
\end_layout

\begin_layout Standard
Lorsque la souris est positionnée sur le 
\begin_inset Quotes cld
\end_inset

label
\begin_inset Quotes crd
\end_inset

 du réglage, les commandes suivantes peuvent être utilisées
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cd
\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset

cg Le clic droit (resp.
 clic gauche) ajoute (resp.
 retranche) 0.1 au facteur 
\begin_inset Quotes cld
\end_inset

Time speed
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-cd
\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset

cmd-cg Associé à la touche 
\begin_inset Quotes cld
\end_inset

cmd
\begin_inset Quotes crd
\end_inset

, le clic droit (resp.
 clic gauche) ajoute (resp.
 retranche) 1 au facteur 
\begin_inset Quotes cld
\end_inset

Time speed
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
alt-cd
\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset

alt-cg Associé à la touche 
\begin_inset Quotes cld
\end_inset

alt
\begin_inset Quotes crd
\end_inset

, le clic droit (resp.
 clic gauche) ajoute (resp.
 retranche) 0.01 au facteur 
\begin_inset Quotes cld
\end_inset

Time speed
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-alt-cd
\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset

cmd-alt-cg Associé aux touches 
\begin_inset Quotes cld
\end_inset

cmd
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

alt
\begin_inset Quotes crd
\end_inset

, le clic droit (resp.
 clic gauche) positionne à 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 (resp.
 
\begin_inset Quotes cld
\end_inset

-1
\begin_inset Quotes crd
\end_inset

) le facteur 
\begin_inset Quotes cld
\end_inset

Time speed
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Section
Les marqueurs
\end_layout

\begin_layout Standard
Le second pad du module 
\begin_inset Quotes cld
\end_inset

Play Log
\begin_inset Quotes crd
\end_inset

 est de taille 8 par 8
\begin_inset space ~
\end_inset

; chaque cellule peut contenir un 
\begin_inset Quotes cld
\end_inset

marqueur
\begin_inset Quotes crd
\end_inset

, c'est à dire la désignation temporelle d'un instant de l'enregistrement.
 Durant celui-ci, il suffit de cliquer sur une case libre pour créer un
 marqueur, qui repère l'instant précis où l'on a cliqué.
 Dans la figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GamePlayer:PlayLog-1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

, le pad a été peuplé de quelques makers.
 Chacun d'entre eux indique la date de création (en heure, minutes, secondes
 et centisecondes).
\end_layout

\begin_layout Standard
Pour créer un marqueur, il suffit de cliquer dans une case inutilisée du
 pad.
 La date de création est alors inscrite dans la cellule, et le marqueur
 est coloré en vert clair.
 La 
\begin_inset Quotes cld
\end_inset

date
\begin_inset Quotes crd
\end_inset

 utilisée est celle de l'enregistreur (case 3) si celui-ci est en 
\begin_inset Quotes cld
\end_inset

Recording
\begin_inset Quotes crd
\end_inset

 ou en 
\begin_inset Quotes cld
\end_inset

Pause
\begin_inset Quotes crd
\end_inset

, la date du lecteur sinon.
 Une paire de marqueurs peut être utilisée pour représenter les limites
 d'une boucle de lecture, qui sera répétée jusqu'à suppression de la boucle.
 
\end_layout

\begin_layout Standard
Lors de la création du marqueur sont également enregistrées les références
 aux sons en train d'être joués.
 Il est possible de modifier la finalité du marqueur, pour le transformer
 en un bouton déclenchant certains des sons ainsi enregistrés.
 Très précisément, le marqueur peut être utilisé pour jouer un son spécifique,
 un son au hasard, un son en 
\begin_inset Quotes cld
\end_inset

round robin
\begin_inset Quotes crd
\end_inset

, la séquence, ou un 
\begin_inset Quotes cld
\end_inset

ensemble
\begin_inset Quotes crd
\end_inset

, c'est-à-dire tous les sons simultanément.
 
\end_layout

\begin_layout Subsection
Opérations
\end_layout

\begin_layout Standard
Voici une liste des opérations disponibles (sauf précisé explicitement,
 ces opérations s'appliquent à des marqueurs, et sont ineffectives pour
 des cases vierges).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cg Dans une case vierge, crée un marqueur, et lui associe la date de l'enregistr
eur en mode 
\begin_inset Quotes cld
\end_inset

Recording
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

Pause
\begin_inset Quotes crd
\end_inset

, la date du lecteur sinon.
 Dans une case utilisée, va positionner le lecteur à la date correspondante,
 ou va déclencher le jeu de sons en fonction du type du marqueur.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-cg Dans une case vierge, crée un marqueur, et lui associe la date de
 lecture.
 Dans une case utilisée, positionne le lecteur à la date correspondante,
 quel que soit le type du marqueur cliqué.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ctl-cg crée un marqueur dans cette position, en remplaçant éventuellement
 le marqueur préexistant.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ctl-alt-cg supprime le marqueur courant.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-alt-cg change temporairement le marqueur courant en limite de boucle.
 
\begin_inset Quotes cld
\end_inset

cmd-alt-cg
\begin_inset Quotes crd
\end_inset

 restitue la fonction antérieure.
 Il n'y a au maximum que deux marqueurs de boucle, en marquer un troisième
 déactive le plus ancien.
 Le mode bouclage est activé lorsque deux marqueurs de boucle sont actifs.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cd Dans une case vierge: passe de 
\begin_inset Quotes cld
\end_inset

Replay
\begin_inset Quotes crd
\end_inset

 en 
\begin_inset Quotes cld
\end_inset

Pause
\begin_inset Quotes crd
\end_inset

 et réciproquement.
 Dans une case marquée, ouvre un menu, avec diverses rubriques:
\end_layout

\begin_deeper
\begin_layout Description
Type
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Inactive conserve le marqueur, mais le rend inactif.
\end_layout

\begin_layout Description
Type
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Mark
\begin_inset space ~
\end_inset

Point le marqueur a pour fonction d'indiquer une position dans la piste
 des sons enregistrés, et de positionner la tête de lecture à cet emplacement
 lorsqu'il est cliqué (option par défaut).
\end_layout

\begin_layout Description
Type
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Single
\begin_inset space ~
\end_inset

Sound cliquer le marqueur déclenche un son unique de la liste des sons associés
 au marqueur, par défaut le premier.
\end_layout

\begin_layout Description
Type
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Random
\begin_inset space ~
\end_inset

Sound cliquer le marqueur déclenche un son au hasard de la liste des sons
 associés au marqueur.
\end_layout

\begin_layout Description
Type
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Round
\begin_inset space ~
\end_inset

Robin cliquer le marqueur déclenche le son 
\begin_inset Quotes cld
\end_inset

suivant
\begin_inset Quotes crd
\end_inset

 de la liste des sons associés au marqueur.
\end_layout

\begin_layout Description
Type
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Ensemble cliquer le marqueur déclenche simultanément l'ensemble des sons
 de la liste.
\end_layout

\begin_layout Description
Type
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Sequence cliquer le marqueur lance la séquence chronologique des sons de
 la liste.
\end_layout

\begin_layout Description
Type
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Change
\begin_inset space ~
\end_inset

type
\begin_inset space ~
\end_inset

(Y) change le type du marqueur en passant cycliquement de 
\begin_inset Quotes cld
\end_inset

inactif
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

sequence
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
Date
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Mark
\begin_inset space ~
\end_inset

date choisit (option par défaut) la date de création du marqueur comme date
 associée à celui-ci.
\end_layout

\begin_layout Description
Date
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

First
\begin_inset space ~
\end_inset

item choisit la date de jeu du premier item (par ordre chronologique) comme
 date associée au marqueur.
\end_layout

\begin_layout Description
Date
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Last
\begin_inset space ~
\end_inset

item choisit la date de jeu du dernier item (par ordre chronologique) comme
 date associée au marqueur.
\end_layout

\begin_layout Description
Date
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Sequence
\begin_inset space ~
\end_inset

end choisit la date de la fin de la sequence (incluant le silence suivant
 le dernier item) comme date associée au marqueur.
\end_layout

\begin_layout Description
Lay
\begin_inset space ~
\end_inset

out
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Move
\begin_inset space ~
\end_inset

left déplace le marqueur courant (par échange éventuel) vers la gauche.
\end_layout

\begin_layout Description
Lay
\begin_inset space ~
\end_inset

out
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Move
\begin_inset space ~
\end_inset

right déplace le marqueur courant (par échange éventuel) vers la droite.
\end_layout

\begin_layout Description
Lay
\begin_inset space ~
\end_inset

out
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Move
\begin_inset space ~
\end_inset

up déplace le marqueur courant (par échange éventuel) vers le haut.
\end_layout

\begin_layout Description
Lay
\begin_inset space ~
\end_inset

out
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Move
\begin_inset space ~
\end_inset

down déplace le marqueur courant (par échange éventuel) vers le bas.
\end_layout

\begin_layout Description
Lay
\begin_inset space ~
\end_inset

out
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Push
\begin_inset space ~
\end_inset

left déplace le marqueur courant vers la gauche (en repoussant éventuellement
 les marqueurs contigüs).
\end_layout

\begin_layout Description
Lay
\begin_inset space ~
\end_inset

out
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Push
\begin_inset space ~
\end_inset

right déplace le marqueur courant vers la droite (en repoussant éventuellement
 les marqueurs contigüs).
\end_layout

\begin_layout Description
Lay
\begin_inset space ~
\end_inset

out
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Duplicate
\begin_inset space ~
\end_inset

(D) copie le marqueur dans la première cellule libre à sa droite.
\end_layout

\begin_layout Description
Lay
\begin_inset space ~
\end_inset

out
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Cut
\begin_inset space ~
\end_inset

(X) supprime le marqueur courant (qui peut être ultérieurement collé dans
 une autre cellule).
\end_layout

\begin_layout Description
Lay
\begin_inset space ~
\end_inset

out
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Copy
\begin_inset space ~
\end_inset

(C) copie le marqueur courant.
\end_layout

\begin_layout Description
Lay
\begin_inset space ~
\end_inset

out
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Paste
\begin_inset space ~
\end_inset

(V) colle le marqueur courant dans la cellule.
\end_layout

\begin_layout Description
Option
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Toggle
\begin_inset space ~
\end_inset

inactive
\begin_inset space ~
\end_inset

(N) rend inactif le marqueur sans perdre aucune des informations qui lui
 sont associées.
\end_layout

\begin_layout Description
Option
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

Toggle
\begin_inset space ~
\end_inset

loop
\begin_inset space ~
\end_inset

point
\begin_inset space ~
\end_inset

(F) change le marqueur en 
\emph on
limite de boucle
\emph default
 sans perdre aucune des informations qui lui sont associées.
 Il ne peut y avoir que deux limites.
\end_layout

\begin_layout Description
Edit
\begin_inset space ~
\end_inset

\SpecialChar menuseparator

\begin_inset space ~
\end_inset

xxx propose 24 sous-menus pour éditer la date associée au marqueur, permettant
 d'ajouter ou de soustraire de 1ms à 30' à cette date.
 Ces fonctions sont décrites au § 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Edition-des-marqueurs"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-cd déclenche tous les marqueurs correspondant à cette case et aux cases
 situées en dessous, dans la même colonne, jusqu'à la première case vide
 ou jusqu'au bas de la colonne.
 La première case rencontrée de type 
\begin_inset Quotes cld
\end_inset

Mark Point
\begin_inset Quotes crd
\end_inset

 lance la lecture à la position correspondante, les autres « Mark Point
 » sont ignorés.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ctrl-cd déclenche tous les marqueurs correspondant à cette case et aux cases
 situées à droite de celle-ci, dans la même ligne, jusqu'à la première case
 vide ou la fin de la ligne.
 La première case rencontrée de type 
\begin_inset Quotes cld
\end_inset

Mark Point
\begin_inset Quotes crd
\end_inset

 lance la lecture à la position correspondante, les autres « Mark Point
 » sont ignorés.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Edition-des-marqueurs"

\end_inset

Edition des marqueurs
\end_layout

\begin_layout Standard
Lorsque la souris est dans une case correspondant à un marqueur, il est
 possible d'éditer la valeur de celui-ci (c'est-à-dire la date désignée
 par le marqueur) avec les caractères suivants introduits au clavier
\begin_inset space ~
\end_inset

:.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'
\begin_inset Formula $\blacktriangleright$
\end_inset

' incrémente la valeur du marqueur d'une seconde.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'
\begin_inset Formula $\blacktriangleleft$
\end_inset

' décrémente la valeur du marqueur d'une seconde.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-'
\begin_inset Formula $\blacktriangleright$
\end_inset

' incrémente la valeur du marqueur d'un dizième de seconde.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-'
\begin_inset Formula $\blacktriangleleft$
\end_inset

' décrémente la valeur du marqueur d'un dizième de seconde.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
alt-'
\begin_inset Formula $\blacktriangleright$
\end_inset

' incrémente la valeur du marqueur d'un centième de seconde.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
alt-'
\begin_inset Formula $\blacktriangleleft$
\end_inset

' décrémente la valeur du marqueur d'un centième de seconde.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-alt-'
\begin_inset Formula $\blacktriangleright$
\end_inset

' incrémente la valeur du marqueur d'un millième de seconde.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-alt-'
\begin_inset Formula $\blacktriangleleft$
\end_inset

' décrémente la valeur du marqueur d'un millième de seconde.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'
\begin_inset Formula $\blacktriangle$
\end_inset

' incrémente la valeur du marqueur de dix secondes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'
\begin_inset Formula $\blacktriangledown$
\end_inset

' décrémente la valeur du marqueur de dix secondes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-'
\begin_inset Formula $\blacktriangle$
\end_inset

' incrémente la valeur du marqueur d'une minute.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-'
\begin_inset Formula $\blacktriangledown$
\end_inset

' décrémente la valeur du marqueur d'une minute.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
alt-'
\begin_inset Formula $\blacktriangle$
\end_inset

' incrémente la valeur du marqueur de cinq minutes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
alt-'
\begin_inset Formula $\blacktriangledown$
\end_inset

' décrémente la valeur du marqueur de cinq minutes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-alt-'
\begin_inset Formula $\blacktriangle$
\end_inset

' incrémente la valeur du marqueur de trente minutes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-alt-'
\begin_inset Formula $\blacktriangledown$
\end_inset

' décrémente la valeur du marqueur de trente minutes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'=' arrondit la valeur du marqueur à un nombre entier de secondes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-'=' arrondit la valeur du marqueur à un nombre entier de dizièmes de
 secondes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
alt-'=' arrondit la valeur du marqueur à un nombre entier de centièmes de
 secondes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-alt-'=' arrondit la valeur du marqueur à un nombre entier de millièmes
 de secondes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\lang english
':'
\lang french
 arrondit la valeur du marqueur à un multiple de 10 secondes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-
\lang english
':'
\lang french
 arrondit la valeur du marqueur à un multiple d'une minute.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
alt-
\lang english
':'
\lang french
 arrondit la valeur du marqueur à un multiple de cinq minutes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cmd-alt-
\lang english
':'
\lang french
 arrondit la valeur du marqueur à un multiple de trente minutes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'c' copie le marqueur courant.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'd' duplique le marqueur courant dans la première case disponible à sa suite.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'f' change le marqueur courant en limite de boucle.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'n' rend 
\begin_inset Quotes cld
\end_inset

neutre
\begin_inset Quotes crd
\end_inset

 le marqueur courant.
 Un nouveau caractère 
\begin_inset Quotes cld
\end_inset

n
\begin_inset Quotes crd
\end_inset

 lui rend sa signification antérieure.
 La cellule ainsi marquée prend une couleur gris bleuté.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'b' rend à un marqueur 
\begin_inset Quotes cld
\end_inset

neutre
\begin_inset Quotes crd
\end_inset

 sa fonctionnalité antérieure.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'x' coupe le marqueur courant.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'v' colle (dans une case vierge) le dernier marqueur copié ou coupé.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'y' change le type du marqueur en passant cycliquement de 
\begin_inset Quotes cld
\end_inset

inactif
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

sequence
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Section
Autres commandes
\end_layout

\begin_layout Standard
Notons que, lorsque la souris est dans ce module certaines touches du clavier
 sont interprétées comme des commandes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'a' inverse l'option 
\begin_inset Quotes cld
\end_inset

Auto
\begin_inset space ~
\end_inset

play
\begin_inset Quotes crd
\end_inset

.
 Modifie la couleur de la cellule (4) du 
\emph on
pad principal
\emph default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'h' interrompt l'enregistrement et la lecture.
 Les couleurs des cellules (1), (4) et (5) sont modifiées.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'i' inverse le sens de la lecture du replay.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'j' inverse l'option 
\begin_inset Quotes cld
\end_inset

Immediate
\begin_inset space ~
\end_inset

jump
\begin_inset space ~
\end_inset

into
\begin_inset space ~
\end_inset

loop
\begin_inset Quotes crd
\end_inset

.
 Modifie la couleur de la cellule (5) en mode loop.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'k' inverse l'option 
\begin_inset Quotes cld
\end_inset

Lock
\begin_inset space ~
\end_inset

replayed
\begin_inset space ~
\end_inset

sounds
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'l' inverse l'option 
\begin_inset Quotes cld
\end_inset

Repeat
\begin_inset space ~
\end_inset

mode
\begin_inset Quotes crd
\end_inset

.
 Modifie la couleur de la case (6).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'm' inverse l'option 
\begin_inset Quotes cld
\end_inset

Mute
\begin_inset space ~
\end_inset

replay
\begin_inset Quotes crd
\end_inset

, qui permet de muter uniquement les sons du mode replay.
 Modifie la couleur de la case (8).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'o' inverse l'option 
\begin_inset Quotes cld
\end_inset

Locks sounds on pause
\begin_inset Quotes crd
\end_inset

.
 Modifie la couleur de la case (1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'p' bascule de replay à pause et réciproquement.
 Permet de passer au son suivant en mode 
\begin_inset Quotes cld
\end_inset

Step
\begin_inset Quotes crd
\end_inset

.
 En mode 
\begin_inset Quotes cld
\end_inset

Step
\begin_inset Quotes crd
\end_inset

, la cellule (5) affiche une couleur particulière.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'q' permet de répéter le son précédent en mode 
\begin_inset Quotes cld
\end_inset

Step
\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'r' bascule du mode enregistement au mode pause et réciproquement.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
's' inverse l'option 
\begin_inset Quotes cld
\end_inset

Step
\begin_inset space ~
\end_inset

mode
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
't' inverse l'option 
\begin_inset Quotes cld
\end_inset

Record
\begin_inset space ~
\end_inset

replayed
\begin_inset space ~
\end_inset

sounds
\begin_inset Quotes crd
\end_inset

.
 Modifie la couleur de la case (3).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'u' inverse l'option 
\begin_inset Quotes cld
\end_inset

Unlock
\begin_inset space ~
\end_inset

replayed
\begin_inset space ~
\end_inset

sounds
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'w' alterne différentes vitesse de lecture entre -2.5 et 2.5.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
'z' interrompt enregistrement, lecture, et production de son.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Les-Paramètres-Dynamiques"

\end_inset

Les Paramètres Dynamiques de Jeu
\end_layout

\begin_layout Standard
La version 1.7.0, au travers d'une réécriture complète des 
\begin_inset Quotes cld
\end_inset

players
\begin_inset Quotes crd
\end_inset

, introduit une formalisation de certains paramètres de jeu, qui effectuent
 une interaction directe avec les sons en cours d'écoute.
 L'idée est de permettre au compositeur de disposer d'un ensemble de paramètres
 dont il peut juger immédiatement de l'influence sur le son en cours d'audition.
 Ces paramètres peuvent naturellement être utilisés au cours d'une performance
 
\begin_inset Quotes cld
\end_inset

live
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Distinguons trois moments dans la spécification des sons
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Enumerate
Lors de la création des fichiers de description des configurations de HP,
 modes d'espaces, modes de jeu, et définition des banques, il est possible
 de prévoir tout ou partie des paramètres de jeu d'un clip.
 Certains peuvent rester indéfinis, d'autres s'expriment sous forme d'un
 intervalle de valeurs, dans lequel une valeur unique sera choisie au moment
 du jeu.
\end_layout

\begin_layout Enumerate
Lors du lancement d'un clip, les paramètres non définis sont calculés à
 partir des réglages des paramètres courants, ou sont choisis dans les intervall
es de valeurs selon certains critères.
\end_layout

\begin_layout Enumerate
Au cours du jeu d'un clip, de nouveaux paramètres entrent en action: les
 
\emph on
modificateurs
\emph default
, ou 
\emph on
modulateurs de jeu
\emph default
, qui sont interactifs et agissent immédiatement sur le rendu sonore.
 C'était le cas du paramètre 
\begin_inset Quotes cld
\end_inset

Dynamic Rate
\begin_inset Quotes crd
\end_inset

 qui intervient pour modifier la vitesse de lecture des clips
\begin_inset space ~
\end_inset

: une valeur inférieure à 1 diminue cette vitesse, une valeur supérieure
 à 1 l'augmente.
 
\end_layout

\begin_layout Standard
C'est dans cette dernière catégorie que se rangent un certain nombre de
 nouveaux paramètres, dont la description constitue le corps de ce chapitre.
\end_layout

\begin_layout Section
Note sur les 
\begin_inset Quotes cld
\end_inset

grains
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Le mode 
\begin_inset Quotes cld
\end_inset

loop
\begin_inset Quotes crd
\end_inset

 qui génère des boucles à partir d'un fichier son correspond dans les faits,
 pour certains réglages, à une synthèse granulaire.
 Il est possible en effet de faire varier la longueur de ces boucles de
 moins d'une miliseconde à plusieurs minutes (la boucle pouvant alors être
 plus longue que le fichier source, repartant si besoin au début de ce dernier).
 Une 
\begin_inset Quotes cld
\end_inset

courte
\begin_inset Quotes crd
\end_inset

 boucle (moins d'une seconde) sera dite 
\begin_inset Quotes cld
\end_inset

grain
\begin_inset Quotes crd
\end_inset

 pour reprendre ce terme propre à la synthèse granulaire.
 
\end_layout

\begin_layout Standard
Un grain est donc un fragment de fichier source, modulé par une enveloppe
 de type 
\begin_inset Quotes cld
\end_inset

ASR
\begin_inset Quotes crd
\end_inset

, pour 
\begin_inset Quotes cld
\end_inset

Attack, Sustain, Release
\begin_inset Quotes crd
\end_inset

.
 Un volume relatif est associé au grain, qui passe de 0 à 1 durant la phase
 
\begin_inset Quotes cld
\end_inset

Attack
\begin_inset Quotes crd
\end_inset

, demeure à 1 lors de la phase 
\begin_inset Quotes cld
\end_inset

Sustain
\begin_inset Quotes crd
\end_inset

, et repasse de 1 à 0 durant la phase 
\begin_inset Quotes cld
\end_inset

Release
\begin_inset Quotes crd
\end_inset

.
 Chacune de ces trois phases a une durée réglable au moyen de deux paramètres,
 qui sont le 
\begin_inset Quotes cld
\end_inset

plateau
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

l'inclinaison
\begin_inset Quotes crd
\end_inset

.
 Le plateau définit la durée de la phase 
\begin_inset Quotes cld
\end_inset

Sustain
\begin_inset Quotes crd
\end_inset

, sous la forme d'un pourcentage de la durée total du grain.
 
\begin_inset Quotes cld
\end_inset

L'inclinaison
\begin_inset Quotes crd
\end_inset

 est également un pourcentage, qui définit le rapport entre la durée de
 la phase 
\begin_inset Quotes cld
\end_inset

Attack
\begin_inset Quotes crd
\end_inset

 et celle de la phase 
\begin_inset Quotes cld
\end_inset

Release
\begin_inset Quotes crd
\end_inset

.
 Si nous imaginons un grain d'une durée de 1 seconde, la valeur du plateau
 à 50% correspond donc à un 
\begin_inset Quotes cld
\end_inset

Sustain
\begin_inset Quotes crd
\end_inset

 de 0.5 secondes, ce qui laisse également 0.5 secondes pour l'attaque et la
 release.
 Une valeur de 
\begin_inset Quotes cld
\end_inset

l'inclinaison
\begin_inset Quotes crd
\end_inset

 de 50% correspondra à une durée égale à 0.25 secondes pour les phases d'attaque
 et de release.
 Une valeur de 30% pour l'inclinaison correspondra à une attaque de 0.15
 secondes et une release de 0.35 secondes.
\end_layout

\begin_layout Standard
Les formes des courbes correspondant aux phases d'attaque et de release
 d'un grain sont elles-même variables, définies par les paramètres 
\begin_inset Quotes cld
\end_inset

shape In
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

shape Out
\begin_inset Quotes crd
\end_inset

, qui font varier ces formes de concaves à convexes.
\end_layout

\begin_layout Standard
Enfin, le point de début d'un grain (d'une boucle) est fixé par le paramètre
 
\begin_inset Quotes cld
\end_inset

Position Dynamique
\begin_inset Quotes crd
\end_inset

, dont la valeur (un pourcentage) permet de fixer un point de référence
 dans le clip, une autre valeur 
\begin_inset Quotes cld
\end_inset

Variation de position
\begin_inset Quotes crd
\end_inset

 permettant de fixer l'intervalle, autour de ce point de référence, dans
 lequel va être choisi le point de départ du clip.
 Pour une valeur de 0% de cette variation, le point de départ de la boucle
 est figé au point de référence, pour une valeur de 100% de cette variation,
 l'intervalle dans lequel est choisi le point de départ recouvre la totalité
 du clip.
 Pour toute valeur intermédiaire, par exemple 20%, l'intervalle dans lequel
 est choisi le point de départ du clip recouvre une partie de celui-ci,
 autour de la position dynamique.
 
\end_layout

\begin_layout Section
Note sur les modes de jeu
\end_layout

\begin_layout Standard
Dans les fichiers de description des modes de jeu il est possible de laisser
 des paramètres 
\begin_inset Quotes cld
\end_inset

indéfinis
\begin_inset Quotes crd
\end_inset

.
 Dans les versions antérieures du Game Master, ces paramètres recevaient
 une valeur par défaut.
 A partir de la version 1.7, ces paramètres restent indéfinis jusqu'au moment
 du jeu du clip utilisant ces modes de jeu ou d'espace.
 Ils prennent alors une valeur par défaut, qui dépend des réglages courants
 et de certains paramètres dynamiques.
 Pour les modes de jeux, une 
\begin_inset Quotes cld
\end_inset

facette
\begin_inset Quotes crd
\end_inset

 spécifique décrit de quelle manière ces choix sont effectués.
 Cette facette est introduite par le mot-clef 
\begin_inset Quotes cld
\end_inset

FLM
\begin_inset Quotes crd
\end_inset

 (pour 
\begin_inset Quotes cld
\end_inset

Flags Modifiers
\begin_inset Quotes crd
\end_inset

), et est définie par deux valeurs numériques entières, 
\begin_inset Quotes cld
\end_inset


\family typewriter
FLM1
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
FLM2
\family default

\begin_inset Quotes crd
\end_inset

.
 Ces valeurs sont des combinaisons logiques de flags, et se prêtent bien
 à une notation en hexadécimal.
 Si un indicateur est 
\begin_inset Quotes cld
\end_inset

positionné
\begin_inset Quotes crd
\end_inset

 (sa valeur n'est pas nulle), ceci signifie que la valeur correspondante
 va être mise à jour dynamiquement.
 Dans le cas contraire, une valeur par défaut est utilisée.
 Une facette 
\begin_inset Quotes cld
\end_inset

FLM
\begin_inset Quotes crd
\end_inset

 est donc une combinaison d'indicateurs, qui ont la signification suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
0x1 le volume du jeu du clip va être mis à jour dynamiquement
\end_layout

\begin_layout Description
0x2 inutilisé
\end_layout

\begin_layout Description
0x4 la vitesse de jeu du clip, ou des grains du clip, va être mise à jour
 dynamiquement
\end_layout

\begin_layout Description
0x8 inutilisé
\end_layout

\begin_layout Description
0x10 La taille des grains va être mise à jour dynamiquement
\end_layout

\begin_layout Description
0x20 
\begin_inset Quotes cld
\end_inset

L'inclinaison
\begin_inset Quotes crd
\end_inset

 du grain va être mise à jour dynamiquement
\end_layout

\begin_layout Description
0x40 inutilisé
\end_layout

\begin_layout Description
0x80 La valeur du 
\begin_inset Quotes cld
\end_inset

plateau
\begin_inset Quotes crd
\end_inset

 du grain va être mise à jour dynamiquement
\end_layout

\begin_layout Description
0x100 Le point de départ de la lecture du grain est dynamique
\end_layout

\begin_layout Description
0x200 La variation autour du point de lecture du grain est dynamique
\end_layout

\begin_layout Description
0x400 La 
\begin_inset Quotes cld
\end_inset

masse
\begin_inset Quotes crd
\end_inset

 du nuage de grains généré est dynamique
\end_layout

\begin_layout Description
0x800 L'asynchronisme de la génération des grains est dynamique
\end_layout

\begin_layout Description
0x1000 Le sens de lecture de chaque grain est dynamiquement défini
\end_layout

\begin_layout Description
0x2000 L'inharmonicité (vitesse de lecture) des grains individuels est dynamique
ment variable
\end_layout

\begin_layout Description
0x4000 L'algorithme régissant cette inharmonicité est dynamiquement redéfinissab
le
\end_layout

\begin_layout Description
0x8000 La forme du Fade In des grains est dynamiquement redéfinissable
\end_layout

\begin_layout Description
0x1000 La forme du Fade Out des grains est dynamiquement redéfinissable
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Dyn-Par-1.png
	lyxscale 60
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-Dyn-Pars-1"

\end_inset

Affichage des paramètres dynamiques de jeu
\end_layout

\end_inset


\end_layout

\end_inset

Les deux valeurs 
\begin_inset Quotes cld
\end_inset

FLM1
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

FLM2
\begin_inset Quotes crd
\end_inset

 obéissent à la même définition.
 
\begin_inset Quotes cld
\end_inset

FLM1
\begin_inset Quotes crd
\end_inset

 est utilisée pour définir les paramètres dynamiques à la création du son,
 
\begin_inset Quotes cld
\end_inset

FLM2
\begin_inset Quotes crd
\end_inset

 est utilisée en cours de jeu, permettant toutes les transformations dynamiques
 désirées.
 Ainsi, un même drapeau peut être positionné à 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 dans 
\begin_inset Quotes cld
\end_inset

FLM1
\begin_inset Quotes crd
\end_inset

, indiquant que la facette correspondante va prendre la valeur du paramètre
 correspondant au moment du lancement du clip, tout en étant positionné
 à 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 dans 
\begin_inset Quotes cld
\end_inset

FLM2
\begin_inset Quotes crd
\end_inset

, indiquant que la facette ne sera pas modifiée durant le jeu du clip.
\end_layout

\begin_layout Section
Les paramètres et leurs actions
\end_layout

\begin_layout Standard
Une dizaine de nouveaux paramètres ont été définis, et quelques anciens
 paramètres ont vu leurs spécifications éclaircies.
 Ils permettent des ajustements ou des variations en temps réel de valeurs
 définies par les modes de jeu et les modes d'espace.
 Les paramètres dynamiques ont tous une valeur par défaut, qui ne modifie
 pas les choix effectués lors de la définition du fichier des modes de jeu.
 La figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-Dyn-Pars-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 montre l'affichage de ces paramètres.
 
\end_layout

\begin_layout Standard
Dans la description ci-dessous, le terme 
\begin_inset Quotes cld
\end_inset

usage
\begin_inset Quotes crd
\end_inset

 suivi d'un ou plusieurs numéros indique à quel moment (1, 2 et 3 ci-dessus)
 ces paramètres sont pris en compte.
 La présence de la mention 
\begin_inset Quotes cld
\end_inset

flm
\begin_inset Quotes crd
\end_inset

 indique que l'utilisation du paramètre est conditionnée par les valeurs
 des facettes 
\begin_inset Quotes cld
\end_inset

FLM1
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

FLM2
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
Play
\begin_inset space ~
\end_inset

Dur.
 (
\begin_inset Quotes cld
\end_inset

Play duration
\begin_inset Quotes crd
\end_inset

).
 Exprimé en secondes.
 Durée du jeu d'un clip en mode 
\begin_inset Quotes cld
\end_inset

Play
\begin_inset Quotes crd
\end_inset

, exprimée en secondes.
 Cette valeur est utilisée si la durée de jeu d'un clip n'est pas fixée
 dans le mode de jeu.
 Cette valeur est strictement respectée par les players.
 Usage
\begin_inset space ~
\end_inset

: 2.
\end_layout

\begin_layout Description
Loop
\begin_inset space ~
\end_inset

Dur.
 (
\begin_inset Quotes cld
\end_inset

Loop duration
\begin_inset Quotes crd
\end_inset

).
 Exprimé en secondes.
 Durée du jeu d'un clip en mode 
\begin_inset Quotes cld
\end_inset

Loop
\begin_inset Quotes crd
\end_inset

, exprimée en secondes.
 Cette valeur est utilisée si la durée de jeu d'un clip n'est pas fixée
 dans le mode de jeu.
 Cette valeur est strictement respectée par les players.
 Usage
\begin_inset space ~
\end_inset

: 2.
\end_layout

\begin_layout Description
Vol.
\begin_inset space ~
\end_inset

Glob.
 (
\begin_inset Quotes cld
\end_inset

Volume Global
\begin_inset Quotes crd
\end_inset

).
 Exprimé en dB.
 Modifie le volume de l'ensemble des sons générés.
 Usage
\begin_inset space ~
\end_inset

: 2, 3.
 
\end_layout

\begin_layout Description
Dyn.
\begin_inset space ~
\end_inset

Vol.
 (
\begin_inset Quotes cld
\end_inset

Volume Dynamique
\begin_inset Quotes crd
\end_inset

).
 Exprimé en dB.
 Modifie le volume des sons générés par les players.
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 0dB.
\end_layout

\begin_layout Description
Dyn.
\begin_inset space ~
\end_inset

Rate (
\begin_inset Quotes cld
\end_inset

Vitesse de lecture
\begin_inset Quotes crd
\end_inset

).
 Facteur sans dimension [0.01
\begin_inset space ~
\end_inset

...
\begin_inset space ~
\end_inset

10].
 Modifie la vitesse de lecture du clip ou des grains du clip.
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 1.
\end_layout

\begin_layout Description
Transpose (
\begin_inset Quotes cld
\end_inset

Transposition
\begin_inset Quotes crd
\end_inset

).
 Facteur entier sans dimension [-24
\begin_inset space ~
\end_inset

...
\begin_inset space ~
\end_inset

24].
 Modifie par demi-tons la vitesse de lecture du clip ou des grains du clip.
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 0.
\end_layout

\begin_layout Description
Direction (
\begin_inset Quotes cld
\end_inset

Sens de lecture
\begin_inset Quotes crd
\end_inset

).
 Probabilité (de 0 à 1) d'inversion du sens de lecture de chaque grain individue
l.
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 0.
\end_layout

\begin_layout Description
Dyn.
\begin_inset space ~
\end_inset

Gsize (
\begin_inset Quotes cld
\end_inset

Taille du grain
\begin_inset Quotes crd
\end_inset

).
 Facteur sans dimension [0.001
\begin_inset space ~
\end_inset

...
\begin_inset space ~
\end_inset

100].
 Modifie la taille des grains générés.
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 1.
\end_layout

\begin_layout Description
Dyn.
\begin_inset space ~
\end_inset

Top (
\begin_inset Quotes cld
\end_inset

Plateau
\begin_inset Quotes crd
\end_inset

).
 Pourcentage.
 Modifie le plateau des grains générés.
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 50%.
\end_layout

\begin_layout Description
Dyn.
\begin_inset space ~
\end_inset

Slant (
\begin_inset Quotes cld
\end_inset

Inclinaison
\begin_inset Quotes crd
\end_inset

).
 Pourcentage.
 Modifie l'inclinaison des grains générés.
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 50%.
\end_layout

\begin_layout Description
Gr.Fd.In.Shp (
\begin_inset Quotes cld
\end_inset

Forme de fade-in des grains
\begin_inset Quotes crd
\end_inset

).
 Réglable de -1 (forme très concave) à 1 (forme très convexe) en passant
 par 0 (montée linéaire).
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 0.
\end_layout

\begin_layout Description
Gr.Fd.Out.Shp (
\begin_inset Quotes cld
\end_inset

Forme de fade-out des grains
\begin_inset Quotes crd
\end_inset

).
 Réglable de -1 (forme très concave) à 1 (forme très convexe) en passant
 par 0 (descente linéaire).
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 0.
\end_layout

\begin_layout Description
Dyn.
\begin_inset space ~
\end_inset

Position (
\begin_inset Quotes cld
\end_inset

Point de référence
\begin_inset Quotes crd
\end_inset

).
 Pourcentage.
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 50%.
\end_layout

\begin_layout Description
Dyn.Pos.var (
\begin_inset Quotes cld
\end_inset

Variation autour du point de référence
\begin_inset Quotes crd
\end_inset

).
 Pourcentage.
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 100%.
\end_layout

\begin_layout Description
Dyn.
\begin_inset space ~
\end_inset

Mass (
\begin_inset Quotes cld
\end_inset

Densité du nuage de grains
\begin_inset Quotes crd
\end_inset

).
 Facteur sans dimension [0.01
\begin_inset space ~
\end_inset

...
\begin_inset space ~
\end_inset

100], mutipliant la valeur initiale définie par la facette 
\begin_inset Quotes cld
\end_inset

GDepth
\begin_inset Quotes crd
\end_inset

 du mode de jeu.
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 1.
\end_layout

\begin_layout Description
Asynchronicity Pourcentage.
 Ne modifie pas la densité, mais agit sur le synchronisme de la génération
 des grains.
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 0.
\end_layout

\begin_layout Description
Harmonic
\begin_inset space ~
\end_inset

Shape Numéro (0 à 10) d'un algorithme de transformation des grains.
 Expérimental.
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 0.
\end_layout

\begin_layout Description
Inharmonicity Paramètre (Pourcentage) utilisé par certains algorithmes évoqués
 ci-dessus.
 Usage
\begin_inset space ~
\end_inset

: flm, 2, 3.
 Defaut
\begin_inset space ~
\end_inset

: 0.
\end_layout

\begin_layout Standard
Tous ces aspects peuvent être définis de manière indépendante au moyen de
 sliders (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-Dyn-Pars-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

), mais aussi rassemblés et manipulés en une structure unique, les 
\begin_inset Quotes cld
\end_inset

paramètres dynamiques de jeu
\begin_inset Quotes crd
\end_inset

.
 Ces 
\begin_inset Quotes cld
\end_inset

préréglages
\begin_inset Quotes crd
\end_inset

 peuvent être créés dynamiquement, conservés, édités et modifiés, chargés
 pour modifier instantanément les jeu des clips courants, mais aussi associés
 spécifiquement à un clip particulier et conservés dans l'historique (c.f.
 la description du module 
\begin_inset Quotes cld
\end_inset

Playlog
\begin_inset Quotes crd
\end_inset

, 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Le-playlog"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Paragraph*
Note
\end_layout

\begin_layout Standard
Tous ces paramètres ont une influence sur le timbre des sons obtenus, même
 si dans certains cas cette influence est à peine perceptible.
 L'idéal est de travailler sur un seul son à la fois, jusqu'à obtenir le
 timbre recherché, puis d'enregistrer les paramètres au moyen du module
 
\begin_inset Quotes cld
\end_inset


\emph on
Dynamic Play Parameters
\emph default

\begin_inset Quotes crd
\end_inset

.
 La commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

 (solo) du module 
\begin_inset Quotes cld
\end_inset


\emph on
Sound Units
\emph default

\begin_inset Quotes crd
\end_inset

 permet précisément de placer tous les players en attente, en écoutant le
 seul son sélectionné.
\end_layout

\begin_layout Section
Le module 
\begin_inset Quotes cld
\end_inset

Dynamic Play Parameters
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Dyn-Par-2.png
	lyxscale 70
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GM-Dyn-Pars-2"

\end_inset

Le module 
\begin_inset Quotes cld
\end_inset

Dynamic Play Parameters
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Ce module, dont la figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-Dyn-Pars-2"
plural "false"
caps "false"
noprefix "false"

\end_inset

 donne l'aspect, va nous proposer nombre d'outils pour la gestion des paramètres
 dynamiques.
\end_layout

\begin_layout Standard
Il se compose de cinq zones, disposées du haut vers le bas
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Enumerate
Le 
\emph on
pad principal
\emph default
 contient 8 cellules, qui vont permettre de réaliser différentes interactions
 avec les paramètres, les préréglages, et les clips en cours de jeu.
 Ces cellules représentent, de gauche à droite
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Enumerate
Affichage du numéro de la configuration courante (c.f.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Visualisation-presets"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\end_layout

\begin_layout Enumerate
Référence au player et au clip en mode édition sous la forme [player\SpecialChar menuseparator
clip].
\end_layout

\begin_layout Enumerate
Mode de transfert des paramètres.
\end_layout

\begin_layout Enumerate
Valeur du paramètre 
\begin_inset Quotes cld
\end_inset

FLM1
\begin_inset Quotes crd
\end_inset

 du préréglage courant (en hexadécimal).
\end_layout

\begin_layout Enumerate
Valeur du paramètre 
\begin_inset Quotes cld
\end_inset

FLM2
\begin_inset Quotes crd
\end_inset

 du préréglage courant (en hexadécimal).
\end_layout

\begin_layout Enumerate
Valeur du masque de transfert 
\begin_inset Quotes cld
\end_inset

And
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Valeur du masque de transfert 
\begin_inset Quotes cld
\end_inset

Or
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Nom du flag pointé par la souris dans L'
\emph on
éditeur de drapeaux
\emph default
.
\end_layout

\end_deeper
\begin_layout Enumerate
L'
\emph on
éditeur de drapeaux
\emph default
, pad contenant 28 cellules circulaires, groupées 4 par 4, permettant d'éditer
 aisément un ensemble de drapeaux (flags) présenté sous forme d'un nombre
 hexadécimal.
\end_layout

\begin_layout Enumerate
L'
\emph on
afficheur de paramètres
\emph default
.
 Quatre sont visibles simultanément, les touches 
\begin_inset Formula $\blacktriangleleft$
\end_inset

 et 
\begin_inset Formula $\blacktriangleright$
\end_inset

 pouvant les faire défiler.
\end_layout

\begin_layout Enumerate
Un 
\emph on
slider
\emph default
, pour éditer le paramètre choisi.
\end_layout

\begin_layout Enumerate
Le 
\emph on
pad des préréglages
\emph default
, proposant 64 préréglages différents, numérotés de 1 à 64.
\end_layout

\begin_layout Subsection
Manipulation des préréglages
\end_layout

\begin_layout Standard
L'outil dont l'utilité immédiate est la plus évidente est probablement le
 
\emph on
pad des préréglages
\emph default
.
 Il suffit d'un clic gauche dans une case inutilisée (grise) pour capturer
 l'ensemble des paramètres dynamiques.
 La case change de couleur pour indiquer qu'elle a été utilisée.
 Ultérieurement, un clic droit dans cette case va recharger l'ensemble des
 paramètres dynamiques à partir de cette sauvegarde, et donc modifier le
 comportement de tous les players.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\emph on
cmd-alt-cg
\emph default

\begin_inset Quotes crd
\end_inset

 va libérer le préréglage, permettant de réaliser ultérieurement une nouvelle
 capture.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\emph on
cmd-cg
\emph default

\begin_inset Quotes crd
\end_inset

, force la capture des paramètres dynamiques dans cette case.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 sur un préréglage va, dans tous les cas, définir la configuration correspondant
e comme 
\begin_inset Quotes cld
\end_inset

configuration courante
\begin_inset Quotes crd
\end_inset

.
 Le numéro (de 1 à 64) de cette configuration s'affiche dans la première
 cellule du 
\emph on
pad principal
\emph default
.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\family typewriter
c
\family default

\begin_inset Quotes crd
\end_inset

 (touche du clavier) permet de copier (dans le préréglage 65) le préréglage
 associé à la case (1 à 64) pointée par la souris.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

 (touche du clavier) permet de coller dans le préréglage associé à la case
 (1 à 64) pointée par la souris la valeur du préréglage 65.
\end_layout

\begin_layout Subsection
Randomisation
\end_layout

\begin_layout Standard
Cette opération, dite parfois 
\begin_inset Quotes cld
\end_inset


\emph on
agitation
\emph default

\begin_inset Quotes crd
\end_inset

 consiste à modifier légèrement (ou non), au hasard, les valeurs des paramètres
 dynamiques pour obtenir de nouveaux sons inattendus (ou inentendus).
 Elle s'opère par l'une des touches 
\begin_inset Quotes cld
\end_inset


\family typewriter
A
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
Z
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
E
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
R
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
T
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
Y
\family default

\begin_inset Quotes crd
\end_inset

, qui ne diffèrent par leur effet que par l'ampleur croissante, de 
\begin_inset Quotes cld
\end_inset


\family typewriter
A
\family default

\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset


\family typewriter
Y
\family default

\begin_inset Quotes crd
\end_inset

, des variations obtenues.
 Comme on l'a vu au § précédent, cette modification s'applique directement
 aux players actifs, et ces nouveaux réglages peuvent être conservés dans
 n'importe quelle case du 
\emph on
pad des préréglages
\emph default
.
\end_layout

\begin_layout Subsection
Interpolation
\end_layout

\begin_layout Standard
Cette opération va permettre de naviguer d'un préset à un autre, de manière
 continue, par interpolation des valeurs de paramètres associés à ces deux
 présets.
 L'opération consiste à choisir un premier préset (par exemple, le 23) par
 un 
\begin_inset Quotes cld
\end_inset

cg
\begin_inset Quotes crd
\end_inset

, puis un second préset (par exemple, le 36) par un 
\begin_inset Quotes cld
\end_inset


\emph on
cmd-cd
\emph default

\begin_inset Quotes crd
\end_inset

.
 Les réglages du second préset deviennent alors actifs, et le slider d'édition
 affiche alors 
\begin_inset Quotes cld
\end_inset

Interp.
 23/36 1.000
\begin_inset Quotes crd
\end_inset

.
 L'indication 
\begin_inset Quotes cld
\end_inset

23/36
\begin_inset Quotes crd
\end_inset

 correspond donc aux présets entre lesquels on réalise l'interpolation,
 et la valeur du slider peut évoluer entre -1 et 1, -1 correspondant aux
 valeurs des paramètres du préset 23, 1 à celles du préset 36, et toute
 valeur comprise entre -1 et 1 correspond à une interpolation entre ces
 deux réglages.
\end_layout

\begin_layout Standard
Il est possible, en tapant 
\begin_inset Quotes cld
\end_inset

X
\begin_inset Quotes crd
\end_inset

, de passer en mode 
\emph on
extrapolation
\emph default
, les bornes de variations passant alors de [-1
\begin_inset space ~
\end_inset

1] à [-3
\begin_inset space ~
\end_inset

3].
 On revient au mode interpolation en tapant 
\begin_inset Quotes cld
\end_inset

I
\begin_inset Quotes crd
\end_inset

.
 Les variations sont interactives, et à tout moment il est possible de capturer
 un réglage intéressant par un 
\begin_inset Quotes cld
\end_inset

cg
\begin_inset Quotes crd
\end_inset

 dans une case du pad des préréglages.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Visualisation-presets"

\end_inset

Visualisation et édition de préréglages
\end_layout

\begin_layout Subsubsection
Utilisation
\end_layout

\begin_layout Standard
L'
\emph on
afficheur de paramètres
\emph default
 permet de consulter les valeurs des paramètres sauvegardés dans le préréglage
 courant.
 Ce dernier est choisi
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
par un 
\begin_inset Quotes cld
\end_inset

clic gauche
\begin_inset Quotes crd
\end_inset

 dans une cellule du pad des préréglages (pour les préréglages 1 à 64)
\end_layout

\begin_layout Itemize
par une interaction avec la cellule 
\begin_inset Quotes cld
\end_inset


\family typewriter
Config.
\family default

\begin_inset Quotes crd
\end_inset

 du 
\emph on
pad principal
\emph default
.
 La touche 
\begin_inset Quotes cld
\end_inset

+
\begin_inset Quotes crd
\end_inset

 (ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
=
\family default

\begin_inset Quotes crd
\end_inset

) incrémente ce numéro, la touche 
\begin_inset Quotes cld
\end_inset


\family typewriter
-
\family default

\begin_inset Quotes crd
\end_inset

 (ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
_
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
:
\family default

\begin_inset Quotes crd
\end_inset

) décrémente ce numéro.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
z
\family default

\begin_inset Quotes crd
\end_inset

 passe ce numéro à 0, 
\begin_inset Quotes cld
\end_inset


\family typewriter
d
\family default

\begin_inset Quotes crd
\end_inset

 (ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
p
\family default

\begin_inset Quotes crd
\end_inset

) choisit 
\begin_inset Quotes cld
\end_inset

68
\begin_inset Quotes crd
\end_inset

 qui est le numéro correspondant aux préréglages par défaut, transmis aux
 lecteurs lors du lancement d'un clip.
 Les touches 
\begin_inset Quotes cld
\end_inset


\family typewriter
q
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
r
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

 affichent respectivement les préréglages 66, 67 et 68.
\end_layout

\begin_layout Itemize
par le choix d'un player, dans le module 
\begin_inset Quotes cld
\end_inset


\emph on
Sound Units
\emph default

\begin_inset Quotes crd
\end_inset

.
 Ce choix s'effectue par un 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 dans l'une des cellules du module, ou encore par 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

 qui sélectionne la case désignée à l'écran par le curseur.
 Le numéro du player, et le numéro du clip correspondant s'affichent alors
 dans la case 2 du 
\emph on
pad principal
\emph default
, sous la forme [player\SpecialChar menuseparator
clip], avec la couleur (bleu ou orange) du mode de
 jeu associé au clip.
 Notons que ce choix peut concerner un player qui vient de cesser de jouer.
 Ce choix est valide jusqu'à une nouvelle utilisation du même player.
 Il suffit alors d'un 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 dans cette case 2 pour sélectionner la configuration associée au clip,
 dont le numéro s'affiche dans la case 1 sous la forme 
\begin_inset Quotes cld
\end_inset


\emph on
-P
\emph default

\begin_inset Quotes crd
\end_inset

, où 
\emph on
P
\emph default
 est le numéro du player.
\end_layout

\begin_layout Standard
La 
\begin_inset Quotes cld
\end_inset

configuration courante
\begin_inset Quotes crd
\end_inset

 est donc repérée par un numéro, qui désigne
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
0: les paramètres dynamiques, sur lesquels il est possible d'agir immédiatement.
\end_layout

\begin_layout Itemize
1 à 64 : l'une des configurations du pad des préréglages.
\end_layout

\begin_layout Itemize
65 : la dernière configuration choisie par un 
\begin_inset Quotes cld
\end_inset

copier
\begin_inset Quotes crd
\end_inset

, qui joue donc le rôle d'un clipboard.
\end_layout

\begin_layout Itemize
66 : la précédente configuration avant un 
\begin_inset Quotes cld
\end_inset

coller
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Itemize
67 : la configuration courante, avant toute modification, quand elle vient
 d'être choisie pour édition.
\end_layout

\begin_layout Itemize
68 : la configuration 
\begin_inset Quotes cld
\end_inset

par défaut
\begin_inset Quotes crd
\end_inset

, transmise à tout clip nouvellement joué.
\end_layout

\begin_layout Itemize
-1, -2, etc: la configuration du clip joué par le lecteur 1, 2, etc.
\end_layout

\begin_layout Standard
Quand une configuration a été choisie, son numéro s'inscrit dans la case
 1 du 
\emph on
pad principal
\emph default
, et tous les paramètres de cette configuration sont affichables dans l'
\emph on
afficheur de paramètres
\emph default
, et éditables.
 Faire défiler les différents paramètres au moyen des flèches gauche et
 droite, cliquer sur la case désirée, et le slider du paramètre s'affiche.
 Notons que ce slider va permettre de modifier le paramètre correspondant
 de la configuration 
\emph on
courante
\emph default
.
 Si le numéro de celle-ci est 0, le slider modifie directement le 
\emph on
paramètre dynamique
\emph default
, sinon seule la valeur correspondante de la configuration courante et modifiée.
\end_layout

\begin_layout Standard
Les valeurs 
\begin_inset Quotes cld
\end_inset


\family typewriter
FLM1
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
FLM2
\family default

\begin_inset Quotes crd
\end_inset

 qui sont des ensemble de drapeaux ne sont pas aisément éditables au moyen
 d'un slider, sauf si l'on se contente de choisir les positions extrêmes,
 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 (aucun drapeau n'est sélectionné) ou 
\begin_inset Quotes cld
\end_inset

0xFFFFF
\begin_inset Quotes crd
\end_inset

 (tous les drapeaux sont sélectionnés).
 Le module propose donc un mode d'édition supplémentaire pour ces deux valeurs.
 Le fonctionnement est le suivant
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Standard
Lorsqu'une configuration est sélectionnée, ces deux valeurs s'affichent
 (en orange et vert respectivement, sous forme hexadécimale) dans les cellules
 4 et 5 du 
\emph on
pad principal
\emph default
.
 On sélectionne l'une de ces deux cellules par un 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

, et la valeur correspondante s'affiche sous forme d'une suite de bits dans
 les 28 cellules de l'
\emph on
éditeur de drapeaux
\emph default
.
 Chaque cellule de l'éditeur va refléter, par sa couleur, la valeur du bit
 correspondant.
 Il est possible, par un 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 dans l'un des cercles, d'inverser le bit correspondant, et la valeur modifiée
 s'affiche, toujours en hexadécimal, dans cette cellule 4 ou 5.
 Signalons que les valeurs des cellules 6 et 7, repérées par des teintes
 de bleu différentes et les noms 
\begin_inset Quotes cld
\end_inset

And
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

Or
\begin_inset Quotes crd
\end_inset

, et dont l'utilité sera expliquée ultérieurement, vont pouvoir être éditées
 exactement de la même manière.
\end_layout

\begin_layout Standard
Notons encore que lorsque le pointeur de la souris passe au-dessus de l'un
 des cercles, le nom du paramètre affecté par le drapeau correspondant est
 affiché dans la cellule 8 du 
\emph on
pad principal.
 
\emph default
Ceci permet de s'assurer que le drapeau que l'on va modifier est bien celui
 qui nous intéresse.
 La couleur de cette cellule est identique à celle de la cellule (4, 5,
 6 ou 7) en cours d'édition si le drapeau est à 1, et est différente dans
 le cas contraire.
\end_layout

\begin_layout Standard
Il est possible de 
\emph on
désolidariser
\emph default
 la valeur affichée dans l'éditeur de drapeau de celles des cellules 4 à
 7 par un 
\begin_inset Quotes cld
\end_inset


\emph on
cd
\emph default

\begin_inset Quotes crd
\end_inset

 dans l'une de ces cellules.
 La case 8 prend alors une teinte foncée, indiquant que les actions dans
 l'éditeur de drapeau n'ont plus d'effet sur les valeurs de ces cellules.
\end_layout

\begin_layout Standard
Un 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 dans la cellule 8 permet de passer du mode 
\begin_inset Quotes cld
\end_inset

affichage du nom d'un drapeau particulier
\begin_inset Quotes crd
\end_inset

 au mode 
\begin_inset Quotes cld
\end_inset

affichage de l'ensemble des drapeaux en hexadécimal
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Un 
\begin_inset Quotes cld
\end_inset


\emph on
cd
\emph default

\begin_inset Quotes crd
\end_inset

 dans la cellule 8 montre le résultat de la transformation des valeurs des
 drapeaux après passage au filtre 
\begin_inset Quotes cld
\end_inset

And/Or
\begin_inset Quotes crd
\end_inset

.
 Très précisément, lorsque le mode de copie des paramètres affiché dans
 la cellule 3 du 
\emph on
pad principal
\emph default
 est 
\begin_inset Quotes cld
\end_inset

Copy Mod
\begin_inset Quotes crd
\end_inset

, une valeur 
\begin_inset Quotes cld
\end_inset

FLM
\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset

FLM1
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

FLM2
\begin_inset Quotes crd
\end_inset

) est copiée par
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Standard
\align center
\begin_inset CommandInset label
LatexCommand label
name "Equation-12"

\end_inset


\begin_inset Formula $FLM_{dest}\,=\,(FLM_{source}\,\&\,And)\,|\,Or$
\end_inset


\end_layout

\begin_layout Standard
Concrètement, la valeur de 
\begin_inset Quotes cld
\end_inset

And
\begin_inset Quotes crd
\end_inset

 va nous permettre de choisir les drapeaux de la valeur initiale que l'on
 veut conserver dans la destination, la valeur de 
\begin_inset Quotes cld
\end_inset

Or
\begin_inset Quotes crd
\end_inset

 va nous permettre d'en ajouter de nouveaux.
\end_layout

\begin_layout Standard
Illustrons par quelques cas concrets.
 On suppose que la case 
\begin_inset Quotes cld
\end_inset

Config
\begin_inset Quotes crd
\end_inset

 affiche 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

, indiquant que l'on travaille directement avec les paramètres courants
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
toutes les valeurs des paramètres conviennent parfaitement, et l'on veut
 qu'aucun ne soit modifié dynamiquement.
 Il suffit de passer la valeur de 
\begin_inset Quotes cld
\end_inset

FLM1
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

, et d'utiliser le mode 
\begin_inset Quotes cld
\end_inset

copy all
\begin_inset Quotes crd
\end_inset

.
 Ou encore, de ne pas modifier 
\begin_inset Quotes cld
\end_inset

FLM1
\begin_inset Quotes crd
\end_inset

, de passer 
\begin_inset Quotes cld
\end_inset

And
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

Or
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

, et d'utiliser le mode 
\begin_inset Quotes cld
\end_inset

copy mod
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
l'ensemble des réglages nous convient, mais on veut pouvoir 
\begin_inset Quotes cld
\end_inset

explorer
\begin_inset Quotes crd
\end_inset

 dynamiquement l'influence de la 
\emph on
position
\emph default
 de la lecture des grains dans l'ensemble du clip.
 On a probablement déjà réglé 
\begin_inset Quotes cld
\end_inset

Dyn.Pos.var
\begin_inset Quotes crd
\end_inset

 à une valeur faible (entre 0 et 15%), et l'on veut que la position dynamique
 
\begin_inset Quotes cld
\end_inset

Dyn.
\begin_inset space ~
\end_inset

Position
\begin_inset Quotes crd
\end_inset

 puisse varier dynamiquement.
 Le plus simple est d'afficher 
\begin_inset Quotes cld
\end_inset

Or
\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 sur la case 7 du 
\emph on
pad principal
\emph default
), de remettre à 0 sa valeur si nécessaire (
\begin_inset Quotes cld
\end_inset


\family typewriter
z
\family default

\begin_inset Quotes crd
\end_inset

 dans la case), de déplacer le pointeur dans l'éditeur de drapeaux, jusqu'à
 sélection du drapeau 
\begin_inset Quotes cld
\end_inset

Direction
\begin_inset Quotes crd
\end_inset

, et par un 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 de passer sa valeur à 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

.
 La case 7 affiche alors 
\begin_inset Quotes cld
\end_inset

Or
\begin_inset space ~
\end_inset

:
\begin_inset space ~
\end_inset

000100
\begin_inset Quotes crd
\end_inset

.
 Passer 
\begin_inset Quotes cld
\end_inset

And
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

, et utiliser le mode 
\begin_inset Quotes cld
\end_inset

copy mod
\begin_inset Quotes crd
\end_inset

.
 On peut aussi choisir 
\begin_inset Quotes cld
\end_inset

FLM1
\begin_inset Quotes crd
\end_inset

, passer sa valeur à 0, déplacer le pointeur dans l'éditeur de drapeaux,
 jusqu'à sélection du drapeau 
\begin_inset Quotes cld
\end_inset

Direction
\begin_inset Quotes crd
\end_inset

, et par un 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

, passer sa valeur à 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

.
 Après avoir effecuté la même manipulation pour 
\begin_inset Quotes cld
\end_inset

FLM2
\begin_inset Quotes crd
\end_inset

, utiliser le mode 
\begin_inset Quotes cld
\end_inset

copy all
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Après ces manipulations la commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
c
\family default

\begin_inset Quotes crd
\end_inset

 dans la case 
\begin_inset Quotes cld
\end_inset

configuration
\begin_inset Quotes crd
\end_inset

 copie la configuration courante (0, donc) dans le préréglage 65.
 Il est possible de 
\begin_inset Quotes cld
\end_inset

coller
\begin_inset Quotes crd
\end_inset

 cette configuration dans le pad des préréglages (faire 
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

 au-dessus de l'entrée désirée), ou dans un player.
 Choisir (
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

) l'un des players, même inactif.
 Sa dernière configuration utilisée s'affiche dans la case 2 (c.f.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GM-Dyn-Pars-2"
plural "false"
caps "false"
noprefix "false"

\end_inset

), et c'est cette configuration qui va être utilisée.
 Faire alors 
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

 au-dessus de cette case.
 
\end_layout

\begin_layout Standard
Il est aussi possible d'éditer directement la configuration d'un clip joué
 ou en cours de jeu dans le player lui-même.
 Après avoir choisi l'entrée désirée dans le module 
\begin_inset Quotes cld
\end_inset


\emph on
Sound Units
\emph default

\begin_inset Quotes crd
\end_inset

, faire un 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 sur la seconde case du 
\emph on
pad principal
\emph default
.
 Le numéro du player apparaît (sous la forme 
\begin_inset Quotes cld
\end_inset

-1
\begin_inset Quotes crd
\end_inset

 pour le player 1), et il est possible d'éditer tous les paramètres associés
 à ce jeu spécifique.
 Le player est verrouillé durant l'édition.
 Il est libéré automatiquement dès qu'une autre configuration est choisie.
\end_layout

\begin_layout Standard
Notons enfin qu'il est possible de relancer la lecture du clip sélectionné
 par un 
\begin_inset Quotes cld
\end_inset


\emph on
cd
\emph default

\begin_inset Quotes crd
\end_inset

 sur la case 2, tant que le player n'a pas été réutilisé.
\end_layout

\begin_layout Standard
Enfin, 
\begin_inset Quotes cld
\end_inset


\family typewriter
i
\family default

\begin_inset Quotes crd
\end_inset

 dans cette case 2 
\begin_inset Quotes cld
\end_inset

installe
\begin_inset Quotes crd
\end_inset

 les modifications dans l'historique du play log
\begin_inset space ~
\end_inset

: le clip sera rejoué avec ces valeurs spécifiques des paramètres, mais
 ne sera plus influencé par les paramètres dynamiques (il sera toujours
 possible de l'éditer à nouveau ultérieurement).
\end_layout

\begin_layout Subsubsection
Récapitulatif des commandes
\end_layout

\begin_layout Standard
Ce paragraphe décrit sommairement les commandes s'appliquant aux cinq zones
 d'édition du module 
\begin_inset Quotes cld
\end_inset


\emph on
Dynamic Play Parameters
\emph default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Paragraph*
Pad Principal
\end_layout

\begin_layout Description
Cellule
\begin_inset space ~
\end_inset

1 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 passe à l'édition du préréglage suivant.
 
\begin_inset Quotes cld
\end_inset


\emph on
cd
\emph default

\begin_inset Quotes crd
\end_inset

 passe à l'édition du préréglage précédent.
 
\begin_inset Quotes cld
\end_inset

+
\begin_inset Quotes crd
\end_inset

 (ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
=
\family default

\begin_inset Quotes crd
\end_inset

) passe à l'édition du préréglage suivant.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
-
\family default

\begin_inset Quotes crd
\end_inset

 (ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
_
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
:
\family default

\begin_inset Quotes crd
\end_inset

) passe à l'édition du préréglage précédent.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
z
\family default

\begin_inset Quotes crd
\end_inset

 choisit le préréglage 0.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
d
\family default

\begin_inset Quotes crd
\end_inset

 choisit le préréglage 68.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
p
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
q
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
r
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

 choisissent les préréglages 65, 66, 67 ou 68.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
c
\family default

\begin_inset Quotes crd
\end_inset

 copie le préréglage courant en 65.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

 colle le préréglage 65 dans le préréglage courant.
\end_layout

\begin_layout Description
Cellule
\begin_inset space ~
\end_inset

2 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 sélectionne la configuration associée au [player\SpecialChar menuseparator
clip] de cette cellule
 2 comme 
\begin_inset Quotes cld
\end_inset

configuration courante
\begin_inset Quotes crd
\end_inset

.
 
\begin_inset Quotes cld
\end_inset


\emph on
cd
\emph default

\begin_inset Quotes crd
\end_inset

 relance la lecture du clip, en tenant compte des modifications effectuées.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
c
\family default

\begin_inset Quotes crd
\end_inset

 copie la configuration [player\SpecialChar menuseparator
clip] en 65.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

 colle la configuration 65 dans le clip.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

 sauvegarde la configuration associée au [player\SpecialChar menuseparator
clip] dans l'historique.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
i
\family default

\begin_inset Quotes crd
\end_inset

 effectue la même opération, mais en passant 
\begin_inset Quotes cld
\end_inset


\family typewriter
FLM1
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
FLM2
\family default

\begin_inset Quotes crd
\end_inset

 à 0, ce qui assure que le jeu du clip sera basé exclusivement sur la configurat
ion locale enregistrée, et non les paramètres dynamiques.
 Enfin 
\begin_inset Quotes cld
\end_inset


\family typewriter
a
\family default

\begin_inset Quotes crd
\end_inset

 abandonne l'édition
\begin_inset space ~
\end_inset

: les modification exécutées ne seront pas inscrites dans l'historique.
\end_layout

\begin_layout Description
Cellule
\begin_inset space ~
\end_inset

3 Détermine le mode de copie
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset

Copy All
\begin_inset Quotes crd
\end_inset

 indique que paramètres et drapeaux sont copiés dans leur intégralité.
 
\begin_inset Quotes cld
\end_inset

Copy Par
\begin_inset Quotes crd
\end_inset

 indique que seuls les paramètres sont copiés.
 
\begin_inset Quotes cld
\end_inset

Copy Mod
\begin_inset Quotes crd
\end_inset

 fonctionne comme 
\begin_inset Quotes cld
\end_inset

Copy All
\begin_inset Quotes crd
\end_inset

, mais les drapeaux passent au travers du filtre décrit ci-dessus (§
\begin_inset CommandInset ref
LatexCommand vref
reference "Equation-12"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\emph on
cd
\emph default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
+
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
a
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
p
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
m
\family default

\begin_inset Quotes crd
\end_inset

 permettent de naviguer entre ces modes.
\end_layout

\begin_layout Description
Cellules
\begin_inset space ~
\end_inset

4,
\begin_inset space ~
\end_inset

5,
\begin_inset space ~
\end_inset

6
\begin_inset space ~
\end_inset

et
\begin_inset space ~
\end_inset

7 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 sélectionne la cellule pour édition dans l'éditeur de drapeaux.
 
\begin_inset Quotes cld
\end_inset


\emph on
cd
\emph default

\begin_inset Quotes crd
\end_inset

 désolidarise les cellules de cet éditeur.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
z
\family default

\begin_inset Quotes crd
\end_inset

 remet la cellule à 0.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
f
\family default

\begin_inset Quotes crd
\end_inset

 remet à cellule à 
\begin_inset Quotes cld
\end_inset

FFFFF
\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Description
Cellule
\begin_inset space ~
\end_inset

7 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
t
\family default

\begin_inset Quotes crd
\end_inset

 alternent entre vision par drapeau et vision de l'ensemble des drapeaux.
 
\begin_inset Quotes cld
\end_inset


\emph on
cd
\emph default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
x
\family default

\begin_inset Quotes crd
\end_inset

 alternent entre vision directe des 
\begin_inset Quotes cld
\end_inset

FLM
\begin_inset Quotes crd
\end_inset

 et vision modifiée par les options de recopie (§
\begin_inset CommandInset ref
LatexCommand vref
reference "Equation-12"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 
\end_layout

\begin_layout Paragraph*
Editeur de drapeaux
\end_layout

\begin_layout Standard
Lorsque l'on a sélectionné l'une des cellules 4 ou 5 du 
\emph on
pad principal
\emph default
, cette zone affiche dans les 28 cercles les drapeaux correspondants des
 valeurs 
\begin_inset Quotes cld
\end_inset


\family typewriter
FLM1
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
FLM2
\family default

\begin_inset Quotes crd
\end_inset

.
 La cellule 8 du 
\emph on
pad principal
\emph default
 affiche le nom du flag sur lequel le pointeur de la souris est positionné.
 Un 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 permet alors d'inverser ce flag (pour rappel, lorsque le flag est à 1,
 il est de la couleur du champ 
\begin_inset Quotes cld
\end_inset


\family typewriter
FLM1
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
FLM2
\family default

\begin_inset Quotes crd
\end_inset

 choisi
\begin_inset space ~
\end_inset

; ce flag à 1 implique que la valeur correspondante du paramètre vient du
 paramètre dynamique correspondant.
 Dans le cas contraire, cette valeur vient du champ fixe conservé dans le
 préréglage).
 Un 
\begin_inset Quotes cld
\end_inset


\emph on
cd
\emph default

\begin_inset Quotes crd
\end_inset

 sélectionne directement ce paramètre, dont la valeur est éditable au moyen
 du 
\begin_inset Quotes cld
\end_inset


\emph on
slider d'édition
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Paragraph*
L'afficheur de paramètres
\end_layout

\begin_layout Standard
Cette zone affiche 4 paramètres dynamiques, avec leurs noms et leurs valeurs
 courantes.
 Les touches 
\begin_inset Quotes cld
\end_inset


\begin_inset Formula $\blacktriangleleft$
\end_inset


\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\begin_inset Formula $\blacktriangleright$
\end_inset


\begin_inset Quotes crd
\end_inset

 permettent de les faire défiler vers la gauche ou vers la droite.
 Cliquer (
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

) dans l'une des quatre cases permet d'éditer la valeur correspondante,
 grâce au 
\begin_inset Quotes cld
\end_inset


\emph on
slider d'édition
\emph default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Paragraph*
Le slider d'édition
\end_layout

\begin_layout Standard
Lorsqu'il a été lié à l'un des paramètres dynamiques (c.f.
 les deux § ci-dessus), ce slider permet d'éditer le paramètre correspondant.
\end_layout

\begin_layout Paragraph*
Le pad des préréglages
\end_layout

\begin_layout Standard
Ce pad affiche 64 préréglages.
 Une sélection (par la 
\emph on
cellule 1
\emph default
 du 
\emph on
pad principal
\emph default
) ou un 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 sur une case copie dans le préréglage correspondant (si la case est initialemen
t vierge) les valeurs des paramètres dynamiques.
 Si la case est déjà utilisée, le 
\begin_inset Quotes cld
\end_inset


\emph on
cg
\emph default

\begin_inset Quotes crd
\end_inset

 a pour seul effet de sélectionner ce préréglage comme 
\begin_inset Quotes cld
\end_inset

préréglage courant
\begin_inset Quotes crd
\end_inset

.
 
\begin_inset Quotes cld
\end_inset


\emph on
cmd-cg
\emph default

\begin_inset Quotes crd
\end_inset

 force l'écriture des paramètres dynamiques, même si la case est déjà utilisée.
 
\begin_inset Quotes cld
\end_inset


\emph on
cmd-alt-cg
\emph default

\begin_inset Quotes crd
\end_inset

 efface le préréglage correspondant.
 Un 
\begin_inset Quotes cld
\end_inset


\emph on
cd
\emph default

\begin_inset Quotes crd
\end_inset

 affecte aux paramètres dynamiques les valeurs conservées dans le préréglage.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
c
\family default

\begin_inset Quotes crd
\end_inset

 copie les valeurs de ce préréglage dans le préréglage 65.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

 colle dans ce préréglage les valeurs du préréglage 65.
\end_layout

\begin_layout Part
Le langage de script
\end_layout

\begin_layout Chapter
Programmer avec mSL
\end_layout

\begin_layout Standard
Dans cette seconde partie, nous aborderons 
\emph on
mSL
\emph default
, (pour 
\begin_inset Quotes cld
\end_inset


\emph on
micro Script Language
\emph default

\begin_inset Quotes crd
\end_inset

), le langage de script intégré au Game Master.
 Nous nous intéresserons d'abord dans ce chapitre aux concepts les plus
 simples de la programmation, tels qu'ils sont incarnés en 
\emph on
mSL
\emph default
.
 Un autre chapitre décrira plus formellement le langage.
 Puis nous nous intéresserons aux interactions possibles entre 
\emph on
mSL
\emph default
 et le 
\emph on
Game Master
\emph default
, pour terminer par les aspects les plus évolués
\begin_inset space ~
\end_inset

: multiprogrammation, processus, messages, etc.
 Dans toutes ces parties, des exemples, directement exécutables, seront
 disponibles pour mettre en application les concepts exposés.
\end_layout

\begin_layout Standard
Ce premier chapitre a donc pour ambition de présenter assez brièvement une
 introduction à la programmation, destinée au programmeur débutant qui désire
 écrire ses premiers scripts en 
\emph on
mSL
\emph default
.
 Il ne propose rien de compliqué ni de révolutionnaire, mais gageons que
 même le programmeur chevronné y apprendra quelque chose à l'occasion...
 Celui-ci peut aussi passer immédiatement au chapitre suivant, où 
\emph on
mSL
\emph default
 est présenté plus en détail et plus formellement.
\end_layout

\begin_layout Standard
Sa lecture est cependant conseillée à tous.
 Assurez-vous de comprendre les codes sources proposés et les explications
 correspondantes.
 Ne sautez pas d'étapes
\begin_inset space ~
\end_inset

! Chaque exemple, chaque paragraphe vise à vous apporter quelques concepts
 supplémentaires...
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Introduction-Memoire"

\end_inset

Introduction
\end_layout

\begin_layout Standard
Une vision ancienne, mais toujours d'actualité, est de considérer qu'un
 ordinateur est composé d'une 
\begin_inset Quotes cld
\end_inset


\emph on
Mémoire Centrale
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Mémoire Centrale
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset

MC
\begin_inset Index idx
status open

\begin_layout Plain Layout
MC
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

), comportant un nombre élevé, mais fini, de 
\emph on
cellules
\emph default
 pouvant contenir des valeurs numériques, et d'une 
\begin_inset Quotes cld
\end_inset


\emph on
Unité Centrale
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Unité Centrale
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
UC
\end_layout

\end_inset

UC
\begin_inset Quotes crd
\end_inset

) pouvant exécuter des 
\emph on

\begin_inset Quotes cld
\end_inset

programmes
\emph default

\begin_inset Quotes crd
\end_inset

, réalisant des 
\begin_inset Quotes cld
\end_inset


\emph on
algorithmes
\emph default

\begin_inset Quotes crd
\end_inset

, dont le rôle est de modifier les valeurs des cellules de la mémoire, jusqu'à
 obtention du résultat attendu.
\end_layout

\begin_layout Standard
Cette vision est présentée ici car elle est explicitement intégrée à 
\emph on
mSL
\emph default
 (et à 
\emph on
eel2
\emph default
, aka 
\begin_inset Quotes cld
\end_inset


\emph on
JS
\emph default

\begin_inset Quotes crd
\end_inset

, son langage d'implémentation).
 Chaque cellule de la 
\begin_inset Quotes cld
\end_inset

MC
\begin_inset Quotes crd
\end_inset

 est désignée par son adresse, un nombre entier allant de 0 jusqu'au numéro
 de la dernière cellule, par exemple 16777215 (2 puissance 24 moins 1),
 ou encore 4294967295 (2 puissance 32 moins 1), etc.
 Le langage 
\begin_inset Quotes cld
\end_inset


\emph on
mSL
\emph default

\begin_inset Quotes crd
\end_inset

, et sa base d'implantation 
\begin_inset Quotes cld
\end_inset


\emph on
JS
\emph default

\begin_inset Quotes crd
\end_inset

, assimilent la mémoire à un tableau de nombres décimaux, chaque cellule
 de la mémoire pouvant contenir n'importe quel nombre décimal compris entre
 
\begin_inset Quotes cld
\end_inset

-1.7976931348623158E+308
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

1.7976931348623158E+308
\begin_inset Foot
status open

\begin_layout Plain Layout
Cette notation se lit 
\begin_inset Quotes cld
\end_inset

1 virgule 7976931348623158 multiplié par 10 élevé à la puissance 308
\begin_inset Quotes crd
\end_inset

, ce qui est un très grand nombre, 1 suivi de 308 zéros – pour comparaison,
 on évalue actuellement le nombre d'atomes de l'univers à 
\begin_inset Quotes cld
\end_inset

seulement
\begin_inset Quotes crd
\end_inset

 2 multiplié par 10 élevé à la puissance 79, soit, en décimal, 2 suivi de
 79 zéros.
 
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
En utilisant 
\emph on
mSL
\emph default
, il est possible de lire ou d'écrire n'importe quel mot de cette mémoire,
 au moyen d'une séquence d'instructions similaires aux suivantes
\begin_inset Foot
status open

\begin_layout Plain Layout
Nous utiliserons cette typographie particulière chaque fois que nous ferons
 référence à des éléments du langage mSL, identificateurs, valeurs numériques,
 fragments de code, etc.
\end_layout

\end_inset


\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var M = 0;
\end_layout

\begin_layout LyX-Code
M[7231];
\end_layout

\begin_layout LyX-Code
M[537328] = 7;
\end_layout

\begin_layout Standard
La première ligne déclare une variable (déclaration 
\begin_inset Quotes cld
\end_inset


\family typewriter
var
\family default

\begin_inset Quotes crd
\end_inset

) de nom 
\begin_inset Quotes cld
\end_inset


\family typewriter
M
\family default

\begin_inset Quotes crd
\end_inset

, et lui donne, par l'opérateur 
\begin_inset Quotes cld
\end_inset


\family typewriter
=
\family default

\begin_inset Quotes crd
\end_inset

, la valeur numérique 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

.
 La seconde ligne permet de lire la cellule de mémoire d'adresse 7231.
 Dans la troisième ligne, la cellule de mémoire située à l'adresse 537328
 est modifiée pour contenir la valeur 7.
 Toutes les instructions 
\emph on
mSL
\emph default
 se terminent par le caractère 
\begin_inset Quotes cld
\end_inset


\family typewriter
;
\family default

\begin_inset Quotes crd
\end_inset

, qui marque la fin de l'instruction.
 Notons que les espaces (blanc, tabulation, passage à la ligne) sont facultatifs
, sauf lorsqu'ils sont utilisés pour séparer deux séquences de lettres (ici,
 
\begin_inset Quotes cld
\end_inset


\family typewriter
var
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
M
\family default

\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Paragraph*
Note
\begin_inset space ~
\end_inset

: accès à la mémoire
\end_layout

\begin_layout Standard
Ce n'est bien sûr pas un hasard que la variable 
\begin_inset Quotes cld
\end_inset


\family typewriter
M
\family default

\begin_inset Quotes crd
\end_inset

 soit initialisée à 0.
 La 
\emph on
sémantique
\emph default
 de cette construction 
\begin_inset Quotes cld
\end_inset


\family typewriter
A[B]
\family default

\begin_inset Quotes crd
\end_inset

, dite 
\emph on
indexation
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
indexation
\end_layout

\end_inset

, est de consulter la cellule de mémoire 
\emph on
d'adresse
\emph default
 
\family typewriter
A+B
\family default
.
 Il est équivalent d'écrire 
\family typewriter
B[A
\family default
], voire 
\family typewriter
0[A+B]
\family default
 ou
\family typewriter
 (A+B)[0]
\family default
.
 
\family typewriter
M[7231]
\family default
 est donc équivalent à 
\family typewriter
0[7231]
\family default
, ou encore à 
\family typewriter
7001[230]
\family default

\begin_inset space \thinspace{}
\end_inset

! De même, 
\begin_inset Quotes cld
\end_inset


\family typewriter
A[B]=C
\family default

\begin_inset Quotes crd
\end_inset

 copie dans la cellule de mémoire de numéro 
\family typewriter
A+B
\family default
 la valeur 
\family typewriter
C
\family default
.
 
\end_layout

\begin_layout Standard
En général, l'on n'a pas besoin de lire ou d'écrire spécifiquement une adresse
 particulière de la mémoire, mais pour programmer un algorithme, il est
 très souvent nécessaire d'utiliser plusieurs quantités différentes, que
 l'on puisse aisément distinguer les unes des autres.
 Pour ce faire, nous allons demander à 
\emph on
mSL
\emph default
 d'associer pour nous une cellule de la mémoire de son choix, à un nom que
 nous avons choisi.
 Cette association (
\emph on
nom
\emph default
 et 
\emph on
cellule de mémoire
\emph default
) est dite 
\begin_inset Quotes cld
\end_inset


\emph on
variable
\emph default

\begin_inset Quotes crd
\end_inset

.
 Cette demande se fait sous la forme 
\begin_inset Quotes cld
\end_inset


\family typewriter
var
\begin_inset space ~
\end_inset

toto;
\family default

\begin_inset Quotes crd
\end_inset

 dans laquelle 
\family typewriter
var
\begin_inset Index idx
status open

\begin_layout Plain Layout
var
\end_layout

\end_inset


\family default
 est un 
\emph on
mot clef
\begin_inset Index idx
status open

\begin_layout Plain Layout
mot clef
\end_layout

\end_inset


\emph default
 du langage (on ne peut l'utiliser 
\emph on
que
\emph default
 pour déclarer une variable), et 
\family typewriter
toto
\family default
 est le nom que nous avons choisi pour cette variable.
 L'affectation va nous permettre de changer la valeur d'une variable.
\end_layout

\begin_layout Standard
Illustrons ces concepts par quelques exemples simples.
\end_layout

\begin_layout Paragraph*
Exemple 1
\end_layout

\begin_layout Standard
On veut calculer la somme des 10 premiers nombres entiers.
 On peut bien entendu écrire (
\emph on
algo
\begin_inset space ~
\end_inset

1.1
\emph default
)
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var s = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10;
\end_layout

\begin_layout Standard
qui répond parfaitement à la question, ou encore (
\emph on
algo
\begin_inset space ~
\end_inset

1.2
\emph default
)
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var s = (10 * (10 + 1)) / 2;
\end_layout

\begin_layout Standard
qui fait appel à la formule bien connue, 
\begin_inset Formula $\frac{N\times(N+1)}{2}$
\end_inset

, instanciée ici pour 
\begin_inset Formula $N=10$
\end_inset

.
\end_layout

\begin_layout Standard
Dans ces deux écritures, qui toutes deux vont associer la valeur 55 à la
 variable 
\family typewriter
s
\family default
, on trouve une 
\emph on
déclaration
\begin_inset Index idx
status open

\begin_layout Plain Layout
déclaration
\end_layout

\end_inset


\emph default
 de variable, 
\begin_inset Quotes cld
\end_inset


\family typewriter
var s;
\family default

\begin_inset Quotes crd
\end_inset

 et une 
\emph on
affectation
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
affectation
\end_layout

\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
s = expression;
\family default

\begin_inset Quotes crd
\end_inset

 qui consiste à modifier la valeur de la cellule de mémoire désignée par
 le nom placé à gauche du symbole d'affectation, 
\begin_inset Quotes cld
\end_inset


\family typewriter
=
\family default

\begin_inset Quotes crd
\end_inset

, pour la remplacer par le résultat de l'expression située à droite de ce
 signe.
 Ici, la déclaration et l'affectation sont combinées en une expression unique.
\end_layout

\begin_layout Standard
Dans les 
\emph on
expressions
\begin_inset Index idx
status open

\begin_layout Plain Layout
expression
\end_layout

\end_inset


\emph default
, l'on utilise des symboles traditionnels de l'informatique, 
\begin_inset Quotes cld
\end_inset


\family typewriter
+
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
*
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
/
\family default

\begin_inset Quotes crd
\end_inset

 pour représenter 
\emph on
l'addition
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
addition
\end_layout

\end_inset

, la 
\emph on
multiplication
\begin_inset Index idx
status open

\begin_layout Plain Layout
multiplication
\end_layout

\end_inset


\emph default
 et la 
\emph on
division
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
division
\end_layout

\end_inset

.
 On parle en général 
\emph on
d'opérateurs
\begin_inset Index idx
status open

\begin_layout Plain Layout
opérateur
\end_layout

\end_inset


\emph default
 pour désigner ces symboles qui font référence aux opérations mathématiques
 classiques.
 Les parenthèses permettent d'indiquer qu'une sous-expression doit être
 calculée en priorité, ici 
\begin_inset Quotes cld
\end_inset


\family typewriter
(10 + 1)
\family default

\begin_inset Quotes crd
\end_inset

.
 Ajoutons la 
\emph on
soustraction
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
soustraction
\end_layout

\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
-
\family default

\begin_inset Quotes crd
\end_inset

, et nous avons fait le tour des principales opérations arithmétiques.
 Enfin, vous l'avez remarqué, les instructions se terminent par un 
\emph on
point-virgule
\begin_inset Index idx
status open

\begin_layout Plain Layout
point-virgule
\end_layout

\end_inset


\emph default
, 
\begin_inset Quotes cld
\end_inset


\family typewriter
;
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Paragraph*
Note
\begin_inset space ~
\end_inset

: déclarations
\end_layout

\begin_layout Standard
Dans nombre de langages de programmation, le concept de 
\emph on
déclaration
\emph default
 est associé à celui de 
\begin_inset Quotes cld
\end_inset


\emph on
type
\emph default

\begin_inset Quotes crd
\end_inset

.
 Ainsi, le langage 
\begin_inset Quotes cld
\end_inset

C
\begin_inset Quotes crd
\end_inset

 distingue les 
\emph on
entiers
\emph default
, déclarés par 
\begin_inset Quotes cld
\end_inset


\family typewriter
int
\family default

\begin_inset Quotes crd
\end_inset

, nombres sans partie décimale, des 
\emph on
réels
\emph default
, déclarés par 
\begin_inset Quotes cld
\end_inset


\family typewriter
float
\family default

\begin_inset Quotes crd
\end_inset

, qui peuvent avoir une partie décimale.
 L'une des raisons est que cette distinction correspond au fait que les
 machines sur lesquelles existent des compilateur 
\begin_inset Quotes cld
\end_inset

C
\begin_inset Quotes crd
\end_inset

 proposent différents types de représentations internes des données, destinés
 à optimiser l'écriture et l'efficacité des programmes.
 Le langage 
\begin_inset Quotes cld
\end_inset


\emph on
eel2
\emph default

\begin_inset Quotes crd
\end_inset

 (ou 
\begin_inset Quotes cld
\end_inset

JSFX
\begin_inset Quotes crd
\end_inset

) ne propose pour sa part qu'un type unique de représentation des données,
 le 
\begin_inset Quotes cld
\end_inset


\emph on
flottant double
\emph default

\begin_inset Quotes crd
\end_inset

.
 Cette restriction se retrouve de fait dans le langage 
\emph on
mSL
\emph default
.
 Dès lors, pourquoi imposer une déclaration des variables ? 
\begin_inset Quotes cld
\end_inset

eel2
\begin_inset Quotes crd
\end_inset

 considère que tout identificateur rencontré dans un programme est implicitement
 déclaré comme variable.
 Ceci simplifie les envolées lyriques dans lesquelles le programmeur laisser
 les instructions couler à flots, et ne désire pas, en outre, s'ennuyer
 à déclarer les variables qu'il invente au fil de la plume...
 Mais est aussi extrêment propice à la création de bugs souvent difficiles
 à détecter, dans lesquelles une faute de frappe fait utiliser une autre
 variable que celle que l'on avait prévue
\begin_inset space ~
\end_inset

! C'est pour cette raison que j'ai choisi de rendre obligatoire la déclaration
 de toutes les variables utilisées, ce qui, rétroactivement, me semble aujourd'h
ui avoir été une sage décision.
\end_layout

\begin_layout Section
Premiers éléments
\end_layout

\begin_layout Standard
Un programme va consister en une séquence d'instructions.
 Nous les écrirons à raison d'une par ligne, et elles vont s'exécuter dans
 l'ordre, l'une après l'autre, de haut en bas.
 Ainsi, dans l'exemple suivant, tentez de calculer après chaque instruction,
 les valeurs des deux variables 
\begin_inset Quotes cld
\end_inset


\family typewriter
a
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
b
\family default

\begin_inset Quotes crd
\end_inset

.
 Que constatez-vous ?
\end_layout

\begin_layout LyX-Code
var a, b;
\end_layout

\begin_layout LyX-Code
a = 17;
\end_layout

\begin_layout LyX-Code
b = 11;
\end_layout

\begin_layout LyX-Code
a = a + b;
\end_layout

\begin_layout LyX-Code
b = a - b;
\end_layout

\begin_layout LyX-Code
a = a - b;
\end_layout

\begin_layout Standard
Après la déclaration des variables et leur initialisation, les trois dernières
 lignes constituent un 
\begin_inset Quotes cld
\end_inset

petit algorithme
\begin_inset Quotes crd
\end_inset

 qui, vous l'avez deviné, échange les valeurs de 
\begin_inset Quotes cld
\end_inset


\family typewriter
a
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
b
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Revenons à notre somme des dix premiers entiers, et proposons encore une
 autre approche, moins appropriée dans ce cas précis puisque des solutions
 plus simples existent, mais intéressante par sa généralité (
\emph on
algo
\begin_inset space ~
\end_inset

1.3
\emph default
).
\end_layout

\begin_layout LyX-Code
var s;
\end_layout

\begin_layout LyX-Code
var i;
\end_layout

\begin_layout LyX-Code
s = 0;
\end_layout

\begin_layout LyX-Code
i = 0;
\end_layout

\begin_layout LyX-Code
while (i < 10) (
\end_layout

\begin_layout LyX-Code
    i = i + 1;
\end_layout

\begin_layout LyX-Code
    s = s + i;
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
L'écriture semble compliquée, mais nous abordons ici le cœur de l'algorithmique
\begin_inset space ~
\end_inset

: construire l'équivalent d'une 
\begin_inset Quotes cld
\end_inset

recette de cuisine
\begin_inset Quotes crd
\end_inset

, compréhensible par la machine, qui puisse aboutir au résultat désiré.
\end_layout

\begin_layout Standard
Les quatre premières lignes sont des opérations qui sont maintenant familières
\begin_inset space ~
\end_inset

: déclarations et 
\emph on
initialisations
\emph default
 de variables.
 La cinquième ligne propose une construction nouvelle, qui est une 
\emph on
répétition d'instructions
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
répétition d'instructions
\end_layout

\end_inset

, souvent dite 
\emph on
boucle
\begin_inset Index idx
status open

\begin_layout Plain Layout
boucle
\end_layout

\end_inset


\emph default
.
 Sa syntaxe est la suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
while ( condition ) ( instructions );
\end_layout

\begin_layout Standard
Le mot-clef 
\begin_inset Quotes cld
\end_inset


\family typewriter
while
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 détermine la nature de l'instruction, les parenthèses et le point-virgule
 final sont obligatoires.
 Ces éléments, dans cet ordre précis, constituent la 
\emph on
syntaxe
\emph default
 de l'instruction.
 La 
\emph on
sémantique
\emph default
 de cette instruction est la suivante
\begin_inset space ~
\end_inset

: tant que le calcul de l'expression 
\begin_inset Quotes cld
\end_inset


\family typewriter
condition
\family default

\begin_inset Quotes crd
\end_inset

 donne le résultat 
\emph on
vrai
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
vrai
\end_layout

\end_inset

, l'instruction 
\emph on
while
\begin_inset Index idx
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset


\emph default
 va exécuter les 
\begin_inset Quotes cld
\end_inset


\family typewriter
instructions
\family default

\begin_inset Quotes crd
\end_inset

 placées dans le second couple de parenthèses.
 Rappelons ici que le format des instructions est libre
\begin_inset space ~
\end_inset

: un espace est nécessaire pour séparer deux identificateurs (par exemple
 le 
\emph on
mot-clef
\emph default
 
\family typewriter
var
\family default
 et l'
\emph on
identificateur
\emph default
 
\family typewriter
s
\family default
), mais les espaces sont facultatifs lorsqu'il n'y a pas d'ambiguité.
 On peut en placer autant que l'on le souhaite, insérer des sauts de ligne,
 etc.
\begin_inset space ~
\end_inset

; ainsi l'instruction while est ici écrite sur quatre lignes.
\end_layout

\begin_layout Standard
La condition de l'instruction 
\emph on
while
\emph default
, dans notre cas, est l'expression 
\begin_inset Quotes cld
\end_inset


\family typewriter
i < 10
\family default

\begin_inset Quotes crd
\end_inset

 qui se lit 
\begin_inset Quotes cld
\end_inset


\emph on
i inférieur à 10
\emph default

\begin_inset Quotes crd
\end_inset

, dont la valeur est 
\emph on

\begin_inset Index idx
status open

\begin_layout Plain Layout
vrai
\end_layout

\end_inset

vrai
\emph default
 si la variable 
\begin_inset Quotes cld
\end_inset


\family typewriter
i
\family default

\begin_inset Quotes crd
\end_inset

 est plus petite que 10, et 
\emph on
faux
\begin_inset Index idx
status open

\begin_layout Plain Layout
faux
\end_layout

\end_inset


\emph default
 sinon.
 Notons que lorsqu'une variable est utilisée dans une expression, elle est
 remplacée par le contenu de la cellule qu'elle désigne.
 
\end_layout

\begin_layout Standard
Soyons conscient également de l'aspect 
\emph on
temporel
\emph default
 lié à un programme.
 La machine évalue 
\emph on
dans l'ordre
\emph default
 du texte source les instructions successives du programme.
 Après la déclaration des variables 
\family typewriter
s
\family default
 et 
\family typewriter
i
\family default
, 
\family typewriter
s
\family default
 reçoit la valeur 0, puis 
\family typewriter
i
\family default
 reçoit la valeur 0, puis l'instruction 
\emph on
while
\emph default
 s'exécute.
\end_layout

\begin_layout Standard
Lors de l'exécution du 
\emph on
while
\emph default
, 
\begin_inset Quotes cld
\end_inset


\family typewriter
i < 10
\family default

\begin_inset Quotes crd
\end_inset

 est calculée une première fois.
 Il s'agit d'une comparaison, que l'on peut lire 
\begin_inset Quotes cld
\end_inset

i est-il strictement inférieur à 10 ?
\begin_inset Quotes crd
\end_inset

.
 Pour ce faire, la variable 
\family typewriter
i
\family default
 est remplacée par sa valeur, 0, et comme 0 est plus petit que 10, le résultat
 de la comparaison est 
\emph on
vrai
\emph default
.
 Ce résultat implique que le calcul des instructions situées entre les parenthès
es du 
\emph on
while
\emph default
 va être effectué.
 La première expression, 
\begin_inset Quotes cld
\end_inset


\family typewriter
i + 1
\family default

\begin_inset Quotes crd
\end_inset

 calcule donc 
\begin_inset Quotes cld
\end_inset


\family typewriter
0 + 1
\family default

\begin_inset Quotes crd
\end_inset

, et le résultat est mis 
\begin_inset Quotes cld
\end_inset

dans
\begin_inset Quotes crd
\end_inset

 
\family typewriter
i
\family default
, qui vaut maintenant 1.
 La seconde expression est 
\begin_inset Quotes cld
\end_inset


\family typewriter
s + i
\family default

\begin_inset Quotes crd
\end_inset

, les variables ont pour valeurs 0 pour 
\family typewriter
s
\family default
, 1 pour 
\family typewriter
i
\family default
, et le résultat est 1, qui est placé dans 
\family typewriter
s
\family default
.
\end_layout

\begin_layout Standard
Le premier calcul de la condition ayant fourni la valeur 
\emph on
vrai
\emph default
, la boucle 
\emph on
while
\emph default
 va donc être exécutée à nouveau.
 Le nouveau calcul de 
\begin_inset Quotes cld
\end_inset


\family typewriter
i < 10
\family default

\begin_inset Quotes crd
\end_inset

 se résume à 
\begin_inset Quotes cld
\end_inset


\family typewriter
1 < 10
\family default

\begin_inset Quotes crd
\end_inset

 qui est 
\emph on
vrai
\emph default
, ce qui va entraîner une nouvelle exécution des instructions internes du
 
\emph on
while
\emph default
.
 Celles-ci vont affecter 
\begin_inset Quotes cld
\end_inset


\family typewriter
1 + 1
\family default

\begin_inset Quotes crd
\end_inset

, soit 2, à 
\family typewriter
i
\family default
, puis 
\begin_inset Quotes cld
\end_inset


\family typewriter
1 + 2
\family default

\begin_inset Quotes crd
\end_inset

, soit 3, à 
\family typewriter
s
\family default
.
 La condition du 
\emph on
while
\emph default
 étant toujours 
\emph on
vraie
\emph default
, les calculs vont maintenant changer 
\family typewriter
i
\family default
 en 3, et 
\family typewriter
s
\family default
 en 6.
 A l'itération suivante, 
\family typewriter
i
\family default
 va devenir 4 et 
\family typewriter
s
\family default
 10.
 Puis les variables vont prendre les valeurs 5 et 15, 6 et 21, 7 et 28,
 8 et 36, 9 et 45, puis 10 et 55.
 A ce moment là, le test de la condition 
\begin_inset Quotes cld
\end_inset


\family typewriter
i < 10
\family default

\begin_inset Quotes crd
\end_inset

 calcule 
\begin_inset Quotes cld
\end_inset


\family typewriter
10 < 10
\family default

\begin_inset Quotes crd
\end_inset

, qui donne le résultat 
\emph on
faux
\emph default
, ce qui interrompt l'exécution de la boucle.
 Le résultat attendu, 55, est dès lors disponible dans la variable 
\family typewriter
s
\family default
.
\end_layout

\begin_layout Standard
L'intérêt de cette approche est qu'elle nous fournit un 
\emph on
mécanisme
\emph default
, dans lequel une variable, 
\family typewriter
i
\family default
, prend toutes les valeurs entre 1 et 10 (ou entre 1 et un nombre quelconque),
 à partir duquel on peut résoudre différents problèmes similaires.
\end_layout

\begin_layout Standard
Par exemple, si nous transformons la seconde instruction de la boucle en
 (
\emph on
algo
\begin_inset space ~
\end_inset

1.4
\emph default
)
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
s = s + (i * i);
\end_layout

\begin_layout Standard
nous calculons non pas la somme des nombres de 1 à 10, mais la somme des
 
\emph on
carrés
\emph default
 de ces nombres.
\end_layout

\begin_layout Standard
De même, 
\begin_inset Quotes cld
\end_inset


\family typewriter
s = s + sqrt(i)
\family default

\begin_inset Quotes crd
\end_inset

 va nous donner la somme des 
\emph on
racines carrées
\emph default
 des nombres de 1 à 10.
 Il est fait cette fois appel à la fonction prédéfinie 
\family typewriter
sqrt
\begin_inset Index idx
status open

\begin_layout Plain Layout
sqrt
\end_layout

\end_inset


\family default
 (
\emph on
square root
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
square root
\end_layout

\end_inset

).
 Signalons à cette occasion que la 
\emph on
syntaxe
\emph default
 d'un appel de fonction est
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
nom_de_la_fonction ( paramètres )
\end_layout

\begin_layout Standard
Les parenthèses suivant le nom de la fonction sont partie intégrante de
 la syntaxe d'appel de la fonction.
 C'est entre celles-ci que l'on place les valeurs à partir desquelles la
 fonction va effectuer son travail.
 Une fonction utilise habituellement une ou deux valeurs, mais certaines
 peuvent en attendre un grand nombre, séparées les unes des autres par des
 virgules, ou encore...
 aucune ! Une fonction est un 
\begin_inset Quotes cld
\end_inset


\emph on
petit algorithme
\emph default

\begin_inset Quotes crd
\end_inset

 qui s'applique à des données – le terme précis est 
\begin_inset Quotes cld
\end_inset


\emph on
paramètre
\emph default

\begin_inset Quotes crd
\end_inset

.
 Une fonction va utiliser un seul paramètre (comme 
\family typewriter
sqrt
\family default
), ou, comme nous le verrons bientôt, deux (
\family typewriter
min
\family default
 ou 
\family typewriter
max
\family default
), plus (
\family typewriter
sprintf
\family default
), voir aucun (
\family typewriter
stralloc
\family default
).
 Ces paramètres sont placés entre parenthèses, séparés par des virgules,
 à la suite du nom de la fonction.
 Cette 
\emph on
construction syntaxique
\emph default
 constitue un 
\emph on
appel de fonction
\emph default
.
 Tout comme 
\family typewriter
A[B]
\family default
 indique une indexation, 
\family typewriter
F(X)
\family default
, 
\family typewriter
G()
\family default
 ou 
\family typewriter
H(X,Y,Z)
\family default
 dénotent des appels de fonctions, avec 1, 0 et 3 paramètres respectivement.
\end_layout

\begin_layout Standard
Enfin, écrire 
\begin_inset Quotes cld
\end_inset


\family typewriter
s = s * i
\family default

\begin_inset Quotes crd
\end_inset

 (à condition d'avoir initialisé 
\family typewriter
s
\family default
 à 1 et non à 0) va nous fournir le produit des dix premiers entiers, c'est-à-di
re la 
\emph on
factorielle
\begin_inset Index idx
status open

\begin_layout Plain Layout
factorielle
\end_layout

\end_inset


\emph default
 de 10.
\end_layout

\begin_layout Paragraph*
Exemple 2
\end_layout

\begin_layout Standard
Continuons avec notre travail sur les boucles.
 Nous allons cette fois faire appel à un 
\emph on
tableau
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
tableau
\end_layout

\end_inset

.
 Alors que les variables que nous avons utilisées jusqu'à présent (telles
 
\family typewriter
s
\family default
 et 
\family typewriter
i
\family default
) sont associées à un unique élément, qui est une cellule de la mémoire,
 les tableaux font référence à une séquence d'éléments, c'est-à-dire plusieurs
 cellules de mémoire consécutives, désignées par leur numéro dans la séquence,
 de 0 à 
\begin_inset Formula $N-1$
\end_inset

.
 
\end_layout

\begin_layout Standard
Le problème que l'on se pose est de trouver le plus grand élément, dans
 un tableau de dix valeurs.
 Nous allons donner le nom de 
\begin_inset Quotes cld
\end_inset


\family typewriter
liste
\family default

\begin_inset Quotes crd
\end_inset

 à notre tableau, et le définir par
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var liste = data (7 11 43 0 2 1 1 637 -7 13);
\end_layout

\begin_layout Standard
La variable 
\begin_inset Quotes cld
\end_inset


\family typewriter
liste
\family default

\begin_inset Quotes crd
\end_inset

 est bien sûr déclarée par 
\begin_inset Quotes cld
\end_inset


\family typewriter
var
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
var
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

, et reçoit comme valeur un tableau de dix éléments, construit par l'opération
 
\begin_inset Quotes cld
\end_inset


\family typewriter
data
\family default

\begin_inset Quotes crd
\end_inset

.
 Le résultat de cette opération est l'adresse du premier élément de ce tableau.
 La valeur 7 est donc accessible par l'expression 
\begin_inset Quotes cld
\end_inset


\family typewriter
liste[0]
\family default

\begin_inset Quotes crd
\end_inset

, la valeur 11 par 
\begin_inset Quotes cld
\end_inset


\family typewriter
liste[1]
\family default

\begin_inset Quotes crd
\end_inset

, etc.
 (
\emph on
algo
\begin_inset space ~
\end_inset

2.1
\emph default
)
\begin_inset space ~
\end_inset

: 
\end_layout

\begin_layout LyX-Code
var liste = data (7 11 43 0 2 1 1 637 -7 13);
\end_layout

\begin_layout LyX-Code
var s;
\end_layout

\begin_layout LyX-Code
var i;
\end_layout

\begin_layout LyX-Code
s = 0;
\end_layout

\begin_layout LyX-Code
i = 0;
\end_layout

\begin_layout LyX-Code
while (i < 10) (
\end_layout

\begin_layout LyX-Code
    s = max(s, liste[i]);
\end_layout

\begin_layout LyX-Code
    i = i + 1;
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
L'écriture, là encore, est similaire à la boucle précédente.
 Nous faisons appel à l'indexation, symbolisée par les crochets, pour consulter
 les valeurs des éléments successifs de 
\begin_inset Quotes cld
\end_inset


\family typewriter
liste
\family default

\begin_inset Quotes crd
\end_inset

, ainsi qu'à la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
max
\end_layout

\end_inset

max
\family default

\begin_inset Quotes crd
\end_inset

.
 Celle-ci attend deux valeurs (ou, plus généralement, deux expressions),
 et nous renvoie la plus grande de ces deux valeurs.
 A chaque cycle, la plus grande valeur trouvée jusqu'à présent, 
\family typewriter
s
\family default
, est comparée avec l'élément courant, 
\family typewriter
liste[i]
\family default
, et la plus grande de ces deux valeurs est conservée.
 En utilisant la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
min
\end_layout

\end_inset

min
\family default

\begin_inset Quotes crd
\end_inset

 (minimum de deux valeurs) au lieu de 
\begin_inset Quotes cld
\end_inset


\family typewriter
max
\family default

\begin_inset Quotes crd
\end_inset

, on obtient encore un nouvel algorithme, recherchant, lui, le plus petit
 élément du vecteur.
\end_layout

\begin_layout Standard
Précisons que 
\begin_inset Quotes cld
\end_inset


\family typewriter
data
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
liste
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
i
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
max
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
while
\family default

\begin_inset Quotes crd
\end_inset

, etc., au-delà de tout rôle sémantique particulier, sont des 
\emph on
identificateurs
\emph default
.
 Syntaxiquement, un identificateur se construit comme une suite de lettres
 et de chiffres, débutant par une lettre, et pouvant comprendre le caractère
 
\begin_inset Quotes cld
\end_inset

_
\begin_inset Quotes crd
\end_inset

 assimilé à une lettre.
\end_layout

\begin_layout Section
Premiers essais
\end_layout

\begin_layout Standard
Il est temps de passer à la pratique...
 Et tout d'abord, se pose la question
\begin_inset space ~
\end_inset

: comment rédiger un programme 
\emph on
mSL
\emph default
 ? 
\end_layout

\begin_layout Standard
Le Game Master ne contient pas d'éditeur de texte.
 Le langage d'implantation, 
\begin_inset Quotes cld
\end_inset

JS
\begin_inset Quotes crd
\end_inset

, se prête mal à ce genre d'exercice, et il existe par ailleurs nombre d'outils,
 quels que soient la machine et le système utilisés, qui permettent cette
 activité.
 L'approche proposée est donc de créer, de manière indépendante de REAPER
 et du Game Master, un fichier texte contenant le programme 
\emph on
mSL
\emph default
 à tester, puis de charger ce programme dans le Game Master.
 Pour ma part, j'opère sur Mac, et j'utilise 
\emph on
VS Code
\begin_inset Index idx
status open

\begin_layout Plain Layout
VS Code
\end_layout

\end_inset


\emph default
 (
\emph on
Visual Studio Code
\begin_inset Index idx
status open

\begin_layout Plain Layout
Visual Studio Code
\end_layout

\end_inset


\emph default
), mais à l'occasion 
\emph on
TextEdit
\begin_inset Index idx
status open

\begin_layout Plain Layout
TextEdit
\end_layout

\end_inset


\emph default
 ou 
\emph on
Vim
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vim
\end_layout

\end_inset


\emph default
 conviennent parfaitement.
\end_layout

\begin_layout Standard
Essayons donc notre premier programme.
 Lancer 
\emph on
TextEdit
\begin_inset Index idx
status open

\begin_layout Plain Layout
TextEdit
\end_layout

\end_inset


\emph default
 (ou l'équivalent sur votre machine), et dans la fenêtre qui s'affiche (intitulé
e 
\begin_inset Quotes cld
\end_inset

Sans Titre
\begin_inset Quotes crd
\end_inset

), taper
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var s = (10 * (10 + 1)) / 2;
\end_layout

\begin_layout Standard
sauvegarder sous le nom 
\begin_inset Quotes cld
\end_inset


\family typewriter
test1.mSL
\family default

\begin_inset Quotes crd
\end_inset

.
 Le premier programme est écrit – car oui, cette expression est aussi un
 programme complet, prêt à être exécuté.
 Il nous faut maintenant le soumettre au GM.
 Que va-t-il se passer ?
\end_layout

\begin_layout Standard
Lorsque le GM reçoit un 
\begin_inset Quotes cld
\end_inset

programme
\begin_inset Quotes crd
\end_inset

 (c'est le cas si on lui propose un fichier dont le nom se termine par l'extensi
on 
\begin_inset Quotes cld
\end_inset


\family typewriter
.mSL
\family default

\begin_inset Quotes crd
\end_inset

), il considère que ce fichier doit être exécuté.
 Dans un premier temps, le texte du fichier est soumis à un module spécialisé,
 le compilateur 
\emph on
mSL
\emph default
, qui va analyser ce texte, et, si la syntaxe en est correcte, va générer
 une structure de donnée, le 
\begin_inset Quotes cld
\end_inset

code objet
\begin_inset Quotes crd
\end_inset

 représentant ce programme prêt à être exécuté (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "par:Note:-représentation-fonctions"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Dans le cas contraire, il imprime un message d'erreur, indiquant un type
 d'erreur, un numéro de ligne, et une position dans la ligne.
 Si tout s'est bien passé, le GM va construire un processus destiné à l'exécutio
n du programme, processus qui est confié à un interprète qui va se charger
 d'exécuter le code ainsi mis en forme.
 Là aussi, une erreur peut être détectée, qui provoquera l'arrêt de l'exécution.
\end_layout

\begin_layout Standard
Soumettons donc notre programme au GM.
 Pour ceci, afficher dans le Finder le répertoire dans lequel vous avez
 effectué la sauvegarde, faire un clic-gauche sur le nom du fichier, et,
 en gardant cette touche enfoncée, glisser le fichier sur la barre horizontale
 des tabulations, en haut de la fenêtre du Game Master (ai-je précisé qu'il
 fallait d'abord lancer l'exécution de celui-ci ?).
 Relâcher la touche de la souris
\begin_inset space ~
\end_inset

: le programme vient de s'exécuter, dans la plus parfaite discrétion.
\end_layout

\begin_layout Standard
Le but d'un script étant d'être le plus discret possible et de se faire
 oublier, on ne peut bien sûr rien reprocher au système.
 Pourtant, dans cette phase d'apprentissage, il serait bien de disposer
 un petit retour du système.
 Pour ceci, nous allons utiliser la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
GM_Log
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
GM_Log
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 qui va permettre de visualiser un message dans le journal du Game Master,
 affiché par le module 
\begin_inset Quotes cld
\end_inset

System Log
\begin_inset Quotes crd
\end_inset

.
 Ajoutons une seconde ligne
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
GM_Log("ça marche !");
\end_layout

\begin_layout Standard
Nous faisons ici appel à la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
GM_Log
\family default

\begin_inset Quotes crd
\end_inset

 – nous avons déjà rencontré d'autres fonctions comme 
\family typewriter
sqrt
\family default
, 
\family typewriter
max
\family default
, etc.
 – mais ici la donnée transmise à la fonction (on parle de 
\emph on
paramètre
\emph default
) est un nouvel objet
\begin_inset space ~
\end_inset

: une 
\emph on
chaîne de caractères
\begin_inset Index idx
status open

\begin_layout Plain Layout
chaîne de caractères
\end_layout

\end_inset


\emph default
, qui est une suite de lettres, chiffres, espaces et tous ces autres signes
 bizarres du clavier, suite placée entre doubles quotes, 
\begin_inset Quotes cld
\end_inset


\family typewriter
"
\family default

\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-mSL-Exo-1.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Prog-1"

\end_inset

Le message du premier programme
\end_layout

\end_inset


\end_layout

\end_inset

Exécutons le programme ainsi modifié
\begin_inset space ~
\end_inset

: notre message s'affiche dans le module 
\begin_inset Quotes cld
\end_inset

System Log
\begin_inset Quotes crd
\end_inset

 (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Prog-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Nous voici donc rassurés sur le fait que le calcul se soit exécuté.
\end_layout

\begin_layout Standard
Bien sûr, il n'est pas très satisfaisant de ne pas voir le résultat du programme.
 Transformons le en ceci
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
GM_Log("Calcul de la somme des dix premiers entiers.");
\end_layout

\begin_layout LyX-Code
var s = (10 * (10 + 1)) / 2;
\end_layout

\begin_layout LyX-Code
var str = stralloc();
\end_layout

\begin_layout LyX-Code
sprintf(str, "s vaut %d", s);
\end_layout

\begin_layout LyX-Code
GM_Log(str); 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-mSL-Exo-1-2.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Prog-1-1"

\end_inset

Les messages du second programme
\end_layout

\end_inset


\end_layout

\end_inset

La figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Prog-1-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 nous montre le résultat de cette nouvelle exécution.
 Cette fois-ci, un premier message indique la raison d'être du programme.
 Puis vient le calcul proprement dit, et enfin trois lignes qui ne servent
 qu'à afficher le résultat.
 
\end_layout

\begin_layout Standard
Analysons-les en détail.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
var str = stralloc();
\family default

\begin_inset Quotes crd
\end_inset

 déclare une nouvelle variable, de nom 
\begin_inset Quotes cld
\end_inset


\family typewriter
str
\family default

\begin_inset Quotes crd
\end_inset

, et lui affecte le résultat de l'appel de la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
stralloc
\family default

\begin_inset Quotes crd
\end_inset

.
 Celle-ci ne prend pas de données, mais fournit à chaque appel une nouvelle
 
\emph on
chaîne de caractères
\emph default
, qui va pouvoir être modifiée par le programme.
 La ligne suivante nous montre un appel d'une fonction très spéciale, 
\family typewriter
sprintf
\family default
, dont le rôle est de représenter, sous la forme d'une séquence de caractères,
 des valeurs numériques quelconques.
 Le premier paramètre est la chaîne que nous venons d'obtenir, à l'intérieur
 de laquelle va s'exécuter l'édition.
 Le second paramètre est le 
\emph on
format
\emph default
 d'édition.
 Dans cet exemple, la séquence de deux caractères 
\begin_inset Quotes cld
\end_inset


\family typewriter
%d
\family default

\begin_inset Quotes crd
\end_inset

 indique qu'un nombre va être affiché sous la forme d'un 
\emph on
entier
\emph default
.
 Cette description de format de représentation peut être associée à d'autres
 caractères, qui vont être reproduits tels quels.
 Cette 
\begin_inset Quotes cld
\end_inset


\emph on
spécification de sortie
\emph default

\begin_inset Quotes crd
\end_inset

 est représentée par une chaîne de caractères, qui est le second élément
 de l'appel de la fonction.
 Le premier élément est une chaîne de caractères, à l'intérieur de laquelle
 va être éditée la valeur numérique, et le troisième élément de l'appel
 est la valeur à éditer.
 Enfin, la ligne suivante imprime la valeur de la variable 
\family typewriter
str
\family default
, qui désigne la chaîne de caractères qui sert de support à l'édition.
 On notera que le 
\begin_inset Quotes cld
\end_inset

System Log
\begin_inset Quotes crd
\end_inset

 édite le dernier message reçu en haut de sa fenêtre, 
\begin_inset Quotes cld
\end_inset

poussant
\begin_inset Quotes crd
\end_inset

 les autres vers le bas.
 Les messages venus d'un programme se lisent donc de haut en bas en ordre
 inverse de leur arrivée.
 
\end_layout

\begin_layout Standard
Transformons de même notre programme de recherche du plus grand entier d'un
 tableau
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
GM_Log("Recherche du plus grand élément d'un tableau.");
\end_layout

\begin_layout LyX-Code
var liste = data (7 11 43 0 2 1 1 637 -7 13); 
\end_layout

\begin_layout LyX-Code
var s; var i; 
\end_layout

\begin_layout LyX-Code
s = 0; i = 0; 
\end_layout

\begin_layout LyX-Code
while (i < 10) (
\end_layout

\begin_layout LyX-Code
    s = max(s, liste[i]);
\end_layout

\begin_layout LyX-Code
    i = i + 1;
\end_layout

\begin_layout LyX-Code
); 
\end_layout

\begin_layout LyX-Code
var str = stralloc(); 
\end_layout

\begin_layout LyX-Code
sprintf(str, "s vaut %d", s); 
\end_layout

\begin_layout LyX-Code
GM_Log(str); 
\end_layout

\begin_layout Standard
Nous obtenons dans le 
\emph on
log
\emph default
 la sortie suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
s vaut 637
\end_layout

\begin_layout LyX-Code
Recherche du plus grand élément d'un tableau.
\end_layout

\begin_layout Standard
Ce qui nous conforte dans l'idée que notre programme est correct.
 Mais est-ce bien certain ? Le fait d'avoir un programme qui s'exécute sans
 erreur et fournit la valeur attendue n'implique pas forcément qu'il soit
 juste...
 Reprenons notre exemple, calculons cette fois avec d'autres données le
 
\emph on
plus petit
\emph default
 élément, en utilisant la fonction 
\family typewriter
min
\family default
.
 Le texte devient
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
GM_Log("Recherche du plus petit élément d'un tableau.");
\end_layout

\begin_layout LyX-Code
var liste = data (5 7 328 2 110 220 380 1138 334 17); 
\end_layout

\begin_layout LyX-Code
var s; var i; 
\end_layout

\begin_layout LyX-Code
s = 0; i = 0; 
\end_layout

\begin_layout LyX-Code
while (i < 10) ( 
\end_layout

\begin_layout LyX-Code
    s = min(s, liste[i]);
\end_layout

\begin_layout LyX-Code
    i = i + 1;
\end_layout

\begin_layout LyX-Code
); 
\end_layout

\begin_layout LyX-Code
var str = stralloc(); 
\end_layout

\begin_layout LyX-Code
sprintf(str, "s vaut %d", s); 
\end_layout

\begin_layout LyX-Code
GM_Log(str); 
\end_layout

\begin_layout Standard
L'exécution ne lasse pas de nous surprendre
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
s vaut 0
\end_layout

\begin_layout LyX-Code
Recherche du plus petit élément d'un tableau.
\end_layout

\begin_layout Standard
La raison, nous la découvrons assez vite
\begin_inset space ~
\end_inset

: nous avons choisi 
\begin_inset Quotes cld
\end_inset


\family typewriter
0
\family default

\begin_inset Quotes crd
\end_inset

 comme valeur initiale de 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

, un nombre plus petit que tous ceux du tableau
\begin_inset space ~
\end_inset

! Au fil des itérations de notre boucle 
\emph on
while
\emph default
, du fait que les éléments du tableau sont tous strictement positifs, et
 donc plus grands que notre point de départ, 0, la variable 
\family typewriter
s
\family default
 va garder cette dernière valeur.
 Il est clair que 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 n'était pas le meilleur choix comme valeur initiale.
\end_layout

\begin_layout Standard
Revenons sur nos premiers algorithmes.
 Dans chacun, une variable, qui va être le résultat, part d'une valeur initiale,
 et évolue au fur et à mesure que l'opération progresse jusqu'à contenir
 le résultat.
 La formulation même de la question, ou de la finalité de l'algorithme,
 nous fournit une indication précise
\begin_inset space ~
\end_inset

: calcul de la 
\begin_inset Quotes cld
\end_inset

somme
\begin_inset Quotes crd
\end_inset

 des dix premiers entiers, du 
\begin_inset Quotes cld
\end_inset

produit
\begin_inset Quotes crd
\end_inset

 de ces entiers, du 
\begin_inset Quotes cld
\end_inset

plus petit
\begin_inset Quotes crd
\end_inset

 ou du 
\begin_inset Quotes cld
\end_inset

plus grand
\begin_inset Quotes crd
\end_inset

 des éléments d'un tableau.
 La fonction essentielle impliquée dans ces algorithmes est l'addition,
 la multiplication, le maximum ou encore le minimum.
 Dans ces cas là, il est souvent pertinent de choisir comme 
\begin_inset Quotes cld
\end_inset

valeur résultat
\begin_inset Quotes crd
\end_inset

 de départ 
\emph on
l'élément neutre
\emph default
 de la fonction concernée
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 respectivement pour l'addition et la multiplication.
 Plus généralement, l'élément neutre 
\begin_inset Formula $e$
\end_inset

 d'une fonction 
\begin_inset Formula $f$
\end_inset

 définie sur un ensemble 
\begin_inset Formula $E$
\end_inset

 est tel que 
\begin_inset Formula $\forall x\in E,\,f(x,e)=f(e,x)=x$
\end_inset

.
 Pour le maximum, cet élément est le plus petit nombre représentable sur
 la machine, soit 
\begin_inset Formula $-\infty$
\end_inset

 si ce concept est accessible dans le langage, ou encore, dans notre cas,
 
\begin_inset Formula $-1.7976931348623158E+308$
\end_inset

, puisque 
\emph on
mSL
\emph default
 travaille avec des flottants 64 bits à la norme IEEE
\begin_inset space ~
\end_inset

754.
 Pour le minimum, l'élément neutre est la valeur opposée, 
\begin_inset Formula $1.7976931348623158E+308$
\end_inset

.
 Pour faire fonctionner correctement notre programme, il suffit donc de
 remplacer 
\begin_inset Quotes cld
\end_inset


\family typewriter
s = 0;
\family default

\begin_inset Quotes crd
\end_inset

 par 
\begin_inset Quotes cld
\end_inset


\family typewriter
s = 1.7976931348623158E+308;
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Signalons une autre approche
\begin_inset space ~
\end_inset

: lorsque le concept est de calculer une somme, un produit, un maximum ou
 un minimum d'un ensemble, on peut utiliser n'importe quel élément de l'ensemble
 comme point de départ.
 Le plus simple est souvent de prendre le premier élément, et de débuter
 l'algorithme à partir de la seconde position.
 Voici un exemple ainsi modifié
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
GM_Log("Recherche du plus grand élément d'un tableau.");
\end_layout

\begin_layout LyX-Code
var liste = data (7 11 43 0 2 1 1 637 -7 13); 
\end_layout

\begin_layout LyX-Code
var s; var i; 
\end_layout

\begin_layout LyX-Code
s = liste[0]; i = 1; 
\end_layout

\begin_layout LyX-Code
while (i < 10) (
\end_layout

\begin_layout LyX-Code
    s = max(s, liste[i]);
\end_layout

\begin_layout LyX-Code
    i = i + 1;
\end_layout

\begin_layout LyX-Code
); 
\end_layout

\begin_layout LyX-Code
var str = stralloc(); 
\end_layout

\begin_layout LyX-Code
sprintf(str, "s vaut %d", s); 
\end_layout

\begin_layout LyX-Code
GM_Log(str); 
\end_layout

\begin_layout Standard
Notons que 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

 prend maintenant la valeur du premier élément, de numéro 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

, et que la boucle débute à l'indice 
\begin_inset Quotes cld
\end_inset


\family typewriter
i = 1;
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
L'algorithme suivant va nous permettre de trouver la position du plus petit
 élément d'un tableau
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
GM_Log("Indice du plus petit élément d'un tableau.");
\end_layout

\begin_layout LyX-Code
var liste = data (7 11 43 0 2 1 1 637 -7 13); 
\end_layout

\begin_layout LyX-Code
var s, i; 
\end_layout

\begin_layout LyX-Code
s = 0; i = 1; 
\end_layout

\begin_layout LyX-Code
while (i < 10) (
\end_layout

\begin_layout LyX-Code
    ((liste[i] < liste[s]) ? (s = i;););
\end_layout

\begin_layout LyX-Code
    i = i + 1;
\end_layout

\begin_layout LyX-Code
); 
\end_layout

\begin_layout LyX-Code
var str = stralloc(); 
\end_layout

\begin_layout LyX-Code
sprintf(str, "s vaut %d", s); 
\end_layout

\begin_layout LyX-Code
GM_Log(str); 
\end_layout

\begin_layout Standard
Ligne 3, nous utilisons l'écriture 
\begin_inset Quotes cld
\end_inset


\family typewriter
var s, i;
\family default

\begin_inset Quotes crd
\end_inset

 pour déclarer les deux variables en une seule instruction.
 Nous faisons également appel, ligne 6, à une construction nouvelle, 
\emph on
l'instruction conditionnelle
\emph default
.
 Celle-ci obéit à l'une des deux syntaxes suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
( ( condition ) ? ( si_vrai_alors_ceci ); );
\end_layout

\begin_layout LyX-Code
( ( condition ) ? ( si_vrai_alors_ceci ) : ( sinon_celà ); );
\end_layout

\begin_layout Standard
Avouons immédiatement que toutes les parenthèses ne sont pas indispensables.
 J'utilise ici les parenthèses externes pour m'assurer que le tout constitue
 une instruction, et les parenthèses internes pour m'assurer de délimiter
 correctement la 
\begin_inset Quotes cld
\end_inset


\emph on
condition
\emph default

\begin_inset Quotes crd
\end_inset

, la partie 
\begin_inset Quotes cld
\end_inset


\emph on
alors_ceci
\emph default

\begin_inset Quotes crd
\end_inset

 et la partie 
\begin_inset Quotes cld
\end_inset


\emph on
sinon_celà
\emph default

\begin_inset Quotes crd
\end_inset

, cette dernière pouvant être facultative (première syntaxe).
\end_layout

\begin_layout Standard
Les éléments importants sont le 
\begin_inset Quotes cld
\end_inset


\family typewriter
?
\family default

\begin_inset Quotes crd
\end_inset

 qui termine la condition, et le 
\begin_inset Quotes cld
\end_inset


\family typewriter
:
\family default

\begin_inset Quotes crd
\end_inset

 qui introduit le 
\begin_inset Quotes cld
\end_inset

sinon
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Dans notre algorithme, 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

 représente l'indice (le numéro) du plus petit élément trouvé jusqu'alors.
 Lorsque le test 
\begin_inset Quotes cld
\end_inset


\family typewriter
liste[i] < liste[s]
\family default

\begin_inset Quotes crd
\end_inset

 nous dit que le nouvel élément courant de la liste, d'indice 
\begin_inset Quotes cld
\end_inset


\family typewriter
i
\family default

\begin_inset Quotes crd
\end_inset

, est plus petit que celui déjà trouvé, on change la valeur de 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

 pour désigner ce nouvel élément.
\end_layout

\begin_layout Section
Opérateurs, fonctions, expressions et instructions
\end_layout

\begin_layout Standard
Nous avons jusqu'à présent manipulé des variables, qui peuvent référencer
 un élément unique de la mémoire (on parle de variables 
\emph on
simples
\emph default
 ou de 
\emph on
scalaires
\emph default
), ou une séquence d'éléments, les 
\emph on
tableaux
\emph default
.
 
\end_layout

\begin_layout Standard
Les calculs s'effectuent sur ces données au moyen d'
\emph on
opérateurs 
\emph default
(
\begin_inset Quotes cld
\end_inset


\family typewriter
+
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
-
\family default

\begin_inset Quotes crd
\end_inset

, etc.) ou de 
\emph on
fonctions
\emph default
 (
\begin_inset Quotes cld
\end_inset


\family typewriter
max
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
min
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
sqrt
\family default

\begin_inset Quotes crd
\end_inset

, etc.) qui sont des objets similaires, aux détails de syntaxe près.
 Cette syntaxe, justement, a été choisie pour rendre plus familière l'écriture
 des programmes.
 Les signes les plus proches de la représentation mathématique usuelle ont
 été choisis pour représenter les opérations correspondantes.
 Les caractères disponibles sur le clavier étant en nombre limité, des 
\emph on
noms
\emph default
 (ou 
\emph on
identificateurs
\emph default
) sont utilisés pour représenter les autres fonctions.
\end_layout

\begin_layout Standard
De même, la notation mathématique traditionnelle utilise des conventions
 spécifiques pour décider quelle opération est exécutée avant telle autre.
 Ainsi, dans la fameuse écriture 
\begin_inset Formula $ax^{2}+bc+c$
\end_inset

, on se souvient que 
\begin_inset Formula $x^{2}$
\end_inset

 est calculé en priorité, que 
\begin_inset Formula $ax^{2}$
\end_inset

 et 
\begin_inset Formula $bx$
\end_inset

 contiennent des multiplications implicites (pour 
\begin_inset Formula $a\times x^{2}$
\end_inset

 et 
\begin_inset Formula $b\times x$
\end_inset

), qui s'exécutent sous la forme des produits de 
\begin_inset Formula $a$
\end_inset

 par 
\begin_inset Formula $x^{2}$
\end_inset

 et de 
\begin_inset Formula $b$
\end_inset

 par 
\begin_inset Formula $x$
\end_inset

, et que viennent enfin les additions.
 
\end_layout

\begin_layout Standard
On retrouve de même dans le langage 
\emph on
mSL
\emph default
 des priorités entre les opérateurs.
 Dans une expression qui contient des additions et des multiplications,
 les multiplications s'effectuent en priorité.
 Notre trinôme du second degré s'écrit ainsi en 
\emph on
mSL
\emph default
 
\begin_inset Quotes cld
\end_inset


\family typewriter
a*x*x+b*x+c
\family default

\begin_inset Quotes crd
\end_inset

, où 
\begin_inset Quotes cld
\end_inset


\family typewriter
x*x
\family default

\begin_inset Quotes crd
\end_inset

 traduit 
\begin_inset Formula $x^{2}$
\end_inset

, en utilisant les fonctions que nous connaissons déjà, mais on peut aussi
 écrire, d'une manière encore plus proche de l'originale, 
\begin_inset Quotes cld
\end_inset


\family typewriter
a*x^2+b*x+c
\family default

\begin_inset Quotes crd
\end_inset

.
 Ici, l'opérateur 
\begin_inset Quotes cld
\end_inset


\family typewriter
^
\family default

\begin_inset Quotes crd
\end_inset

 représente l'élévation à la puissance, et est plus prioritaire que la multiplic
ation.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
x^2
\family default

\begin_inset Quotes crd
\end_inset

 est donc calculé en priorité, puis viennent les produits, puis les additions.
 Si plusieurs opérateurs de même priorité sont utilisés dans une expression
 (
\begin_inset Quotes cld
\end_inset


\family typewriter
1+2+3+4+5+6+7+8+9+10
\family default

\begin_inset Quotes crd
\end_inset

), les calculs s'effectuent en général de gauche à droite
\begin_inset space ~
\end_inset

; ici, on ajoute au résultat de 
\begin_inset Quotes cld
\end_inset


\family typewriter
1+2
\family default

\begin_inset Quotes crd
\end_inset

 la valeur 
\begin_inset Quotes cld
\end_inset


\family typewriter
3
\family default

\begin_inset Quotes crd
\end_inset

, puis à 
\begin_inset Quotes cld
\end_inset


\family typewriter
6
\family default

\begin_inset Quotes crd
\end_inset

 la valeur 
\begin_inset Quotes cld
\end_inset


\family typewriter
4
\family default

\begin_inset Quotes crd
\end_inset

, etc.
 Dans le doute, ou au besoin, ajoutons des parenthèses autour du calcul
 que l'on veut prioritaire.
 Ainsi 
\begin_inset Quotes cld
\end_inset


\family typewriter
1+2*3
\family default

\begin_inset Quotes crd
\end_inset

 vaut 
\begin_inset Quotes cld
\end_inset


\family typewriter
7
\family default

\begin_inset Quotes crd
\end_inset

, mais 
\begin_inset Quotes cld
\end_inset


\family typewriter
(1+2)*3
\family default

\begin_inset Quotes crd
\end_inset

 vaut 
\begin_inset Quotes cld
\end_inset


\family typewriter
9
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Il existe en 
\emph on
mSL
\emph default
 de multiples niveaux de priorités, supposés incarner ceux que l'on retrouve
 en mathématique, et censés alléger l'écriture en évitant de multiplier
 les parenthèses.
 Ce n'est pas faux, mais souvenons nous que les parenthèses, même surnuméraires,
 ne coûtent rien si elles permettent de se conforter dans l'idée que ce
 que l'on a écrit est bien ce que l'on désirait obtenir.
 Notons que l'affectation, 
\begin_inset Quotes cld
\end_inset

=
\begin_inset Quotes crd
\end_inset

 est considérée comme un opérateur de très basse priorité.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
y=a*x^2+b*x+c
\family default

\begin_inset Quotes crd
\end_inset

 calcule la valeur du trinôme avant de l'affecter à la variable 
\begin_inset Quotes cld
\end_inset


\family typewriter
y
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Le problème des priorités ne se pose pas avec les fonctions
\begin_inset space ~
\end_inset

: une fonction s'applique aux données encloses entre parenthèses placées
 à sa suite.
 Ainsi, dans la traduction de 
\begin_inset Formula $r1=\frac{-b+\sqrt{b^{2}-4ac}}{2a}$
\end_inset


\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
r1=(-b+sqrt(b^2-4*a*c))/(2*a)
\end_layout

\begin_layout Standard
il est nécessaire d'utiliser des parenthèses pour délimiter les arguments
 de la division, mais la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
sqrt
\family default

\begin_inset Quotes crd
\end_inset

 s'applique directement au résultat de l'expression entre parenthèses qui
 la suit (nous introduisons ici, en catimini, l'opérateur 
\emph on
opposé
\begin_inset Index idx
status open

\begin_layout Plain Layout
opposé
\end_layout

\end_inset


\emph default
, noté 
\begin_inset Quotes cld
\end_inset


\family typewriter
-
\family default

\begin_inset Quotes crd
\end_inset

 qui s'applique à la seule donnée située à sa droite — on peut considérer
 que 
\begin_inset Quotes cld
\end_inset


\family typewriter
-b
\family default

\begin_inset Quotes crd
\end_inset

 est une notation raccourcie pour 
\begin_inset Quotes cld
\end_inset


\family typewriter
0-b
\family default

\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Standard
Une expression est une combinaison 
\begin_inset Quotes cld
\end_inset

syntaxiquement correcte
\begin_inset Quotes crd
\end_inset

 de valeurs, de variables, d'opérateurs, d'appels de fonctions, et de parenthèse
s.
 On remettra à plus tard la définition formelle du terme 
\begin_inset Quotes cld
\end_inset

syntaxiquement correct
\begin_inset Quotes crd
\end_inset

.
 Il est bon que l'intuition du programmeur se développe peu à peu
\begin_inset space ~
\end_inset

: s'il comprend ce qu'il vient d'écrire, la syntaxe est assez probablement
 correcte
\begin_inset space ~
\end_inset

! La plupart des erreurs sont dues à l'oubli d'une parenthèse ou d'un point-virg
ule...
\end_layout

\begin_layout Standard
Une instruction est une expression suivie d'un point-virgule
\begin_inset space ~
\end_inset


\begin_inset Quotes cld
\end_inset


\family typewriter
;
\family default

\begin_inset Quotes crd
\end_inset

.
 Alors que l'ordre précis d'exécution d'une expression dépend des opérateurs,
 fonctions, parenthèses et autres règles du langage, les instructions d'un
 programme sont exécutées les unes à la suite des autres, dans l'ordre d'écritur
e du programme.
 
\end_layout

\begin_layout Standard
Notons encore que l'on peut aussi rajouter des parenthèses autour d'une
 expression sans changer sa signification, et qu'une instruction, placée
 entre parenthèses, est assimilée à une expression.
 Remarquons encore l'indentation des lignes de code pour les expressions
 situées à l'intérieur des boucles, indentation qui n'a rien d'obligatoire
 mais qui permet au relecteur de mieux appréhender la structure d'un programme.
\end_layout

\begin_layout Section
Recherche et Tri d'éléments
\end_layout

\begin_layout Standard
Effectuer une recherche ou un tri d'élément sont des opérations fréquentes
 en informatique.
 Nous savons déjà comment rechercher le plus grand ou le plus petit élément
 dans un tableau.
 Que faire si nous recherchons maintenant les deux plus petits éléments
 ? Reprenons notre algorithme, réécrit pour utiliser l'élément neutre de
 l'opération minimum
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
GM_Log("Indice du plus petit élément d'un tableau.");
\end_layout

\begin_layout LyX-Code
var liste = data (7 11 43 0 2 1 1 637 -7 13); 
\end_layout

\begin_layout LyX-Code
var s, e, i; 
\end_layout

\begin_layout LyX-Code
s = -1; e = 
\family typewriter
1.7976931348623158E+308
\family default
; i = 0; 
\end_layout

\begin_layout LyX-Code
while (i < 10) (
\end_layout

\begin_layout LyX-Code
    ((liste[i] < e) ? (s = i; e = liste[i];););
\end_layout

\begin_layout LyX-Code
    i = i + 1;
\end_layout

\begin_layout LyX-Code
); 
\end_layout

\begin_layout LyX-Code
var str = stralloc(); 
\end_layout

\begin_layout LyX-Code
sprintf(str, "s vaut %d", s); 
\end_layout

\begin_layout LyX-Code
GM_Log(str); 
\end_layout

\begin_layout Standard
Dans notre algorithme, nous gardons maintenant dans 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

 l'indice du plus petit élément, et dans 
\begin_inset Quotes cld
\end_inset


\family typewriter
e
\family default

\begin_inset Quotes crd
\end_inset

 sa valeur.
 Nous pourrions imaginer deux boucles successives pour rechercher nos deux
 plus petits éléments (nommons les 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
t
\family default

\begin_inset Quotes crd
\end_inset

)
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
GM_Log("Indice du plus petit élément d'un tableau.");
\end_layout

\begin_layout LyX-Code
var liste = data (7 11 43 0 2 1 1 637 -7 13); 
\end_layout

\begin_layout LyX-Code
var s, t, e, f, i; 
\end_layout

\begin_layout LyX-Code
s = -1; e = 
\family typewriter
1.7976931348623158E+308
\family default
; i = 0; 
\end_layout

\begin_layout LyX-Code
while (i < 10) (
\end_layout

\begin_layout LyX-Code
    ((liste[i] < e) ? (s = i; e = liste[i];););
\end_layout

\begin_layout LyX-Code
    i = i + 1;
\end_layout

\begin_layout LyX-Code
); 
\end_layout

\begin_layout LyX-Code
t = -1; f = 
\family typewriter
1.7976931348623158E+308
\family default
; i = 0; 
\end_layout

\begin_layout LyX-Code
while (i < 10) (
\end_layout

\begin_layout LyX-Code
    ((liste[i] < f) ? (t = i; f = liste[i];););
\end_layout

\begin_layout LyX-Code
    i = i + 1;
\end_layout

\begin_layout LyX-Code
); 
\end_layout

\begin_layout LyX-Code
var str = stralloc(); 
\end_layout

\begin_layout LyX-Code
sprintf(str, "liste[%d] vaut %d", s, e); 
\end_layout

\begin_layout LyX-Code
GM_Log(str); 
\end_layout

\begin_layout LyX-Code
sprintf(str, "liste[%d] vaut %d", t, f); 
\end_layout

\begin_layout LyX-Code
GM_Log(str); 
\end_layout

\begin_layout Standard
Bien sûr, cette version découvre deux fois de suite la même valeur
\begin_inset space ~
\end_inset

! Pour être assuré que 
\begin_inset Quotes cld
\end_inset


\family typewriter
t
\family default

\begin_inset Quotes crd
\end_inset

 va recevoir une valeur différente de celle de 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

, il suffit, dans la seconde boucle, de rajouter la condition que le 
\begin_inset Quotes cld
\end_inset


\family typewriter
i
\family default

\begin_inset Quotes crd
\end_inset

 courant soit différent de l'indice du plus petit élément précédemment trouvé,
 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
(((liste[i] < f) && (i != s)) ? (t = i; f = liste[i];););
\end_layout

\begin_layout Standard
La condition que nous ajoutons, 
\begin_inset Quotes cld
\end_inset


\emph on
i est différent de s
\emph default

\begin_inset Quotes crd
\end_inset

, s'écrit 
\begin_inset Quotes cld
\end_inset


\family typewriter
i!=s
\family default

\begin_inset Quotes crd
\end_inset

, où 
\begin_inset Quotes cld
\end_inset


\family typewriter
!=
\family default

\begin_inset Quotes crd
\end_inset

 (sans espace entre les deux caractères) représente l'opération de comparaison
 
\begin_inset Quotes cld
\end_inset

différent
\begin_inset Quotes crd
\end_inset

.
 Les deux conditions testées sont reliées entre elles par l'opérateur 
\begin_inset Quotes cld
\end_inset


\family typewriter
&&
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\emph on
et
\emph default

\begin_inset Quotes crd
\end_inset

, qui rend 
\begin_inset Quotes cld
\end_inset


\emph on
vrai
\emph default

\begin_inset Quotes crd
\end_inset

 si ses deux opérandes sont vrais.
 Nous utilisons ici des parenthèses (redondantes) autour de ces deux conditions,
 et autour de l'ensemble de la condition.
\end_layout

\begin_layout Standard
Cette fois, nous obtenons correctement dans 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

 l'indice du plus petit élément (8), et dans 
\begin_inset Quotes cld
\end_inset


\family typewriter
t
\family default

\begin_inset Quotes crd
\end_inset

 celui du second plus petit (3).
\end_layout

\begin_layout Standard
Peut-on découvrir les deux éléments 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
t
\family default

\begin_inset Quotes crd
\end_inset

 en une seule boucle, au lieu d'opérer avec deux boucles successives ? Par
 exemple, que donnerait ceci, et pourquoi ?
\end_layout

\begin_layout LyX-Code
var liste = data (7 11 43 0 2 1 1 637 -7 13); 
\end_layout

\begin_layout LyX-Code
var s, t, e, f, i; 
\end_layout

\begin_layout LyX-Code
s = t = -1; 
\end_layout

\begin_layout LyX-Code
e = f = 1.7976931348623158E+308; 
\end_layout

\begin_layout LyX-Code
i = 0; 
\end_layout

\begin_layout LyX-Code
while (i < 10) (
\end_layout

\begin_layout LyX-Code
    ((liste[i] < e) ? (s = i; e = liste[i];);); 
\end_layout

\begin_layout LyX-Code
    (((liste[i] < f) && (i != s)) ? (t = i; f = liste[i];););
\end_layout

\begin_layout LyX-Code
    i = i + 1;
\end_layout

\begin_layout LyX-Code
); 
\end_layout

\begin_layout LyX-Code
var str = stralloc(); 
\end_layout

\begin_layout LyX-Code
sprintf(str, "liste[%d] vaut %d", s, e); 
\end_layout

\begin_layout LyX-Code
GM_Log(str); 
\end_layout

\begin_layout LyX-Code
sprintf(str, "liste[%d] vaut %d", t, f);  
\end_layout

\begin_layout LyX-Code
GM_Log(str); 
\end_layout

\begin_layout Standard
On pourrait modifier ad vitam ce programme pour rechercher les trois plus
 petits éléments, puis les quatre plus petits, etc...
 Après avoir réalisé que l'on ne peut découvrir le plus petit élément de
 rang 
\begin_inset Quotes cld
\end_inset

N
\begin_inset Quotes crd
\end_inset

 sans avoir découvert les 
\begin_inset Quotes cld
\end_inset

N-1
\begin_inset Quotes crd
\end_inset

 précédents.
\end_layout

\begin_layout Standard
Introduisons maintenant une autre stratégie
\begin_inset space ~
\end_inset

: nous allons 
\emph on
modifier
\emph default
 le tableau initial, pour introduire en tête le plus petit élément.
 Pour ceci, on cherche la position du plus petit élément, puis on échange
 celui-ci avec le premier.
 Voici le programme
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
GM_Log("Placer en tête le plus petit élément.");
\end_layout

\begin_layout LyX-Code
var liste = data (7 11 43 0 2 1 1 637 -7 13); 
\end_layout

\begin_layout LyX-Code
var s, e, i; 
\end_layout

\begin_layout LyX-Code
s = -1; e = 
\family typewriter
1.7976931348623158E+308
\family default
; i = 0; 
\end_layout

\begin_layout LyX-Code
while (i < 10) (
\end_layout

\begin_layout LyX-Code
    ((liste[i] < e) ? (s = i; e = liste[i];););
\end_layout

\begin_layout LyX-Code
    i = i + 1;
\end_layout

\begin_layout LyX-Code
); 
\end_layout

\begin_layout LyX-Code
// échange, par l'intermédiaire d'une variable 
\begin_inset Quotes cld
\end_inset

x
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout LyX-Code
var x; x = liste[0]; liste[0] = liste[s]; liste[s] = x;
\end_layout

\begin_layout LyX-Code
var str = stralloc(); 
\end_layout

\begin_layout LyX-Code
sprintf(str, "minimum : %d", liste[0]); 
\end_layout

\begin_layout LyX-Code
GM_Log(str); 
\end_layout

\begin_layout Standard
La modification que nous avons introduite est l'échange proprement dit
\begin_inset space ~
\end_inset

; celui-ci est réalisé par la ligne qui suit le commentaire – ligne débutant
 par le symbole 
\begin_inset Quotes cld
\end_inset


\family typewriter
//
\family default

\begin_inset Quotes crd
\end_inset

, dont le contenu est ignoré par l'exécutant du script et destiné aux seuls
 lecteurs humains du programme.
 Le fait d'avoir placé en tête le plus petit élément nous assure que tous
 ceux qui suivent sont supérieurs ou égaux à celui-ci.
\end_layout

\begin_layout Standard
On peut effectuer la même opération, pour placer le second plus petit élément
 à la suite du premier
\begin_inset space ~
\end_inset

: il suffit cette fois d'ajouter une seconde boucle, qui va débuter à l'indice
 suivant, 1 au lieu de 0
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
GM_Log("Placer en tête les plus petits éléments.");
\end_layout

\begin_layout LyX-Code
var liste = data (7 11 43 0 2 1 1 637 -7 13); 
\end_layout

\begin_layout LyX-Code
var s, e, i; 
\end_layout

\begin_layout LyX-Code
s = -1; e = 
\family typewriter
1.7976931348623158E+308
\family default
; i = 0; 
\end_layout

\begin_layout LyX-Code
while (i < 10) (
\end_layout

\begin_layout LyX-Code
    ((liste[i] < e) ? (s = i; e = liste[i];););
\end_layout

\begin_layout LyX-Code
    i = i + 1;
\end_layout

\begin_layout LyX-Code
); 
\end_layout

\begin_layout LyX-Code
// échange, par l'intermédiaire d'une variable 
\begin_inset Quotes cld
\end_inset

x
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout LyX-Code
var x; x = liste[0]; liste[0] = liste[s]; liste[s] = x;
\end_layout

\begin_layout LyX-Code
s = -1; e = 
\family typewriter
1.7976931348623158E+308
\family default
; i = 1; 
\end_layout

\begin_layout LyX-Code
while (i < 10) (
\end_layout

\begin_layout LyX-Code
    ((liste[i] < e) ? (s = i; e = liste[i];););
\end_layout

\begin_layout LyX-Code
    i = i + 1;
\end_layout

\begin_layout LyX-Code
); 
\end_layout

\begin_layout LyX-Code
// échange, par l'intermédiaire d'une variable 
\begin_inset Quotes cld
\end_inset

x
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout LyX-Code
var x; x = liste[1]; liste[1] = liste[s]; liste[s] = x;
\end_layout

\begin_layout LyX-Code
var str = stralloc(); 
\end_layout

\begin_layout LyX-Code
sprintf(str, "minima : %d %d", liste[0], liste[1]); 
\end_layout

\begin_layout LyX-Code
GM_Log(str); 
\end_layout

\begin_layout Standard
Sous cette forme, on voit émerger un schéma
\begin_inset space ~
\end_inset

: placer à la suite les uns des autres les éléments découverts, jusqu'à
 obtenir le nombre d'éléments désirés
\begin_inset space ~
\end_inset

: 2, 3, 5, 10...
 Sautons les étapes intermédiaires, et, au lieu de placer les boucles numéro
 3, 4, etc.
 les unes à la suite des autres, construisons une nouvelle boucle 
\emph on
englobant
\emph default
 la recherche initiale, dans laquelle, pour généraliser notre approche,
 on désigne par 
\begin_inset Quotes cld
\end_inset


\family typewriter
N
\family default

\begin_inset Quotes crd
\end_inset

 le nombre d'éléments du tableau, et 
\begin_inset Quotes cld
\end_inset


\family typewriter
P
\family default

\begin_inset Quotes crd
\end_inset

 le nombre d'éléments recherchés
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
GM_Log("Placer en tête les plus petits éléments.");
\end_layout

\begin_layout LyX-Code
var liste = data (7 11 43 0 2 1 1 637 -7 13);
\end_layout

\begin_layout LyX-Code
var N = 10;
\end_layout

\begin_layout LyX-Code
var P = 5;
\end_layout

\begin_layout LyX-Code
var s, e, i, j, x; 
\end_layout

\begin_layout LyX-Code
j = 0;
\end_layout

\begin_layout LyX-Code
while (j < P) (
\end_layout

\begin_layout LyX-Code
    s = -1; e = 1.7976931348623158E+308; i = j; 
\end_layout

\begin_layout LyX-Code
    while (i < N) (
\end_layout

\begin_layout LyX-Code
        ((liste[i] < e) ? (s = i; e = liste[i];););
\end_layout

\begin_layout LyX-Code
        i = i + 1;
\end_layout

\begin_layout LyX-Code
    ); 
\end_layout

\begin_layout LyX-Code
    // échange, par l'intermédiaire d'une variable « x »
\end_layout

\begin_layout LyX-Code
    x = liste[j]; liste[j] = liste[s]; liste[s] = x;
\end_layout

\begin_layout LyX-Code
    j = j + 1;
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout LyX-Code
var str = stralloc(); 
\end_layout

\begin_layout LyX-Code
sprintf(str, "minima : %d %d %d %d %d", 
\end_layout

\begin_layout LyX-Code
             liste[0], liste[1],
\end_layout

\begin_layout LyX-Code
             liste[2], liste[3], liste[4]); 
\end_layout

\begin_layout LyX-Code
GM_Log(str); 
\end_layout

\begin_layout Standard
L'exécution nous fournit le résultat attendu
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset


\family typewriter
minima : -7 0 1 1 2
\family default

\begin_inset Quotes crd
\end_inset

.
 Mais comment ce programme fonctionne-t-il exactement ? Il se compose de
 deux boucles imbriquées, c'est-à-dire que l'une contient l'autre.
 La boucle la plus externe utilise 
\begin_inset Quotes cld
\end_inset


\family typewriter
j
\family default

\begin_inset Quotes crd
\end_inset

 comme variable de contrôle
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
while (j < P) (
\end_layout

\begin_layout LyX-Code
    // ici se situe l'intérieur de la boucle
\end_layout

\begin_layout LyX-Code
    j = j + 1;
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
A l'intérieur de la boucle, 
\begin_inset Quotes cld
\end_inset


\family typewriter
j
\family default

\begin_inset Quotes crd
\end_inset

 prend les valeurs successives 
\begin_inset Quotes cld
\end_inset


\family typewriter
0
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
1
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
2
\family default

\begin_inset Quotes crd
\end_inset

, etc., jusqu'à 
\begin_inset Quotes cld
\end_inset


\family typewriter
P-1
\family default

\begin_inset Quotes crd
\end_inset

.
 Dans la boucle interne, qui est répétée 
\begin_inset Quotes cld
\end_inset

P
\begin_inset Quotes crd
\end_inset

 fois, le point de départ de la boucle est 
\begin_inset Quotes cld
\end_inset


\family typewriter
j
\family default

\begin_inset Quotes crd
\end_inset

.
 Au fur et à mesure de la progression de 
\begin_inset Quotes cld
\end_inset


\family typewriter
j
\family default

\begin_inset Quotes crd
\end_inset

 dans la boucle externe, la boucle interne va décrire des segments de plus
 en plus petits du tableau
\begin_inset space ~
\end_inset

: de 0 à 
\emph on
N-1
\emph default
, puis de 1 à 
\emph on
N-1
\emph default
, puis de 2 à 
\emph on
N-1
\emph default
, jusqu'à la dernière valeur de 
\begin_inset Quotes cld
\end_inset


\family typewriter
j
\family default

\begin_inset Quotes crd
\end_inset

, de 
\emph on
N-1
\emph default
 à 
\emph on
N-1
\emph default
, le segment ne contenant plus alors qu'une seule valeur.
\end_layout

\begin_layout Standard
Si l'on va jusqu'au bout, en positionnant 
\begin_inset Quotes cld
\end_inset

P
\begin_inset Quotes crd
\end_inset

 à 10, on obtient dans l'ordre les 10 plus petites valeurs du tableau, c'est-à-d
ire que l'on a, en fait, réalisé un 
\emph on
tri ascendant
\emph default
 de ce tableau.
 Il faut bien sûr modifier l'ordre d'écriture des différentes valeurs, qui
 devient
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
sprintf(str, "minima : %d %d %d %d %d %d %d %d %d %d", 
\end_layout

\begin_layout LyX-Code
    liste[0], liste[1], liste[2], liste[3], liste[4],
\end_layout

\begin_layout LyX-Code
    liste[5], liste[6], liste[7], liste[8], liste[9]);  
\end_layout

\begin_layout Standard
et l'on obtient alors
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code

\family typewriter
minima : -7 0 1 1 2 7 11 13 43 637
\end_layout

\begin_layout Standard
C'est satisfaisant, mais avouons le, cet algorithme n'est pas le plus efficace
 possible.
 Pour 
\begin_inset Formula $N$
\end_inset

 éléments, la boucle externe va s'exécuter 
\begin_inset Formula $N$
\end_inset

 fois, et, la taille des segments décrémentant régulièrement, la boucle
 interne va tester d'abord 
\begin_inset Formula $N$
\end_inset

 éléments, puis 
\begin_inset Formula $N-1$
\end_inset

 élements, puis 
\begin_inset Formula $N-2$
\end_inset

, etc.
 jusqu'à la dernière qui ne testera qu'un élement.
 Soit, au total, 
\begin_inset Formula $\frac{N\times(N+1)}{2}$
\end_inset

, formule déjà rencontrée.
 Lorsque le nombre 
\begin_inset Formula $N$
\end_inset

 d'élément devient élevé, le temps nécessité par l'algorithme devient, en
 gros, proportionnel au carré du nombre d'éléments.
 L'on dit que la 
\emph on
complexité
\begin_inset Index idx
status open

\begin_layout Plain Layout
complexité
\end_layout

\end_inset


\emph default
 de l'algorithme est 
\begin_inset Formula $O(N^{2})$
\end_inset

 que l'on prononce 
\begin_inset Quotes cld
\end_inset

grand O de 
\begin_inset Formula $N^{2}$
\end_inset


\begin_inset Quotes crd
\end_inset

.
 Pour des tableaux de petite taille, ce coût reste acceptable, et, à l'intérieur
 du 
\emph on
Game Master
\emph default
, nombre de tris s'adressant à des tableaux de quelques dizaines ou centaines
 d'éléments sont programmés en 
\begin_inset Formula $O(N^{2})$
\end_inset

.
 Nous reviendrons ultérieurement sur ces concepts...
\end_layout

\begin_layout Section
Tableaux
\end_layout

\begin_layout Standard
On l'a compris, manipuler des tableaux va devenir une opération fréquente
 dans nos activités de programmeur.
 Il se trouve qu'en 
\emph on
mSL
\emph default
 toute variable se comporte potentiellement comme un tableau, au travers
 de l'opération d'indexation, dans la mesure où toute variable a une valeur
 numérique, et que toute valeur numérique 
\begin_inset Quotes cld
\end_inset

pourrait
\begin_inset Quotes crd
\end_inset

 désigner une adresse dans la mémoire.
\end_layout

\begin_layout Standard
Cependant, 
\emph on
mSL
\emph default
 propose aussi une structure de donnée particulière, le 
\emph on
tableau
\emph default
, ou 
\emph on
bloc
\emph default
, que l'on peut créer au moyen des trois opérations suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description

\family typewriter
B
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

data(...)
\family default
 cette construction spéciale crée un bloc renfermant toutes les valeurs
 numériques placées entre parenthèses.
 La syntaxe spécifique de cette forme est décrite en détail au § 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Syntaxe-de-data"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 La création est statique
\begin_inset space ~
\end_inset

: même placée à l'intérieur d'une boucle, le résultat est toujours le même
 bloc, construit une fois pour toutes au chargement du script.
\end_layout

\begin_layout Description

\family typewriter
B
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

array(e1,
\begin_inset space ~
\end_inset

e2,
\begin_inset space ~
\end_inset

...,
\begin_inset space ~
\end_inset

eN)
\family default
 cette fonction admet un nombre arbitraire d'expressions, et fournit le
 tableau contenant ces valeurs.
 A la différence de 
\begin_inset Quotes cld
\end_inset


\family typewriter
data
\family default

\begin_inset Quotes crd
\end_inset

, cette construction est dynamique, et chaque nouvelle exécution crée un
 nouveau tableau.
\end_layout

\begin_layout Description

\family typewriter
B
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

malloc(taille)
\family default
 cette dernière fonction crée un tableau dynamique, dont la taille est spécifiée
 en paramètre, et peut aller de 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 (tableau 
\begin_inset Quotes cld
\end_inset

vide
\begin_inset Quotes crd
\end_inset

) à plusieurs millions d'éléments – en fonction de l'espace disponible dans
 la mémoire allouée au plug-in.
 Tous les éléments du tableau créé sont initialisés à 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Dorénavant, nous n'utiliserons plus que des tableaux légitimement construits.
 Attention cependant, toutes ces opérations de construction peuvent rendre
 la valeur 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 s'il n'est pas possible d'allouer assez de mémoire pour exécuter la création
 du tableau demandé.
 
\end_layout

\begin_layout Standard
Lorsqu'une variable 
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

 désigne un tableau de taille 
\begin_inset Quotes cld
\end_inset


\family typewriter
N
\family default

\begin_inset Quotes crd
\end_inset

, il est possible de lui appliquer les opérations d'indexation 
\begin_inset Quotes cld
\end_inset


\family typewriter
v[i]
\family default

\begin_inset Quotes crd
\end_inset

 pour tout 
\begin_inset Quotes cld
\end_inset


\family typewriter
i
\family default

\begin_inset Quotes crd
\end_inset

 compris entre 
\begin_inset Quotes cld
\end_inset


\family typewriter
0
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
N-1
\family default

\begin_inset Quotes crd
\end_inset

, ainsi que l'affectation indicée, 
\begin_inset Quotes cld
\end_inset


\family typewriter
v[i]=expression
\family default

\begin_inset Quotes crd
\end_inset

.
 On dispose en outre des fonctions suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description

\family typewriter
z
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

isblock(v)
\family default
 rend 
\begin_inset Quotes cld
\end_inset


\emph on
vrai
\emph default

\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset


\family typewriter
1
\family default

\begin_inset Quotes crd
\end_inset

) ou 
\begin_inset Quotes cld
\end_inset


\emph on
faux
\emph default

\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset


\family typewriter
0
\family default

\begin_inset Quotes crd
\end_inset

) selon que le paramètre 
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

 est, ou non, un tableau construit par l'une des trois opérations décrites
 ci-dessus.
\end_layout

\begin_layout Description

\family typewriter
z
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

size(v)
\family default
 rend la taille (le nombre d'éléments) de 
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

 si 
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

 est un tableau construit par l'une des trois opérations décrites ci-dessus,
 
\begin_inset Quotes cld
\end_inset


\family typewriter
-1
\family default

\begin_inset Quotes crd
\end_inset

 sinon.
\end_layout

\begin_layout Standard
Enfin, si votre algorithme n'a plus besoin d'un tableau, il peut libérer
 l'espace mémoire correspondant au moyen de l'opération 
\begin_inset Quotes cld
\end_inset


\family typewriter
mfree
\family default

\begin_inset Quotes crd
\end_inset

 :
\end_layout

\begin_layout Description

\family typewriter
mfree(t)
\family default
 libère le tableau
\begin_inset space ~
\end_inset

; l'espace libéré pourra ultérieurement être réutilisé par un appel à 
\begin_inset Quotes cld
\end_inset


\family typewriter
array
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
malloc
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Paragraph*
\begin_inset CommandInset label
LatexCommand label
name "par:Copie-d'un-tableau"

\end_inset

Copie d'un tableau
\end_layout

\begin_layout Standard
Un exemple typique d'utilisation de tableau dynamiquement alloué est celui
 d'un algorithme qui modifie le tableau qui lui est confié, comme le tri
 que nous venons de voir, dans une circonstance où nous ne voulons pas que
 ce tableau soit modifié
\begin_inset space ~
\end_inset

! Nous devons faire une 
\emph on
copie
\emph default
 de ce tableau, avant de lui appliquer notre algorithme de tri
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var liste = data (7 11 43 0 2 1 1 637 -7 13);
\end_layout

\begin_layout LyX-Code
var copie = malloc(size(liste));
\end_layout

\begin_layout LyX-Code
var i = 0;
\end_layout

\begin_layout LyX-Code
while (i < size(liste)) (
\end_layout

\begin_layout LyX-Code
    copie[i] = liste[i]; i = i + 1;
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
Après cette opération, nous obtenons une copie conforme du tableau original,
 que nous pouvons dès lors modifier à notre gré.
\end_layout

\begin_layout Paragraph*
\begin_inset CommandInset label
LatexCommand label
name "subsec:Note-Tableau"

\end_inset

Note
\begin_inset space ~
\end_inset

: représentation des tableaux
\end_layout

\begin_layout Standard
Démystifions la nature d'un tableau
\begin_inset space ~
\end_inset

: ce n'est rien d'autre qu'un morceau de la mémoire centrale, dont la fonction
 
\begin_inset Quotes cld
\end_inset


\family typewriter
malloc
\family default

\begin_inset Quotes crd
\end_inset

 nous alloue, à la demande, une petite partie.
 Le programme ci-dessous dévoile le mystère de sa représentation
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var liste = data (7 0 2 637 -7 13);
\end_layout

\begin_layout LyX-Code
var str = stralloc(); 
\end_layout

\begin_layout LyX-Code
sprintf(str, "liste = %d", liste); 
\end_layout

\begin_layout LyX-Code
GM_Log(str);
\end_layout

\begin_layout LyX-Code
sprintf(str, "contenu : %d %d %d %d %d %d %d %d %d %d", 
\end_layout

\begin_layout LyX-Code
    liste[-2], liste[-1], liste[0], liste[1], liste[2],
\end_layout

\begin_layout LyX-Code
    liste[3], liste[4], liste[5], liste[6], liste[7]); 
\end_layout

\begin_layout LyX-Code
GM_Log(str);
\end_layout

\begin_layout Standard
Il ne fait rien de plus qu'imprimer le contenu du tableau de six éléments
 créé par 
\begin_inset Quotes cld
\end_inset


\family typewriter
data
\family default

\begin_inset Quotes crd
\end_inset

, mais vous pouvez constater que nous avons choisi de faire débuter cette
 impression 2 élements 
\emph on
avant
\emph default
 le début du tableau (indices -2 et -1), et de la terminer deux éléments
 
\emph on
après
\emph default
 (indice 6 et 7).
 Le programme imprime les deux lignes suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
liste = 2944173
\end_layout

\begin_layout LyX-Code
contenu : 1684108385 6 7 0 2 637 -7 13 6 463375262
\end_layout

\begin_layout Standard
On y reconnait (
\begin_inset Quotes cld
\end_inset

contenu
\begin_inset Quotes crd
\end_inset

, valeurs n° 3 à 8) le contenu du tableau.
 La première et la dernière valeur constituent les 
\begin_inset Quotes cld
\end_inset


\emph on
bornes
\emph default

\begin_inset Quotes crd
\end_inset

 du tableau, et vont se retrouver à l'identique pour tous les objets créés
 par 
\begin_inset Quotes cld
\end_inset


\family typewriter
malloc
\family default

\begin_inset Quotes crd
\end_inset

.
 La seconde et l'avant-dernière valeur sont identiques, et égales au nombre
 d'éléments du tableau, 
\begin_inset Quotes cld
\end_inset


\family typewriter
6
\family default

\begin_inset Quotes crd
\end_inset

.
 Ces quatre valeurs supplémentaires permettent au système de reconnaître
 un tableau qu'il a alloué (fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
isblock
\family default

\begin_inset Quotes crd
\end_inset

), et expliquent comment la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
size
\family default

\begin_inset Quotes crd
\end_inset

 est réalisée
\begin_inset space ~
\end_inset

: appliquée à un tableau 
\begin_inset Quotes cld
\end_inset


\family typewriter
T
\family default

\begin_inset Quotes crd
\end_inset

, elle rend tout simplement 
\begin_inset Quotes cld
\end_inset


\family typewriter
T[-1]
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Quant à la valeur 
\begin_inset Quotes cld
\end_inset


\family typewriter
liste
\family default

\begin_inset Quotes crd
\end_inset

, c'est un simple entier qui est le 
\emph on
numéro de la cellule mémoire
\emph default
, ou 
\emph on
addresse
\emph default
, du premier élément du tableau.
 Son utilisation, dans des constructions telles que 
\begin_inset Quotes cld
\end_inset


\family typewriter
liste[i]
\family default

\begin_inset Quotes crd
\end_inset

 est donc absolument cohérente avec notre présentation de la mémoire au
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Introduction-Memoire"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
Il ressort également de cette description qu'un tableau peut se manipuler
 comme une variable numérique quelconque
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var liste = data (7 0 2 637 -7 13);
\end_layout

\begin_layout LyX-Code
var refer = liste;
\end_layout

\begin_layout Standard
Cette séquence nous donne dans 
\begin_inset Quotes cld
\end_inset


\family typewriter
refer
\family default

\begin_inset Quotes crd
\end_inset

 la même valeur que celle de 
\begin_inset Quotes cld
\end_inset


\family typewriter
liste
\family default

\begin_inset Quotes crd
\end_inset

.
 Les éléments du tableau peuvent être manipulés aussi bien par l'intermédiaire
 du nom 
\begin_inset Quotes cld
\end_inset


\family typewriter
refer
\family default

\begin_inset Quotes crd
\end_inset

 que par 
\begin_inset Quotes cld
\end_inset


\family typewriter
liste
\family default

\begin_inset Quotes crd
\end_inset

, mais bien évidemment, toute modification du contenu des éléments sera
 visible par l'intermédiaire de chacun des deux noms.
 Dans le langage 
\begin_inset Quotes cld
\end_inset

C
\begin_inset Quotes crd
\end_inset

 nous parlerions de 
\begin_inset Quotes cld
\end_inset


\emph on
pointeurs
\emph default

\begin_inset Quotes crd
\end_inset

.
 Nous dirons que nous sommes ici en présence de deux 
\emph on
références
\begin_inset Index idx
status open

\begin_layout Plain Layout
références
\end_layout

\end_inset


\emph default
 au même tableau.
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Memory-Disc-1"

\end_inset

Si nous avons besoin de connaître le contenu d'un tableau à des fins de
 mise au point, il y a encore plus simple.
 Le module 
\begin_inset Quotes cld
\end_inset

Memory
\begin_inset Quotes crd
\end_inset

, décrit au § 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Module-Memory"
plural "false"
caps "false"
noprefix "false"

\end_inset

, va nous permettre d'afficher le contenu d'une partie de la mémoire.
 Dans la première cellule du pad, un clic droit affiche un menu.
 Choisissons 
\begin_inset Quotes cld
\end_inset


\emph on
Memory
\begin_inset Index idx
status open

\begin_layout Plain Layout
Memory
\end_layout

\end_inset


\emph default

\begin_inset Quotes crd
\end_inset

 si cette option n'est pas encore sélectionnée.
 La partie basse du module affiche alors le contenu de la mémoire, à raison
 de 4 cellules par ligne.
 La colonne de gauche indique l'adresse de la première cellule de chaque
 ligne, et l'affichage débute par défaut en 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

.
 Pour afficher cette mémoire à partir d'une autre adresse, placer la souris
 sur la seconde cellule du pad, la case notée 
\begin_inset Quotes cld
\end_inset

@0
\begin_inset Quotes crd
\end_inset

, et introduire au clavier l'adresse désirée.
 En cas d'erreur, taper 
\begin_inset Quotes cld
\end_inset

z
\begin_inset Quotes crd
\end_inset

 pour remettre à zéro.
 Indiquons l'adresse de début (moins 2) du tableau, soit 
\begin_inset Quotes cld
\end_inset

2944171
\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-mSL-Exo-3.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Prog-3"

\end_inset

Représentation d'un tableau
\end_layout

\end_inset


\end_layout

\end_inset

L'image de la fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Prog-3"
plural "false"
caps "false"
noprefix "false"

\end_inset

 nous montre le résultat.
 Ce qui est affiché (les informaticiens utilisent le terme de 
\begin_inset Quotes cld
\end_inset


\emph on
dump mémoire
\begin_inset Index idx
status open

\begin_layout Plain Layout
dump mémoire
\end_layout

\end_inset


\emph default

\begin_inset Quotes crd
\end_inset

) n'est pas tout-à-fait semblable à ce que notre programme a imprimé.
 En effet, l'outil 
\begin_inset Quotes cld
\end_inset


\emph on
Memory
\emph default

\begin_inset Quotes crd
\end_inset

 tient compte des conventions internes utilisées par le Game Master, et
 traduit la valeur 
\begin_inset Quotes cld
\end_inset


\family typewriter
1684108385
\family default

\begin_inset Quotes crd
\end_inset

 en 
\begin_inset Quotes cld
\end_inset


\family typewriter
'data'
\family default

\begin_inset Quotes crd
\end_inset

, et 
\begin_inset Quotes cld
\end_inset


\family typewriter
463375262
\family default

\begin_inset Quotes crd
\end_inset

 en 
\begin_inset Quotes cld
\end_inset


\family typewriter
~'data'~
\family default

\begin_inset Quotes crd
\end_inset

 qui sont les noms symboliques des bornes de début et de fin de données.
\end_layout

\begin_layout Standard
De manière générale, tous les 
\begin_inset Quotes cld
\end_inset

blocs
\begin_inset Quotes crd
\end_inset

 de mémoire gérés par le système ont la même structure
\begin_inset space ~
\end_inset

: une valeur spécifique précisant le type du bloc, la taille utile du bloc,
 le contenu, la taille encore, et une autre valeur spécifique marquant la
 fin du bloc.
 
\end_layout

\begin_layout Standard
Attention ! Il s'agit ici d'un affichage 
\emph on
post mortem
\emph default
, c'est-à dire que notre programme a déjà terminé son exécution au moment
 où nous effectuons ce 
\emph on
dump
\emph default
.
 Si d'autres programmes sont actifs, la mémoire a pu avoir été réutilisée
 à d'autres fins, et ne plus contenir ce que nous attendons...
 
\end_layout

\begin_layout Section
Fonctions définies
\end_layout

\begin_layout Standard
Toutes les opérations que nous avons vues jusqu'alors sont, nous l'avons
 signalé, des programmations d'algorithmes, qui s'appliquent à un petit
 nombre d'objets.
 Réciproquement, nous pouvons transformer un algorithme en une fonction,
 qu'il nous sera dès lors possible d'utiliser à notre guise, sans devoir
 le reprogrammer ou le recopier.
\end_layout

\begin_layout Standard
Prenons l'exemple de l'opération de copie de tableau que nous venons de
 voir au paragraphe précédent.
 Il nous faut analyser son interface, c'est-à-dire comprendre à quelles
 données elle s'applique, quel est son résultat, quelles sont les données
 intermédiaires qu'elle utilise, mais qui ne sont pas des entrées ou des
 sorties de l'algorithme.
\end_layout

\begin_layout Standard
Ces réponses sont faciles à apporter dans ce cas
\begin_inset space ~
\end_inset

: l'opération s'applique à un tableau en entrée, génère un tableau en sortie,
 et utilise pour ses besoins propres une seule variable, 
\begin_inset Quotes cld
\end_inset


\family typewriter
i
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
La syntaxe nous permettant de définir une fonction est la suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
function 
\emph on
nom
\emph default
 ( 
\emph on
paramètres
\emph default
 ) 
\end_layout

\begin_layout LyX-Code
local ( 
\emph on
variables
\emph default
 ) 
\end_layout

\begin_layout LyX-Code
( 
\emph on
instructions
\emph default
 ) ;
\end_layout

\begin_layout Standard
Ici, 
\begin_inset Quotes cld
\end_inset


\family typewriter
\emph on
nom
\family default
\emph default

\begin_inset Quotes crd
\end_inset

 est un identificateur, qui nous permettra par la suite de désigner notre
 fonction.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
function
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
local
\family default

\begin_inset Quotes crd
\end_inset

 sont des mots-clefs qui indiquent respectivement que l'on va définir une
 fonction et fournir la liste des variables locales, propres à cette fonction.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
\emph on
paramètres
\family default
\emph default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
\emph on
variables
\family default
\emph default

\begin_inset Quotes crd
\end_inset

 sont des listes d'identificateurs.
 Enfin, 
\begin_inset Quotes cld
\end_inset


\family typewriter
\emph on
instructions
\family default
\emph default

\begin_inset Quotes crd
\end_inset

 est la séquence d'instructions qui va permettre à la fonction de construire
 le résultat.
 Celui-ci n'apparait pas explicitement dans cette construction sous la forme
 d'une variable
\begin_inset space ~
\end_inset

: c'est la 
\emph on
dernière
\emph default
 valeur calculée par la fonction qui est fournie comme résultat de la fonction.
 Précisons que la partie 
\begin_inset Quotes cld
\end_inset


\family typewriter
local ( 
\emph on
variables
\emph default
 )
\family default

\begin_inset Quotes crd
\end_inset

 peut être omise s'il n'y a pas de variables locales à déclarer.
\end_layout

\begin_layout Standard
Dans notre cas précis, il y a un seul paramètre en entrée, pour lequel nous
 allons choisir un nom tel que 
\begin_inset Quotes cld
\end_inset


\family typewriter
source
\family default

\begin_inset Quotes crd
\end_inset

, une variable locale, 
\begin_inset Quotes cld
\end_inset


\family typewriter
i
\family default

\begin_inset Quotes crd
\end_inset

.
 Il est souvent pratique d'utiliser une variable locale supplémentaire pour
 désigner le futur résultat.
 Prenons 
\begin_inset Quotes cld
\end_inset


\family typewriter
res
\family default

\begin_inset Quotes crd
\end_inset

.
 Voici notre algorithme, directement transcrit sous la forme d'une fonction
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
function dupliquer (source)
\end_layout

\begin_layout LyX-Code
local (i, res)
\end_layout

\begin_layout LyX-Code
(
\end_layout

\begin_layout LyX-Code
    res = malloc(size(source));
\end_layout

\begin_layout LyX-Code
    i = 0;
\end_layout

\begin_layout LyX-Code
    while (i < size(source)) (
\end_layout

\begin_layout LyX-Code
        res[i] = source[i];
\end_layout

\begin_layout LyX-Code
        i = i + 1;
\end_layout

\begin_layout LyX-Code
    );
\end_layout

\begin_layout LyX-Code
    res;
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
Le code reprend, au nom des variables près, l'algorithme déjà écrit et testé.
 Nous avons juste ajouté une dernière instruction, contenant la seule variables
 
\begin_inset Quotes cld
\end_inset


\family typewriter
res
\family default

\begin_inset Quotes crd
\end_inset

 afin de fournir le résultat de la fonction.
 Il est dès lors possible de faire appel à celle-ci
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var liste = data (7 11 43 0 2 1 1 637 -7 13);
\end_layout

\begin_layout LyX-Code
var copie = dupliquer(liste);
\end_layout

\begin_layout Standard
Ecrivons de même une fonction telle que la somme des éléments d'un tableau
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
function somme (T) local (i, s, t) (
\end_layout

\begin_layout LyX-Code
   i = s = 0; t = size(T);
\end_layout

\begin_layout LyX-Code
   while (i < t) ( s = s + T[i]; i = i+1; );
\end_layout

\begin_layout LyX-Code
   s;
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
Notons que 
\begin_inset Quotes cld
\end_inset


\family typewriter
T
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
t
\family default

\begin_inset Quotes crd
\end_inset

 sont bien des variables différentes, et que là aussi, nous devons placer
 la variable représentant le résultat comme dernière instruction de la fonction.
 Le fait de déclarer locales les variables 
\begin_inset Quotes cld
\end_inset


\family typewriter
i
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
s
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
t
\family default

\begin_inset Quotes crd
\end_inset

 fait que toute modification de ces variables reste purement locale à la
 fonction, et n'a aucun influence sur d'autres variables 
\emph on
externes
\emph default
 (dites aussi 
\emph on
globales
\emph default
) qui porteraient le même nom.
 De ce point de vue, les paramètres de la fonction, ici 
\begin_inset Quotes cld
\end_inset


\family typewriter
T
\family default

\begin_inset Quotes crd
\end_inset

 se comportent comme des variables locales.
 Il est possible de modifier une telle variable, mais cela n'aura aucun
 effet sur la variable passée en argument.
\end_layout

\begin_layout Standard
Construisons encore une fonction, plus complexe, le 
\emph on
tri
\emph default
 d'un tableau, à partir de la dernière version décrite de notre algorithme
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
function sort(tab)
\end_layout

\begin_layout LyX-Code
local (N, i, j, e, s, x)
\end_layout

\begin_layout LyX-Code
(
\end_layout

\begin_layout LyX-Code
  N = size(tab);
\end_layout

\begin_layout LyX-Code
  j = 0;
\end_layout

\begin_layout LyX-Code
  while (j < N) (
\end_layout

\begin_layout LyX-Code
    s = -1; e = 1.7976931348623158E+308; 
\end_layout

\begin_layout LyX-Code
    i = j; 
\end_layout

\begin_layout LyX-Code
    while (i < N) (
\end_layout

\begin_layout LyX-Code
      ((tab[i] < e) ? (s = i; e = tab[i];););
\end_layout

\begin_layout LyX-Code
      i = i + 1;
\end_layout

\begin_layout LyX-Code
    ); 
\end_layout

\begin_layout LyX-Code
    // échange par la variable « x »
\end_layout

\begin_layout LyX-Code
    x = tab[j]; tab[j] = tab[s]; tab[s] = x;
\end_layout

\begin_layout LyX-Code
    j = j + 1;
\end_layout

\begin_layout LyX-Code
  );
\end_layout

\begin_layout LyX-Code
  tab;
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
La fonction fournit comme résultat le tableau d'entrée, 
\begin_inset Quotes cld
\end_inset


\family typewriter
tab
\family default

\begin_inset Quotes crd
\end_inset

, mais le contenu de celui-ci a été modifié par l'algorithme pour que ses
 éléments se retouvent rangés par ordre croissant.
\end_layout

\begin_layout Standard
Tout ceci est bel et bien.
 Mais dans certains cas, plus de subtilité est nécessaire pour décider des
 spécifications d'une fonction.
 Par exemple, imaginons que l'on désire énumérer les éléments d'un tableau,
 c'est-à-dire les obtenir successivement, mais seulement quand la valeur
 suivante est nécessaire.
 Soit 
\begin_inset Quotes cld
\end_inset


\family typewriter
tab
\family default

\begin_inset Quotes crd
\end_inset

 ce tableau.
 Utilisons une variable, 
\begin_inset Quotes cld
\end_inset


\family typewriter
index
\family default

\begin_inset Quotes crd
\end_inset

 qui désignera le prochain élément à fournir.
 On débute bien sûr à l'index 0
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var index = 0;
\end_layout

\begin_layout Standard
Puis, à chaque demande d'un élément suivant du tableau, on écrit
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
v = tab[index]; index = index + 1;
\end_layout

\begin_layout Standard
La variable 
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

 ayant été antérieurement déclarée par 
\begin_inset Quotes cld
\end_inset


\family typewriter
var
\family default

\begin_inset Quotes crd
\end_inset

.
 Il est possible d'encapsuler cette ligne dans une fonction
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
function suivant () local (x)
\end_layout

\begin_layout LyX-Code
( x = tab[index]; index = index + 1; x;);
\end_layout

\begin_layout Standard
et d'utiliser notre fonction sous la forme
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
v = suivant();
\end_layout

\begin_layout Standard
C'est un peu plus pratique, il y a moins de risque d'erreur de recopie,
 et c'est plus facile à mettre à jour si, par exemple, on décide de changer
 le nom du tableau.
\end_layout

\begin_layout Standard
Que faire si la nécessité se généralise ? Si l'on doit manipuler simultanément
 plusieurs tableaux, voire plusieurs dizaines de tels tableaux
\begin_inset space ~
\end_inset

? Il serait possible de transmettre à la fonction 
\begin_inset Quotes cld
\end_inset

suivant
\begin_inset Quotes crd
\end_inset

 le tableau qui nous intéresse, éventuellement la valeur de l'index courant.
 Cependant, si les paramètres d'une fonction et ses variables locales peuvent
 être modifiés à 
\emph on
l'intérieur
\emph default
 de la fonction, ces modifications n'ont aucune répercussion à 
\emph on
l'extérieur
\emph default
 de celle-ci.
 La valeur transmise à la fonction de l'index serait modifiée dans le corps
 de la fonction, mais sa valeur externe demurerait inchangée, avec comme
 résultat pratique que la fonction fournirait toujours la même valeur.
\end_layout

\begin_layout Standard
Une fonction ne peut pas modifier les valeurs des variables passées en argument,
 mais, on l'a vu, elle peut modifier le 
\emph on
contenu
\emph default
 d'un tableau.
 On peut imaginer de transmettre à 
\begin_inset Quotes cld
\end_inset


\family typewriter
suivant
\family default

\begin_inset Quotes crd
\end_inset

 comme paramètre unique un tableau, qui contiendrait l'état de notre système,
 à savoir, quel est le tableau concerné, quelle est la taille de ce tableau,
 quel est l'index en cours, et toute autre variable pertinente.
 Pour énumérer les éléments successifs d'un tableau, décidons que nous utilisero
ns l'adresse du tableau, sa taille, et un indice dans le tableau, qui désignera
 le prochain élément à fournir.
 Cette structure peut être construite dynamiquement par une fonction telle
 que celle-ci
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
function initial(tableau)
\end_layout

\begin_layout LyX-Code
(
\end_layout

\begin_layout LyX-Code
    array(tableau, size(tableau), 0);
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
La fonction qui utilise une telle structure pour énumérer les éléments peut
 s'écrire
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
function next(s)
\end_layout

\begin_layout LyX-Code
local (i, r, t)
\end_layout

\begin_layout LyX-Code
(
\end_layout

\begin_layout LyX-Code
    i = s[2]; // indice
\end_layout

\begin_layout LyX-Code
    t = s[0]; // tableau
\end_layout

\begin_layout LyX-Code
    r = t[i]; // élément courant
\end_layout

\begin_layout LyX-Code
    i = i + 1; // suivant
\end_layout

\begin_layout LyX-Code
    (i >= s[1]) ? (i = 0;); // si le dernier a été fourni
\end_layout

\begin_layout LyX-Code
    s[2] = i; // conserver le nouvel indice
\end_layout

\begin_layout LyX-Code
    r; // résultat
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
Notre code peut dès lors s'écrire
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var w = initial(data(7 3 5 180 3 6 8 9 43 100 0 -6 2));
\end_layout

\begin_layout LyX-Code
var str = stralloc();
\end_layout

\begin_layout LyX-Code
sprintf(str, "suivant : %d", next(w));
\end_layout

\begin_layout LyX-Code
GM_Log(str);
\end_layout

\begin_layout LyX-Code
sprintf(str, "suivant : %d", next(w));
\end_layout

\begin_layout LyX-Code
GM_Log(str);
\end_layout

\begin_layout LyX-Code
sprintf(str, "suivant : %d", next(w));
\end_layout

\begin_layout LyX-Code
GM_Log(str);
\end_layout

\begin_layout Standard
A l'exécution, les trois appels successifs à 
\begin_inset Quotes cld
\end_inset


\family typewriter
next
\family default

\begin_inset Quotes crd
\end_inset

 nous délivrent, dans l'ordre, les valeurs 7, 3, puis 5.
\end_layout

\begin_layout Standard
En résumé de ce qui a été vu jusqu'alors, on peut dire que 
\emph on
mSL
\emph default
 fournit à ses utilisateurs une structure de données, simplissime, mais
 extrêmement puissante, le tableau, ainsi que la possibilité de manipuler
 ces tableaux au moyen de fonctions, à la syntaxe simple et sans surprise.
 Ces deux qualités en font un langage 
\emph on
impératif
\emph default
 classique, puissant et souple.
 Il nous est dès à présent possible de traduire en 
\emph on
mSL
\emph default
 tout algorithme traditionnel, et d'obtenir rapidement des résultats satisfaisan
ts.
\end_layout

\begin_layout Paragraph*
\begin_inset CommandInset label
LatexCommand label
name "par:Note:-représentation-fonctions"

\end_inset

Note
\begin_inset space ~
\end_inset

: représentation des fonctions
\end_layout

\begin_layout Standard
Pendant que nous y sommes, démystifions également la nature d'une fonction
\begin_inset space ~
\end_inset

: ce n'est ni plus ni moins qu'un segment de mémoire, un tableau contenant
 la description, sous une forme propre au 
\emph on
Game Master
\emph default
, des caractéristiques de la fonction
\begin_inset space ~
\end_inset

: le nom, les paramètres, les variables locales, et le 
\emph on
code
\emph default
 de cette fonction.
 Le code lui-même n'est pas représenté par des instructions machine comme
 dans le cas d'un programme 
\begin_inset Quotes cld
\end_inset

C
\begin_inset Quotes crd
\end_inset

 compilé, mais par des instructions 
\begin_inset Quotes cld
\end_inset

symboliques
\begin_inset Quotes crd
\end_inset

, une série de valeurs numériques qui n'ont de sens que pour l'évaluateur
 du Game Master qui leur associe des actions précises à effectuer (on parle
 alors de 
\begin_inset Quotes cld
\end_inset


\emph on
byte-code
\emph default

\begin_inset Quotes crd
\end_inset

).
 Cette séquence de valeurs traduit donc dans cette convention la sémantique
 du code source de la fonction.
\end_layout

\begin_layout Standard
Pour le fun, définissons une fonction simple, et regardons sa représentation
 interne
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
function fun (a, b) (
\end_layout

\begin_layout LyX-Code
    a + 1/b; 
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout LyX-Code
var str = stralloc(); 
\end_layout

\begin_layout LyX-Code
sprintf(str, "fun = %d", fun); 
\end_layout

\begin_layout LyX-Code
GM_Log(str); 
\end_layout

\begin_layout Standard
La fonction calcule tout simplement la somme de son opérande gauche et de
 l'inverse de son opérande droit.
 L'exécution du programme nous donne
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
fun = 2966928
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-mSL-Exo-4.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Prog-4"

\end_inset

Représentation d'une fonction
\end_layout

\end_inset


\end_layout

\end_inset

Muni de cette précieuse information, nous pouvons faire appel à 
\begin_inset Quotes cld
\end_inset

Memory
\begin_inset Quotes crd
\end_inset

, là encore en choisissant l'adresse 2966928 - 2.
 La figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Prog-4"
plural "false"
caps "false"
noprefix "false"

\end_inset

 nous dévoile le contenu de la fonction
\begin_inset space ~
\end_inset

: Nous avons affaire à une structure un peu complexe, semblable à un tableau
 (c.f.
 note 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Note-Tableau"
plural "false"
caps "false"
noprefix "false"

\end_inset

), dont les bornes ont pour identifications symboliques 
\begin_inset Quotes cld
\end_inset


\family typewriter
'ccod'
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
~'ccod'~
\family default

\begin_inset Quotes crd
\end_inset

, block de mémoire de 29 éléments.
 Sans entrer dans les détails, l'outil nous indique les noms symboliques
 des différents champs qui définissent la fonction
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset


\family typewriter
ccflags
\family default

\begin_inset Quotes crd
\end_inset

 vaut 0 : c'est une fonction classique, 
\begin_inset Quotes cld
\end_inset


\family typewriter
ccode
\family default

\begin_inset Quotes crd
\end_inset

 son code débute à l'adresse relative 23, ici 
\begin_inset Quotes cld
\end_inset

2966928+23
\begin_inset Quotes crd
\end_inset

, soit 
\begin_inset Quotes cld
\end_inset

2966951
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
ccodesiz
\family default

\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

: la fonction comporte 6 instructions, son nom est 
\begin_inset Quotes cld
\end_inset


\family typewriter
fun
\family default

\begin_inset Quotes crd
\end_inset

, elle a 2 paramètres, 0 variables locales.
 Quelques informations supplémentaires désignent des tables du système,
 potentiellement utilisées par la fonction.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
_Mark_
\family default

\begin_inset Quotes crd
\end_inset

 enfin indique le début des données brutes
\begin_inset space ~
\end_inset

: la liste des noms des paramètres, des variables locales, et enfin les
 six instructions représentant le code machine.
 
\end_layout

\begin_layout Standard
Ce qu'il est intéressant de retenir est que, tout comme un tableau, une
 fonction est représentée par un bloc de mémoire, et que le nom qui désigne
 la fonction est tout simplement associé à l'adresse de la fonction.
\end_layout

\begin_layout Standard
Si, après avoir défini notre fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
fun
\family default

\begin_inset Quotes crd
\end_inset

 ci-dessus, nous affectons sa valeur à une variable 
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

:
\end_layout

\begin_layout LyX-Code
var v = fun;
\end_layout

\begin_layout Standard
nous obtenons dans 
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

 une nouvelle 
\emph on
référence
\emph default
 au même bloc de mémoire.
 Cette variable va donc se comporter comme la fonction, et, par exemple,
 l'expression 
\begin_inset Quotes cld
\end_inset


\family typewriter
v(3,2)
\family default

\begin_inset Quotes crd
\end_inset

 va nous fournir 
\begin_inset Quotes cld
\end_inset


\family typewriter
3.5
\family default

\begin_inset Quotes crd
\end_inset

 comme attendu.
 
\end_layout

\begin_layout Standard
Notons aussi qu'une fonction peut être reconnue par la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
isfun
\family default

\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description

\family typewriter
z
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

isfun(v)
\family default
 rend 
\begin_inset Quotes cld
\end_inset


\emph on
vrai
\emph default

\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset


\family typewriter
1
\family default

\begin_inset Quotes crd
\end_inset

) ou 
\begin_inset Quotes cld
\end_inset


\emph on
faux
\emph default

\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset


\family typewriter
0
\family default

\begin_inset Quotes crd
\end_inset

) selon que le paramètre 
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

 est, ou non, une fonction primitive ou définie.
\end_layout

\begin_layout Standard
Cette valeur 
\begin_inset Quotes cld
\end_inset

fonctionnelle
\begin_inset Quotes crd
\end_inset

 est donc un simple nombre, qui peut également être conservée dans un élément
 d'un tableau, passée en paramètre à une fonction, etc.
 Cet ensemble de propriétés font que dans le langage 
\family typewriter
mSL
\family default
 les fonctions sont, selon le terme parfois employé par les informaticiens,
 des 
\begin_inset Quotes cld
\end_inset


\emph on
first class citizen
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
first class citizen
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

, ou 
\begin_inset Quotes cld
\end_inset


\emph on
citoyens de première classe
\emph default

\begin_inset Quotes crd
\end_inset

, à l'instar des tableaux et des 
\begin_inset Quotes cld
\end_inset

simples
\begin_inset Quotes crd
\end_inset

 nombres.
 
\end_layout

\begin_layout Paragraph*
Objets ?
\end_layout

\begin_layout Standard
Reprenons l'exemple de notre fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
next
\family default

\begin_inset Quotes crd
\end_inset

.
 Nous réalisons maintenant qu'il est également possible d'encapsuler, dans
 notre structure de données, la fonction avec son état.
 Supposons que notre but soit d'obtenir un 
\begin_inset Quotes cld
\end_inset

round-robin
\begin_inset Quotes crd
\end_inset

 sur un tableau de nombres, qui fournisse à chaque appel le nombre suivant
 du tableau.
 Décidons que notre structure, comportant maintenant quatre éléments, va
 représenter, dans l'ordre
\begin_inset space ~
\end_inset

: la fonction qui fournit l'élément suivant, l'adresse du tableau auquel
 elle va s'appliquer, sa taille, et un indice dans le tableau, qui désignera
 le prochain élément à fournir.
 Soit 
\begin_inset Quotes cld
\end_inset


\family typewriter
gen_RR
\family default

\begin_inset Quotes crd
\end_inset

 cette fonction de génération de l'élément suivant.
 Elle reçoit, en unique paramètre, cette structure de quatre éléments.
 Son écriture est identique à la version antérieure, au décalage des indices
 près, pour laisser libre l'indice 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 du tableau.
\end_layout

\begin_layout LyX-Code
function gen_RR(S)
\end_layout

\begin_layout LyX-Code
local (i, r, t)
\end_layout

\begin_layout LyX-Code
(
\end_layout

\begin_layout LyX-Code
    i = S[3]; // indice
\end_layout

\begin_layout LyX-Code
    t = S[1]; // tableau
\end_layout

\begin_layout LyX-Code
    r = t[i]; // élément courant
\end_layout

\begin_layout LyX-Code
    i = i + 1; // suivant
\end_layout

\begin_layout LyX-Code
    (i >= S[2]) ? (i = 0;); // si le dernier a été fourni
\end_layout

\begin_layout LyX-Code
    S[3] = i; // conserver le futur indice
\end_layout

\begin_layout LyX-Code
    r; // résultat
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
Rédigeons maintenant la fonction qui construit notre nouvelle structure
 de données.
 Elle a besoin, en entrée, du tableau sur lequel la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
gen_RR
\family default

\begin_inset Quotes crd
\end_inset

 va opérer, mais va également conserver la 
\emph on
référence
\emph default
 à cette fonction comme premier élément
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
function make_RR(tableau)
\end_layout

\begin_layout LyX-Code
(
\end_layout

\begin_layout LyX-Code
    array(gen_RR, tableau, size(tableau), 0);
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
Construire un nouveau générateur, 
\begin_inset Quotes cld
\end_inset


\family typewriter
gen1
\family default

\begin_inset Quotes crd
\end_inset

, s'écrit tout simplement
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var gen1 = make_RR(data(7 3 5 180 3 6 8 9 43 100 0 -6 2));
\end_layout

\begin_layout Standard
Voici enfin la nouvelle version de notre opération 
\begin_inset Quotes cld
\end_inset


\family typewriter
next
\family default

\begin_inset Quotes crd
\end_inset

 qui fournit l'élément suivant à partir d'un générateur, en appelant tout
 simplement la fonction associée au générateur
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
function next(gen)
\end_layout

\begin_layout LyX-Code
local (f) 
\end_layout

\begin_layout LyX-Code
(
\end_layout

\begin_layout LyX-Code
    f = gen[0];
\end_layout

\begin_layout LyX-Code
    f(gen);
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
Imprimons les résultats de quatre appels successifs à 
\begin_inset Quotes cld
\end_inset


\family typewriter
next
\family default

\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
sprintf(str, "suivants : %d %d %d %d",
\end_layout

\begin_layout LyX-Code
  next(gen1), next(gen1), next(gen1), next(gen1));
\end_layout

\begin_layout LyX-Code
GM_Log(str);
\end_layout

\begin_layout Standard
Nous obtenons les valeurs attendues
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
suivants : 7 3 5 180
\end_layout

\begin_layout Standard
Cette nouvelle version nous semble tout aussi opérationnelle que la précédente,
 mais ne paraît guère apporter d'amélioration.
 Il y a eu pourtant un grand pas en avant de réalisé, lié à l'
\emph on
abstraction
\emph default
 de la méthode de production.
 L'opération 
\begin_inset Quotes cld
\end_inset


\family typewriter
next
\family default

\begin_inset Quotes crd
\end_inset

 n'a plus à savoir 
\emph on
comment
\emph default
 fonctionne le générateur, mais doit simplement lui 
\emph on
demander
\emph default
 de fournir l'élément suivant.
 Le programmeur chevronné réalisera que nous avons créé un 
\emph on
objet
\emph default
, au sens de la programmation objet.
 Nous pouvons non seulement créer d'autres générateurs de la même classe
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var gen2 = make_RR(data(8801 8802 8833 8834 1002 1007));
\end_layout

\begin_layout Standard
mais encore, par la même approche, créer des générateurs utilisant des algorithm
es différents.
 Ainsi, voici tout ce dont nous avons besoin pour créer un générateur d'entiers
 successifs à partir d'une valeur 
\begin_inset Quotes cld
\end_inset

N
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
function gen_int(S) local(r) (r = S[1]; S[1] = r+1; r;) ;
\end_layout

\begin_layout LyX-Code
function make_int(N) (array(gen_int, N); );
\end_layout

\begin_layout LyX-Code
var gen3 = make_int(100);
\end_layout

\begin_layout Standard
La 
\emph on
même fonction
\emph default
, 
\begin_inset Quotes cld
\end_inset


\family typewriter
next
\family default

\begin_inset Quotes crd
\end_inset

, nous permet maintenant de demander à 
\begin_inset Quotes cld
\end_inset


\family typewriter
gen3
\family default

\begin_inset Quotes crd
\end_inset

 de nous fournir ses éléments suivants, et nous obtenons, comme attendu,
 
\begin_inset Quotes cld
\end_inset


\family typewriter
100 101 102 103 
\family default
etc.
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Il est légitime de qualifier 
\emph on
d'objets
\emph default
 les données comme 
\begin_inset Quotes cld
\end_inset


\family typewriter
gen1
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
gen2
\family default

\begin_inset Quotes crd
\end_inset

, etc.
 que nous pouvons créer de la sorte, dans la mesure où elles satisfont les
 concepts 
\emph on
d'abstraction
\emph default
 (l'implémentation est cachée), 
\emph on
d'encapsulation
\emph default
 (l'objet dispose de ses propres données et de ses propres fonctions), et
 de 
\emph on
polymorphisme
\emph default
 (même interface, 
\begin_inset Quotes cld
\end_inset


\family typewriter
next
\family default

\begin_inset Quotes crd
\end_inset

, pour des implantations différentes, comme 
\begin_inset Quotes cld
\end_inset


\family typewriter
gen1
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
gen3
\family default

\begin_inset Quotes crd
\end_inset

).
 Nous pourrions ajouter le concept d'héritage, mais il faudrait réécrire
 un certain nombre d'opérations.
 Ceci pour dire qu'il sera possible, au besoin, de transposer en 
\emph on
mSL
\emph default
 des approches propres à la technologie objet.
\end_layout

\begin_layout Paragraph*
Fonctionnelles
\end_layout

\begin_layout Standard
Reprenons un de nos anciens exercices, la somme des éléments d'un tableau,
 en faisant cette fois 
\begin_inset Quotes cld
\end_inset

abstraction
\begin_inset Quotes crd
\end_inset

 de la fonction.
 Définissons ceci
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
function reduce(A, f, N)
\end_layout

\begin_layout LyX-Code
local (r, i, s) 
\end_layout

\begin_layout LyX-Code
( 
\end_layout

\begin_layout LyX-Code
    s = size(A);
\end_layout

\begin_layout LyX-Code
    r = N;
\end_layout

\begin_layout LyX-Code
    i = 0;
\end_layout

\begin_layout LyX-Code
    while (i < s) (
\end_layout

\begin_layout LyX-Code
        r = f(r, A[i]);
\end_layout

\begin_layout LyX-Code
        i = i + 1;
\end_layout

\begin_layout LyX-Code
    );
\end_layout

\begin_layout LyX-Code
    r;
\end_layout

\begin_layout LyX-Code
); 
\end_layout

\begin_layout Standard
Cette fonction accepte trois paramètres
\begin_inset space ~
\end_inset

: un tableau, 
\begin_inset Quotes cld
\end_inset


\family typewriter
A
\family default

\begin_inset Quotes crd
\end_inset

, une fonction, 
\begin_inset Quotes cld
\end_inset


\family typewriter
f
\family default

\begin_inset Quotes crd
\end_inset

, et une valeur 
\begin_inset Quotes cld
\end_inset


\family typewriter
N
\family default

\begin_inset Quotes crd
\end_inset

, que l'on transmet comme 
\begin_inset Quotes cld
\end_inset


\emph on
élément neutre
\emph default

\begin_inset Quotes crd
\end_inset

 de la fonction.
 La fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
reduce
\family default

\begin_inset Quotes crd
\end_inset

 a pour finalité de 
\begin_inset Quotes cld
\end_inset


\emph on
réduire
\emph default

\begin_inset Quotes crd
\end_inset

 le tableau 
\begin_inset Quotes cld
\end_inset


\family typewriter
A
\family default

\begin_inset Quotes crd
\end_inset

 par la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
f
\family default

\begin_inset Quotes crd
\end_inset

, c'est-à-dire, symboliquement, d'appliquer cette fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
f
\family default

\begin_inset Quotes crd
\end_inset

 
\begin_inset Quotes cld
\end_inset


\emph on
entre
\emph default

\begin_inset Quotes crd
\end_inset

 les éléments de 
\begin_inset Quotes cld
\end_inset


\family typewriter
A
\family default

\begin_inset Quotes crd
\end_inset

 – imaginons que le tableau contienne les valeurs 
\begin_inset Quotes cld
\end_inset

6 2 5 3
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

; appliquer l'addition 
\begin_inset Quotes cld
\end_inset

entre
\begin_inset Quotes crd
\end_inset

 les éléments de ce tableau revient à calculer 
\begin_inset Quotes cld
\end_inset

6 + 2 + 5 + 3
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
On donne parfois le nom de 
\begin_inset Quotes cld
\end_inset


\emph on
fonctionnelles
\emph default

\begin_inset Quotes crd
\end_inset

 aux fonctions qui acceptent d'autres fonctions comme paramètres.
 A ce titre, l'opération 
\begin_inset Quotes cld
\end_inset


\family typewriter
reduce
\family default

\begin_inset Quotes crd
\end_inset

 est relativement classique.
 Notons que sa programmation gère implicitement le cas particulier où le
 tableau est 
\emph on
vide
\emph default
 (c'est-à-dire ne contient aucun élément)
\begin_inset space ~
\end_inset

: le résultat est alors l'élément neutre de la fonction.
 Dans tous les autres cas, la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
f
\family default

\begin_inset Quotes crd
\end_inset

 est appliquée à chaque élément du tableau.
 
\end_layout

\begin_layout Standard
Pour effectuer, grâce à 
\begin_inset Quotes cld
\end_inset


\family typewriter
reduce
\family default

\begin_inset Quotes crd
\end_inset

, le calcul de la somme des éléments d'un vecteur, on peut lui transmettre
 une fonction qui effectue cette opération d'addition, par exemple
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
function plus(a,b) (a+b;);
\end_layout

\begin_layout Standard
On peut dès lors définir un tableau
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var T = data(2 7 11 30 3 8 9 -2 -6 4 -2 5);
\end_layout

\begin_layout Standard
et en calculer la somme des éléments
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var r = reduce(T, plus, 0);
\end_layout

\begin_layout Standard
Le troisième élément de l'appel est 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

, élément neutre de l'addition.
 L'impression par :
\end_layout

\begin_layout LyX-Code
sprintf(str, "Réduction = %.4f", reduce(T, plus, 0)); 
\end_layout

\begin_layout LyX-Code
GM_Log(str);
\end_layout

\begin_layout Standard
nous donne
\begin_inset Foot
status open

\begin_layout Plain Layout
Nous utilisons ici un autre format d'impression, 
\begin_inset Quotes cld
\end_inset


\family typewriter
%.4f
\family default

\begin_inset Quotes crd
\end_inset

 dont le résultat est d'imprimer la valeur sous forme décimale (
\begin_inset Quotes cld
\end_inset


\family typewriter
f
\family default

\begin_inset Quotes crd
\end_inset

 pour 
\begin_inset Quotes cld
\end_inset


\emph on
floating point
\emph default

\begin_inset Quotes crd
\end_inset

), avec 4 chiffres décimaux après le point.
\end_layout

\end_inset

 : 
\end_layout

\begin_layout LyX-Code
Réduction = 69.0000
\end_layout

\begin_layout Standard
Notons qu'il est possible de transmettre également les fonctions primitives
 du langage, telles 
\begin_inset Quotes cld
\end_inset


\family typewriter
max
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
min
\family default

\begin_inset Quotes crd
\end_inset

, associées à leurs éléments neutres
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
sprintf(str, "max = %.4f", 
\end_layout

\begin_layout LyX-Code
    reduce(T, max, -1.7976931348623158E+308));
\end_layout

\begin_layout LyX-Code
GM_Log(str);
\end_layout

\begin_layout LyX-Code
sprintf(str, "min = %.4f", 
\end_layout

\begin_layout LyX-Code
    reduce(T, min, 1.7976931348623158E+308));
\end_layout

\begin_layout LyX-Code
GM_Log(str);
\end_layout

\begin_layout Standard
Nous fournit
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
max = 30.0000
\end_layout

\begin_layout LyX-Code
min = -6.0000
\end_layout

\begin_layout Standard
Encore mieux, il est même possible d'utiliser comme fonctions les 
\emph on
opérateurs
\emph default
 du langage, en les plaçant entre parenthèses
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
sprintf(str, "sum = %.4f", reduce(T, (+), 0));
\end_layout

\begin_layout LyX-Code
GM_Log(str);
\end_layout

\begin_layout LyX-Code
sprintf(str, "prod = %.4f", reduce(T, (*), 1));
\end_layout

\begin_layout LyX-Code
GM_Log(str);
\end_layout

\begin_layout Standard
expressions qui nous donnent :
\end_layout

\begin_layout LyX-Code
sum = 69.0000
\end_layout

\begin_layout LyX-Code
prod = -4790001600.0000
\end_layout

\begin_layout Standard
Notons que l'on peut obtenir nombre d'opérations utiles par un choix approprié
 de la fonction transmise à 
\begin_inset Quotes cld
\end_inset


\family typewriter
reduce
\family default

\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
function f1(a,b) (a+1/b);
\end_layout

\begin_layout LyX-Code
function f2(a,b) (a+b*b);
\end_layout

\begin_layout LyX-Code
function f3(a,b) (a+abs(b));
\end_layout

\begin_layout LyX-Code
function f4(a,b) (max(a,abs(b)));
\end_layout

\begin_layout Standard
nous permettent de calculer respectivement la somme des inverses des éléments
 d'un tableau, la somme des carrés des éléments, la somme des valeurs absolues
 de ces éléments, et enfin le plus grand, en valeur absolue, des éléments
 du tableau.
 Il convient à chaque fois de passer l'élément neutre approprié, selon les
 cas, aux opérations d'addition et de maximum.
\end_layout

\begin_layout Paragraph*
Exemple 4
\end_layout

\begin_layout Standard
Une autre fonctionnelle, bien classique, est l'opération 
\begin_inset Quotes cld
\end_inset


\family typewriter
map
\family default

\begin_inset Quotes crd
\end_inset

 qui applique une même fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
f
\family default

\begin_inset Quotes crd
\end_inset

 à chacun des éléments d'un tableau.
 Ainsi, 
\begin_inset Quotes cld
\end_inset


\family typewriter
map(T, abs)
\family default

\begin_inset Quotes crd
\end_inset

 va appliquer l'opération 
\begin_inset Quotes cld
\end_inset


\emph on
valeur absolue
\emph default

\begin_inset Quotes crd
\end_inset

 à tous les éléments de 
\begin_inset Quotes cld
\end_inset


\family typewriter
T
\family default

\begin_inset Quotes crd
\end_inset

.
 Elle est fort simple à écrire, travail laissé au lecteur.
\end_layout

\begin_layout Paragraph*
Remarque
\end_layout

\begin_layout Standard
Ces exemples montrent qu'il est tout aussi légitime de qualifier de 
\begin_inset Quotes cld
\end_inset


\emph on
fonctionnel
\emph default

\begin_inset Quotes crd
\end_inset

 le langage 
\family typewriter
mSL
\family default
, dans la mesure où les fonctions sont des objets de première classe, et,
 nous le verrons ultérieurement, qu'elles ont d'autres propriétés comme
 la détection et l'optimisation des récursions terminales.
\end_layout

\begin_layout Section
Chaînes de caractères
\end_layout

\begin_layout Standard
Revenons sur les chaînes de caractères brièvement introduites au début du
 chapitre.
 En 
\emph on
mSL
\emph default
, ce sont des objets désignés par un nombre entier
\begin_inset Foot
status open

\begin_layout Plain Layout
pour la petite histoire, ce nombre est compris entre 90000 et 100000.
\end_layout

\end_inset

.
 Ce sont des données opaques, qui ne sont manipulables que par l'intermédiaire
 de fonctions spécialisées.
 Les fonctions de base sont les suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description

\family typewriter
z
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

stralloc()
\begin_inset Index idx
status open

\begin_layout Plain Layout
stralloc()
\end_layout

\end_inset


\family default
 fournit une nouvelle chaîne de caractères.
\end_layout

\begin_layout Description

\family typewriter
z
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset


\begin_inset Quotes qld
\end_inset

une
\begin_inset space ~
\end_inset

suite
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

caracteres
\begin_inset Quotes qrd
\end_inset


\family default
 est une autre manière de définir une chaîne de caractères.
 
\end_layout

\begin_layout Description

\family typewriter
strfree(s)
\begin_inset Index idx
status open

\begin_layout Plain Layout
strfree(s)
\end_layout

\end_inset


\family default
 libère la chaîne de caractères fournie par 
\begin_inset Quotes cld
\end_inset


\family typewriter
stralloc
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
z
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

strtmp()
\begin_inset Index idx
status open

\begin_layout Plain Layout
strtmp()
\end_layout

\end_inset


\family default
 fournit une chaîne de caractères temporaire.
 Elle n'a pas besoin d'être libérée après usage, mais peut éventuellement
 (au bout d'un long moment) être réutilisée par le système.
 
\end_layout

\begin_layout Standard
Les fonctions de manipulation de chaînes de caractères sont nombreuses.
 Nous avons déjà rencontré 
\begin_inset Quotes cld
\end_inset


\family typewriter
GM_Log
\family default

\begin_inset Quotes crd
\end_inset

, opération d'impression d'un message dans le 
\emph on
log
\emph default
 du 
\emph on
Game Master
\emph default
, et 
\begin_inset Quotes cld
\end_inset


\family typewriter
sprintf
\family default

\begin_inset Quotes crd
\end_inset

, fonction d'édition d'une chaîne de caractères.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
sprintf
\family default

\begin_inset Quotes crd
\end_inset

 est une fonction aux spécifications relativement complexes.
 Elle est directement héritée de sa base JSFX, laquelle la tient en droite
 ligne du langage 
\begin_inset Quotes cld
\end_inset

C
\begin_inset Quotes crd
\end_inset

.
 Il n'est pas d'un grand intérêt d'en recopier ici la description, que l'on
 retrouvera aisément sur internet, dans le manuel du langage JSFX
\begin_inset space ~
\end_inset

:
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "reaper-strings"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
Erreurs
\end_layout

\begin_layout Standard
Une introduction à la programmation ne serait pas complète si l'on n'introduisai
t pas le concept 
\emph on
d'erreur
\emph default
.
 Un programme est erronné si on ne pervient pas à le compiler (une erreur
 est signalée lorsque l'on tente de le charger dans le GM), ou si son exécution
 ne nous fournit pas les résultats attendus.
 Ce sont deux types d'erreurs de natures différentes
\begin_inset space ~
\end_inset

: dans le premier cas, la syntaxe est incorrecte, dans le second cas l'algorithm
e que l'on a programmé ne résout pas le problème.
\end_layout

\begin_layout Standard
Dans le premier cas, le compilateur tente, peu ou prou, de signaler l'erreur
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
// Un programme avec une erreur : 
\end_layout

\begin_layout LyX-Code
// parenthèse manquante...
 
\end_layout

\begin_layout LyX-Code
var a = 2 + 3 * (5^2;
\end_layout

\begin_layout LyX-Code
a + 8;
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/Err-Ex-01.png
	lyxscale 120
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Err-Ex-1"

\end_inset

Signalement d'une erreur
\end_layout

\end_inset


\end_layout

\end_inset

Le message obtenu (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Err-Ex-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) va indiquer un numéro d'erreur (c.f.
 chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Erreurs-détectées"
plural "false"
caps "false"
noprefix "false"

\end_inset

), un numéro de ligne et une position dans la igne.
\end_layout

\begin_layout Section
Une première conclusion
\end_layout

\begin_layout Standard
Ce chapitre vous a proposé un premier tour d'horizon du langage 
\emph on
mSL
\emph default
, en présentant de manière relativement concrète, et parfois fort détaillée,
 les notions de mémoire, variable, tableau, fonction, algorithme, etc., sans
 vouloir prétendre à l'exhaustivité des opérations et particularités du
 langage.
 N'hésitez pas à le relire si certains aspects vous semblent encore flous
\begin_inset space ~
\end_inset

!
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Presentation-mSL"

\end_inset

Présentation détaillée du langage mSL
\end_layout

\begin_layout Standard
Cette partie décrit plus extensivement les spécifications du mini-langage
 de script, 
\emph on
mSL
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL
\end_layout

\end_inset

, intégré au Game Master (mais plus généralement destiné à être incorporé
 à des effets écrits en 
\emph on
JSFX
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
JSFX
\end_layout

\end_inset


\emph default
, fonctionnant sous REAPER 
\begin_inset CommandInset citation
LatexCommand cite
key "reaper-site"
literal "false"

\end_inset

).
\end_layout

\begin_layout Section
Concepts généraux
\end_layout

\begin_layout Standard
Cette section décrit 
\emph on
mSL
\emph default
, un langage de programmation qui peut être intégré à l'intérieur d'un plug-in
 écrit en JS.
 
\emph on
mSL
\emph default
 (pour 
\begin_inset Quotes cld
\end_inset


\emph on
micro Script Language
\emph default

\begin_inset Quotes crd
\end_inset

) est lui-même écrit en JS (
\emph on
jesusonic
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
jesusonic
\end_layout

\end_inset

, aka 
\emph on
eel2
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
eel2
\end_layout

\end_inset

), et est disponible sous la forme de fichiers d'importation, 
\emph on
mSL_Clib.jsfx-inc
\emph default
 et 
\emph on
mSL_Xlib.jsfx-inc
\emph default
.
 Le système se compose d'un compilateur, générant un 
\emph on
byte-code
\begin_inset Index idx
status open

\begin_layout Plain Layout
byte-code
\end_layout

\end_inset


\emph default
 pour une machine à pile, d'un interprète pour ce byte-code, et d'un ensemble
 de procédures run-time.
\end_layout

\begin_layout Standard
Le run-time est relativement élaboré, puisqu'il propose une 
\emph on
gestion dynamique de la mémoire
\emph default
, avec 
\emph on
allocation et désallocation explicites ou implicites
\emph default
, par utilisation d'un 
\emph on
garbage collector conservatif
\emph default
, une 
\emph on
gestion de processus légers
\emph default
, un 
\emph on
scheduler préemptif
\emph default
, une gestion de 
\emph on
messages interprocessus
\emph default
, et un ensemble d'API facilitant 
\emph on
l'introspection
\emph default
 et les 
\emph on
interactions
\emph default
 avec le Game Master.
 
\end_layout

\begin_layout Standard
Les spécifications de 
\emph on
mSL
\emph default
 sont très proches de celles de 
\emph on
eel2
\emph default
.
 Dans la mesure où 
\emph on
mSL
\emph default
 peut uniquement être utilisé dans un plug-in JSFX, ou dans un logiciel
 qui supporte 
\emph on
JS
\emph default
, l'utilisateur potentiel
\begin_inset Foot
status open

\begin_layout Plain Layout
Au sens relativement restrictif de
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset

une personne qui écrit un plug-in en 
\begin_inset Quotes cld
\end_inset

JSFX
\begin_inset Quotes crd
\end_inset

 et désire y incorporer le langage 
\emph on
mSL
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\end_inset

 est susceptible d'être familier avec la syntaxe JSFX.
 Cette partie se concentre donc, après une brêve présentation des spécificités
 de 
\emph on
mSL
\emph default
, sur l'utilisation du langage et son intégration au sein d'un plug-in JSFX.
\end_layout

\begin_layout Standard
L'utilisateur débutant (voire confirmé) en programmation trouvera une introducti
on très informelle à 
\emph on
mSL
\emph default
 au chapitre précédent.
\end_layout

\begin_layout Subsection
Le langage
\end_layout

\begin_layout Standard
Le langage 
\emph on
mSL
\emph default
 est très similaire à 
\emph on
eel2
\emph default
.
 Comme lui, il ne propose comme unique type de données que des 
\emph on
nombres
\emph default
, sous la forme de 
\emph on
flottants 64 bits
\emph default
, permet l'accès à la mémoire de travail 
\emph on
JS
\emph default
, par indexation, et à la mémoire partagée, au moyen de la construction
 
\begin_inset Quotes cld
\end_inset


\family typewriter
gmem[x]
\family default

\begin_inset Quotes crd
\end_inset

.
 La plupart des opérations et des fonctions de JSFX sont disponibles avec
 des noms, syntaxes et sémantiques équivalents.
 Il existe cependant des différences, dues à des impossibilités de programmation
 ou à des choix de l'implémenteur, dont la plupart sont documentées dans
 les paragraphes suivants.
\end_layout

\begin_layout Subsubsection
Le langage, et ses différences avec 
\emph on
eel2
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "par:Variables"

\end_inset

Variables
\end_layout

\begin_layout Enumerate
Les noms de variables débutent avec une lettre ou le caractère 
\begin_inset Quotes cld
\end_inset


\emph on
souligné
\emph default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

_
\begin_inset Quotes crd
\end_inset

, et ne contiennent que des lettres, chiffres et soulignés.
 Les majuscules et les minuscules sont 
\emph on
distinctes
\emph default
, ce qui fait, par exemple, que 
\family typewriter
abc
\family default
, 
\family typewriter
Abc
\family default
 et 
\family typewriter
ABC
\family default
 désignent trois variables différentes.
 Il est possible d'utiliser des symboles de plus de 8 caractères.
 Le compilateur remplace alors le symbole initial par un symbole 
\begin_inset Quotes cld
\end_inset

compacté
\begin_inset Quotes crd
\end_inset

 de 8 caractères.
 Comme il y a nécessairement une perte d'information, il est possible que
 deux symboles 
\begin_inset Quotes cld
\end_inset

longs
\begin_inset Quotes crd
\end_inset

 génèrent le même symbole compacté.
 A titre d'exemple, voici quelques symboles 
\begin_inset Quotes cld
\end_inset

longs
\begin_inset Quotes crd
\end_inset

 et leur représentation compactée
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout LyX-Code
Color_Dark_Gray => 6lCLyDRr
\end_layout

\begin_layout LyX-Code
configuration => 5fcoviuF
\end_layout

\begin_layout LyX-Code
free_blocks_chaining => 0FDf63CG
\end_layout

\begin_layout LyX-Code
processus_status => 7gprouYS
\end_layout

\begin_layout Standard
Les représentations compactées débutent toutes par un chiffre.
 Dans la pratique, ceci implique que deux noms différents, un court (8 caractère
s, ou moins) et un long (plus de 8 caractères), utilisés dans le même programme,
 ne peuvent pas désigner accidentellement la même variable.
 Le risque de collision existe cependant pour deux identificateurs longs.
 Notons cependant que l'algorithme utilisé permet de générer 218340105584896
 symboles distincts, et que les risques de collisions accidentelles sont
 donc extrêmement réduits.
 Qui plus est, les variables devant toutes être déclarée, l'erreur 
\begin_inset Quotes cld
\end_inset

identificateur déjà déclaré
\begin_inset Quotes crd
\end_inset

 signalerait ce cas à l'utilisateur.
\end_layout

\end_deeper
\begin_layout Enumerate
Toutes les variables 
\emph on
doivent être déclarées
\emph default
, avec le mot-clef 
\family typewriter
var
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!var
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
var
\end_layout

\end_inset


\family default
 ou encore 
\family typewriter
loc
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!loc
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
loc
\end_layout

\end_inset


\family default
, similaire – nous verrons ultérieurement la nuance.
 Voici un exemple d'une telle déclaration
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
var
\begin_inset space \space{}
\end_inset

a=10,
\begin_inset space \space{}
\end_inset

b,
\begin_inset space \space{}
\end_inset

c=a+5,
\begin_inset space \space{}
\end_inset

d=2*$pi;
\family default
 
\end_layout

\end_deeper
\begin_layout Enumerate
Cependant, les déclarations portent sur l'ensemble du texte source, et peuvent
 être placées après d'autres instructions, les variables pouvant même être
 utilisées avant leur déclaration, à condition qu'elles soient déclarées
 quelque part dans le texte source.
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
a
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

3;
\end_layout

\begin_layout LyX-Code

\family typewriter
b
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

5<<
\begin_inset space \space{}
\end_inset

a;
\end_layout

\begin_layout LyX-Code

\family typewriter
c
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

b | 3; //returns 43 
\end_layout

\begin_layout LyX-Code

\family typewriter
//
\begin_inset space \space{}
\end_inset

declarations
\begin_inset space \space{}
\end_inset

may
\begin_inset space \space{}
\end_inset

follow
\end_layout

\begin_layout LyX-Code

\family typewriter
var
\begin_inset space \space{}
\end_inset

a,
\begin_inset space \space{}
\end_inset

b,
\begin_inset space \space{}
\end_inset

c;
\family default
 
\end_layout

\end_deeper
\begin_layout Paragraph
Constantes
\end_layout

\begin_layout Standard
Toutes les valeurs utilisées dans les programmes sont des valeurs flottantes
 en 64 bits.
 Il existe différentes notations pour représenter ces valeurs, en fonction
 de l'usage qui va en être fait.
\end_layout

\begin_layout Enumerate
La notation numérique 
\begin_inset Quotes cld
\end_inset

classique
\begin_inset Quotes crd
\end_inset

.
 Il s'agit des notations entière et décimale, de la notation hexadécimale,
 qui débute par 
\family typewriter
0x
\family default
 ou 
\family typewriter
0X
\family default
, suivi d'une séquence de chiffres hexadécimaux (
\family typewriter
0
\family default
 à 
\family typewriter
9
\family default
 et 
\family typewriter
A
\family default
 à 
\family typewriter
F
\family default
), ou encore de la notation binaire, qui débute par 
\family typewriter
0b
\family default
 ou 
\family typewriter
0B
\family default
, et ne comporte que des 
\family typewriter
0
\family default
 et des 
\family typewriter
1
\family default
.
\end_layout

\begin_layout Enumerate
Les caractères, et les caractères multi-octets, qui sont constitués d'une
 séquence de 1 à 4 caractères placés entre apostrophe, comme 
\family typewriter
'A'
\family default
 ou 
\family typewriter
'u2+,'
\family default
.
 Cette notation a la même signification qu'en 
\emph on
JS
\emph default
.
\end_layout

\begin_layout Enumerate
Les 
\emph on
symboles
\emph default
 constituent une notation compacte pour les identicateurs, tels que les
 noms de variables, débutant par une lettre ou un souligné, et ne comportant
 que des lettres, des chiffres, et le caractère souligné (c.f.
 discussion au § 
\begin_inset CommandInset ref
LatexCommand vref
reference "par:Variables"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Cette notation est introduite par le caractère apostrophe renversée (backquote)
, comme dans 
\family typewriter
`symbol
\family default
.
 Cette notation génère des valeurs entières comprises entre 
\family typewriter
0x02C0000000000
\family default
 et 
\family typewriter
0x1000000000000
\family default
.
\end_layout

\begin_layout Enumerate
Les constantes symboliques débutent par le caractère 
\family typewriter
$
\family default
, suivi d'un symbole.
 Les constantes symboliques 
\family typewriter
$pi
\family default
 et 
\family typewriter
$e
\family default
, représentant des constantes mathématiques bien connues, sont prédéfinies,
 et une application peut en ajouter de nouvelles.
\end_layout

\begin_layout Paragraph
Opérations primitives
\end_layout

\begin_layout Standard
La sémantique des opérations est similaires dans les deux langages.
 Notez cependant les différences suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Enumerate
En 
\emph on
JS
\emph default
, les opérations 
\family typewriter
&&
\family default
 et 
\family typewriter
||
\family default
 fournissent une valeur logique, 0 ou 1.
 
\emph on
mSL
\emph default
 utilise la sémantique du langage 
\begin_inset Quotes eld
\end_inset

C
\begin_inset Quotes erd
\end_inset

, et l'expression 
\family typewriter
2
\begin_inset space \space{}
\end_inset

&&
\begin_inset space \space{}
\end_inset

3
\family default
 qui fournit 1 en 
\emph on
JS
\emph default
, fournit 3 en 
\emph on
mSL
\emph default
.
 Les deux résultats correspondent à une valeur 
\begin_inset Quotes cld
\end_inset


\emph on
vrai
\emph default

\begin_inset Quotes crd
\end_inset

, si bien que dans un test, l'expression a la même signification dans les
 deux langages.
\end_layout

\begin_layout Enumerate
En 
\emph on
mSL
\emph default
, les opérateurs d'affectation (
\family typewriter
=
\family default
, 
\family typewriter
+=
\family default
, etc.) ont une priorité plus basse que la condition 
\family typewriter
?
\begin_inset space \space{}
\end_inset

:
\family default
.
 Il peut donc être nécessaire, dans certains cas, d'ajouter des parenthèses
 pour obtenir la sémantique désirée.
\end_layout

\begin_layout Standard
Le tableau ci-dessous résume les différentes priorités des opérateurs du
 langage.
 En cas de doute, ou pour rendre plus lisibles les programmes, ne pas hésiter
 à ajouter des parenthèses autour des sous-expressions.
\end_layout

\begin_layout Standard
\align center

\size footnotesize
\begin_inset Tabular
<lyxtabular version="3" rows="17" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Niveau
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Opérations
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Priorité
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Nature
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
(
\begin_inset space ~
\end_inset

)
\family default
 et 
\family typewriter
[
\begin_inset space ~
\end_inset

]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Parenthèses, fonctions, indexation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
- + ! ~
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Droite à gauche
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Opérations unaires
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
^
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Gauche à droite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Elévation à la puissance
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
* / %
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Gauche à droite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Opérations multiplicatives
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
+ -
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Gauche à droite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Opérations additives
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
<< >>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Gauche à droite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Décalages
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
< <= >= <
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Gauche à droite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Comparaisons non associatives
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
=== == != !==
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Gauche à droite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Comparaisons non associatives
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
& ~
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Gauche à droite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Quotes cld
\end_inset

et
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

ou exclusif
\begin_inset Quotes crd
\end_inset

 bit à bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
|
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Gauche à droite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Quotes cld
\end_inset

ou
\begin_inset Quotes crd
\end_inset

 bit à bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
&&
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Gauche à droite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Quotes cld
\end_inset

et
\begin_inset Quotes crd
\end_inset

 logique
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
||
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Gauche à droite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Quotes cld
\end_inset

ou
\begin_inset Quotes crd
\end_inset

 logique
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
?
\begin_inset space ~
\end_inset

:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Droite à gauche
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Forme conditionnelle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
= += -= *=
\family default
 etc.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Droite à gauche
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Affectation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
;
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Gauche à droite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Séquence d'instructions
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Gauche à droite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Séquence de valeurs
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph
Boucles
\end_layout

\begin_layout Standard
Les constructions 
\family typewriter
loop
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!loop
\end_layout

\end_inset


\family default
 et 
\family typewriter
while
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!while
\end_layout

\end_inset


\family default
 sont disponibles, avec la même sémantique qu'en JS.
 Cependant, seule la forme 
\emph on
while
\emph default
 de syntaxe 
\begin_inset Quotes cld
\end_inset


\family typewriter
while (
\family default
condition
\family typewriter
) (
\family default
corps
\family typewriter
);
\family default

\begin_inset Quotes crd
\end_inset

 est implémentée.
\end_layout

\begin_layout Paragraph
Fonctions définies
\end_layout

\begin_layout Enumerate
La syntaxe de la définition des fonctions est identique en 
\emph on
mSL
\emph default
 et en 
\emph on
J
\emph default
S.
 Cependant, les virgules séparant les arguments et les variables locales
 sont obligatoires en 
\emph on
mSL
\emph default
, alors qu'elles sont facultatives en 
\emph on
JS
\emph default
.
 Contrairement à 
\emph on
JS
\emph default
, les fonctions peuvent être récursives, la récursivité croisée est permise,
 et les fonctions peuvent être référencées avant leur définition
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
fib(25);
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

//returns
\begin_inset space \space{}
\end_inset

75025
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!function
\end_layout

\end_inset


\begin_inset space \space{}
\end_inset

fib(n)
\end_layout

\begin_layout LyX-Code

\family typewriter
(
\end_layout

\begin_layout LyX-Code

\family typewriter
    (n
\begin_inset space \space{}
\end_inset

<
\begin_inset space \space{}
\end_inset

2)
\begin_inset space \space{}
\end_inset

?
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

:
\begin_inset space \space{}
\end_inset

fib(n-1)
\begin_inset space \space{}
\end_inset

+
\begin_inset space \space{}
\end_inset

fib(n-2);
\end_layout

\begin_layout LyX-Code

\family typewriter
);
\family default
 
\end_layout

\end_deeper
\begin_layout Enumerate
Les paramètres et les variables locales sont alloués dans la pile d'exécution,
 à chaque appel de fonction.
 Ces variables ne sont pas attachées à la fonction, et ne sont donc pas
 rémanentes comme en JS, ce qui n'aurait d'ailleurs pas de sens pour des
 fonctions récursives.
 De même, les variables locales ne sont pas initialisées lors d'un appel
 de fonction, et reçoivent les valeurs qui se trouvent être dans la pile
 à ce moment là.
 Juste pour montrer ce fait (et ce n'est en rien un exemple à suivre, mais
 une remarque à oublier
\begin_inset space ~
\end_inset

!), dans la fonction 
\family typewriter
f
\family default
 ci-dessous, il se trouve que la troisième variable locale, 
\family typewriter
z
\family default
, capture la valeur du troisième élément de la pile, 
\family typewriter
1331
\family default
, qui est le résultat du calcul 
\family typewriter
11^3
\family default
 laissé par l'exécution de l'expression précédant l'appel de la fonction
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f()
\end_layout

\begin_layout LyX-Code

\family typewriter
local
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!local
\end_layout

\end_inset


\begin_inset space \space{}
\end_inset

(x,
\begin_inset space \space{}
\end_inset

y,
\begin_inset space \space{}
\end_inset

z)
\end_layout

\begin_layout LyX-Code

\family typewriter
(
\begin_inset space \space{}
\end_inset

z;
\begin_inset space \space{}
\end_inset

);
\end_layout

\begin_layout LyX-Code

\family typewriter
7+8*11^3;
\end_layout

\begin_layout LyX-Code

\family typewriter
f();
\begin_inset space \space{}
\end_inset

//
\begin_inset space \space{}
\end_inset

returns
\begin_inset space \space{}
\end_inset

1331
\family default
 
\end_layout

\end_deeper
\begin_layout Enumerate
L'
\emph on
arité
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
arité
\end_layout

\end_inset

, c'est-à-dire le nombre d'arguments des fonctions définies, est fixe.
 Une fonction sans argument est dite 
\emph on
niladique
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
niladique
\end_layout

\end_inset

, une fonction à un argument est 
\emph on
monadique
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
monadique
\end_layout

\end_inset

, une fonction à deux arguments est 
\emph on
dyadique
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
dyadique
\end_layout

\end_inset

, etc.
 Il n'est pas possible de 
\emph on
surcharger
\begin_inset Index idx
status open

\begin_layout Plain Layout
surcharge
\end_layout

\end_inset


\emph default
 un nom de fonction, c'est-à-dire d'utiliser le même nom pour désigner,
 par exemple, une fonction à un argument et une fonction à trois arguments.
 Cependant, il est possible de définir des fonctions 
\emph on
variadiques
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
variadiques
\end_layout

\end_inset

, c'est-à-dire des fonctions qui acceptent un nombre arbitraire d'éléments.
 Une telle fonction se définit avec, dans son en-tête, deux paramètres séparés
 non pas par une 
\emph on
virgule
\emph default
, mais par un 
\emph on
point-virgule
\emph default
.
 La sémantique est similaire à celle de l'en-tête de la procédure principale
 d'un programme 
\begin_inset Quotes eld
\end_inset

C
\begin_inset Quotes erd
\end_inset


\begin_inset space ~
\end_inset

: le premier paramètre est le nombre effectif d'arguments, le second paramètre
 est la référence d'un tableau contenant ces arguments.
 Avec une définition telle que 
\family typewriter
function
\begin_inset space \space{}
\end_inset

f(x
\begin_inset space \space{}
\end_inset

;
\begin_inset space \space{}
\end_inset

y)
\family default
, et l'appel suivant
\begin_inset space ~
\end_inset

: 
\family typewriter
f(12,
\begin_inset space \space{}
\end_inset

8,
\begin_inset space \space{}
\end_inset

5)
\family default
, 
\family typewriter
x
\family default
 est égal à 3, car il y a trois paramètres dans cet appel, 
\family typewriter
y[0]
\family default
 vaut 12, 
\family typewriter
y[1]
\family default
 vaut 8, et 
\family typewriter
y[2]
\family default
 vaut 5.
 En voici un exemple
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
//
\begin_inset space \space{}
\end_inset

variadic
\begin_inset space \space{}
\end_inset

function
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f(a;b)
\end_layout

\begin_layout LyX-Code

\family typewriter
local
\begin_inset space \space{}
\end_inset

(s,i)
\end_layout

\begin_layout LyX-Code

\family typewriter
(
\end_layout

\begin_layout LyX-Code

\family typewriter
    s
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

i
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

0;
\end_layout

\begin_layout LyX-Code

\family typewriter
    loop
\begin_inset space \space{}
\end_inset

(a,
\begin_inset space \space{}
\end_inset

s
\begin_inset space \space{}
\end_inset

+=
\begin_inset space \space{}
\end_inset

b[i];
\begin_inset space \space{}
\end_inset

i+=
\begin_inset space \space{}
\end_inset

1;
\begin_inset space \space{}
\end_inset

);
\end_layout

\begin_layout LyX-Code

\family typewriter
    s;
\end_layout

\begin_layout LyX-Code

\family typewriter
);
\end_layout

\begin_layout LyX-Code

\family typewriter
f(2,
\begin_inset space \space{}
\end_inset

3,
\begin_inset space \space{}
\end_inset

5,
\begin_inset space \space{}
\end_inset

6)
\begin_inset space \space{}
\end_inset

+
\begin_inset space \space{}
\end_inset

f(5,
\begin_inset space \space{}
\end_inset

7)
\begin_inset space \space{}
\end_inset

+
\begin_inset space \space{}
\end_inset

f();
\begin_inset space \space{}
\end_inset

//
\begin_inset space \space{}
\end_inset

returns
\begin_inset space \space{}
\end_inset

28
\family default
 
\end_layout

\begin_layout Standard
Notons que le tableau des arguments, 
\family typewriter
b
\family default
 dans l'exemple ci-dessus, est un objet temporaire, alloué dans la pile,
 qui est valide à l'intérieur de la fonction, mais n'est pas utilisable
 hors de celle-ci.
\end_layout

\end_deeper
\begin_layout Enumerate
Les fonctions sont des 
\emph on
objets de première classe
\emph default
, ce qui signifie qu'elles peuvent être affectées à des variables, passées
 comme paramètres, rendues comme résultat d'une fonction, etc.
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
//
\begin_inset space \space{}
\end_inset

functions
\begin_inset space \space{}
\end_inset

as
\begin_inset space \space{}
\end_inset

values
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

toto(a,
\begin_inset space \space{}
\end_inset

b,
\begin_inset space \space{}
\end_inset

c)
\begin_inset space \space{}
\end_inset

(a+2*b^c;);
\end_layout

\begin_layout LyX-Code

\family typewriter
var
\begin_inset space \space{}
\end_inset

fun
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

toto;
\end_layout

\begin_layout LyX-Code

\family typewriter
fun(3,
\begin_inset space \space{}
\end_inset

5,
\begin_inset space \space{}
\end_inset

2);
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

//returns
\begin_inset space \space{}
\end_inset

53
\end_layout

\begin_layout LyX-Code

\family typewriter
//
\begin_inset space \space{}
\end_inset

functions
\begin_inset space \space{}
\end_inset

as
\begin_inset space \space{}
\end_inset

arguments
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f1(x,y)
\begin_inset space \space{}
\end_inset

(x+3*y;);
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f2(x,y)
\begin_inset space \space{}
\end_inset

(x*y+7;);
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

g(f,
\begin_inset space \space{}
\end_inset

a,
\begin_inset space \space{}
\end_inset

b)
\begin_inset space \space{}
\end_inset

( 1+f(a,b); );
\end_layout

\begin_layout LyX-Code

\family typewriter
g(f1,
\begin_inset space \space{}
\end_inset

3,
\begin_inset space \space{}
\end_inset

5)
\begin_inset space \space{}
\end_inset

+
\begin_inset space \space{}
\end_inset

g(f2,
\begin_inset space \space{}
\end_inset

5,
\begin_inset space \space{}
\end_inset

6);
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

//returns
\begin_inset space \space{}
\end_inset

57
\family default
 
\end_layout

\begin_layout Standard
Les opérateurs et fonctions primitives sont également des objets de première
 classe.
 Une fonction primitive est directement manipulable dans le langage.
 Un opérateur, placé entre parenthèses, se comporte comme une telle fonction
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var f1 = sin; f1(2.2); // returns 0.808496
\end_layout

\begin_layout LyX-Code
var f2 = (+); f2(62,39); // returns 101
\end_layout

\end_deeper
\begin_layout Enumerate
La fonction primitive 
\family typewriter
return
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!return()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
return
\end_layout

\end_inset


\family default
 permet de sortir d'une fonction, en rendant son résultat comme résultat
 de la fonction.
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f(u)
\begin_inset space \space{}
\end_inset

(
\end_layout

\begin_layout LyX-Code

\family typewriter
    u
\begin_inset space \space{}
\end_inset

==
\begin_inset space \space{}
\end_inset

3
\begin_inset space \space{}
\end_inset

?
\begin_inset space \space{}
\end_inset

return(31);
\end_layout

\begin_layout LyX-Code

\family typewriter
    2*u
\begin_inset space \space{}
\end_inset

+
\begin_inset space \space{}
\end_inset

5;
\end_layout

\begin_layout LyX-Code

\family typewriter
);
\end_layout

\begin_layout LyX-Code

\family typewriter
f(2)+f(3);
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

// returns
\begin_inset space \space{}
\end_inset

40
\family default
 
\end_layout

\end_deeper
\begin_layout Enumerate
L'interprète détecte et optimise les cas de 
\emph on
récursivité terminale
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
récursivité terminale
\end_layout

\end_inset


\emph default
, c'est-à-dire les cas où un appel de fonction est immédiatement suivi d'une
 instruction 
\family typewriter
return
\family default
 implicite ou explicite.
 L'exemple suivant montre une addition, outrancièrement complexe, de deux
 entiers
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f1(x,
\begin_inset space \space{}
\end_inset

y)
\begin_inset space \space{}
\end_inset

(
\end_layout

\begin_layout LyX-Code

\family typewriter
    x
\begin_inset space \space{}
\end_inset

<=
\begin_inset space \space{}
\end_inset

0
\begin_inset space \space{}
\end_inset

?
\begin_inset space \space{}
\end_inset

return(y);
\end_layout

\begin_layout LyX-Code

\family typewriter
    f2(x,
\begin_inset space \space{}
\end_inset

y);
\end_layout

\begin_layout LyX-Code

\family typewriter
);
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f2(u,
\begin_inset space \space{}
\end_inset

v)
\end_layout

\begin_layout LyX-Code

\family typewriter
local
\begin_inset space \space{}
\end_inset

(x,
\begin_inset space \space{}
\end_inset

y,
\begin_inset space \space{}
\end_inset

z,
\begin_inset space \space{}
\end_inset

t)
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

(
\end_layout

\begin_layout LyX-Code

\family typewriter
    x
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

u;
\begin_inset space \space{}
\end_inset

y
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

v;
\end_layout

\begin_layout LyX-Code

\family typewriter
    z
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

x-1;
\begin_inset space \space{}
\end_inset

t
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

1;
\end_layout

\begin_layout LyX-Code

\family typewriter
    f3(z,
\begin_inset space \space{}
\end_inset

y,
\begin_inset space \space{}
\end_inset

t);
\end_layout

\begin_layout LyX-Code

\family typewriter
);
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f3(a,
\begin_inset space \space{}
\end_inset

b,
\begin_inset space \space{}
\end_inset

c)
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

(
\end_layout

\begin_layout LyX-Code

\family typewriter
    f1(a,
\begin_inset space \space{}
\end_inset

b+c);
\end_layout

\begin_layout LyX-Code

\family typewriter
);
\end_layout

\begin_layout LyX-Code

\family typewriter
f1
\begin_inset space \space{}
\end_inset

(5000000,
\begin_inset space \space{}
\end_inset

5000000);
\end_layout

\begin_layout Standard
Dans la dernière ligne, l'appel de la fonction 
\family typewriter
f1
\family default
 fournit la valeur attendue, 10000000, et effectue un total de 15 millions
 d'appels 
\begin_inset Quotes cld
\end_inset

récursifs
\begin_inset Quotes crd
\end_inset

 des fonctions 
\family typewriter
f1
\family default
, 
\family typewriter
f2
\family default
 et 
\family typewriter
f3
\family default
, mais en fait ne consomme aucun espace dans la pile d'exécution, chaque
 appel se traduisant par un 
\begin_inset Quotes cld
\end_inset

simple
\begin_inset Quotes crd
\end_inset

 branchement.
\end_layout

\end_deeper
\begin_layout Paragraph
Fonctions du système
\end_layout

\begin_layout Standard
Certaines des opérations primitives du langage JS sont disponibles dans
 
\emph on
mSL
\emph default
 sous le même nom, et avec la même sémantique.
 Dans d'autres cas, le nom peut être différent, ceci étant dû au choix de
 limiter ces noms à 8 caractères.
\end_layout

\begin_layout Itemize
L'opération 
\family typewriter
time_precise()
\family default
 est disponible sous le nom 
\family typewriter
ptime()
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!ptime()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ptime()
\end_layout

\end_inset


\family default
 
\end_layout

\begin_layout Itemize
L'opération 
\family typewriter
__memtop()
\family default
 est disponible sous le nom 
\family typewriter
memtop()
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!memtop()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
memtop()
\end_layout

\end_inset


\family default
 
\end_layout

\begin_layout Itemize
Les variables systèmes telles que 
\family typewriter
srate
\family default
, 
\family typewriter
num_ch
\family default
, 
\family typewriter
tempo
\family default
 sont disponibles sous la forme des fonctions niladiques, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!srate()
\end_layout

\end_inset

srate()
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
srate()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!num_ch()
\end_layout

\end_inset

num_ch()
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
num_ch()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!tempo()
\end_layout

\end_inset

tempo()
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
tempo()
\end_layout

\end_inset

 , etc.
 
\end_layout

\begin_layout Standard
Notons que 
\emph on
mSL
\emph default
 ne propose pas de fonctions graphiques.
 
\end_layout

\begin_layout Paragraph
Chaînes de caractères
\end_layout

\begin_layout Standard
Les chaînes de caractères en 
\emph on
mSL
\emph default
 sont allouées depuis un petit ensemble de chaînes prédéfinies, soit de
 manière implicite par le compilateur, lorsqu'une constantes de type chaîne
 est utilisée dans un programme, soit de manière explicite par le programme,
 au moyen de la fonction spécifique d'allocation, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!stralloc()
\end_layout

\end_inset

stralloc
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
stralloc()
\end_layout

\end_inset

.
 Les chaînes sont référencées à l'instar des autres valeurs en 
\emph on
mSL
\emph default
, au moyen de variables ordinaires.
\end_layout

\begin_layout LyX-Code
var s1 = "This is a string";
\end_layout

\begin_layout LyX-Code
var s2 = stralloc();
\end_layout

\begin_layout Standard
Ces chaînes peuvent être libérées explicitement par les programmes lorsqu'elles
 ne sont plus utilisées, au moyen de la fonction 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!strfree()
\end_layout

\end_inset

strfree
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
strfree()
\end_layout

\end_inset


\family default

\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
strfree(s1);
\end_layout

\begin_layout LyX-Code
strfree(s2);
\end_layout

\begin_layout Standard
Le langage 
\emph on
mSL
\emph default
 ne propose qu'une partie des opérations sur chaînes de caractères disponibles
 en 
\emph on
JSFX
\emph default

\begin_inset space ~
\end_inset

: 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!strlen()
\end_layout

\end_inset

strlen
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
strlen()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!strcpy()
\end_layout

\end_inset

strcpy
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
strcpy()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!strcat()
\end_layout

\end_inset

strcat
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
strcat()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!strcmp()
\end_layout

\end_inset

strcmp
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
strcmp()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!stricmp()
\end_layout

\end_inset

stricmp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
stricmp()
\end_layout

\end_inset


\family default
 et 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!sprintf()
\end_layout

\end_inset

sprintf
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sprintf()
\end_layout

\end_inset


\family default
 sont implémentées.
 Les fonctions 
\emph on
JSFX
\emph default
 
\family typewriter
str_getchar
\family default
 et 
\family typewriter
str_setchar
\family default
 sont disponibles sous les formes 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!strgetch()
\end_layout

\end_inset

strgetch
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
strgetch()
\end_layout

\end_inset


\family default
 et 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!strsetch()
\end_layout

\end_inset

strsetch
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
strsetch()
\end_layout

\end_inset

.
 Enfin, une nouvelle fonction, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!compile()
\end_layout

\end_inset

compile
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
compile()
\end_layout

\end_inset

, permet de compiler une chaîne représentant une séquence d'instructions
 mSL, et fournit le résultat de cette compilation sous la forme d'une fonction
 niladique, qui peut être exécutée ultérieurement
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var c = compile("var a=3, b=5; 2*a+b;"); 
\end_layout

\begin_layout LyX-Code
c(); // returns 11
\end_layout

\begin_layout Standard
Une fonction particulière, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!strtmp()
\end_layout

\end_inset

strtmp
\begin_inset Index idx
status open

\begin_layout Plain Layout
strtmp()
\end_layout

\end_inset


\family default
, permet d'allouer temporairement une chaîne de caractères, à l'instar de
 
\begin_inset Quotes cld
\end_inset

#
\begin_inset Quotes crd
\end_inset

 de JSFX.
 La valeur obtenue n'a pas besoin d'être libérée, et est réputée valide
 pour les quelques instructions mSL qui suivent.
\end_layout

\begin_layout Paragraph
Accès à la mémoire
\end_layout

\begin_layout Standard

\emph on
mSL
\emph default
 fournit l'opérateur d'indexation, représenté par les crochets, 
\begin_inset Quotes cld
\end_inset


\family typewriter
[]
\family default

\begin_inset Quotes crd
\end_inset

, qui a la même sémantique qu'en 
\emph on
JSFX
\emph default
.
 Une séquence telle que 
\family typewriter
a=100;
\begin_inset space \space{}
\end_inset

a[7];
\family default
 a le même effet dans les deux langages, et fournit la valeur du mot mémoire
 situé en 107.
 Ceci est vrai également pour des opérations telles que 
\family typewriter
gmem[x];
\family default
 et 
\family typewriter
gmem[x]=y;
\family default
.
\end_layout

\begin_layout Standard
En outre, 
\emph on
mSL
\emph default
 utilise une partie de la mémoire du plug-in, qu'il gère en mémoire dynamique.
 Les allocations dans cette mémoire sont réalisées par l'opération 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!malloc()
\end_layout

\end_inset

malloc
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
malloc()
\end_layout

\end_inset


\family default
, et les libérations de cette mémoire par 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!mfree()
\end_layout

\end_inset

mfree
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mfree()
\end_layout

\end_inset

.
\end_layout

\begin_layout Paragraph
Importations
\end_layout

\begin_layout Standard
mSL peut importer des fichiers externes contenant des instructions mSL.
 La syntaxe de cette opération consiste en un mot-clef spécifique, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!import()
\end_layout

\end_inset

import
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
import
\end_layout

\end_inset

, suivi d'une chaîne de caractères contenant le nom du fichier à importer,
 qui doit avoir l'une des extensions 
\begin_inset Quotes cld
\end_inset


\family typewriter
.txt
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
.mSL
\family default

\begin_inset Quotes crd
\end_inset

, et se termine par un point-virgule.
 Ex:
\end_layout

\begin_layout LyX-Code
import "file.txt";
\end_layout

\begin_layout Standard
Les instructions d'importation peuvent être mélangées avec les autres instructio
ns.
\end_layout

\begin_layout Section
Quelques caractéristiques de l'implémentation
\end_layout

\begin_layout Subsection
Gestion de la mémoire
\end_layout

\begin_layout Standard

\emph on
mSL
\emph default
 propose une gestion dynamique de la mémoire, au travers des opérations
 
\begin_inset Quotes cld
\end_inset


\family typewriter
malloc()
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
malloc()
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mfree()
\end_layout

\end_inset

mfree()
\family default

\begin_inset Quotes crd
\end_inset

.
 Il existe aussi un 
\begin_inset Quotes cld
\end_inset


\emph on
garbage collector
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
garbage collector
\end_layout

\end_inset


\emph default

\begin_inset Quotes crd
\end_inset

, qui permet de récupérer certains blocs (mémoire partagée entre différents
 processus) qui ne peuvent pas aisément être libérés explicitement.
 Le 
\begin_inset Quotes cld
\end_inset


\emph on
garbage collector
\emph default

\begin_inset Quotes crd
\end_inset

 est de type conservatif, c'est-à dire qu'il essaye de ne libérer que les
 blocs qui ne peuvent pas être accessibles au travers d'une structure ou
 d'une autre.
 
\end_layout

\begin_layout Subsection
Gestion des chaînes de caractères
\end_layout

\begin_layout Standard
La gestion des chaînes de caractères est également dynamique.
 Le système propose un petit nombre de chaînes de caractères, qui sont allouées
 implicitement (utilisation de constantes de type 
\begin_inset Quotes cld
\end_inset

chaîne de caractères
\begin_inset Quotes crd
\end_inset

 dans un programme), ou explicitement par la procédure 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
stralloc()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!stralloc()
\end_layout

\end_inset

stralloc()
\family default
, et libérées par la procédure 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
strfree()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!strfree()
\end_layout

\end_inset

strfree()
\family default
.
 Les chaînes ainsi allouées sont assurées de perdurer durant toute l'exécution
 du programme.
 Notons cependant qu'il n'y a pas actuellement de récupération automatique
 des chaînes allouées, devenues inutilisées, et non libérées.
\end_layout

\begin_layout Subsection
Compilation dynamique
\end_layout

\begin_layout Standard
La procédure 
\begin_inset Quotes cld
\end_inset


\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!compile()
\end_layout

\end_inset

compile()
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
compile()
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 permet de compiler la chaîne de caractères passée en paramètre.
 Le résultat est un code exécutable, assimilé à une fonction 
\emph on
niladique
\begin_inset Index idx
status open

\begin_layout Plain Layout
niladique
\end_layout

\end_inset


\emph default
 anonyme.
 La chaîne de caractères peut comporter des déclarations, des insertions
 de fichiers extérieurs, etc.
 Elle est compilée dans le contexte du code appelant, ce qui veut dire qu'elle
 peut faire référence aux fonctions et variables définies par ce code.
 
\end_layout

\begin_layout Subsection
Blocs
\end_layout

\begin_layout Standard

\emph on
mSL
\emph default
 définit une unique structure de données, dite 
\emph on
mBlock
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
mBlock
\end_layout

\end_inset


\emph default
 (pour 
\begin_inset Quotes eld
\end_inset

Memory Block
\begin_inset Quotes erd
\end_inset

), ou plus simplement, 
\emph on
block
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
block
\end_layout

\end_inset

, qui est juste un segment de mémoire, avec un 
\emph on
en-tête
\emph default
 et une 
\emph on
terminaison
\emph default
 spécifique.
 Par bien des aspects, un tel bloc se comporte comme un tableau dans un
 langage de programmation classique.
 Un bloc peut être créé au sein d'un programme 
\emph on
JS
\emph default
 par la procédure 
\family typewriter
mSL_make_block
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_make_block()
\end_layout

\end_inset


\family default
 à partir d'une adresse mémoire fournie à la procédure, ou encore, dynamiquement
, par un appel à l'allocateur de mémoire 
\family typewriter
mSL_malloc
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_malloc()
\end_layout

\end_inset

.
 Dans un programme 
\emph on
mSL
\emph default
, une création dynamique peut être réalisée par un appel à 
\family typewriter
malloc()
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!malloc()
\end_layout

\end_inset


\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
malloc()
\end_layout

\end_inset

 ou par la procédure 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!array()
\end_layout

\end_inset

array()
\begin_inset Index idx
status open

\begin_layout Plain Layout
array()
\end_layout

\end_inset


\family default
.
 Un bloc peut aussi être créé, au moment de la compilation, mais toujours
 par allocation dynamique de mémoire, au moyen de la directive 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!data()
\end_layout

\end_inset

data
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
data()
\end_layout

\end_inset

, dont la syntaxe comporte le mot-clef 
\begin_inset Quotes cld
\end_inset


\family typewriter
data
\family default

\begin_inset Quotes crd
\end_inset

 suivi d'une liste de constantes entre parenthèses
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var bl = data(1,2,3.4, hello, world, ’ABCD’,
\end_layout

\begin_layout LyX-Code
              0x3ffA27342C5, $pi, ’x’);
\end_layout

\begin_layout Standard
Dans cette expression, toutes les valeurs sont des nombres, et, par exemple,
 
\begin_inset Quotes cld
\end_inset


\family typewriter
hello
\family default

\begin_inset Quotes crd
\end_inset

 a pour valeur la codification du symbole correspondant, sous la forme d'un
 nombre flottant 64 bits.
 Notons aussi que les 
\emph on
virgules
\emph default
 qui séparent les valeurs entre elles sont facultatives, et peuvent être
 remplacées par des espaces ou des passages à la ligne.
\end_layout

\begin_layout Standard
Les Blocs sont utilisés pour représenter toutes les structures internes
 du système 
\emph on
mSL
\emph default
.
 Un type leur est associé, sous la forme d'une valeur multi-chars de 4 octets,
 mais ce type est utilisé comme un simple étiquetage du bloc.
 Les progammes 
\emph on
mSL
\emph default
 peuvent accéder aisément aux informations concernant un bloc
\begin_inset space ~
\end_inset

: si 
\family typewriter
bl
\family default
 est un tel bloc, 
\family typewriter
bl[-2]
\family default
 est son type, 
\family typewriter
bl[-1]
\family default
 son nombre d'élements, 
\family typewriter
\emph on
N
\family default
\emph default
, et les expressions 
\family typewriter
bl[0]
\family default
 à 
\family typewriter
bl[
\emph on
N
\emph default
-1]
\family default
 fournissent l'accès, en lecture ou écriture, à ses éléments.
 Le type d'un bloc, tel qu'il est par exemple défini par une directive 
\family typewriter
data()
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
data()
\end_layout

\end_inset


\family default
, est par défaut 
\begin_inset Quotes cld
\end_inset


\family typewriter
'data'
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
'data'
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 s'il n'est pas explicitement modifié.
\end_layout

\begin_layout Standard
Les blocs peuvent également être utilisés en 
\emph on
mémoire associative
\begin_inset Index idx
status open

\begin_layout Plain Layout
mémoire associative
\end_layout

\end_inset


\emph default
, dans laquelle les éléments de rang pair représentent les clefs, et les
 éléments de rang impair les valeurs associées.
 Ainsi
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
var tab = data(item1 1 item2 2 hello 3.4 world 333
\end_layout

\begin_layout LyX-Code
               'ABCD' 0x3ffA27342C5 last 'x');
\end_layout

\begin_layout Standard
L'expression:
\end_layout

\begin_layout LyX-Code
tab[`hello]
\end_layout

\begin_layout Standard
a comme valeur:
\end_layout

\begin_layout LyX-Code
3.4
\end_layout

\begin_layout Standard
et:
\end_layout

\begin_layout LyX-Code
tab['ABCD']
\end_layout

\begin_layout Standard
vaut:
\end_layout

\begin_layout LyX-Code
0x3ffA27342C5 // qui s'écrira en sortie : 4396477006533
\end_layout

\begin_layout Standard
Ceci implique que les valeurs numériques des clefs soient supérieures à
 la taille du tableau.
 
\end_layout

\begin_layout Standard
Notons que la directive 
\begin_inset Quotes cld
\end_inset


\family typewriter
data
\family default

\begin_inset Quotes crd
\end_inset

 peut aussi être remplacé par le caractère 
\begin_inset Quotes cld
\end_inset


\family typewriter
`
\family default

\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

: 
\family typewriter
`(1 2 3)
\family default
 est strictement équivalent à 
\family typewriter
data(1 2 3)
\family default
.
\end_layout

\begin_layout Subsection
Tables des symboles
\end_layout

\begin_layout Standard
Lors de l'exécution, différentes tables de symboles entrent en jeu
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Enumerate
la table des variables globales, qui rassemble les variables déclarées par
 le mot clef 
\begin_inset Quotes cld
\end_inset


\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!var
\end_layout

\end_inset

var
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
var
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 et les fonctions définies.
\end_layout

\begin_layout Enumerate
la table des variables 
\begin_inset Quotes cld
\end_inset

semi-locales
\begin_inset Quotes crd
\end_inset

, qui contient les variables définies par le mot-clef 
\begin_inset Quotes cld
\end_inset


\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!loc
\end_layout

\end_inset

loc
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
loc
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
la table des pointeurs, qui contient les variables définies par le mot-clef
 
\begin_inset Quotes cld
\end_inset


\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!ptr
\end_layout

\end_inset

ptr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ptr
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
 Ces dernières variables sont en fait des variables 
\begin_inset Quotes cld
\end_inset

indirectes
\begin_inset Quotes crd
\end_inset

, qui contiennent une adresse mémoire, et c'est cette adresse mémoire qui
 est en fait consultée ou vérifiée.
\end_layout

\begin_layout Enumerate
la table des variables locales à une fonction, qui contient les valeurs
 des paramètres et des variables déclarées par 
\begin_inset Quotes cld
\end_inset


\emph on
local
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
local
\end_layout

\end_inset


\emph default

\begin_inset Quotes crd
\end_inset

 dans cette fonction.
\end_layout

\begin_layout Standard
Les trois premières sont des 
\begin_inset Quotes cld
\end_inset

blocs
\begin_inset Quotes crd
\end_inset

 classiques, de types respectifs 
\family typewriter
'vars'
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
'vars'
\end_layout

\end_inset


\family default
, 
\family typewriter
'locs'
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
'locs'
\end_layout

\end_inset


\family default
 et 
\family typewriter
'ptrs'
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
'ptrs'
\end_layout

\end_inset


\family default
.
 La dernière est virtuelle, étant représentée temporairement par une zone
 de la pile d'exécution.
\end_layout

\begin_layout Subsection
Processus
\end_layout

\begin_layout Standard

\emph on
mSL
\emph default
 permet de définir des 
\emph on
processus légers
\emph default
 (
\begin_inset Quotes cld
\end_inset


\emph on
light weight processes
\emph default

\begin_inset Quotes crd
\end_inset

), qui peuvent s'exécuter en parallèle, et sans interférer avec la gestion
 de l'audio.
 Il peut y avoir des centaines de processus actifs simultanément.
 Tous les processus partagent le même espace d'adressage global, qui est
 celui du plug-in, mais peuvent avoir des espaces de variables privés séparés.
 A un instant donné, un seul processus est actif.
 La commutation entre différents processus s'effectue automatiquement (le
 mécanisme est préemptif, ce qui assure qu'aucun processus ne va bloquer
 la machine), ou par une requêtre explicite du processus, ou d'un autre
 processus.
\end_layout

\begin_layout Standard
La création de nouveaux processus peut être réalisée par le Game Master,
 ou explicitement, par un appel d'une fonction spécialisée.
\end_layout

\begin_layout Standard
A l'heure actuelle, les fonctions suivantes sont disponibles
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description

\family typewriter
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!wait()
\end_layout

\end_inset

wait(sec)
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
wait(sec)
\end_layout

\end_inset


\family default
 permet de placer le processus courant en attente pour une durée de 
\begin_inset Quotes cld
\end_inset

sec
\begin_inset Quotes crd
\end_inset

 secondes.
\end_layout

\begin_layout Description

\family typewriter
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!yield()
\end_layout

\end_inset

yield()
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
yield()
\end_layout

\end_inset


\family default
 permet à un processus de 
\begin_inset Quotes cld
\end_inset

céder la main
\begin_inset Quotes crd
\end_inset

 au processus suivant de la liste d'attente.
 Si le processus courant est unique, il est donc réactivé immédiatement.
 
\end_layout

\begin_layout Description

\family typewriter
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!exit()
\end_layout

\end_inset

exit(r)
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
exit()
\end_layout

\end_inset


\family default
 arrête définitivement le processus.
 La valeur du paramètre est fournie comme 
\begin_inset Quotes cld
\end_inset

exit value
\begin_inset Quotes crd
\end_inset

, et est récupérable par un autre processus.
\end_layout

\begin_layout Standard
Chaque processus venant d'être activé est assuré de disposer d'une durée
 minimale d'exécution donnée (plus de 4000 instructions), ce qui permet,
 après un 
\emph on
yield()
\emph default
 ou un 
\emph on
wait()
\emph default
, d'être assuré, durant cette periode, d'un accès exclusif à la mémoire
 et aux variables manipulées, même si elles sont partagées avec d'autres
 threads.
\end_layout

\begin_layout Standard
Un 
\emph on
thread
\emph default
 est créé par le lancement, au moyen de la primitive 
\family typewriter
thread()
\begin_inset Index idx
status open

\begin_layout Plain Layout
thread()
\end_layout

\end_inset


\family default
, d'une fonction sans paramètres ni variables locales.
 Un 
\emph on
thread
\emph default
 créé lors de l'exécution d'un script partage avec les autres 
\emph on
threads
\emph default
 créés lors de l'exécution du même 
\emph on
thread
\emph default
 toutes les variables déclarées par 
\begin_inset Quotes cld
\end_inset


\family typewriter
var
\begin_inset Index idx
status open

\begin_layout Plain Layout
var
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, mais les variables déclarées par 
\begin_inset Quotes cld
\end_inset


\family typewriter
loc
\begin_inset Index idx
status open

\begin_layout Plain Layout
loc
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 sont locales à chacun des 
\emph on
threads
\emph default
.
 Les opérations sur processus sont décrites en détail au chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Processus"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Section

\emph on
mSL
\emph default
, en résumé
\end_layout

\begin_layout Enumerate

\series bold
\emph on
mSL
\series default
\emph default
 est très similaire à 
\series bold
\emph on
JS
\series default
\emph default
.
\end_layout

\begin_layout Enumerate
Les noms des variables ne sont pas limités en nombre de caractères (mais
 voir à ce sujet le § 
\begin_inset CommandInset ref
LatexCommand vref
reference "par:Variables"
plural "false"
caps "false"
noprefix "false"

\end_inset

), sont sensibles à la casse, et les variables 
\emph on
doivent
\emph default
 être déclarées avec l'un des mots-clefs 
\family typewriter
var
\begin_inset Index idx
status open

\begin_layout Plain Layout
var
\end_layout

\end_inset


\family default
 ou 
\family typewriter
loc
\begin_inset Index idx
status open

\begin_layout Plain Layout
loc
\end_layout

\end_inset


\family default
.
\end_layout

\begin_layout Enumerate
Les opérateurs standard : 
\family typewriter
+
\family default
, 
\family typewriter
-
\family default
, 
\family typewriter
*
\family default
, 
\family typewriter
/
\family default
, 
\family typewriter
%
\family default
, 
\family typewriter
<
\family default
, 
\family typewriter
<=
\family default
, 
\family typewriter
==
\family default
, 
\family typewriter
!=
\family default
, 
\family typewriter
>=
\family default
, 
\family typewriter
>
\family default
, 
\family typewriter
===
\family default
, 
\family typewriter
!==
\family default
, 
\family typewriter
&
\family default
, 
\family typewriter
|
\family default
, 
\family typewriter
&&
\family default
, 
\family typewriter
||
\family default
, 
\family typewriter
!
\family default
 , 
\family typewriter
^
\family default
, 
\family typewriter
~
\family default
, 
\family typewriter
?:
\family default
, 
\family typewriter
=
\family default
, 
\family typewriter
+=
\family default
, 
\family typewriter
-=
\family default
, 
\family typewriter
*=
\family default
, 
\family typewriter
/=
\family default
, 
\family typewriter
%=
\family default
, 
\family typewriter
&=
\family default
, 
\family typewriter
|=
\family default
 ont la même sémantique.
 
\end_layout

\begin_layout Enumerate
Les fonctions standard : 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!sin()
\end_layout

\end_inset

sin
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sin()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!cos()
\end_layout

\end_inset

cos
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
cos()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!tan()
\end_layout

\end_inset

tan
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
tan()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!asin()
\end_layout

\end_inset

asin
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
asin()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!acos()
\end_layout

\end_inset

acos
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
acos()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!atan()
\end_layout

\end_inset

atan
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
atan()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!max()
\end_layout

\end_inset

max
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
max()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!min()
\end_layout

\end_inset

min
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
min()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!atan2()
\end_layout

\end_inset

atan2
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
atan2()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!pow()
\end_layout

\end_inset

pow
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
pow()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!sqr()
\end_layout

\end_inset

sqr
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sqr()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!sqrt()
\end_layout

\end_inset

sqrt
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sqrt()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!exp()
\end_layout

\end_inset

exp
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
exp()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!log()
\end_layout

\end_inset

log
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
log()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!abs()
\end_layout

\end_inset

abs
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
abs()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!sign()
\end_layout

\end_inset

sign
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sign()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!log10()
\end_layout

\end_inset

log10
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
log10()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!floor()
\end_layout

\end_inset

floor
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
floor()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!ceil()
\end_layout

\end_inset

ceil
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ceil()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!invsqrt()
\end_layout

\end_inset

invsqrt
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
invsqrt()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!rand()
\end_layout

\end_inset

rand
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
rand()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!time()
\end_layout

\end_inset

time
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
time()
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!strlen()
\end_layout

\end_inset

strlen
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
strlen()
\end_layout

\end_inset


\family default
 sont identiques dans les deux langages.
\end_layout

\begin_layout Enumerate
Certaines fonctions standard sont définies avec un nom ou une sytaxe différente
\begin_inset space ~
\end_inset

: 
\family typewriter
ptime()
\family default
 pour 
\family typewriter
time_precise()
\family default
, 
\family typewriter
srate()
\family default
, 
\family typewriter
num_ch()
\family default
, 
\family typewriter
tempo()
\family default
, 
\family typewriter
memtop()
\family default
 pour 
\family typewriter
__memtop()
\family default
.
\end_layout

\begin_layout Enumerate
Nouvelles fonctions : 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!int()
\end_layout

\end_inset

int
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
int()
\end_layout

\end_inset

(x)
\family default
 (conversion de 
\family typewriter
x
\family default
 en un entier), 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!irand()
\end_layout

\end_inset

irand
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
irand()
\end_layout

\end_inset

(x)
\family default
 (entier au hasard dans [0 x-1]), 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!isint()
\end_layout

\end_inset

isint
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
isint()
\end_layout

\end_inset

(x)
\family default
 (teste si x est un entier), 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!isfun()
\end_layout

\end_inset

isfun
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
isfun()
\end_layout

\end_inset

(x)
\family default
 (teste si 
\family typewriter
x
\family default
 est une fonction), 
\family typewriter
return
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
return()
\end_layout

\end_inset

(v)
\family default
 (sortie d'une fonction), 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!strcode()
\end_layout

\end_inset

strcode
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
strcode()
\end_layout

\end_inset

(string)
\family default
 (transformation d'une chaîne de caractères en un symbole), 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!sum()
\end_layout

\end_inset

sum
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
sum()
\end_layout

\end_inset

(x1, x2, ...
 xn)
\family default
 (somme de ses paramètres), 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!compile()
\end_layout

\end_inset

compile
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
compile()
\end_layout

\end_inset

(string)
\family default
 (compilation d'une chaîne de caractères sous la forme d'une fonction niladique)
, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!error()
\end_layout

\end_inset

error
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
error()
\end_layout

\end_inset

(code)
\family default
 (signalement d'une erreur, et arrêt de l'exécution du processus), 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!malloc()
\end_layout

\end_inset

malloc
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
malloc()
\end_layout

\end_inset

(size [,type])
\family default
 (allocation de mémoire dynamique),
\family typewriter
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!isblock()
\end_layout

\end_inset

isblock
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
isblock()
\end_layout

\end_inset

(x)
\family default
 (teste si 
\family typewriter
x
\family default
 est un bloc de mémoire alloué par 
\family typewriter
malloc
\family default
), 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!mfree()
\end_layout

\end_inset

mfree
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mfree()
\end_layout

\end_inset

(mref)
\family default
 (libération d'un bloc alloué), 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!stralloc()
\end_layout

\end_inset

stralloc
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
stralloc()
\end_layout

\end_inset

()
\family default
 (allocation dynamique d'une chaîne de caractères), 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!strfree()
\end_layout

\end_inset

strfree
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
strfree()
\end_layout

\end_inset

(str)
\family default
 (libération d'une chaîne alloués), 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!get()
\end_layout

\end_inset

get
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
get()
\end_layout

\end_inset

(t, x)
\family default
 (accès à la propriété 
\emph on
x
\emph default
 d'une table 
\emph on
t
\emph default
), 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!set()
\end_layout

\end_inset

set
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
set()
\end_layout

\end_inset

(t, x, v)
\family default
 (modification de la valeur 
\emph on
v
\emph default
 de la propriété 
\emph on
x
\emph default
 d'une table 
\emph on
t
\emph default
).
\end_layout

\begin_layout Enumerate
Les fonctions définies acceptent les récursions simples et croisées, et
 l'exécution optimise les récursions terminales.
 Les fonctions sont des 
\begin_inset Quotes cld
\end_inset

citoyens de première classe
\begin_inset Quotes crd
\end_inset

, c'est-à-dire qu'elles peuvent être assignées à une variable, passées comme
 paramètres à une fonction, et fournies comme résultat d'une fonction.
\end_layout

\begin_layout Chapter
Integration de mSL au sein du Game Master
\end_layout

\begin_layout Standard
Ce chapitre décrit plus spécifiquement l'intégration du langage 
\emph on
mSL
\emph default
 dans le plug-in, et de quelle manière celui-ci est utilisé pour étendre
 les possibilités du logiciel.
\end_layout

\begin_layout Section
Fonctions spécifiques
\end_layout

\begin_layout Subsection
La procédure 
\begin_inset Quotes cld
\end_inset


\family typewriter
action
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
action()
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
L'accès aux opérations du 
\emph on
Game Master
\emph default
 s'effectue au travers d'un certain nombre de fonctions.
 L'une d'entre elles permet d'exécuter les 
\emph on
actions
\emph default
 décrites au chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Actions"
plural "false"
caps "false"
noprefix "false"

\end_inset

 depuis un script 
\emph on
mSL
\emph default

\begin_inset space ~
\end_inset

;
\end_layout

\begin_layout Description

\family typewriter
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!action()
\end_layout

\end_inset

action
\begin_inset Index idx
status open

\begin_layout Plain Layout
action()
\end_layout

\end_inset

(bloc)
\family default
 lorsque le paramètre est un bloc de données, ces données sont interprétées
 comme une séquences d'actions (c.f.
 chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Actions"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Il n'est pas nécessaire de préciser le nombre d'éléments constituant cette
 liste, information qui est fournie par le bloc lui-même.
\end_layout

\begin_layout Description

\family typewriter
action(num,
\begin_inset space ~
\end_inset

p1,
\begin_inset space ~
\end_inset

p2,
\begin_inset space ~
\end_inset

...)
\family default
 lorsque les paramètres sont des valeurs numériques, ils représentent le
 code d'une action (
\begin_inset Quotes cld
\end_inset


\family typewriter
num
\family default

\begin_inset Quotes crd
\end_inset

), suivi des paramètres de l'action.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:La-procédure-settable"

\end_inset

La procédure 
\begin_inset Quotes cld
\end_inset


\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!table()
\end_layout

\end_inset

table
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
table()
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Cette procédure est en fait un analyseur syntaxique, dont le rôle est de
 prendre une entrée (un bloc mémoire défini en 
\emph on
mSL
\emph default
), et de construire à partir des valeurs rencontrées certaines structures
 utilisées par le logiciel.
 Son appel est le suivant
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
table(bloc);
\end_layout

\begin_layout Standard
Le paramètre est un bloc, qui est typiquement construit par un 
\begin_inset Quotes cld
\end_inset


\family typewriter
data
\family default

\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Standard
La première ligne est ainsi 
\begin_inset Quotes cld
\end_inset


\family typewriter
table(data(
\family default

\begin_inset Quotes crd
\end_inset

 et la dernière 
\begin_inset Quotes cld
\end_inset


\family typewriter
));
\family default

\begin_inset Quotes crd
\end_inset

.
 Ex
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
table(data(
\end_layout

\begin_layout LyX-Code
    Table
\begin_inset Index idx
status open

\begin_layout Plain Layout
Table
\end_layout

\end_inset

 Sensors Clear
\begin_inset Index idx
status open

\begin_layout Plain Layout
Clear
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    MMode
\begin_inset Index idx
status open

\begin_layout Plain Layout
MMode
\end_layout

\end_inset

 0
\end_layout

\begin_layout LyX-Code
        Enter
\begin_inset Index idx
status open

\begin_layout Plain Layout
Enter
\end_layout

\end_inset

  324  3   323  7
\end_layout

\begin_layout LyX-Code
        DefSeq  1  DoKmd  324  9  350 7100
\end_layout

\begin_layout LyX-Code
        DefSeq  2  DoKmd  335  0.5  349  7100
\end_layout

\begin_layout LyX-Code
        DefSeq  3  DoKmd  301  334  60  0  302
\end_layout

\begin_layout LyX-Code
    MMode 1
\end_layout

\begin_layout LyX-Code
        DefSeq
\begin_inset Index idx
status open

\begin_layout Plain Layout
DefSeq
\end_layout

\end_inset

  1  DoKmd
\begin_inset Index idx
status open

\begin_layout Plain Layout
DoKmd
\end_layout

\end_inset

  350, 3001
\end_layout

\begin_layout LyX-Code
    End
\begin_inset Index idx
status open

\begin_layout Plain Layout
End
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
));
\end_layout

\begin_layout Standard
L'analyse est basée sur un automate déterministe à pile et à états fini,
 dans la mesure où toutes les structures de tables utilisées sont simples
 et non récursives.
\end_layout

\begin_layout Standard
Un préambule est constitué par une séquence
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
Table 
\begin_inset Quotes cld
\end_inset

nom_de_table
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Il est suivi d'une description du contenu, description dont la syntaxe,
 simple, est décrite pour chaque table au chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Fichiers-de-configuration"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Il peut être judicieux d'ajouter 
\begin_inset Quotes cld
\end_inset


\family typewriter
Clear
\family default

\begin_inset Quotes crd
\end_inset

 après le nom de la table si l'on veut s'assurer que celle-ci est vierge
 de tout contenu, faute de quoi les nouvelles informations sont ajoutées
 au contenu actuel de la table.
\end_layout

\begin_layout Standard
A noter que les commentaires sont du type 
\begin_inset Quotes cld
\end_inset

C
\begin_inset Quotes crd
\end_inset

, c'est-à dire 
\begin_inset Quotes cld
\end_inset


\family typewriter
//
\family default

\begin_inset Quotes crd
\end_inset

 pour un commentaire de fin de ligne, et 
\begin_inset Quotes cld
\end_inset


\family typewriter
/*
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
*/
\family default

\begin_inset Quotes crd
\end_inset

 encadrant un commentaire de plusieurs lignes.
\end_layout

\begin_layout Standard
Une description se termine en général par une indication de fin
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
End
\end_layout

\begin_layout Standard
La procédure admet la description consécutive de plusieurs tables, chacune
 encadrée par 
\begin_inset Quotes cld
\end_inset


\family typewriter
Table
\family default

\begin_inset Quotes crd
\end_inset

 ...
 
\begin_inset Quotes cld
\end_inset


\family typewriter
End
\family default

\begin_inset Quotes crd
\end_inset

.
 Le format d'entrée des données est souple
\begin_inset space ~
\end_inset

: les données peuvent être séparées par une virgule (optionnelle) et/ou
 des espaces ou des passages à la ligne, et des commentaires peuvent être
 placés n'importe où.
\end_layout

\begin_layout Standard
Les tables prises en compte sont les suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
Banks
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Banks
\end_layout

\end_inset

 
\family default
Description des groupes, banques et partiels.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
Clips
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Clips
\end_layout

\end_inset

 
\family default
Description des ajustements des clips.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
ClipSets
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ClipSets
\end_layout

\end_inset

 
\family default
Description des ensembles de clips.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
HPConf
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
HPConf
\end_layout

\end_inset


\family default
 Configurations des haut-parleurs de l'installation.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
Macros
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Macros
\end_layout

\end_inset

 
\family default
Définition de macro commandes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
PlModes
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
PlModes
\end_layout

\end_inset


\family default
 Description des modes de jeux.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
Sensors
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Sensors
\end_layout

\end_inset


\family default
 Réglages des commandes pour les sensors.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SpModes
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SpModes
\end_layout

\end_inset


\family default
 Descriptions des modes d'espace.
\end_layout

\begin_layout Standard
Les syntaxes utilisées pour les descriptions de tables sont similaires à
 celles qui étaient utilisées dans les 
\begin_inset Quotes cld
\end_inset

anciens
\begin_inset Quotes crd
\end_inset

 fichiers texte, à la différence des commentaires (
\begin_inset Quotes cld
\end_inset


\family typewriter
//
\family default

\begin_inset Quotes crd
\end_inset

 remplaçant le 
\begin_inset Quotes cld
\end_inset


\family typewriter
;
\family default

\begin_inset Quotes crd
\end_inset

).
 Notons aussi que 
\begin_inset Quotes cld
\end_inset


\family typewriter
End
\family default

\begin_inset Quotes crd
\end_inset

 ne sert plus qu'à indiquer la fin d'une description de table.
 Il n'est donc plus utilisé dans la description des modes de jeu, des modes
 d'espace et des banques.
 
\end_layout

\begin_layout Standard
De nombreux exemples d'utilisation de l'opération 
\begin_inset Quotes cld
\end_inset


\family typewriter
table
\family default

\begin_inset Quotes crd
\end_inset

 sont donnés au chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Fichiers-de-configuration"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Macro commandes
\end_layout

\begin_layout Standard
La table 
\begin_inset Quotes cld
\end_inset


\family typewriter
Macros
\family default

\begin_inset Quotes crd
\end_inset

 a pour finalité de conserver les macro-commandes définies par l'utilisateur.
 Une macro commande est introduite par le mot-clef 
\begin_inset Quotes cld
\end_inset


\family typewriter
DefM
\begin_inset Index idx
status open

\begin_layout Plain Layout
DefM
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 suivi du nom de la macro, suivi enfin d'une séquence de valeurs, qui sont
 des actions associées à leurs paramètres.
 Les actions peuvent être représentées soit par leur valeur numérique, soit
 par leur identifiant, tel qu'il est décrit au chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Actions"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Ainsi, les deux séquences ci-dessous sont-elles identiques
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
326, 200034, 328, -4, 350, 6901
\end_layout

\begin_layout LyX-Code
TempBnk, 200034, TempVol, -4, PlayUnmd, 6901
\end_layout

\begin_layout Standard
Pour définir une macro, de nom 
\begin_inset Quotes cld
\end_inset


\family typewriter
Jeu
\family default

\begin_inset Quotes crd
\end_inset

, représentant l'enchaînement de ces actions, on écrira
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
DefM
\begin_inset Index idx
status open

\begin_layout Plain Layout
DefM
\end_layout

\end_inset

 Jeu 326, 200034, 328, -4, 350, 6901
\end_layout

\begin_layout Standard
ou encore
\end_layout

\begin_layout LyX-Code
DefM Jeu TempBnk 200034, TempVol -4, PlayUnmd 6901
\end_layout

\begin_layout Standard
Une macro définition se termine soit par le mot 
\begin_inset Quotes cld
\end_inset


\family typewriter
End
\family default

\begin_inset Quotes crd
\end_inset

, soit par 
\begin_inset Quotes cld
\end_inset


\family typewriter
DefM
\family default

\begin_inset Quotes crd
\end_inset

 débutant une nouvelle définition.
 Signalons aussi que, comme dans tout bloc 
\begin_inset Quotes cld
\end_inset


\family typewriter
data
\family default

\begin_inset Quotes crd
\end_inset

, les 
\begin_inset Quotes cld
\end_inset

virgules
\begin_inset Quotes crd
\end_inset

 sont autorisées, mais facultatives dans cette syntaxe.
\end_layout

\begin_layout Standard
Cette macro peut dès lors, dans la table 
\begin_inset Quotes cld
\end_inset


\family typewriter
Sensors
\family default

\begin_inset Quotes crd
\end_inset

, s'utiliser pour représenter le comportement d'un senseur, sous une forme
 telle que :
\end_layout

\begin_layout LyX-Code
DefSeq, 7, DoKmd, Jeu
\end_layout

\begin_layout Standard
Chaque fois que le capteur 
\begin_inset Quotes cld
\end_inset

7
\begin_inset Quotes crd
\end_inset

 sera activé, le logiciel jouera le clip 
\begin_inset Quotes cld
\end_inset

6901
\begin_inset Quotes crd
\end_inset

, affecté d'un volume de 
\begin_inset Quotes cld
\end_inset

-4dB
\begin_inset Quotes crd
\end_inset

, avec les réglages de jeu de la banque 
\begin_inset Quotes cld
\end_inset

34
\begin_inset Quotes crd
\end_inset

 du groupe 
\begin_inset Quotes cld
\end_inset

200
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Notons qu'un nom de macro peut apparaître à chaque endroit où une commande
 est attendue, mais aussi qu'une telle macro est un simple remplacement
 textuel, avant l'interprétation effective de la commande.
 Si l'on définit notre macro sous la forme
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
DefM Jouer TempBnk 200034 TempVol -4 PlayUnmd
\end_layout

\begin_layout Standard
c'est à dire en ne précisant pas le dernier élément, qui est le numéro du
 clip à jouer, celui-ci devra être indiqué dans la commande, à la suite
 du nom de la macro.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
Jouer
\family default

\begin_inset Quotes crd
\end_inset

 devient ainsi une commande signifiant 
\begin_inset Quotes cld
\end_inset

jouer un clip à -4db, avec les réglages de la banque 34 du groupe 200
\begin_inset Quotes crd
\end_inset

, ce qui va permettre des écritures telles que
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
DefSeq  1  DoKmd  Jouer 7210
\end_layout

\begin_layout LyX-Code
DefSeq  2  DoKmd  Jouer 7217
\end_layout

\begin_layout LyX-Code
DefSeq  7  DoKmd  Jouer 6901
\end_layout

\begin_layout Standard
Les macro commandes ne sont pour l'instant acceptées que dans la description
 de la table 
\begin_inset Quotes cld
\end_inset


\family typewriter
Sensors
\family default

\begin_inset Quotes crd
\end_inset

, et dans la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
action
\begin_inset Index idx
status open

\begin_layout Plain Layout
action
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Subsection
Opérations 
\begin_inset Quotes cld
\end_inset


\family typewriter
get/set
\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Deux opérations, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
get()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!get()
\end_layout

\end_inset

get()
\family default
 et 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!set()
\end_layout

\end_inset

set()
\begin_inset Index idx
status open

\begin_layout Plain Layout
set()
\end_layout

\end_inset


\family default
, permettent l'accès à nombre de tableaux et de variables utilisées dans
 le 
\begin_inset Quotes cld
\end_inset

Game Master
\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Description

\family typewriter
get(x)
\family default
 Accès à l'objet de nom 
\begin_inset Quotes cld
\end_inset


\family typewriter
x
\family default

\begin_inset Quotes crd
\end_inset

.
 Les paramètres possibles sont les identificateurs suivants
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
vars
\begin_inset Index idx
status open

\begin_layout Plain Layout
vars
\end_layout

\end_inset


\family default
 tableau des variables globales du thread - ex: 
\begin_inset Quotes cld
\end_inset


\family typewriter
get(`vars)
\family default

\begin_inset Quotes crd
\end_inset

.
 Le résultat est l'adresse de la table correspondante.
\end_layout

\begin_layout Description

\family typewriter
locs
\begin_inset Index idx
status open

\begin_layout Plain Layout
locs
\end_layout

\end_inset


\family default
 tableau des variables semi-locales du thread.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
get(x,
\begin_inset space ~
\end_inset

id)
\family default
 Accès à l'objet de nom 
\begin_inset Quotes cld
\end_inset

i
\family typewriter
d
\family default

\begin_inset Quotes crd
\end_inset

 de l'ensemble 
\begin_inset Quotes cld
\end_inset


\family typewriter
x
\family default

\begin_inset Quotes crd
\end_inset

.
 Les valeurs acceptées pour 
\begin_inset Quotes cld
\end_inset


\family typewriter
x
\family default

\begin_inset Quotes crd
\end_inset

 sont les suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
pnum
\begin_inset Index idx
status open

\begin_layout Plain Layout
pnum
\end_layout

\end_inset


\family default
 numéro d'un paramètre spécifique.
 
\begin_inset Quotes cld
\end_inset

id
\begin_inset Quotes crd
\end_inset

 est le nom du paramètre.
 Ex: 
\begin_inset Quotes cld
\end_inset


\family typewriter
get(`pnum, `GenNbr)
\family default

\begin_inset Quotes crd
\end_inset

 fournit le numéro interne du paramètre correspondant au nombre de générateurs
 actifs.
\end_layout

\begin_layout Description

\family typewriter
pval
\begin_inset Index idx
status open

\begin_layout Plain Layout
pval
\end_layout

\end_inset


\family default
 valeur d'un paramètre spécifique.
 
\begin_inset Quotes cld
\end_inset

id
\begin_inset Quotes crd
\end_inset

 est le nom du paramètre.
 Ex: 
\begin_inset Quotes cld
\end_inset


\family typewriter
get(`pval, `GenNbr)
\family default

\begin_inset Quotes crd
\end_inset

.
 Si le numéro interne du paramètre est déja connu (obtenu, par exemple,
 par 
\begin_inset Quotes cld
\end_inset


\family typewriter
get(`pnum, `GenNbr)
\family default

\begin_inset Quotes crd
\end_inset

), cette valeur peut être utilisée comme identification.
 Ex: 
\begin_inset Quotes cld
\end_inset


\family typewriter
get(`pval, 20)
\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description

\family typewriter
\begin_inset Index idx
status open

\begin_layout Plain Layout
gm
\end_layout

\end_inset

gm
\family default
 accès à une variable spécifique du Game Master.
 Plus d'une centaine de variables 
\begin_inset Quotes cld
\end_inset

pertinentes
\begin_inset Quotes crd
\end_inset

 du logiciel sont ainsi accessibles par des scripts.
 Ex: 
\begin_inset Quotes cld
\end_inset


\family typewriter
get(`gm, `mSL_errX)
\family default

\begin_inset Quotes crd
\end_inset

 fournit le numéro de la dernière erreur survenue en exécution.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
set(x,
\begin_inset space ~
\end_inset

id,
\begin_inset space ~
\end_inset

val)
\family default
 Affectation de la valeur 
\begin_inset Quotes cld
\end_inset

val
\begin_inset Quotes crd
\end_inset

 à l'objet de nom 
\begin_inset Quotes cld
\end_inset

id
\begin_inset Quotes crd
\end_inset

 de l'ensemble 
\begin_inset Quotes cld
\end_inset

x
\begin_inset Quotes crd
\end_inset

.
 Les valeurs acceptées de 
\begin_inset Quotes cld
\end_inset

x
\begin_inset Quotes crd
\end_inset

 sont les suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
pval
\begin_inset Index idx
status open

\begin_layout Plain Layout
pval
\end_layout

\end_inset


\family default
 valeur d'un paramètre spécifique.
 
\begin_inset Quotes cld
\end_inset

id
\begin_inset Quotes crd
\end_inset

 est le nom ou le numéro du paramètre.
 Ex: 
\begin_inset Quotes cld
\end_inset


\family typewriter
set(`pval, `GenNbr, 10)
\family default

\begin_inset Quotes crd
\end_inset

 affecte la valeur 10 au nombre de générateurs actifs.
\end_layout

\begin_layout Description

\family typewriter
\begin_inset Index idx
status open

\begin_layout Plain Layout
gm
\end_layout

\end_inset

gm
\family default
 modification d'une variable spécifique du Game Master.
 Plus d'une cinquantaine de variables 
\begin_inset Quotes cld
\end_inset

pertinentes
\begin_inset Quotes crd
\end_inset

 du logiciel sont ainsi accessibles en écriture par des scripts.
\end_layout

\end_deeper
\begin_layout Subsection
Opération 
\begin_inset Quotes cld
\end_inset


\family typewriter
call
\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!
\family typewriter
call
\family default
()
\end_layout

\end_inset

call
\family default

\begin_inset Quotes crd
\end_inset

 permet l'accès à certaines fonctions du Game Master.
 La syntaxe est:
\end_layout

\begin_layout Description

\family typewriter
\begin_inset Index idx
status open

\begin_layout Plain Layout
call
\end_layout

\end_inset

call(`name,
\begin_inset space ~
\end_inset

paramètres...)
\family default
 Le nom de la fonction est un symbole, les paramètres de la fonction suivent
 ce nom.
 Voici quelques unes des fonctions implantées
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
`strclean
\begin_inset Index idx
status open

\begin_layout Plain Layout
strclean
\end_layout

\end_inset

,
\begin_inset space ~
\end_inset

str,
\begin_inset space ~
\end_inset

flags
\family default
 suppressions dans la chaîne passée comme second paramètre des espaces de
 début (si 
\begin_inset Quotes cld
\end_inset


\family typewriter
flags & 1
\family default

\begin_inset Quotes crd
\end_inset

), de fin (si 
\begin_inset Quotes cld
\end_inset


\family typewriter
flags & 2
\family default

\begin_inset Quotes crd
\end_inset

), ou d'une chaîne de fin constituée d'un 
\begin_inset Quotes cld
\end_inset

.
\begin_inset Quotes crd
\end_inset

 suivi de zéros (si 
\begin_inset Quotes cld
\end_inset


\family typewriter
flags & 4
\family default

\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Description

\family typewriter
`SensorSize
\begin_inset Index idx
status open

\begin_layout Plain Layout
SensorSize
\end_layout

\end_inset


\begin_inset space ~
\end_inset

[,
\begin_inset space ~
\end_inset

newSize]
\family default
 indique la taille du 
\emph on
pad
\emph default
 des sensors, ou modifie celle-ci si un paramètre est fourni.
 Cette valeur est 2 ou 3 (pads 
\begin_inset Formula $2\times2$
\end_inset

 ou 
\begin_inset Formula $3\times3$
\end_inset

).
\end_layout

\begin_layout Description

\family typewriter
`clear
\begin_inset Index idx
status open

\begin_layout Plain Layout
clear
\end_layout

\end_inset

,
\begin_inset space ~
\end_inset

block
\begin_inset space ~
\end_inset

[,
\begin_inset space ~
\end_inset

valeur]
\family default
 (ré)initialise le bloc passé comme premier paramètre à 0, ou à 
\begin_inset Quotes cld
\end_inset


\family typewriter
valeur
\family default

\begin_inset Quotes crd
\end_inset

 si celle-ci est fournie.
\end_layout

\end_deeper
\begin_layout Subsection
Extensions
\end_layout

\begin_layout Standard
Il est relativement simple d'ajouter de nouvelles fonctions primitives au
 langage mSL.
 A titre d'exemple, le fichier source 
\begin_inset Quotes cld
\end_inset


\family typewriter
mSL_Extend.jsfx-inc
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_Extend.jsfx-inc
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 définit trois nouvelles fonctions, de noms 
\begin_inset Quotes cld
\end_inset


\family typewriter
prod
\begin_inset Index idx
status open

\begin_layout Plain Layout
prod
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
GM_Log
\begin_inset Index idx
status open

\begin_layout Plain Layout
GM_Log
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
GM_Addr
\begin_inset Index idx
status open

\begin_layout Plain Layout
GM_Addr
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
prod 
\family default
accepte un nombre arbitraire de paramètres et calcule leur produit.
 On peut s'en inspirer aisément pour réaliser une fonction calculant la
 somme, le maximum, le minimum, etc., d'une liste de nombres.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
GM_Log
\family default
 accepte des chaînes de caractères, et les ajoute au log du Game Master.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
GM_Addr
\family default
 accepte un mot clef, et fournit une adresse en mémoire relative à ce mot-clef.
 
\end_layout

\begin_layout Standard
De manière générale, les 
\emph on
byte-codes
\emph default
 internes de numéros 132 à 255 sont disponibles pour de tels ajoûts.
 Les trois fonctions décrites ci-dessus correspondent aux numéros 255, 254
 et 253.
 Pour définir une nouvelle action primitive, il faut choisir un nom (par
 exemple 
\begin_inset Quotes cld
\end_inset


\family typewriter
newfun
\family default

\begin_inset Quotes crd
\end_inset

), un numéro disponible (par exemple, 200), et insérer dans le fichier 
\begin_inset Quotes cld
\end_inset


\family typewriter
mSL_Extend.jsfx-inc
\family default

\begin_inset Quotes crd
\end_inset

 le nouveau code source de la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
mSL_200
\family default

\begin_inset Quotes crd
\end_inset

, actuellement définie dans le fichier 
\begin_inset Quotes cld
\end_inset


\family typewriter
mSL_Clib.jsfx-inc
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_Clib.jsfx-inc
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 sous la forme: 
\begin_inset Quotes cld
\end_inset


\family typewriter
function mSL_200(c,v) (c);
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
On écrira, par exemple:
\end_layout

\begin_layout LyX-Code
function mSL_200(c,v)
\end_layout

\begin_layout LyX-Code
(
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Standard
et l'on ajoutera dans la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
mSL_define_extensions
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_define_extensions
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 la ligne:
\end_layout

\begin_layout LyX-Code
mSL_define_opcode("newfun", 200);
\end_layout

\begin_layout Standard
Lors d'un appel de la nouvelle fonction tel que 
\begin_inset Quotes cld
\end_inset


\family typewriter
newfun(2, 3, 5, 8)
\family default

\begin_inset Quotes crd
\end_inset

, la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
mSL_200
\family default

\begin_inset Quotes crd
\end_inset

 va recevoir dans son premier argument, 
\begin_inset Quotes cld
\end_inset


\family typewriter
c
\family default

\begin_inset Quotes crd
\end_inset

, le nombre de paramètres de l'appel de 
\begin_inset Quotes cld
\end_inset


\family typewriter
newfun
\family default

\begin_inset Quotes crd
\end_inset

, 4, et dans son second argument, 
\begin_inset Quotes cld
\end_inset


\family typewriter
v
\family default

\begin_inset Quotes crd
\end_inset

, l'adresse en mémoire d'un tableau contenant les 4 paramètres de l'appel.
\end_layout

\begin_layout Section
Lancement d'un script
\end_layout

\begin_layout Standard
A l'heure actuelle, le lancement d'un script s'effectue depuis le module
 
\begin_inset Quotes cld
\end_inset


\emph on
Script Manager
\emph default

\begin_inset Quotes crd
\end_inset

.
 Effectuer un clic droit sur la case 
\begin_inset Quotes cld
\end_inset


\emph on
Load
\emph default

\begin_inset Quotes crd
\end_inset

, ce qui affiche un menu proposant des scripts susceptibles d'être chargés.
 Ceux-ci doivent être déclarés d'une manière ou d'une autre : c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:IASIAS"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Les fichiers 
\family typewriter
Conf03.mSL
\family default
 à 
\family typewriter
Conf08.mSL
\family default
 contiennent des exemples de définitions des différentes tables du logiciel.
\end_layout

\begin_layout Standard
Une autre manière d'ouvrir un script 
\emph on
mSL
\emph default
 est de le sélectionner (depuis le bureau, ou une fenêtre du finder) et
 de le déposer dans la barre de tabulation de la fenêtre du Game Master,
 qui l'exécute alors immédiatement.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Processus"

\end_inset

Processus
\end_layout

\begin_layout Standard
L'une des forces du GameMaster est le fait qu'il soit écrit dans le langage
 de script intégré à REAPER, 
\begin_inset Quotes cld
\end_inset


\family typewriter
eel2
\begin_inset Index idx
status open

\begin_layout Plain Layout
eel2
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, ce qui offre la possibilité de l'utiliser pour gérer des processus légers
 au sein du plug-in.
 C'est dans ce langage que sont écrits le compilateur et l'interprète du
 langage 
\begin_inset Quotes cld
\end_inset

mSL
\begin_inset Quotes crd
\end_inset

, le langage d'extension du Game Master.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Il n'est pas inutile de décrire ici les interactions entre REAPER, le GameMaster
, les scripts 
\emph on
mSL
\emph default
 et les processus que l'on vient d'évoquer.
\end_layout

\begin_layout Subsection
REAPER
\end_layout

\begin_layout Standard
Le logiciel REAPER, en plus de son travail interne, de la gestion de son
 interface utilisateur et des scripts ReaScripts, a pour tâche d'exécuter
 régulièrement les différents plug-ins utilisés dans la session, que ce
 soient des VST, VST3, etc., ou des JSFX.
\end_layout

\begin_layout Standard
REAPER gère l'audio par blocs d'échantillons, d'une taille fixe mais modifiable,
 comprise entre 32 et 4096 par canal.
 A chaque seconde, REAPER doit assurer, pour chaque piste, la production
 d'une quantité d'échantillons égale au produit de la fréquence d'échantillonnag
e (44.1kH, 48kH, 96kH, etc.) par le nombre de canaux (2, 6, 16, jusqu'à 128
 à l'heure actuelle).
\end_layout

\begin_layout Standard
Prenons un exemple quasi concret : le projet utilise 20 pistes, et travaille
 à 48kH en 5.1, soit 6 canaux.
 Chaque piste comporte deux plug-ins, et la taille du bloc est de 1024 échantill
ons.
 A chaque seconde, pour chaque piste, REAPER doit fournir 48000*6 échantillons
 à la carte audio.
 Chaque plug-in disposerait donc, au mieux, de 1s/(20 pistes * 2 plug-ins)
 pour traiter ces 288000 échantillons, soit environ 0.5 millisecondes par
 bloc de 1024*6 échantillons.
 Ajoutons que nombre d'autres processus s'exécutent sur la même machine,
 que REAPER utilise lui-même de la CPU, si bien qu'il est douteux qu'un
 plug-in dispose de beaucoup plus que 0.1 millisecondes pour effectuer son
 travail, ce qui est bien peu.
 Précisons, dans le cas d'un JSFX, et toujours pour le même exemple, que
 ceci implique l'exécution de la section 
\begin_inset Quotes cld
\end_inset


\family typewriter
@block
\begin_inset Index idx
status open

\begin_layout Plain Layout
@block
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 et de 1024 fois la section 
\begin_inset Quotes cld
\end_inset


\family typewriter
@sample
\begin_inset Index idx
status open

\begin_layout Plain Layout
@sample
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 qui elle même doit calculer six échantillons.
 La programmation de tous ces codes doit donc s'assurer que chaque exécution
 reste en deçà des durées autorisées, afin d'éviter des 
\begin_inset Quotes cld
\end_inset


\emph on
drop out
\begin_inset Index idx
status open

\begin_layout Plain Layout
drop out
\end_layout

\end_inset


\emph default

\begin_inset Quotes crd
\end_inset

 du son en sortie.
\end_layout

\begin_layout Standard
Dans le même temps, REAPER gère des processus de plus faible priorité que
 les processus audio, qui sont les processus de gestion de l'interface graphique.
 REAPER maintient sa propre interface, et donne la main à chaque plug-in
 pour que celui-ci s'occupe de son interface, ceci une trentaine de fois
 par seconde.
 Dans le cas de JSFX, il s'agit du code situé dans la section 
\begin_inset Quotes cld
\end_inset


\family typewriter
@gfx
\begin_inset Index idx
status open

\begin_layout Plain Layout
@gfx
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
 Là encore, pour maintenir cette cadence d'une trentaine d'exécutions par
 seconde par chaque plug-in, ces processus se doivent d'être programmés
 de la façon la plus efficace possible.
 Les processus graphiques sont donc moins prioritaires que les processus
 audio, mais peuvent occasionnement se permettre de dépasser largement le
 temps qui leur est en principe accordé, REAPER diminuant alors leur fréquence
 d'exécution.
 L'interface graphique peut ainsi se figer durant quelques secondes sans
 provoquer de 
\begin_inset Quotes cld
\end_inset

drop-out
\begin_inset Quotes crd
\end_inset

 audio.
\end_layout

\begin_layout Subsection
Le GameMaster
\end_layout

\begin_layout Standard
Revenons au GameMaster.
 Considérons un projet comportant le seul GM et ses players, tournant sur
 une machine n'utilisant pas d'autres applications coûteuses en temps.
 On peut imaginer que REAPER consomme au total la moitié de la puissance
 disponible (par exemple, 4 cores de processeurs sur 8), et que le GM va
 avoir droit à un core pour lui tout seul – vue probablement optimiste.
 
\end_layout

\begin_layout Standard
Le GM (toujours en 48kH, blocs de 1024) dispose donc, au mieux, de 1024/48000,
 soit environ 21ms pour assurer son travail.
 Notons ici que le GM, n'ayant qu'une section 
\begin_inset Quotes cld
\end_inset

@sample
\begin_inset Quotes crd
\end_inset

 particulièrement réduite (quelques instructions), consomme essentiellement
 de la CPU dans la section 
\begin_inset Quotes cld
\end_inset

@block
\begin_inset Quotes crd
\end_inset

, et que la durée de celle-ci est pratiquement indépendante de la taille
 du bloc.
 Augmenter la taille de celui-ci (2048 ou 4096) diminue donc la consommation
 CPU totale, puisque le GM est exécuté 2 ou 4 fois moins souvent, mais également
 la réactivité, et réciproquement.
\end_layout

\begin_layout Standard
Le GM doit donc accomplir en un temps limité tout un ensemble de tâches
 diverses.
 Une partie de celles-ci est consacrée aux aspects graphiques, et est exécutée
 dans la section 
\begin_inset Quotes cld
\end_inset

@gfx
\begin_inset Quotes crd
\end_inset

 du plug-in.
 Les autres tâches vont s'exécuter dans une apparente simultanéité, dans
 la section 
\begin_inset Quotes cld
\end_inset

@block
\begin_inset Quotes crd
\end_inset

 du plug-in.
 Décrivons en quelques unes:
\end_layout

\begin_layout Itemize
Gérer les événements du 
\begin_inset Quotes cld
\end_inset

playback
\begin_inset Quotes crd
\end_inset

, lorsque le GM est en train de rejouer une séquence enregistrée.
\end_layout

\begin_layout Itemize
Converser avec le ReaScript écrit en 
\begin_inset Quotes cld
\end_inset

eel
\begin_inset Quotes crd
\end_inset

 qui permet les interactions poussées avec REAPER.
\end_layout

\begin_layout Itemize
Gérer les interactions avec les différents players, qui sont des plug-ins
 situés sur des pistes audio indépendantes.
\end_layout

\begin_layout Itemize
Gérer tous les calculs résultant des interactions de l'utilisateur avec
 l'interface graphique.
\end_layout

\begin_layout Itemize
Gérer les événements MIDI reçus par des plug-ins spécialisés et transmis
 au GM.
\end_layout

\begin_layout Itemize
Gérer les différents aspects du mode 
\begin_inset Quotes cld
\end_inset

jeu automatique
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
Maintenir diverses statistiques concernant l'utilisation des ressources.
\end_layout

\begin_layout Itemize
Gérer le chargement et l'exécution des différents scripts de configuration.
\end_layout

\begin_layout Standard
Pour prendre en compte ces différentes tâches, le GM analyse les données
 appropriées, et réalise les opérations nécessaires au travers 
\begin_inset Quotes cld
\end_inset

d'Actions
\begin_inset Quotes crd
\end_inset

 ou de séquences d'actions, à l'instar de ce que pratique REAPER.
 Certaines de ces actions vont être immédiates, mais d'autres vont être
 retardées dans le temps, ou conditionnées à des événements attendus.
 Dans tous les cas, sachant qu'à chaque exécution de la section 
\begin_inset Quotes cld
\end_inset

@block
\begin_inset Quotes crd
\end_inset

 le GM n'a droit qu'à quelques millisecondes de temps CPU, il est clair
 que ces actions sont obligatoirement de durées très courtes, ou encore
 vont devoir être segmentées en parties de courtes durées, s'exécutant au
 cours de 
\begin_inset Quotes cld
\end_inset

@blocks
\begin_inset Quotes crd
\end_inset

 successifs.
\end_layout

\begin_layout Standard
A cette fin, les différents travaux vont être organisés sous la forme de
 ce que l'on nomme 
\begin_inset Quotes cld
\end_inset

processus légers
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Subsection
Processus légers
\end_layout

\begin_layout Standard
Ces processus vont être créés pour différentes raisons.
 Prenons l'exemple du jeu d'un clip.
 La décision de jouer un clip peut résulter de l'exécution du mode 
\begin_inset Quotes cld
\end_inset

jeu automatique
\begin_inset Quotes crd
\end_inset

 du GM.
 L'utilisateur peut aussi cliquer dans une case de l'un des modules, tels
 que le 
\begin_inset Quotes cld
\end_inset

Studio Play Pad
\begin_inset Quotes crd
\end_inset

 ou le 
\begin_inset Quotes cld
\end_inset

Clip Selection
\begin_inset Quotes crd
\end_inset

.
 Un clip peut être joué en réponse à une interaction avec un périphérique
 MIDI, voir être lancé par une action spécifique automatique, ou encore
 un script 
\emph on
mSL
\emph default
.
 Ces événements peuvent se produire simultanément, mais le mécanisme de
 jeu d'un clip, qui est relativement complexe, ne peut en traiter qu'un
 à la fois.
 Dans tous les cas, le GM va créer, en quelques dizaines d'instructions,
 un processus, qui va être inséré dans la liste des processus prêts à être
 exécutés.
 De même, une tâche telle que 
\begin_inset Quotes cld
\end_inset

modifier le volume sonore dans 30 secondes
\begin_inset Quotes crd
\end_inset

 va se traduire par la création d'un processus, qui va être placé dans une
 file d'attente, et qui, au bon moment, sera à son tour inséré dans la liste
 des processus prêts à être exécutés.
\end_layout

\begin_layout Standard
Ces processus sont dits 
\begin_inset Quotes cld
\end_inset

légers
\begin_inset Quotes crd
\end_inset

, car ils sont représentés par des structures informatiques de petite taille
 (une vingtaine de mots, décrivant la consigne du processus, c'est-à-dire
 le type de travail à réaliser, et quelques paramètres, structure informatique
 dite 
\begin_inset Quotes cld
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
SCB
\end_layout

\end_inset

SCB
\begin_inset Quotes crd
\end_inset

, Scheduler Control Block
\begin_inset Index idx
status open

\begin_layout Plain Layout
Scheduler Control Block
\end_layout

\end_inset

), et que le passage d'un processus à un autre est très rapide.
\end_layout

\begin_layout Standard
A un instant donné, il peut exister plusieurs processus, voire plusieurs
 dizaines ou centaines de processus.
 Comment sont-ils gérés ? Chaque processus est donc représenté par un SCB,
 qui peut être
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
actif, le processus qu'il décrit étant en cours d'exécution.
\end_layout

\begin_layout Itemize
dans la liste des processus prêts à être exécutés dès que possible.
\end_layout

\begin_layout Itemize
dans la liste des processus en attente sur un timer.
\end_layout

\begin_layout Itemize
dans la liste des processus en attente d'un événement particulier.
\end_layout

\begin_layout Itemize
dans la liste des processus temporairement suspendus, car une ressource
 du système essentielle est utilisée.
 C'est le cas des processus 
\begin_inset Quotes cld
\end_inset


\emph on
mSL
\emph default

\begin_inset Quotes crd
\end_inset

 (ceux qui résultent de la compilation d'un script 
\emph on
mSL
\emph default
) lorsqu'une compilation ou un garbage collector est en cours.
\end_layout

\begin_layout Itemize
dans la liste des processus verrouillés (essentiellement du fait d'une intervent
ion de l'utilisateur, ou en tant que composante de l'algorithme d'un autre
 processus).
\end_layout

\begin_layout Standard
Il y a, au maximum, un seul processus actif à un moment donné.
 Les processus du système sont écrits pour s'exécuter en un seul tenant,
 ou encore segmentés en petites sections qui s'enchaînent, chaque partie
 étant d'une durée très courte, tout en étant assurée de l'accès exclusif
 aux ressources qu'elle nécessite.
 A la fin de cette période d'activité, le processus décide s'il a terminé
 sa tâche, ou s'il doit se réinscrire en queue de la liste des processus
 actifs, ou de l'une des listes de processus en attente.
\end_layout

\begin_layout Standard
Notons que, à chaque exécution de la section 
\begin_inset Quotes cld
\end_inset

@block
\begin_inset Quotes crd
\end_inset

, au moins un processus prêt est exécuté (plus, si le temps le permet).
 Il n'existe pas de priorité entre les processus, et l'ensemble des processus
 prêts est géré en 
\begin_inset Quotes cld
\end_inset


\emph on
Round Robin
\emph default

\begin_inset Quotes crd
\end_inset

, c'est-à-dire que le premier de la liste est choisi pour exécution.
 Lorsque sa période d'activité s'est écoulée, s'il n'a pas terminé son travail,
 il est réinséré en queue de liste des processus prêts.
 Cette approche garantit donc que tout processus progresse à tout instant,
 en étant éventuellement ralenti, mais jamais bloqué par d'autres processus.
\end_layout

\begin_layout Subsection
Le Scheduler au sein du GameMaster
\end_layout

\begin_layout Standard
Résumons ici les articulations entre le Scheduler et les diverses parties
 du GameMaster.
\end_layout

\begin_layout Standard
La partie 
\begin_inset Quotes cld
\end_inset

@block
\begin_inset Quotes crd
\end_inset

 du GM est exécutée à intervalles réguliers
\begin_inset space ~
\end_inset

: selon la taille du bloc d'échantillons de REAPER, à 48kH c'est entre 12
 fois par seconde pour des blocks de taille 4096 à 1500 fois par seconde
 pour des blocks de taille 32.
 Cette dernière valeur est déconseillée, sauf sur une machine ultra rapide
 à venir.
 Il conseillé de ne pas descendre en-dessous de 512.
\end_layout

\begin_layout Standard
Au cours de l'exécution de cette partie 
\begin_inset Quotes cld
\end_inset

@block
\begin_inset Quotes crd
\end_inset

, le GM gère l'ensemble de ses tâches, qu'il accomplit immédiatement pour
 une partie d'entre elles, ou qu'il réifie sous la forme d'un processus,
 qu'il introduit dans l'une des diverses listes de processus.
 Parmi ces tâches, l'une consiste à retirer des listes des processus en
 attente (d'un timer ou d'un événement) ceux dont le timer est arrivé à
 son terme, ou dont l'événement attendu s'est produit, pour l'insérer dans
 la liste des processus actifs.
 Cette description montre que la réactivité du GM (délai entre deux 
\begin_inset Quotes cld
\end_inset

@block
\begin_inset Quotes crd
\end_inset

) ne peut guère être meilleure que 10 à 100ms.
\end_layout

\begin_layout Standard
A la fin de cette section 
\begin_inset Quotes cld
\end_inset

@block
\begin_inset Quotes crd
\end_inset

, le GM évalue le temps CPU dont il peut encore disposer pour ce block,
 et va exécuter au moins l'un des processus actifs, voire plus en fonction
 du temps disponible.
 
\end_layout

\begin_layout Standard
Certains de ces processus correspondent à des scripts 
\emph on
mSL
\emph default
 
\begin_inset Quotes cld
\end_inset

compilés
\begin_inset Quotes crd
\end_inset

, c'est-à-dire traduits en une séquence d'instructions élémentaires d'une
 machine virtuelle.
 Là encore, toutes les instructions de cette machine virtuelles sont rapides
 (calcul d'un sinus) ou très rapides (telle une addition).
 Certaines primitives peuvent être relativement lentes dans certains cas.
 Elles vont alors créer un processus nouveau pour réaliser ces actions,
 qui pourra se dérouler en parallèle avec le processus 
\emph on
mSL
\emph default
 (cas du jeu d'un clip), ou mettre celui-ci en attente (cas de certains
 processus gérant des événements).
 Dans tous les cas, le GM autorise le processus 
\emph on
mSL
\emph default
 à n'exécuter qu'un nombre limité d'instructions de cette machine virtuelle
 (au minimum, 4096, au maximum quelques centaines de milliers), avant d'interrom
pre celui-ci, et de le replacer en queue de liste des processus actifs.
\end_layout

\begin_layout Standard
Le Scheduler se comporte donc de manière coopérative pour les processus
 du système (qui sont écrits pour être très brefs, sont largement testés,
 et ne sont jamais interrompus, ce qui permet une programmation plus concise
 et plus efficace), et de manière préemptive pour les processus mSL (on
 parle ici de 
\begin_inset Quotes cld
\end_inset

time slicing
\begin_inset Quotes crd
\end_inset

).
 Notons que ceux-ci peuvent aussi faire preuve d'un comportement coopératif,
 la fonction 
\family typewriter
yield()
\family default
 ou encore les primitives d'attente sur timer ou sur événement impliquant
 qu'ils passent la main à un autre processus.
 
\end_layout

\begin_layout Subsection
Opérations sur threads
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset


\family typewriter
thread
\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description

\family typewriter
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!thread()
\end_layout

\end_inset

thread
\begin_inset Index idx
status open

\begin_layout Plain Layout
thread
\end_layout

\end_inset

(...)
\family default
 fournit une série d'opérations sur des objets de type 
\emph on
thread
\emph default
.
 Les opérations sont désignées par un mot-clef (introduit par une back-quote).
 Ce sont les suivantes:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
\begin_inset Index idx
status open

\begin_layout Plain Layout
new
\end_layout

\end_inset

new
\family default
 création d'un nouveau thread.
 Le second paramètre doit être le nom d'une fonction 
\emph on
mSL
\emph default
, sans paramètres ni variables locales.
 Le thread est placé dans la file des threads suspendus, et est prêt à être
 lancé.
 Le résultat est l'identification du thread.
\end_layout

\begin_layout Description

\family typewriter
run
\begin_inset Index idx
status open

\begin_layout Plain Layout
run
\end_layout

\end_inset


\family default
 lancement d'un thread.
 Le second paramètre doit être l'identification d'un thread, telle que créé
 par une expression 
\begin_inset Quotes cld
\end_inset


\family typewriter
thread(`new, fun)
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
status
\begin_inset Index idx
status open

\begin_layout Plain Layout
status
\end_layout

\end_inset


\family default
 statut d'un thread.
 Le second paramètre doit être l'identification d'un thread.
 Le résultat est une combinaison des flags suivants:
\end_layout

\begin_deeper
\begin_layout Description
1 le thread correspond à un processus 
\emph on
mSL
\emph default
.
\end_layout

\begin_layout Description
8 le thread est actif.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
\begin_inset Index idx
status open

\begin_layout Plain Layout
idt
\end_layout

\end_inset

idt
\family default
 identification du thread courant, qui est son numéro de processus.
 Il n'y a pas d'autre paramètre.
 Cette identification est un nombre entier, unique au processus.
\end_layout

\begin_layout Description

\family typewriter
name
\begin_inset Index idx
status open

\begin_layout Plain Layout
name
\end_layout

\end_inset


\family default
 nom du thread courant.
 Des threads différents peuvent porter des noms identiques, mais auront
 toujours des 
\begin_inset Quotes cld
\end_inset


\family typewriter
idt
\family default

\begin_inset Quotes crd
\end_inset

 différents.
\end_layout

\begin_layout Description

\family typewriter
find
\begin_inset Index idx
status open

\begin_layout Plain Layout
find
\end_layout

\end_inset


\family default
 recherche d'un thread par son nom et/ou son numéro de processus.
 Les deux valeurs peuvent être spécifiées (
\emph on
idt
\emph default
 ou 
\emph on
name
\emph default
), l'une pouvant être égale à 0.
 Une troisième valeur, optionnelle, peut être indiquée.
 Elle permet de définir l'information demandée: 0 pour le bloc définissant
 le process lui-même, 1 pour le status du process, 2 pour son idt, 3 pour
 son name, 4 pour son activité actuelle (0: il est inactif, 1: il est actif,
 2 il est en attente sur timer, 3 il est en attente d'un événement, 4 il
 est suspendu, 5 il est verrouillé, 6 il est dans un autre état).
\end_layout

\begin_layout Description

\family typewriter
count
\begin_inset Index idx
status open

\begin_layout Plain Layout
count
\end_layout

\end_inset


\family default
 le paramètre est un nom de processus
\begin_inset space ~
\end_inset

; le résultat est le nombre de processus portant ce nom.
\end_layout

\end_deeper
\begin_layout Standard
Le Game Master est actuellement configuré pour gérer jusqu'à 4096 processus,
 dont une vingtaine est utilisée pour ses besoins propres, et le reste est
 disponible pour les scripts 
\emph on
mSL
\emph default
.
\end_layout

\begin_layout Subsection
Opérations sur événements
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset


\family typewriter
event
\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description

\family typewriter
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!
\family typewriter
event
\family default
()
\end_layout

\end_inset

event
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
event
\end_layout

\end_inset

(...)
\family default
 fournit une série d'opérations sur des objets relatifs aux événements.
 La syntaxe est:
\end_layout

\begin_layout Description

\family typewriter
event(`name,
\begin_inset space ~
\end_inset

paramètres...)
\family default
 Le nom de la fonction est un symbole, les paramètres de la fonction suivent
 ce nom.
 Voici quelques unes des fonctions implantées
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
check
\begin_inset Index idx
status open

\begin_layout Plain Layout
check
\end_layout

\end_inset


\family default
 permet de savoir si un événement a été notifié au thread courant.
\end_layout

\begin_layout Description

\family typewriter
wait
\begin_inset Index idx
status open

\begin_layout Plain Layout
wait
\end_layout

\end_inset


\family default

\begin_inset space ~
\end_inset

ou
\begin_inset space ~
\end_inset


\family typewriter
getnext
\begin_inset Index idx
status open

\begin_layout Plain Layout
getnext
\end_layout

\end_inset


\family default
 récupère l'événement suivant notifié au thread.
 Le résultat peut aussi être 0 si un time-out a été indiqué, et qu'aucun
 événement n'a été notifié durant ce laps de temps.
\end_layout

\begin_layout Description

\family typewriter
ready
\begin_inset Index idx
status open

\begin_layout Plain Layout
ready
\end_layout

\end_inset


\family default
 le paramètre est un 
\begin_inset Quotes cld
\end_inset


\emph on
idt
\emph default

\begin_inset Quotes crd
\end_inset

 d'un thread.
 Le résultat est un booléen (0 ou 1) indiquant si ce thread est réceptif,
 c'est-à-dire en capacité de recevoir un message.
\end_layout

\begin_layout Description

\family typewriter
find
\begin_inset Index idx
status open

\begin_layout Plain Layout
find
\end_layout

\end_inset


\family default
 recherche d'un thread par son nom et/ou son numéro de processus.
 Les deux valeurs peuvent être spécifiées (
\emph on
idt
\emph default
 ou 
\emph on
name
\emph default
), l'une pouvant être égale à 0.
 Une troisième valeur, optionnelle, peut être indiquée.
 Elle permet de définir l'information demandée: 0 pour le bloc définissant
 le process lui-même, 1 pour le status du process, 2 pour son idt, 3 pour
 son name, 4 pour son activité actuelle (0: il est inactif, 1: il est actif,
 2 il est en attente sur timer, 3 il est en attente d'un événement, 4 il
 est suspendu, 5 il est verrouillé, 6 il est dans un autre état).
\end_layout

\begin_layout Description

\family typewriter
notify
\begin_inset Index idx
status open

\begin_layout Plain Layout
notify
\end_layout

\end_inset


\family default
 construction et envoi d'un message.
 Cette fonction admet 13 paramètres, avec la même signification que la commande
 
\begin_inset Quotes cld
\end_inset


\emph on
build
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
build
\begin_inset Index idx
status open

\begin_layout Plain Layout
build
\end_layout

\end_inset


\family default
 construction d'un nouveau message.
 La fonction admet 13 paramètres, qui sont, dans l'ordre:
\end_layout

\begin_deeper
\begin_layout Enumerate
Le bloc destiné à recevoir le message.
 Il doit être de taille au minimum égale à 16, mais on peut aussi transmettre
 la valeur 0 pour demander à ce que l'opération fournisse elle-même le bloc
 destiné à recevoir le message.
\end_layout

\begin_layout Enumerate
un 
\begin_inset Quotes cld
\end_inset


\emph on
idt
\emph default

\begin_inset Quotes crd
\end_inset

 de l'envoyeur.
 On peut aussi passer la valeur 0, pour que l'opération infère elle-même
 l'
\emph on
idt
\emph default
 de l'envoyeur.
\end_layout

\begin_layout Enumerate
le 
\begin_inset Quotes cld
\end_inset


\emph on
name
\emph default

\begin_inset Quotes crd
\end_inset

 de l'envoyeur.
 Là aussi, on peut passer la valeur 0, pour que l'opération infère elle-même
 cette information.
\end_layout

\begin_layout Enumerate
l'
\begin_inset Quotes cld
\end_inset


\emph on
idt
\emph default

\begin_inset Quotes crd
\end_inset

 du destinataire.
\end_layout

\begin_layout Enumerate
le 
\begin_inset Quotes cld
\end_inset


\emph on
name
\emph default

\begin_inset Quotes crd
\end_inset

 du destinataire.
 L'opération tentera d'inférer les valeurs exactes de ces deux paramètres
 en fonction des informations fournies.
\end_layout

\begin_layout Enumerate
le nom de l'événement notifié au destinataire.
 C'est typiquement un symbole.
\end_layout

\begin_layout Enumerate
Une durée à attendre (exprimée en secondes) avant l'envoi du message.
 
\end_layout

\begin_layout Enumerate
Une durée à attendre (exprimée en secondes), après l'envoi du message, et
 avant destruction automatique de celui-ci s'il n'a pas été récupéré par
 le destinataire.
 Cette durée est approximative, le message étant conservé au moins aussi
 longtemps qu'indiqué.
\end_layout

\begin_layout Enumerate
Indicateurs.
\end_layout

\begin_layout Enumerate
Code.
\end_layout

\begin_layout Enumerate
Sequence.
\end_layout

\begin_layout Enumerate
Par1.
\end_layout

\begin_layout Enumerate
Par2.
\end_layout

\begin_layout Standard
Les cinq dernières valeurs ne sont pas utilisées par le système, et peuvent
 être employées librement au sein du message.
 Le résultat est le bloc créé ou initialisé par l'opération.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
send
\begin_inset Index idx
status open

\begin_layout Plain Layout
send
\end_layout

\end_inset


\family default
 envoi d'un message tel qu'il a pu être construit par la commande 
\begin_inset Quotes cld
\end_inset


\emph on
build
\emph default

\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Description

\family typewriter
count
\begin_inset Index idx
status open

\begin_layout Plain Layout
count
\end_layout

\end_inset


\family default
 Compte le nombre de message en attente pour ce processus.
 Si un paramètre est précisé (sous la forme d'un symbole), compte le nombre
 de messages en attente portant ce nom.
\end_layout

\begin_layout Description

\family typewriter
recycle
\begin_inset Index idx
status open

\begin_layout Plain Layout
recycle
\end_layout

\end_inset


\family default
 Avec un paramètre, qui doit être un message devenu inutilisé, cette opération
 
\begin_inset Quotes cld
\end_inset


\emph on
recycle
\emph default

\begin_inset Quotes crd
\end_inset

 le message, qui est intégré à une liste de messages 
\begin_inset Quotes cld
\end_inset


\emph on
disponibles
\emph default

\begin_inset Quotes crd
\end_inset

 pour les opérations 
\begin_inset Quotes cld
\end_inset


\emph on
build
\emph default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\emph on
notify
\emph default

\begin_inset Quotes crd
\end_inset

.
 Sans paramètre, cette opération renvoie la taille de la liste des messages
 disponibles.
\end_layout

\begin_layout Description

\family typewriter
clearall
\begin_inset Index idx
status open

\begin_layout Plain Layout
clearall
\end_layout

\end_inset


\family default
 supprime tous les messages en attente destinés au thread courant.
\end_layout

\end_deeper
\begin_layout Chapter
Jeu des clips depuis mSL
\end_layout

\begin_layout Standard
Ce chapitre aborde exclusivement les interfaces disponibles pour contrôler
 le jeu des clips depuis le langage mSL.
\end_layout

\begin_layout Section
Scénario
\end_layout

\begin_layout Section
Variables et structures de données
\end_layout

\begin_layout Section
Opérations disponibles
\end_layout

\begin_layout Subsection
Jeu de clips
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset


\family typewriter
play
\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!play()
\end_layout

\end_inset

play()
\begin_inset Index idx
status open

\begin_layout Plain Layout
play()
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 permet de jouer un clip, en transmettant différents paramètres.
 Les paramètres sont des mots-clefs, qui précèdent éventuellement les valeurs
 correspondantes.
 Les mots-clefs reconnus sont les suivants
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description

\family typewriter
part
\begin_inset Index idx
status open

\begin_layout Plain Layout
part
\end_layout

\end_inset


\family default
 introduit un numéro de partiel, dont les caractéristiques vont être utilisées
 pour le jeu
\begin_inset space ~
\end_inset

; par défaut, le partiel 0 est sélectionné.
\end_layout

\begin_layout Description

\family typewriter
clip
\begin_inset Index idx
status open

\begin_layout Plain Layout
clip
\end_layout

\end_inset


\family default
 introduit un numéro de clip (0 à 9999) à jouer.
\end_layout

\begin_layout Description

\family typewriter
vol
\begin_inset Index idx
status open

\begin_layout Plain Layout
vol
\end_layout

\end_inset


\family default
 introduit un volume, exprimé en décibels, dans l'intervalle [-48 12].
\end_layout

\begin_layout Description

\family typewriter
plmode
\begin_inset Index idx
status open

\begin_layout Plain Layout
plmode
\end_layout

\end_inset


\family default
 introduit un mode de jeu
\end_layout

\begin_layout Description

\family typewriter
spmode
\begin_inset Index idx
status open

\begin_layout Plain Layout
spmode
\end_layout

\end_inset


\family default
 introduit un mode d'espace
\end_layout

\begin_layout Description

\family typewriter
hpent
\begin_inset Index idx
status open

\begin_layout Plain Layout
hpent
\end_layout

\end_inset


\family default
 introduit un numéro de configuration de HP.
\end_layout

\begin_layout Description

\family typewriter
hpset
\begin_inset Index idx
status open

\begin_layout Plain Layout
hpset
\end_layout

\end_inset


\family default
 introduit un tableau représentant une configuration de haut-parleurs, sous
 la forme décrite dans la table 
\family typewriter
HPConf
\family default
 (un tableau, contenant dans l'ordre : un nombre 
\begin_inset Quotes cld
\end_inset

n
\begin_inset Quotes crd
\end_inset

 de HP, une liste de 
\begin_inset Quotes cld
\end_inset

n
\begin_inset Quotes crd
\end_inset

 HP, un zéro).
\end_layout

\begin_layout Description

\family typewriter
rate
\begin_inset Index idx
status open

\begin_layout Plain Layout
rate
\end_layout

\end_inset


\family default
 introduit une vitesse de lecture (dans [-10 10]).
\end_layout

\begin_layout Description

\family typewriter
dur
\begin_inset Index idx
status open

\begin_layout Plain Layout
dur
\end_layout

\end_inset


\family default
 introduit la durée à jouer, exprimée en secondes, dans l'intervalle [0.001
 3600].
\end_layout

\begin_layout Description

\family typewriter
grfades
\begin_inset Index idx
status open

\begin_layout Plain Layout
grfades
\end_layout

\end_inset


\family default
 durée de fade-in/fade-out pour les grains en mode loop, exprimée en miliseconde
s.
\end_layout

\begin_layout Description

\family typewriter
\begin_inset Index idx
status open

\begin_layout Plain Layout
PMod
\end_layout

\end_inset

PMod 
\family default
modificateurs du mode de jeu.
\end_layout

\begin_layout Description

\family typewriter
unit
\begin_inset Index idx
status open

\begin_layout Plain Layout
unit
\end_layout

\end_inset


\family default
 mot-clef utilisé sans paramètre.
 Il demande à ce que l'adresse de l'unité utilisée pour jouer le clip soit
 fournie en résultat de la fonction.
\end_layout

\begin_layout Standard
Il est possible également de passer en paramètre un tableau unique.
 Voici deux exemples (identiques dans leur résultat) d'utilisation :
\end_layout

\begin_layout LyX-Code
play(`clip, 3320, `rate, 0.65, `vol, -1.5, `plmode, 11);
\end_layout

\begin_layout LyX-Code
var k = data(clip 3320 rate 0.65 vol -1.5 plmode 11); 
\end_layout

\begin_layout LyX-Code
play(k);
\end_layout

\begin_layout Subsection
Gestion des players
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset

player
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
La fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
player()
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
player()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL!player()
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 permet d'envoyer des commandes à un player spécifique.
\end_layout

\begin_layout Standard
Le premier paramètre est l'adresse mémoire du bloc décrivant le player.
 Une telle valeur est rendue par la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
play()
\family default

\begin_inset Quotes crd
\end_inset

 dans laquelle on a précisé le paramètre 
\begin_inset Quotes cld
\end_inset


\family typewriter
`unit
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
unit
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Ce paramètre peut être suivi de l'un des mots-clef 
\begin_inset Quotes cld
\end_inset


\family typewriter
`Imm
\begin_inset Index idx
status open

\begin_layout Plain Layout
Imm
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 (valeur par défaut), action immédiate ou encore 
\begin_inset Quotes cld
\end_inset


\family typewriter
`Dly
\begin_inset Index idx
status open

\begin_layout Plain Layout
Dly
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, action temporisée.
 Les actions immédites sont exécutées le plus rapidement possible au sein
 du processus 
\begin_inset Quotes cld
\end_inset

audio
\begin_inset Quotes crd
\end_inset

 du player, les actions temporisées sont lancées depuis un processus moins
 prioritaire, typiquement quelques dizaines de milisecondes plus tard.
 Si une demande d'action suit immédiatement le lancement d'un clip par 
\begin_inset Quotes cld
\end_inset

play
\begin_inset Quotes crd
\end_inset

, il vaut mieux utiliser une action temporisée.
 Si l'on est certain que le lancement du clip s'est effectué correctement,
 une action en mode immédiat est préférable.
\end_layout

\begin_layout Standard
Après la référence à l'unité (et éventuellement l'un des mots-clef décrivant
 la temporalité de l'action) vient un numéro d'action suivi de paramètres
 éventuels.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="16" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="1.4cm">
<column alignment="left" valignment="top" width="2.6cm">
<column alignment="left" valignment="middle" width="8.5cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Numéro
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Paramètres
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Smooth factors
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Deux valeurs (dans [0 ...
 1]) indiquant les valeurs de croissance et de décroissance pour le filtrage
 de certains paramètres.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Smooth period
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Mise à jour des valeurs modifiées.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Global reset
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Réinitialisation à une valeur standard des caractéristiques modifiables
 des players.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Volumes 1/2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Spécification des volumes de sortie sur les configurations de HP 1 et 2.
 Deux valeurs dans [0 ...
 1].
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Hold release
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Lancement effectif du jeu d'un player verrouillé par un 
\begin_inset Quotes cld
\end_inset

hold
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Set space algo
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Si aucun paramètre
\begin_inset space ~
\end_inset

: reconstruction de l'algorithme courant de mise en espace.
 Si un paramètre est spécifié : choix d'un nouvel algorithme de mise en
 espace, et construction de celui-ci.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Repeat on
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Passage en mode 
\begin_inset Quotes cld
\end_inset

repeat
\begin_inset Quotes crd
\end_inset

 pour le clip courant
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Repeat off
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Suppression du mode 
\begin_inset Quotes cld
\end_inset

repeat
\begin_inset Quotes crd
\end_inset

 pour le clip courant
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
9
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Set gensize
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Modification de la taille des tupples générés par le lecteur
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
10 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Set par source
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Modification du numéro de paramètre déterminant la source du paramètre auxiliair
e des mouvements.
 La valeur peut être 0 (aucun paramètre) ou l'un des paramètres génériques,
 
\begin_inset Quotes cld
\end_inset

X.Par
\begin_inset space ~
\end_inset

0
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

X.Par
\begin_inset space ~
\end_inset

3
\begin_inset Quotes crd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
11
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Disconnect pan source
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Déconnection du réglage de panoramique du paramètre 
\begin_inset Quotes cld
\end_inset

Dyn.X-Pan
\begin_inset Quotes crd
\end_inset

, et utilisation de l'argument pour valeur de ce paramètre.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
12
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Set HPSet 1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Remplacement du set de canaux HP 1 par la liste de canaux passés comme paramètre
s.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
13
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Set HPSet 2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Remplacement du set de canaux HP 2 par la liste de canaux passés comme paramètre
s.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
14
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Set update algo
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Modification de l'algorithme auxiliaire, servant à la mise à jour des volumes
 de canaux de sortie.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
15
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Chapter
Interactions avec l'utilisateur
\end_layout

\begin_layout Standard
Un développement récent (et non stabilisé) permet à un script de créer un
 nouveau module, qui peut être affiché dans n'importe quel panneau, comme
 les modules standards.
 Les possibilités sont relativement limitées, mais il est possible d'afficher
 des textes et des sliders.
\end_layout

\begin_layout Section
Création de blocs affichables
\begin_inset space ~
\end_inset

: la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
gui()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL!gui()
\end_layout

\end_inset

gui()
\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Cette fonction va permettre de créer des éléments successifs, que l'on assembler
a ensuite pour constituer un bloc affichable.
 Le premier paramètre de la fonction est un mot-clef désignant l'opération,
 les suivants sont les paramètres effectifs de l'opération.
\end_layout

\begin_layout Part
Configuration et paramétrisation
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Liste-des-paramètres"

\end_inset

Liste des paramètres
\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres
\end_layout

\end_inset

 et indicateurs
\end_layout

\begin_layout Standard
Ce chapitre décrit la liste des différents paramètres utilisables pour modifier
 le comportement du logiciel, et des indicateurs, consultables, mais non
 modifiables, décrivant des aspects du fonctionnement du logiciel.
 Tous les objets ici décrits sont affichables dans les blocs de contrôle
 de type 
\begin_inset Quotes cld
\end_inset


\emph on
sliders
\emph default

\begin_inset Quotes crd
\end_inset

, mais aussi sont accessibles, et modifiables, depuis tout programme 
\emph on
mSL
\emph default
.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Paramètres-mSL"

\end_inset

Paramètres
\end_layout

\begin_layout Standard
Chaque paramètre est défini par son étiquette, affichable dans certains
 visualisateurs, par son nom symbolique compacté (identificateur limité
 à 8 caractères), et par son numéro, qui permettent de le référencer dans
 les scripts.
 Le numéro indiqué peut varier d'une version à l'autre du GM, et n'a pas
 forcément été mis à jour dans ce document).
 Il est préférable de référencer les paramètres par leur nom symbolique,
 indiqué également entre crochets.
 Enfin, l'intervalle de variation que le paramètre peut prendre est indiqué,
 entre accolades, sous la forme de quatre nombres
\begin_inset space ~
\end_inset

: la valeur minimale, la valeur maximale, la valeur par défaut, et le pas
 de variation lors des réglages par un slider.
\end_layout

\begin_layout Description
Auto
\begin_inset space ~
\end_inset

Freq.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Auto
\begin_inset space ~
\end_inset

Freq.
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Auto
\begin_inset space ~
\end_inset

Freq.
\end_layout

\end_inset

 [29
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!29 - Auto
\begin_inset space ~
\end_inset

Freq.
\end_layout

\end_inset

, 
\family typewriter
AutoFreq
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
AutoFreq
\end_layout

\end_inset


\family default
] 
\begin_inset Quotes cld
\end_inset

Fréquence
\begin_inset Quotes crd
\end_inset

 à laquelle de nouveaux clips peuvent être joués en mode automatique.
 C'est en fait une 
\emph on
durée
\emph default
 en secondes qui indique l'intervale de temps minimal à respecter avant
 qu'un nouveau clip puisse être joué.
 Intervalle de variation {0.0, 30, 0.01, 0.01}.
\end_layout

\begin_layout Description
Auto
\begin_inset space ~
\end_inset

Mode
\begin_inset Index idx
status open

\begin_layout Plain Layout
Auto
\begin_inset space ~
\end_inset

Mode
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Auto
\begin_inset space ~
\end_inset

Mode
\end_layout

\end_inset

 [25
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!25 - Auto
\begin_inset space ~
\end_inset

Mode
\end_layout

\end_inset

, 
\family typewriter
AutoMode
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
AutoMode
\end_layout

\end_inset

] Fonctionnement (on/off, ou marche/arrêt) de l'auto-mode, c'est à dire
 du lancement automatique de la lecture de clips.
 Intervalle de variation {0, 1, 0, 1}.
\end_layout

\begin_layout Description
Channels
\begin_inset Index idx
status open

\begin_layout Plain Layout
Channels
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Channels
\end_layout

\end_inset


\begin_inset space ~
\end_inset

# [26
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!26 - Channels
\end_layout

\end_inset

, 
\family typewriter
ChanNbr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ChanNbr
\end_layout

\end_inset


\family default
] Nombre de canaux à utiliser en sortie.
 Permet une adaptation d'une configuration définie à une autre configuration,
 comportant moins de canaux, au prix de la perte des sémantiques associées
 aux configurations de haut-parleurs.
 Intervalle de variation {2, 64, 64, 1}.
\end_layout

\begin_layout Description
Cl.Pl.End
\begin_inset Index idx
status open

\begin_layout Plain Layout
Cl.Pl.End
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Cl.Pl.End
\end_layout

\end_inset

 [102
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!102 - Cl.Pl.End
\end_layout

\end_inset

, 
\family typewriter
ClPEnd
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ClPEnd
\end_layout

\end_inset


\family default
] Choix du point d'arrêt de lecture d'un clip en mode interactif.
 Intervalle de variation {0, 100, 0, 0.1}.
\end_layout

\begin_layout Description
Cl.Pl.Start
\begin_inset Index idx
status open

\begin_layout Plain Layout
Cl.Pl.Start
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Cl.Pl.Start
\end_layout

\end_inset

 [101
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!101 - Cl.Pl.Start
\end_layout

\end_inset

, 
\family typewriter
ClPStart
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ClPStart
\end_layout

\end_inset


\family default
] Choix du point de départ de lecture d'un clip en mode interactif.
 Intervalle de variation {0, 100, 0, 0.1}.
\end_layout

\begin_layout Description
Cl.Start.Pos
\begin_inset Index idx
status open

\begin_layout Plain Layout
Cl.Start.Pos
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Cl.Start.Pos
\end_layout

\end_inset

 [81
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!81 - Cl.Start.Pos
\end_layout

\end_inset

, 
\family typewriter
ClStPos
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ClStPos
\end_layout

\end_inset


\family default
] Choix du point de départ de lecture d'un clip, lorsqu'une durée de lecture
 plus courte que la durée du clip est choisie.
 Intervalle de variation {0, 100, 0, 1}.
 Pour une valeur de 0, la portion lue est choisie au début du clip, pour
 une valeur 100, la portion lue est choisie à la fin du clip, pour une valeur
 intermédiaire, la portion est prise entre ces bornes, avec intervention
 d'un aléa.
\end_layout

\begin_layout Description
Clip.Rd.Lim
\begin_inset Index idx
status open

\begin_layout Plain Layout
Clip.Rd.Lim
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Clip.Rd.Lim
\end_layout

\end_inset

 [27
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!27 - Clip.Rd.Lim
\end_layout

\end_inset

, 
\family typewriter
ClRdLim
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ClRdLim
\end_layout

\end_inset


\family default
] Limitation (en secondes) de la taille d'un clip lors de sa lecture.
 Il existe une limitation, liée à la mémoire allouée à chaque lecteur, sur
 la taille maximale que l'on peut lire (de l'ordre de 4 minutes en stéréo).
 Intervalle de variation {1, 600, 60, 1}.
\end_layout

\begin_layout Description
Contin.Rate
\begin_inset Index idx
status open

\begin_layout Plain Layout
Contin.Rate
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Contin.Rate
\end_layout

\end_inset

 [83
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!83 - Contin.Rate
\end_layout

\end_inset

, 
\family typewriter
ContRate
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ContRate
\end_layout

\end_inset


\family default
] Variation dynamique de la vitesse (appliquée à tous les players actifs).
 Intervalle de variation {0.01, 10, 1, 0.001}.
\end_layout

\begin_layout Description
Gen
\begin_inset space ~
\end_inset

min
\begin_inset space ~
\end_inset

#
\begin_inset Index idx
status open

\begin_layout Plain Layout
Gen
\begin_inset space ~
\end_inset

min
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Gen
\begin_inset space ~
\end_inset

min
\end_layout

\end_inset

 [113
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!113 - Gen
\begin_inset space ~
\end_inset

min
\end_layout

\end_inset

, 
\family typewriter
GenMinCt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GenMinCt
\end_layout

\end_inset


\family default
] Nombre minimum de générateur à utiliser en mode automatique.
 Intervalle de variation {0, 24, 4, 0.1}.
\end_layout

\begin_layout Description
Gen
\begin_inset space ~
\end_inset

max
\begin_inset space ~
\end_inset

#
\begin_inset Index idx
status open

\begin_layout Plain Layout
Gen
\begin_inset space ~
\end_inset

max
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Gen
\begin_inset space ~
\end_inset

max
\end_layout

\end_inset

 [114
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!114 - Gen
\begin_inset space ~
\end_inset

max
\end_layout

\end_inset

, 
\family typewriter
GenMaxCt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GenMaxCt
\end_layout

\end_inset


\family default
] Nombre maximum de générateurs à utiliser en mode automatique.
 Intervalle de variation {0, 24, 4, 0.1}.
\end_layout

\begin_layout Description
Generators
\begin_inset Index idx
status open

\begin_layout Plain Layout
Generators
\end_layout

\end_inset


\begin_inset space ~
\end_inset

#
\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Generators
\end_layout

\end_inset

 [20
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!20 - Generators
\end_layout

\end_inset

, 
\family typewriter
GenNbr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GenNbr
\end_layout

\end_inset


\family default
] Définit le nombre de générateurs simultanément actifs.
 Intervalle de variation {0, 64, 4, 0.01}.
 On notera que le nombre maximal de générateurs disponibles dans ce réglage
 (64) est théorique.
 Il est limité par le nombre de plug-ins 
\begin_inset Quotes cld
\end_inset

Players
\begin_inset Quotes crd
\end_inset

 effectivement installés sur les pistes.
 Ainsi, s'il n'y a que 8 players disponibles, l'intervalle effectif de variation
 affiché sera {2, 8}.
 Il est possible de demander un nombre fractionnaire de générateurs.
 Ainsi, régler sur 2.5 indique qu'il y aura, en moyenne, de 2 à 3 générateurs
 actifs, et que sur un moyen (quelques minutes) ou long terme (quelques
 dizaines de minutes), il y aura, en moyenne, 2.5 générateurs actifs.
\end_layout

\begin_layout Description
G#
\begin_inset space ~
\end_inset

Switch
\begin_inset space ~
\end_inset

Time
\begin_inset Index idx
status open

\begin_layout Plain Layout
G
\begin_inset space ~
\end_inset

Switch
\begin_inset space ~
\end_inset

Time
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!G
\begin_inset space ~
\end_inset

Switch
\begin_inset space ~
\end_inset

Time
\end_layout

\end_inset

 [109
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!109 - G
\begin_inset space ~
\end_inset

Switch
\begin_inset space ~
\end_inset

Time
\end_layout

\end_inset

, 
\family typewriter
PSwtchT
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
PSwtchT
\end_layout

\end_inset


\family default
] Intervalle de temps moyen, en mode automatique, séparant deux changements
 consécutifs du nombre de générateurs.
 Intervalle de variation {2, 1200, 180, 1}.
\end_layout

\begin_layout Description
G#
\begin_inset space ~
\end_inset

Variation
\begin_inset Index idx
status open

\begin_layout Plain Layout
G
\begin_inset space ~
\end_inset

Variation
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!G
\begin_inset space ~
\end_inset

Variation
\end_layout

\end_inset

 [110
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!110 - G
\begin_inset space ~
\end_inset

Variation
\end_layout

\end_inset

, 
\family typewriter
PVariat
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
PVariat
\end_layout

\end_inset


\family default
] Mode de variation du nombre de générateur en mode 
\begin_inset Quotes cld
\end_inset

jeu automatique
\begin_inset Quotes crd
\end_inset

.
 Intervalle de variation {0, 100, 10, 1}.
\end_layout

\begin_layout Description
Gr.Density
\begin_inset Index idx
status open

\begin_layout Plain Layout
Gr.Density
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Gr.Density
\end_layout

\end_inset

 [100
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!100 - Gr.Density
\end_layout

\end_inset

, 
\family typewriter
GrDensty
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GrDensty
\end_layout

\end_inset


\family default
] Nombre de grains simultanément actifs dans un looper.
 Peut être modifié dynamiquement.
 Intervalle de variation {1, 24, 1, 1}.
\end_layout

\begin_layout Description
Gr.Fade.In
\begin_inset Index idx
status open

\begin_layout Plain Layout
Gr.Fade.In
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Gr.Fade.In
\end_layout

\end_inset

 [87
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!87 - Gr.Fade.In
\end_layout

\end_inset

, 
\family typewriter
GrFadIn
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GrFadIn
\end_layout

\end_inset


\family default
] Durée moyenne du fade-in des grains générés en mode 
\begin_inset Quotes cld
\end_inset

loop
\begin_inset Quotes crd
\end_inset

, exprimée en ms.
 Intervalle de variation {1, 3000, 1000, 1}.
 Pour des valeurs élevées et des grains de petites tailles, les fade-in
 et fade-out sont réduits, de manière proportionnelle à leur valeurs respectives
, pour que leur somme ne dépasse pas la durée du grain, permettant à celui-ci
 d'atteindre son amplitude maximale lors du jeu.
\end_layout

\begin_layout Description
Gr.Fade.Out
\begin_inset Index idx
status open

\begin_layout Plain Layout
Gr.Fade.Out
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Gr.Fade.Out
\end_layout

\end_inset

 [88
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!88 - Gr.Fade.Out
\end_layout

\end_inset

, 
\family typewriter
GrFadOut
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GrFadOut
\end_layout

\end_inset


\family default
] Durée moyenne du fade-in des grains générés en mode 
\begin_inset Quotes cld
\end_inset

loop
\begin_inset Quotes crd
\end_inset

, exprimée en ms.
 Même remarque que pour 
\begin_inset Quotes cld
\end_inset

Gr.Fade.In
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
Gr.Min
\begin_inset space ~
\end_inset

Size
\begin_inset Index idx
status open

\begin_layout Plain Layout
Gr.Min
\begin_inset space ~
\end_inset

Size
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Gr.Min
\begin_inset space ~
\end_inset

Size
\end_layout

\end_inset

 [97
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!97 - Gr.Min
\begin_inset space ~
\end_inset

Size
\end_layout

\end_inset

, 
\family typewriter
GrMnSiz
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
GrMnSiz
\end_layout

\end_inset

] Durée minimale d'un grain, en secondes.
 Intervalle de variation {0.002, 30, 1, 0.001}.
\end_layout

\begin_layout Description
Gr.Max
\begin_inset space ~
\end_inset

Size
\begin_inset Index idx
status open

\begin_layout Plain Layout
Gr.Max
\begin_inset space ~
\end_inset

Size
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Gr.Max
\begin_inset space ~
\end_inset

Size
\end_layout

\end_inset

 [95
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!95 - Gr.Max
\begin_inset space ~
\end_inset

Size
\end_layout

\end_inset

, 
\family typewriter
GrMxSiz
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GrMxSiz
\end_layout

\end_inset


\family default
] Durée maximale d'un grain, en secondes.
 Intervalle de variation {0.002, 30, 1, 0.001}.
\end_layout

\begin_layout Description
Grp
\begin_inset space ~
\end_inset

Switch
\begin_inset space ~
\end_inset

Time
\begin_inset Index idx
status open

\begin_layout Plain Layout
Grp
\begin_inset space ~
\end_inset

Switch
\begin_inset space ~
\end_inset

Time
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Grp
\begin_inset space ~
\end_inset

Switch
\begin_inset space ~
\end_inset

Time
\end_layout

\end_inset

 [41
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!41 - Grp
\begin_inset space ~
\end_inset

Switch
\begin_inset space ~
\end_inset

Time
\end_layout

\end_inset

, 
\family typewriter
GSwtchT
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GSwtchT
\end_layout

\end_inset


\family default
] Durée moyenne de passage d'un groupe au suivant, en mode auto-play.
 Intervalle de variation {2, 1200, 180, 1}.
\end_layout

\begin_layout Description
Grp
\begin_inset space ~
\end_inset

Variation
\begin_inset Index idx
status open

\begin_layout Plain Layout
Grp
\begin_inset space ~
\end_inset

Variation
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Grp
\begin_inset space ~
\end_inset

Variation
\end_layout

\end_inset

 [112
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!112 - Grp
\begin_inset space ~
\end_inset

Variation
\end_layout

\end_inset

, 
\family typewriter
GVariat
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GVariat
\end_layout

\end_inset


\family default
] Mode de variation du choix du groupe en mode 
\begin_inset Quotes cld
\end_inset

jeu automatique
\begin_inset Quotes crd
\end_inset

.
 Intervalle de variation {0, 100, 10, 1}.
\end_layout

\begin_layout Description
HP
\begin_inset space ~
\end_inset

Density
\begin_inset Index idx
status open

\begin_layout Plain Layout
HP
\begin_inset space ~
\end_inset

Density
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!HP
\begin_inset space ~
\end_inset

Density
\end_layout

\end_inset

 [40
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!40 - HP
\begin_inset space ~
\end_inset

Density
\end_layout

\end_inset

, 
\family typewriter
HPDensty
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
HPDensty
\end_layout

\end_inset


\family default
] 
\begin_inset Quotes cld
\end_inset

Densité
\begin_inset Quotes crd
\end_inset

 (en fait, pourcentage des HP indiqués dans le mode d'espace) de haut-parleurs
 à utiliser.
 S'applique à partir des prochains lancements de clips.
 Intervalle de variation {1, 100, 100, 1}.
\end_layout

\begin_layout Description
HP
\begin_inset space ~
\end_inset

Used
\begin_inset Index idx
status open

\begin_layout Plain Layout
HP
\begin_inset space ~
\end_inset

Used
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!HP
\begin_inset space ~
\end_inset

Used
\end_layout

\end_inset

 [99
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!99 - HP
\begin_inset space ~
\end_inset

Used
\end_layout

\end_inset

, 
\family typewriter
HPUsed
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
HPUsed
\end_layout

\end_inset


\family default
] Nombre de HP effectivement utilisés lors de la lecture d'un clip.
 Ce nombre peut être dynamiquement modifié dans un displayer.
 Intervalle de variation {1, 64, 2, 1}.
\end_layout

\begin_layout Description
Loop
\begin_inset space ~
\end_inset

Dur.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Loop
\begin_inset space ~
\end_inset

Dur.
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Loop
\begin_inset space ~
\end_inset

Dur.
\end_layout

\end_inset

 [31
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!31 - Loop
\begin_inset space ~
\end_inset

Dur.
\end_layout

\end_inset

, 
\family typewriter
LoopDur
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
LoopDur
\end_layout

\end_inset


\family default
] Durée par défaut de jeu pour les générateurs en mode 
\begin_inset Quotes cld
\end_inset

Loop
\begin_inset Quotes crd
\end_inset

, exprimée en secondes.
 Intervalle de variation {0.1, 600, 30, 0.1}.
\end_layout

\begin_layout Description
Loop
\begin_inset space ~
\end_inset

Gain
\begin_inset Index idx
status open

\begin_layout Plain Layout
Loop
\begin_inset space ~
\end_inset

Gain
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Loop
\begin_inset space ~
\end_inset

Gain
\end_layout

\end_inset

 [33
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!33 - Loop
\begin_inset space ~
\end_inset

Gain
\end_layout

\end_inset

, 
\family typewriter
LoopGain
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
LoopGain
\end_layout

\end_inset


\family default
] Gain par défaut pour le jeu des générateurs en mode 
\begin_inset Quotes cld
\end_inset

Loop
\begin_inset Quotes crd
\end_inset

, exprimé en décibels.
 Intervalle de variation {-40, 20, 0, 0.1}.
\end_layout

\begin_layout Description
Loopers
\begin_inset Index idx
status open

\begin_layout Plain Layout
Loopers
\end_layout

\end_inset


\begin_inset space ~
\end_inset

#
\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Loopers
\end_layout

\end_inset

 [22
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!22 - Loopers
\end_layout

\end_inset

, 
\family typewriter
LoopNbr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
LoopNbr
\end_layout

\end_inset


\family default
] Nombre de générateurs simultanément actifs en mode 
\begin_inset Quotes cld
\end_inset

loop
\begin_inset Quotes crd
\end_inset

.
 Intervalle de variation {0, 64, 2, 0.01}.
 Même remarque que pour les générateurs sur le nombre maximal et les valeurs
 fractionnaires de ce réglage.
\end_layout

\begin_layout Description
Lp.Fade.In
\begin_inset Index idx
status open

\begin_layout Plain Layout
Lp.Fade.In
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Lp.Fade.In
\end_layout

\end_inset

 [36
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!36 - Lp.Fade.In
\end_layout

\end_inset

, 
\family typewriter
LpFadIn
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
LpFadIn
\end_layout

\end_inset


\family default
] Durée, par défaut, de fade-in pour les loopers.
 Intervalle de variation {0.002, 30, 1, 0.001}.
\end_layout

\begin_layout Description
Lp.Fade.Out
\begin_inset Index idx
status open

\begin_layout Plain Layout
Lp.Fade.Out
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Lp.Fade.Out
\end_layout

\end_inset

 [37
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!37 - Lp.Fade.Out
\end_layout

\end_inset

, 
\family typewriter
LpFadOut
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
LpFadOut
\end_layout

\end_inset


\family default
] Durée, par défaut, de fade-out pour les loopers.
 Intervalle de variation {0.003, 30, 1, 0.001}.
\end_layout

\begin_layout Description
Mass
\begin_inset Index idx
status open

\begin_layout Plain Layout
Mass
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Mass
\end_layout

\end_inset

 [86
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!86 - Mass
\end_layout

\end_inset

, 
\family typewriter
Mass
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Mass
\end_layout

\end_inset


\family default
] Intervalle de variation {0.002, 30, 1, 0.001}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Max
\begin_inset space ~
\end_inset

players
\begin_inset Index idx
status open

\begin_layout Plain Layout
Max
\begin_inset space ~
\end_inset

players
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Max
\begin_inset space ~
\end_inset

players
\end_layout

\end_inset

 [129
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!129 - Max
\begin_inset space ~
\end_inset

players
\end_layout

\end_inset

, 
\family typewriter
MxPlayer
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MxPlayer
\end_layout

\end_inset


\family default
] Limite globale du nombre de générateurs simultanément actifs, au-delà
 de laquelle le déclenchement d'un nouveau générateur provoque l'arrêt du
 plus anciennement actif.
 Intervalle de variation {1, 40, 40, 1}.
\end_layout

\begin_layout Description
Pl.Fade.In
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pl.Fade.In
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Pl.Fade.In
\end_layout

\end_inset

 [34
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!34 - Pl.Fade.In
\end_layout

\end_inset

, 
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
PlFadIn
\end_layout

\end_inset

PlFadIn
\family default
] Durée, par défaut, de fade-in pour les players.
 Intervalle de variation {0.002, 30, 1, 0.001}.
\end_layout

\begin_layout Description
Pl.Fade.Out
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pl.Fade.Out
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Pl.Fade.Out
\end_layout

\end_inset

 [35
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!35 - Pl.Fade.Out
\end_layout

\end_inset

, 
\family typewriter
PlFadOut
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
PlFadOut
\end_layout

\end_inset

] Durée, par défaut, de fade-out pour les players.
 Intervalle de variation {0.003, 30, 1, 0.001}.
\end_layout

\begin_layout Description
Play
\begin_inset space ~
\end_inset

Dur.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Play
\begin_inset space ~
\end_inset

Dur.
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Play
\begin_inset space ~
\end_inset

Dur.
\end_layout

\end_inset

 [30
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!30 - Play
\begin_inset space ~
\end_inset

Dur.
\end_layout

\end_inset

, 
\family typewriter
PlayDur
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
PlayDur
\end_layout

\end_inset


\family default
] Durée par défaut de jeu pour les générateurs en mode 
\begin_inset Quotes cld
\end_inset

Play
\begin_inset Quotes crd
\end_inset

, exprimée en secondes.
 Intervalle de variation {0.1, 600, 20, 0.1}.
\end_layout

\begin_layout Description
Play
\begin_inset space ~
\end_inset

Gain
\begin_inset Index idx
status open

\begin_layout Plain Layout
Play
\begin_inset space ~
\end_inset

Gain
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Play
\begin_inset space ~
\end_inset

Gain
\end_layout

\end_inset

 [32
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!32 - Play
\begin_inset space ~
\end_inset

Gain
\end_layout

\end_inset

, 
\family typewriter
PlayGain
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
PlayGain
\end_layout

\end_inset


\family default
] Gain par défaut pour le jeu des générateurs en mode 
\begin_inset Quotes cld
\end_inset

Play
\begin_inset Quotes crd
\end_inset

, exprimé en décibels.
 Intervalle de variation {-40, 20, 0, 0.1}.
\end_layout

\begin_layout Description
Players
\begin_inset Index idx
status open

\begin_layout Plain Layout
Players
\end_layout

\end_inset


\begin_inset space ~
\end_inset

#
\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Players
\end_layout

\end_inset

 [21
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!21 - Players
\end_layout

\end_inset

, 
\family typewriter
PlayNbr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
PlayNbr
\end_layout

\end_inset


\family default
] Nombre de générateurs simultanément actifs en mode 
\begin_inset Quotes cld
\end_inset

play
\begin_inset Quotes crd
\end_inset

.
 Intervalle de variation {0, 64, 2, 0.01}.
 Même remarque que pour les générateurs sur le nombre maximal et les valeurs
 fractionnaires de ce réglage.
\end_layout

\begin_layout Description
Randomness
\begin_inset Index idx
status open

\begin_layout Plain Layout
Randomness
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Randomness
\end_layout

\end_inset

 [65
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!65 - Randomness
\end_layout

\end_inset

, 
\family typewriter
RandNess
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RandNess
\end_layout

\end_inset


\family default
] Intervalle de variation {0, 100, 0, 1}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rate
\begin_inset space ~
\end_inset

Initial
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rate
\begin_inset space ~
\end_inset

Initial
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rate
\begin_inset space ~
\end_inset

Initial
\end_layout

\end_inset

 [28
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!28 - Rate
\begin_inset space ~
\end_inset

Initial
\end_layout

\end_inset

, 
\family typewriter
RateInit
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RateInit
\end_layout

\end_inset


\family default
] Normalement réglée à 1, ce paramètre permet de modifier la vitesse de
 lecture des prochains clips lus.
 Cette variation s'ajoute (en fait, c'est une multiplication) avec les variation
s de vitesse décrites dans le mode de jeu utilisé pour le clip.
 Intervalle de variation {0.1, 4, 1, 0.001}.
\end_layout

\begin_layout Description
Read
\begin_inset space ~
\end_inset

Reverse
\begin_inset Index idx
status open

\begin_layout Plain Layout
Read
\begin_inset space ~
\end_inset

Reverse
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Read
\begin_inset space ~
\end_inset

Reverse
\end_layout

\end_inset

 [94
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!94 - Read
\begin_inset space ~
\end_inset

Reverse
\end_layout

\end_inset

, 
\family typewriter
RdRev
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RdRev
\end_layout

\end_inset


\family default
] Indique si le clip courant doit être lu à l'envers ou non.
 Peut être utilisé dynamiquement pour modifier le sens de lecture d'un clip
 actif.
 Intervalle de variation {0, 1, 0, 1}.
\end_layout

\begin_layout Description
Reader/Looper
\begin_inset Index idx
status open

\begin_layout Plain Layout
Reader/Looper
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Reader/Looper
\end_layout

\end_inset

 [23
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!23 - Reader/Looper
\end_layout

\end_inset

, 
\family typewriter
RLRatio
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RLRatio
\end_layout

\end_inset

] Ratio entre générateurs en mode 
\begin_inset Quotes cld
\end_inset

play
\begin_inset Quotes crd
\end_inset

 et générateurs en mode 
\begin_inset Quotes cld
\end_inset

loop
\begin_inset Quotes crd
\end_inset

.
 Intervalle de variation {-100, 100, 0, 1}.
 Pour un réglage à -100, il n'y aura que des players, pour un réglage à
 100, il n'y aura que des loopers.
 Le ratio sera équilibré pour une valeur de 0, et pour une valeur de -33,
 il y aura en moyenne deux players pour un looper.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset

Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

 [1
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!1 - Rgen
\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

, 
\family typewriter
RG1Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG1Amp
\end_layout

\end_inset


\family default
] Amplitude du générateur d'aléa numéro 1.
 Intervalle de variation {0, 100, 0, 1}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset

Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

 [9
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!9 - Rgen
\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

, 
\family typewriter
RG1Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG1Freq
\end_layout

\end_inset


\family default
] Période (exprimée en secondes) du générateur d'aléa numéro 1.
 Intervalle de variation {0.01, 3600, 1, 0.01}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset

Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

 [2
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!2 - Rgen
\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

, 
\family typewriter
RG2Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG2Amp
\end_layout

\end_inset


\family default
] Amplitude du générateur d'aléa numéro 2.
 Intervalle de variation {0, 100, 0, 1}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset

Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

 [10
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!10 - Rgen
\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

, 
\family typewriter
RG2Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG2Freq
\end_layout

\end_inset


\family default
] Période (exprimée en secondes) du générateur d'aléa numéro 2.
 Intervalle de variation {0.01, 3600, 1, 0.01}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset

Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

 [3
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!3 - Rgen
\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

, 
\family typewriter
RG3Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG3Amp
\end_layout

\end_inset


\family default
] Amplitude du générateur d'aléa numéro 3.
 Intervalle de variation {0, 100, 0, 1}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset

Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

 [11
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!11 - Rgen
\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

, 
\family typewriter
RG3Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG3Freq
\end_layout

\end_inset


\family default
] Période (exprimée en secondes) du générateur d'aléa numéro 3.
 Intervalle de variation {0.01, 3600, 1, 0.01}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

4
\begin_inset space ~
\end_inset

Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

4
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

4
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

 [4
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!4 - Rgen
\begin_inset space ~
\end_inset

4
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

, 
\family typewriter
RG4Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG4Amp
\end_layout

\end_inset


\family default
] Amplitude du générateur d'aléa numéro 4.
 Intervalle de variation {0, 100, 0, 1}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

4
\begin_inset space ~
\end_inset

Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

4
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

4
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

 [12
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!12 - Rgen
\begin_inset space ~
\end_inset

4
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

, 
\family typewriter
RG4Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG4Freq
\end_layout

\end_inset


\family default
] Période (exprimée en secondes) du générateur d'aléa numéro 4.
 Intervalle de variation {0.01, 3600, 1, 0.01}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

5
\begin_inset space ~
\end_inset

Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

5
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

5
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

 [5
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!5 - Rgen
\begin_inset space ~
\end_inset

5
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

, 
\family typewriter
RG5Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG5Amp
\end_layout

\end_inset


\family default
] Amplitude du générateur d'aléa numéro 5.
 Intervalle de variation {0, 100, 0, 1}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

5
\begin_inset space ~
\end_inset

Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

5
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

5
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

 [13
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!13 - Rgen
\begin_inset space ~
\end_inset

5
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

, 
\family typewriter
RG5Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG5Freq
\end_layout

\end_inset


\family default
] Période (exprimée en secondes) du générateur d'aléa numéro 5.
 Intervalle de variation {0.01, 3600, 1, 0.01}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

6
\begin_inset space ~
\end_inset

Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

6
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

6
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

 [6
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!6 - Rgen
\begin_inset space ~
\end_inset

6
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

, 
\family typewriter
RG6Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG6Amp
\end_layout

\end_inset


\family default
] Amplitude du générateur d'aléa numéro 6.
 Intervalle de variation {0, 100, 0, 1}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

6
\begin_inset space ~
\end_inset

Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

6
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

6
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

 [14
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!14 - Rgen
\begin_inset space ~
\end_inset

6
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

, 
\family typewriter
RG6Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG6Freq
\end_layout

\end_inset


\family default
] Période (exprimée en secondes) du générateur d'aléa numéro 6.
 Intervalle de variation {0.01, 3600, 1, 0.01}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

7
\begin_inset space ~
\end_inset

Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

7
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

7
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

 [7
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!7 - Rgen
\begin_inset space ~
\end_inset

7
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

, 
\family typewriter
RG7Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG7Amp
\end_layout

\end_inset


\family default
] Amplitude du générateur d'aléa numéro 7.
 Intervalle de variation {0, 100, 0, 1}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

7
\begin_inset space ~
\end_inset

Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

7
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

7
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

 [15
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!15 - Rgen
\begin_inset space ~
\end_inset

7
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

, 
\family typewriter
RG7Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG7Freq
\end_layout

\end_inset


\family default
] Période (exprimée en secondes) du générateur d'aléa numéro 7.
 Intervalle de variation {0.01, 3600, 1, 0.01}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

8
\begin_inset space ~
\end_inset

Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

8
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

8
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

 [8
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!8 - Rgen
\begin_inset space ~
\end_inset

8
\begin_inset space ~
\end_inset

Amp
\end_layout

\end_inset

, 
\family typewriter
RG8Amp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG8Amp
\end_layout

\end_inset


\family default
] Amplitude du générateur d'aléa numéro 8.
 Intervalle de variation {0, 100, 0, 1}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Rgen
\begin_inset space ~
\end_inset

8
\begin_inset space ~
\end_inset

Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rgen
\begin_inset space ~
\end_inset

8
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Rgen
\begin_inset space ~
\end_inset

8
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

 [16
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!16 - Rgen
\begin_inset space ~
\end_inset

8
\begin_inset space ~
\end_inset

Freq
\end_layout

\end_inset

, 
\family typewriter
RG8Freq
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RG8Freq
\end_layout

\end_inset


\family default
] Période (exprimée en secondes) du générateur d'aléa numéro 8.
 Intervalle de variation {0.01, 3600, 1, 0.01}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Scheduler
\begin_inset Index idx
status open

\begin_layout Plain Layout
Scheduler
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Scheduler
\end_layout

\end_inset

 [24
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!24 - Scheduler
\end_layout

\end_inset

, 
\family typewriter
SchAct
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SchAct
\end_layout

\end_inset


\family default
] Activité (on/off, ou marche/arrêt) du scheduler.
 Intervalle de variation {0, 1, 1, 1}, ce qui équivaut à un off/on.
 Attention, interrompre le scheduler va progressivement bloquer l'ensemble
 du système.
 Il devra très probablement être débloqué manuellement.
\end_layout

\begin_layout Description
Speed
\begin_inset space ~
\end_inset

Var.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Speed
\begin_inset space ~
\end_inset

Var.
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Speed
\begin_inset space ~
\end_inset

Var.
\end_layout

\end_inset

 [103
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!103 - Speed
\begin_inset space ~
\end_inset

Var.
\end_layout

\end_inset

, 
\family typewriter
SpeedVar
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SpeedVar
\end_layout

\end_inset


\family default
] Variation de vitesse appliquée à un lecteur spécifique, par l'intermédiaire
 d'un contrôle placé dans un 
\begin_inset Quotes cld
\end_inset

Displayer
\begin_inset Quotes crd
\end_inset

.
 Intervalle de variation {0.01, 10, 1, 0.001}.
 
\end_layout

\begin_layout Description
Synchro
\begin_inset Index idx
status open

\begin_layout Plain Layout
Synchro
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Synchro
\end_layout

\end_inset

 [84
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!84 - Synchro
\end_layout

\end_inset

, 
\family typewriter
Synchro
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Synchro
\end_layout

\end_inset


\family default
] Intervalle de synchronisation pour des players/loopers, exprimé en secondes.
 Intervalle de variation {0.001, 120, 1, 0.001}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Tempo
\begin_inset Index idx
status open

\begin_layout Plain Layout
Tempo
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Tempo
\end_layout

\end_inset

 [93
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!93 - Tempo
\end_layout

\end_inset

, 
\family typewriter
Tempo
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Tempo
\end_layout

\end_inset


\family default
] Intervalle de variation {0.1, 480, 60, 0.1}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Tempo
\begin_inset space ~
\end_inset

Sync.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Tempo
\begin_inset space ~
\end_inset

Sync.
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Tempo
\begin_inset space ~
\end_inset

Sync.
\end_layout

\end_inset

 [92
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!92 - Tempo
\begin_inset space ~
\end_inset

Sync.
\end_layout

\end_inset

, 
\family typewriter
TmpoSync
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
TmpoSync
\end_layout

\end_inset


\family default
 ] Intervalle de variation {0, 1, 0, 1}.
 
\emph on
Non opérationnel.
\end_layout

\begin_layout Description
Transpose
\begin_inset Index idx
status open

\begin_layout Plain Layout
Transpose
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Transpose
\end_layout

\end_inset

 [106
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!106 - Transpose
\end_layout

\end_inset

, 
\family typewriter
Trnspose
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Trnspose
\end_layout

\end_inset


\family default
] Transposition d'un clip lors de sa lecture, variation exprimée en demi-tons.
 Intervalle de variation {-24, 24, 0, 1}.
 Notons que cette valeur remplace toute autre variation de vitesse réglée
 par d'autres paramètres
\begin_inset space ~
\end_inset

: c'est le dernier utilisé qui est pris en compte.
\end_layout

\begin_layout Description
UI
\begin_inset space ~
\end_inset

Theme
\begin_inset Index idx
status open

\begin_layout Plain Layout
UI
\begin_inset space ~
\end_inset

Theme
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!UI
\begin_inset space ~
\end_inset

Theme
\end_layout

\end_inset

 [82
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!82 - UI
\begin_inset space ~
\end_inset

Theme
\end_layout

\end_inset

, 
\family typewriter
UITheme
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
UITheme
\end_layout

\end_inset


\family default
] Numéro du thème utilisé pour la présentation de l'interface graphique
 du Game Master.
 Intervalle de variation {0, 16, 0, 1}.
 
\end_layout

\begin_layout Description
Vol
\begin_inset space ~
\end_inset

Switch
\begin_inset space ~
\end_inset

Time
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vol
\begin_inset space ~
\end_inset

Switch
\begin_inset space ~
\end_inset

Time
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Vol
\begin_inset space ~
\end_inset

Switch
\begin_inset space ~
\end_inset

Time
\end_layout

\end_inset

 [108
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!108 - Vol
\begin_inset space ~
\end_inset

Switch
\begin_inset space ~
\end_inset

Time
\end_layout

\end_inset

, 
\family typewriter
VSwtchT
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
VSwtchT
\end_layout

\end_inset


\family default
] Intervalle de temps moyen, en mode automatique, séparant deux changements
 consécutifs de la valeur du volume.
 Intervalle de variation {2, 1200, 60, 1}.
 
\end_layout

\begin_layout Description
Vol
\begin_inset space ~
\end_inset

Variation
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vol
\begin_inset space ~
\end_inset

Variation
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Vol
\begin_inset space ~
\end_inset

Variation
\end_layout

\end_inset

 [111
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!111 - Vol
\begin_inset space ~
\end_inset

Variation
\end_layout

\end_inset

, 
\family typewriter
VVariat
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
VVariat
\end_layout

\end_inset


\family default
] Réglage de l'aléatoire dans les variations globales de volume.
 Intervalle de variation {0, 100, 10, 1}.
 
\end_layout

\begin_layout Description
Vol.
\begin_inset space ~
\end_inset

Glob.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vol.
\begin_inset space ~
\end_inset

Glob.
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Vol.
\begin_inset space ~
\end_inset

Glob.
\end_layout

\end_inset

 [128
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!128 - Vol.
\begin_inset space ~
\end_inset

Glob.
\end_layout

\end_inset

, 
\family typewriter
VolGlob
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
VolGlob
\end_layout

\end_inset


\family default
] Volume global des players.
 Intervalle de variation {-80, 20, 0, 0.1}.
 
\end_layout

\begin_layout Description
Vol.
\begin_inset space ~
\end_inset

Max.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vol.
\begin_inset space ~
\end_inset

Max.
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Vol.
\begin_inset space ~
\end_inset

Max.
\end_layout

\end_inset

 [116
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!116 - Vol.
\begin_inset space ~
\end_inset

Max.
\end_layout

\end_inset

, 
\family typewriter
VolMax
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
VolMax
\end_layout

\end_inset


\family default
] Volume global maximum en mode automatique.
 Intervalle de variation {-60, 20, 0, 0.1}.
 
\end_layout

\begin_layout Description
Vol.
\begin_inset space ~
\end_inset

Min.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vol.
\begin_inset space ~
\end_inset

Min.
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Vol.
\begin_inset space ~
\end_inset

Min.
\end_layout

\end_inset

 [115
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!115 - Vol.
\begin_inset space ~
\end_inset

Min.
\end_layout

\end_inset

, 
\family typewriter
VolMin
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
VolMin
\end_layout

\end_inset


\family default
] Volume global minimum en mode automatique.
 Intervalle de variation {-60, 20, 0, 0.1}.
 
\end_layout

\begin_layout Description
Vol.
\begin_inset space ~
\end_inset

Mod.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vol.
\begin_inset space ~
\end_inset

Mod.
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Vol.
\begin_inset space ~
\end_inset

Mod.
\end_layout

\end_inset

 [91
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!91 - Vol.
\begin_inset space ~
\end_inset

Mod.
\end_layout

\end_inset

, 
\family typewriter
VolMod
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
VolMod
\end_layout

\end_inset


\family default
] Variation du volume.
 Intervalle de variation {-40, 40, 0, 0.1}.
 
\end_layout

\begin_layout Description
Vol.glob.bias
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vol.glob.bias
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Paramètres!Vol.glob.bias
\end_layout

\end_inset

 [117
\begin_inset Index idx
status open

\begin_layout Plain Layout
Numéro de paramètre!117 - Vol.glob.bias
\end_layout

\end_inset

, 
\family typewriter
VolGlbB
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
VolGlbB
\end_layout

\end_inset


\family default
] Vitesse de modification effective du volume de sortie, après une modification
 du volume global.
 0 correspond à une variation instantanée, 10 à une variation très lente.
 Intervalle de variation {0, 10, 3, 0.1}.
 
\end_layout

\begin_layout Section
Indicateurs
\end_layout

\begin_layout Standard
Les indicateurs peuvent être affichés (mais non modifiés) dans différents
 blocs de contrôle, et témoignent de l'activité du logiciel.
 Certains indicateurs sont relatifs aux générateurs, et indiquent donc une
 valeur propre au générateur sélecté.
 Notons que tous les paramètres décrits ci-dessus au paragraphe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Paramètres-mSL"
plural "false"
caps "false"
noprefix "false"

\end_inset

 contituent également des indicateurs, dont la valeur peut être affichée
 dans les mêmes conditions.
\end_layout

\begin_layout Description
Clip
\begin_inset Index idx
status open

\begin_layout Plain Layout
Clip
\end_layout

\end_inset


\begin_inset space ~
\end_inset

#
\begin_inset Index idx
status open

\begin_layout Plain Layout
Indicateurs!Clip
\end_layout

\end_inset

 Numéro du clip courant (relatif au 
\begin_inset Quotes cld
\end_inset

player courant
\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Description
Last
\begin_inset space ~
\end_inset

Kmd
\begin_inset Index idx
status open

\begin_layout Plain Layout
Last
\begin_inset space ~
\end_inset

Kmd
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Indicateurs!Last
\begin_inset space ~
\end_inset

Kmd
\end_layout

\end_inset

 Dernière commande exécutée par le player courant.
\end_layout

\begin_layout Description
Vol.
\begin_inset space ~
\end_inset

bias
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vol.
\begin_inset space ~
\end_inset

bias
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Indicateurs!Vol.
\begin_inset space ~
\end_inset

bias
\end_layout

\end_inset

 Bias du volume du player courant.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Actions"

\end_inset

Actions
\end_layout

\begin_layout Standard
Le 
\emph on
Game Master
\emph default
 propose un certain nombre de fonctions, qui sont accessibles, depuis certaines
 parties du logiciel, à travers un numéro d'action, et d'éventuels paramètres.
\end_layout

\begin_layout Section
Liste des actions prédéfinies
\end_layout

\begin_layout Standard
Elles sont ici classées par leur numéro d'ordre, croissant, à partir de
 0.
 Dans certains cas, un autre numéro (débutant à 300) a été associé aux mêmes
 actions, pour des raisons de compatibilité.
 Cette seconde notation disparaitra probablement dans une prochaîne version.
 Certaines de ces actions n'ont de sens que lorsqu'elles font partie d'une
 séquence, et influent sur le comportement des actions suivantes.
 Notons aussi que certaines de ces actions consistent à jouer un clip.
 Par défaut, ce clip est joué avec les paramètres du 
\emph on
partiel zéro
\emph default
, dont il est possible de modifier le mode de jeu, le mode d'espace, etc.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="84" columns="4">
<features islongtable="true" longtabularalignment="center">
<column alignment="left" valignment="top" width="1.8cm">
<column alignment="left" valignment="top" width="1.8cm">
<column alignment="left" valignment="top" width="1.8cm">
<column alignment="left" valignment="top" width="6.8cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Numéro
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Nom
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Id.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
None
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
None
\begin_inset Index idx
status open

\begin_layout Plain Layout
None
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Action
\size footnotesize
 neutre
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
1/300
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Auto Play off
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
AutoOff
\begin_inset Index idx
status open

\begin_layout Plain Layout
AutoOff
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Arrêt du mode 
\begin_inset Quotes cld
\end_inset

autoplay
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
2/301
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Auto Play on
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
AutoOn
\begin_inset Index idx
status open

\begin_layout Plain Layout
AutoOn
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Activation du mode 
\begin_inset Quotes cld
\end_inset

autoplay
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
3/302
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Auto Play on/off
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
AutoTgl
\begin_inset Index idx
status open

\begin_layout Plain Layout
AutoTgl
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Toggle (bascule, inversion) du mode 
\begin_inset Quotes cld
\end_inset

autoplay
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
4/303
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Stop all Players
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
PlayStop
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlayStop
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Arrêt de tous les players (le mode 
\begin_inset Quotes cld
\end_inset

autoplay
\begin_inset Quotes crd
\end_inset

 n'est pas modifié)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
5/304
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Stop and Release
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
PlStopR
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlStopR
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Arrêt du mode 
\begin_inset Quotes cld
\end_inset

autoplay
\begin_inset Quotes crd
\end_inset

 et de tous les players.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
6/305
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Display pad #
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
ShowPad
\begin_inset Index idx
status open

\begin_layout Plain Layout
ShowPad
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Affichage sur APC Mini (si connecté/disponible) du numéro de mode (de 0
 à 9, mais seuls 0 à 7 disponibles).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
7/306,
\begin_inset space ~
\end_inset

<gr>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Select Group
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SelGrp
\begin_inset Index idx
status open

\begin_layout Plain Layout
SelGrp
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Passage au groupe 
\begin_inset Quotes cld
\end_inset

gr
\begin_inset Quotes crd
\end_inset

 (utilisé en mode 
\begin_inset Quotes cld
\end_inset

autoplay
\begin_inset Quotes crd
\end_inset

)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
8/307
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Next Group
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
NextGrp
\begin_inset Index idx
status open

\begin_layout Plain Layout
NextGrp
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Passage au groupe suivant.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
9/308
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Temp Play Flags
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
TmpPlFlg
\begin_inset Index idx
status open

\begin_layout Plain Layout
TmpPlFlg
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Selection temporaire d'une combinaison pour les 
\begin_inset Quotes cld
\end_inset

play flags
\begin_inset Quotes crd
\end_inset

, qui est une valeur numérique, indiquant les contraintes suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description

\size footnotesize
1 jouer le clip en entier.
 Le player utilisera des fade-in et fade-out très courts.
\end_layout

\begin_layout Description

\size footnotesize
2 utiliser un fade-in très court, et un fade-out long (de l'ordre de la
 moitié de la longueur du clip)
\end_layout

\begin_layout Description

\size footnotesize
4 jouer à la vitesse 1
\end_layout

\begin_layout Description

\size footnotesize
8 jouer le clip depuis son début
\end_layout

\begin_layout Description

\size footnotesize
16 ne pas appliquer d'échange au hasard dans l'ordre des HP définis dans
 la configuration
\end_layout

\begin_layout Description

\size footnotesize
32 jouer à un volume fixe (moyenne des volumes min et max indiqués dans
 le mode de jeu)
\end_layout

\begin_layout Description

\size footnotesize
64 protéger la lecture de l'extinction par des clips plus récents (c.f.
 331).
\end_layout

\begin_layout Plain Layout

\size footnotesize
Tous ces paramètres peuvent être combinés par addition (1+4=5, jouer le
 clip en entier et à vitesse 1, etc.)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
10/309
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Default Play Flags
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
DefPlFlg
\begin_inset Index idx
status open

\begin_layout Plain Layout
DefPlFlg
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection par défaut d'une combinaison pour les 
\begin_inset Quotes cld
\end_inset

play flags
\begin_inset Quotes crd
\end_inset

 (c.f.
 commande 9/308).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
11/310
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sensor pad 0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SelPad0
\begin_inset Index idx
status open

\begin_layout Plain Layout
SelPad0
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection du pad MIDI 0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
12/311
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sensor pad 1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SelPad1
\begin_inset Index idx
status open

\begin_layout Plain Layout
SelPad1
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection du pad MIDI 1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
13/312
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sensor pad 2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SelPad2
\begin_inset Index idx
status open

\begin_layout Plain Layout
SelPad2
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection du pad MIDI 2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
14/313
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sensor pad 3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SelPad3
\begin_inset Index idx
status open

\begin_layout Plain Layout
SelPad3
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection du pad MIDI 3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
15/314
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sensor pad 4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SelPad4
\begin_inset Index idx
status open

\begin_layout Plain Layout
SelPad4
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection du pad MIDI 4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
16/315
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sensor pad 5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SelPad5
\begin_inset Index idx
status open

\begin_layout Plain Layout
SelPad5
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection du pad MIDI 5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
17/316
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sensor pad 6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SelPad6
\begin_inset Index idx
status open

\begin_layout Plain Layout
SelPad6
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection du pad MIDI 6
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
18/317
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sensor pad 7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SelPad7
\begin_inset Index idx
status open

\begin_layout Plain Layout
SelPad7
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection du pad MIDI 7
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
19/318
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sensor pad next
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SelNxPad
\begin_inset Index idx
status open

\begin_layout Plain Layout
SelNxPad
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Arrêt du mode 
\begin_inset Quotes cld
\end_inset

autoplay
\begin_inset Quotes crd
\end_inset

 et passage au mode MIDI suivant, de manière circulaire (de 2 à 3, de 5
 à 6, de 7 à 0).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
20/319
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sensor pad previous
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SelPrPad
\begin_inset Index idx
status open

\begin_layout Plain Layout
SelPrPad
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Arrêt du mode 
\begin_inset Quotes cld
\end_inset

autoplay
\begin_inset Quotes crd
\end_inset

 et passage au mode MIDI précédent, de manière circulaire (de 2 à 1, de
 5 à 4, de 0 à 7).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
21/320
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Play clip of group
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
PlayGrp
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlayGrp
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Lance le jeu d'un clip du groupe courant
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
22/321,
\begin_inset space ~
\end_inset

<sm>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Select SM [tmp] (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
TempSMd
\begin_inset Index idx
status open

\begin_layout Plain Layout
TempSMd
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection temporaire d'un mode d'espace.
 Le prochain clip à être joué utilisera non pas le mode d'espace associé
 au partiel zéro, mais ce mode d'espace spécifique.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
23/322,
\begin_inset space ~
\end_inset

<pm>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Select PM [tmp] (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
TempPMd
\begin_inset Index idx
status open

\begin_layout Plain Layout
TempPMd
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection temporaire d'un mode de jeu.
 Le prochain clip à être joué utilisera non pas le mode de jeu associé au
 partiel zéro, mais ce mode de jeu spécifique.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
24/323,
\begin_inset space ~
\end_inset

<SM>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Select SM (p0) (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SetSMd
\begin_inset Index idx
status open

\begin_layout Plain Layout
SetSMd
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Le paramètre est un mode d'espace (space mode) qui remplacera la valeur
 correspondante dans le partiel 0.
 Les clips joués ultérieurement le seront donc avec ce space mode spécifique.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
25/324,
\begin_inset space ~
\end_inset

<PM>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Select PM (p0) (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SetPMd
\begin_inset Index idx
status open

\begin_layout Plain Layout
SetPMd
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Le paramètre est un mode de jeu (play mode) qui remplacera la valeur corresponda
nte dans le partiel 0.
 Les clips joués ultérieurement le seront donc avec ce play mode spécifique.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
26/325,
\begin_inset space ~
\end_inset

<hpc>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Select HPset [tmp] (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
TempHPs
\begin_inset Index idx
status open

\begin_layout Plain Layout
TempHPs
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection temporaire d'un numéro de configuration de haut-parleurs.
 Le prochain clip à être joué utilisera non pas la configuration calculée
 en fonction du mode d'espace associé, mais cette configuration spécifique.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
27/326,
\begin_inset space ~
\end_inset

<part>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Select Bank [tmp] (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
TempBnk
\begin_inset Index idx
status open

\begin_layout Plain Layout
TempBnk
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection temporaire d'un numéro de partiel spécifique.
 Le prochain clip à être joué (et seulement celui-ci) utilisera non pas
 la configuration du partiel 0, mais celle de ce partiel spécifique.
 On peut utiliser aussi un ensemble 
\begin_inset Quotes cld
\end_inset

groupe
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

banque
\begin_inset Quotes crd
\end_inset

, sous la forme 
\begin_inset Quotes cld
\end_inset

groupe*1000+banque
\begin_inset Quotes crd
\end_inset

 (ex: 
\family typewriter
201009
\family default
 pour banque 9 du groupe 201)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
28/327,
\begin_inset space ~
\end_inset

<dur>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Select Duration [tmp] (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
TempDur
\begin_inset Index idx
status open

\begin_layout Plain Layout
TempDur
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection temporaire d'une durée (secondes).
 Le prochain clip à être joué n'utilisera pas la valeur du paramètre corresponda
nt, mais cette valeur spécifique.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
29/328,
\begin_inset space ~
\end_inset

<vol>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Select Volume [tmp] (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
TempVol
\begin_inset Index idx
status open

\begin_layout Plain Layout
TempVol
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Variation de volume pour le clip (positive ou négative, exprimée en dB).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
30/329
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Interrupt Cl.
 off
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
NoInterr
\begin_inset Index idx
status open

\begin_layout Plain Layout
NoInterr
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Quotes cld
\end_inset

Verrouillage
\begin_inset Quotes crd
\end_inset

 du prochain clip joué contre l'autostop (réglé par 
\begin_inset Quotes cld
\end_inset

max players
\begin_inset Quotes crd
\end_inset

) par des clips plus récents
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
31/330,
\begin_inset space ~
\end_inset

<dur>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Select Gr.Fades [tmp] (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
TmGraFd
\begin_inset Index idx
status open

\begin_layout Plain Layout
TmGraFd
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection d'une durée (ms) pour les fade-in/fade-out des grains joués en
 mode loop
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
32/331,
\begin_inset space ~
\end_inset

<n>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Set Max Players (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SetMaxP
\begin_inset Index idx
status open

\begin_layout Plain Layout
SetMaxP
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sélection de 
\begin_inset Quotes cld
\end_inset

n
\begin_inset Quotes crd
\end_inset

 players max jouant simultanément, ou, pour n=0, suppression de cette limite
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
33/332, <n1>,
\end_layout

\begin_layout Plain Layout

\size footnotesize
<n2>, …, <n>, -1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Rand.
 Event (...)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
RndEvnt
\begin_inset Index idx
status open

\begin_layout Plain Layout
RndEvnt
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
La commande tire au hasard un numéro de senseur, et insère celui-ci dans
 la file d'entrée des événements, comme si ce capteur venait d'être déclenché.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
34/333, <par>, 
\end_layout

\begin_layout Plain Layout

\size footnotesize
<val>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Set Param (_,_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SetParam
\begin_inset Index idx
status open

\begin_layout Plain Layout
SetParam
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Affectation au paramètre de numéro 
\emph on
par
\emph default
 de la valeur 
\emph on
val
\emph default
.
 La liste des paramètres accessibles, et de leurs numéros, est donnée en
 annexe.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
35/334, <del>, 
\end_layout

\begin_layout Plain Layout

\size footnotesize
0, [...]
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Wait (_,0)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
Wait
\begin_inset Index idx
status open

\begin_layout Plain Layout
Wait
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Le premier paramètre indique un délai en secondes (éventuellement fractionnaire)
, le second est la valeur 0
\begin_inset space ~
\end_inset

; la suite est une liste de commandes, qui sera exécutée au bout du délai
 indiqué.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
36/335, <proba>,
\end_layout

\begin_layout Plain Layout

\size footnotesize
[...]
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Cond.
 exec (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
CondExec
\begin_inset Index idx
status open

\begin_layout Plain Layout
CondExec
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Le paramètre est une probabilité (valeur numérique entre 0 à 1) de poursuivre
 la séquence des commandes.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
37/336
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Log Message 
\begin_inset Quotes cld
\end_inset

...
\begin_inset Quotes crd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
LogMess
\begin_inset Index idx
status open

\begin_layout Plain Layout
LogMess
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Impression d'un message sur le log système.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
38/337
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
SensSet Lock
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SensLokS
\begin_inset Index idx
status open

\begin_layout Plain Layout
SensLokS
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Verrouillage d'un ensemble de senseurs pour une période donnée.
 L'
\begin_inset Quotes cld
\end_inset

ensemble
\begin_inset Quotes crd
\end_inset

 est fourni sous la forme d'une combinaison de bits.
 Pour 
\begin_inset Quotes cld
\end_inset

verrouiller
\begin_inset Quotes crd
\end_inset

 les senseurs 3, 5, 6 et 8 pendant 15 secondes, on peut écrire
\begin_inset space ~
\end_inset

: 
\family typewriter
SensLokS 0/3/5/6/8 15
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
39/337
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Copy Partiel _
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
CopyPart
\begin_inset Index idx
status open

\begin_layout Plain Layout
CopyPart
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Copie d'un partiel, défini par son numéro interne, ou par 
\begin_inset Quotes cld
\end_inset

groupe
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

banque
\begin_inset Quotes crd
\end_inset

 (c.f.
 code 
\begin_inset Quotes cld
\end_inset

27
\begin_inset Quotes crd
\end_inset

), dans le partiel 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
40/341
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Unlock Sensors set
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SendULkS
\begin_inset Index idx
status open

\begin_layout Plain Layout
SendULkS
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Déverrouillage d'un ensemble de senseurs, fourni sous la forme d'une combinaison
 de bits.
 Pour déverrouiller les capteurs 7, 4 et 8, on peut écrire
\begin_inset space ~
\end_inset

: 
\family typewriter
SendULkS 0/7/4/8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
41/340
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Stop and Clear
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
PlStopC
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlStopC
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Arrêt du mode 
\begin_inset Quotes cld
\end_inset

autoplay
\begin_inset Quotes crd
\end_inset

 et de tous les players actifs.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
42/341, <n>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sensor pad #(_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SensPadX
\begin_inset Index idx
status open

\begin_layout Plain Layout
SensPadX
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Arrêt du mode 
\begin_inset Quotes cld
\end_inset

autoplay
\begin_inset Quotes crd
\end_inset

 et changement de mode MIDI.
 La commande attend une valeur numérique, nombre de 0 à 7, qui est le numéro
 du nouveau mode.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
43/342, <s>, <d>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sensor lock (_,_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SensLok2
\begin_inset Index idx
status open

\begin_layout Plain Layout
SensLok2
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Quotes cld
\end_inset

Verrouillage
\begin_inset Quotes crd
\end_inset

 d'un capteur.
 Le capteur de numéro 
\begin_inset Quotes cld
\end_inset

s
\begin_inset Quotes crd
\end_inset

 (1 à 9) est rendu désactivé pour une durée de 
\begin_inset Quotes cld
\end_inset

d
\begin_inset Quotes crd
\end_inset

 secondes (nombre entier ou fractionnaire).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
44/343
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
MIDI Add Dummy
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
MIDAddDu
\begin_inset Index idx
status open

\begin_layout Plain Layout
MIDAddDu
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Opération sans paramètre, qui insère un événement MIDI fictif dans l’historique
 des détections des capteurs.
 Elle permet d’éviter qu’une séquence telle que [1,2] suivie de « 3 » ne
 soit reconnue comme [1,2,3] ou [2,3].
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
45/344
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sensors release
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SensRel
\begin_inset Index idx
status open

\begin_layout Plain Layout
SensRel
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
« déverrouillage » immédiat de tous les capteurs (c.f.
 code 342)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
46/346, <num>, <dur> 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
MIDI Add evnt (_,_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
MIDAddEv
\begin_inset Index idx
status open

\begin_layout Plain Layout
MIDAddEv
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
« déclencher » l’événement « num » (équivalent à « le senseur num a été
 activé ») au bout de « dur » secondes.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
47/346, <z>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Set vol.
 bias (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SetVBias
\begin_inset Index idx
status open

\begin_layout Plain Layout
SetVBias
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Réglage de la vitesse des 
\begin_inset Quotes cld
\end_inset

fade-out
\begin_inset Quotes crd
\end_inset

 en cas d'arrêt : de 0 (très court), à 10 (très long)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
48/347, <v>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Set volume (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SetVol
\begin_inset Index idx
status open

\begin_layout Plain Layout
SetVol
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Réglage du volume global courant (en dB)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
49/348, <d>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sensor lock (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
SensLok1
\begin_inset Index idx
status open

\begin_layout Plain Layout
SensLok1
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Quotes cld
\end_inset

Verrouillage
\begin_inset Quotes crd
\end_inset

 du capteur courant pour une durée de 
\begin_inset Quotes cld
\end_inset

d
\begin_inset Quotes crd
\end_inset

 secondes.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
50/349
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Play clip (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
PlayClip
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlayClip
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Jeu d'un clip.
 Le clip dont le numéro est indiqué sera joué avec les paramètres associés
 au partiel 0, sauf si une commande 
\begin_inset Quotes cld
\end_inset

326
\begin_inset Quotes crd
\end_inset

 antérieure a temporairement changé le numéro de partiel à utiliser comme
 modèle.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
51/350, <cl>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Play cl.
 unmod.
 (_)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
PlayUnmd
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlayUnmd
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Jeu d'un clip.
 Le clip dont le numéro est indiqué sera joué non modifié (vitesse de lecture
 1, etc.)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
52/351, <cl1>, <cl2>, ..., <clN>, 
\end_layout

\begin_layout Plain Layout

\size footnotesize
-1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Play Rand.
 Cl.
 (...)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
PlayRnd
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlayRnd
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
La commande est suivie d'une séquence de numéros de clips (nombre compris
 entre 0 et 9999), terminée par la valeur 
\begin_inset Quotes cld
\end_inset

-1
\begin_inset Quotes crd
\end_inset

.
 La commande va jouer l'un des clips, tirés au hasard, dans la séquence.
 Le clip choisi sera joué avec les paramètres associés au partiel 0 (sauf
 si, comme ci-dessus, une commande 
\begin_inset Quotes cld
\end_inset

326
\begin_inset Quotes crd
\end_inset

 antérieure...).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
53/352, <cl>, <I> 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Play clip (_,Fl)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
PlayFlg
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlayFlg
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Jeu d'un clip, en positionnant des indicateurs spécifiques concernant les
 modes de jeu.
 
\begin_inset Quotes cld
\end_inset

cl
\begin_inset Quotes crd
\end_inset

 est le clip à jouer; 
\begin_inset Quotes cld
\end_inset

I
\begin_inset Quotes crd
\end_inset

 est une valeur numérique (c.f.
 commande 9/308).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
54/353, 0, <cl1>, <cl2>, ..., <clN>, 
\end_layout

\begin_layout Plain Layout

\size footnotesize
-1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Play RR.
 Cl.
 (0,...)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
PlayRndN
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlayRndN
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
La commande est suivie d'un zéro, puis d'une séquence de numéros de clips
 (nombres compris entre 0 et 9999), terminée par la valeur 
\begin_inset Quotes cld
\end_inset

-1
\begin_inset Quotes crd
\end_inset

.
 La commande, à chaque exécution, va jouer le clip suivant de la séquence,
 avec retour au premier en fin de séquence.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
55/354, 0, <cl1>, <cl2>, ..., <clN>, 
\end_layout

\begin_layout Plain Layout

\size footnotesize
-1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Play Seq.
 Cl.
 (0,...)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
PlaySeq
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlaySeq
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
La commande est suivie d'un zéro, puis d'une séquence de numéros de clips
 (nombres compris entre 0 et 9999), terminée par la valeur 
\begin_inset Quotes cld
\end_inset

-1
\begin_inset Quotes crd
\end_inset

.
 La commande, à chaque exécution, va jouer le clip suivant de la séquence,
 mais contrairement à la commande précédente, devient inactive après le
 jeu du dernier clip, chaque clip de la liste ayant été joué, dans l'ordre,
 une fois et une seule.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
56/355, <cnt>, <cl1>, <cl2>, ..., <clN>, -1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Play Ex.
 Cl.
 (0,...)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
PlayExh
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlayExh
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
La commande est suivie d'un compteur (un entier positif), puis d'une séquence
 de numéros de clips (nombres compris entre 0 et 9999), terminée par la
 valeur 
\begin_inset Quotes cld
\end_inset

-1
\begin_inset Quotes crd
\end_inset

.
 La commande va jouer l'un des clips, tiré au hasard, dans la séquence.
 Le clip choisi sera joué avec les paramètres associés au partiel 0 (sauf
 si, comme ci-dessus, une commande 
\begin_inset Quotes cld
\end_inset

326
\begin_inset Quotes crd
\end_inset

...).
 Le compteur est décrémenté à chaque jeu d'un clip, et il n'y a plus de
 jeu de clip lorsque le compteur devient égal à 0.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
57/356, 0, ..., -111
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Play 0,{clips}
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
PlaySet
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlaySet
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
La commande est suivie du nombre 0, puis d'une série de groupes de 4 valeurs,
 représentant
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Enumerate

\size footnotesize
un numéro de clip
\end_layout

\begin_layout Enumerate

\size footnotesize
une durée de verrouillage du senseur (si la valeur est positive)
\end_layout

\begin_layout Enumerate

\size footnotesize
une valeur du volume (en dB)
\end_layout

\begin_layout Enumerate

\size footnotesize
le numéro du partiel à utiliser pour les autres réglages
\end_layout

\begin_layout Plain Layout

\size footnotesize
La commande se termine par la valeur 
\begin_inset Quotes cld
\end_inset

-111
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Plain Layout

\size footnotesize
A chaque exécution, la commande joue le clip suivant, puis devient muette
 lorsque tous les clips ont été joués une fois.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
58/357, n
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Play from Clipset, n
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlFrSet
\end_layout

\end_inset

PlFrSet
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Joue un clip venant du set dont le numéro suit la commande.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
59/358, n, p
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Play from Clipset Limited, n, p
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlFrSetL
\end_layout

\end_inset

PlFrSetL
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Joue un clip venant du set dont le numéro suit la commande.
 Le second paramètre indique le nombre maximal de clips à jouer, après quoi
 la commande devient muette.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
101
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
ASVers
\begin_inset Index idx
status open

\begin_layout Plain Layout
ASVers
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Version du script auxiliaire chargée, ou 0 si aucun script n'est chargé.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
102
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
ASFTrc
\begin_inset Index idx
status open

\begin_layout Plain Layout
ASFTrc
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Traces du script auxiliaire.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
103
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
ASRetX, (X)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
ASRetX
\begin_inset Index idx
status open

\begin_layout Plain Layout
ASRetX
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
\begin_inset Quotes cld
\end_inset

Xème
\begin_inset Quotes crd
\end_inset

 résultat de la dernière exécution du script.
 Une valeur 
\begin_inset Quotes cld
\end_inset

Unavailable
\begin_inset Quotes crd
\end_inset

 indique que l'exécution n'est pas encore terminée.
 
\begin_inset Quotes cld
\end_inset

X
\begin_inset Quotes crd
\end_inset

 peut être compris entre 0 et 3.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
104
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
ASRet
\begin_inset Index idx
status open

\begin_layout Plain Layout
ASRet
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
(premier) Résultat de la dernière exécution du script.
 Une valeur 
\begin_inset Quotes cld
\end_inset

Unavailable
\begin_inset Quotes crd
\end_inset

 indique que l'exécution n'est pas encore terminée.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
105
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
ASWDone
\begin_inset Index idx
status open

\begin_layout Plain Layout
ASWDone
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
(bool) Vrai si la dernière requête envoyée au script est achevée.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
106
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
ASWBusy
\begin_inset Index idx
status open

\begin_layout Plain Layout
ASWBusy
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
(bool) Vrai si le script est en mode 
\begin_inset Quotes cld
\end_inset

délai
\begin_inset Quotes crd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
107
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
Unavail
\begin_inset Index idx
status open

\begin_layout Plain Layout
Unavail
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Fournit la valeur 
\begin_inset Quotes cld
\end_inset

Unavailable
\begin_inset Quotes crd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
111, <v>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
ASSetTr
\begin_inset Index idx
status open

\begin_layout Plain Layout
ASSetTr
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Positionne les traces d'exécution du script.
 Le résultat est la valeur précédente des indicateurs de trace.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
112,<n>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
GoNtMark
\begin_inset Index idx
status open

\begin_layout Plain Layout
GoNtMark
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Aller au nième marqueur dans l'ordre de la lecture.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
113,<m>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\begin_inset Index idx
status open

\begin_layout Plain Layout
GoMark
\end_layout

\end_inset

GoMark
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Aller au marqueur de numéro 
\begin_inset Quotes cld
\end_inset

m
\begin_inset Quotes crd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
114
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
StrtRead
\begin_inset Index idx
status open

\begin_layout Plain Layout
StrtRead
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Jouer à partir de la position du curseur d'édition.
 Interrompt l'enregistrement s'il y en a un en cours.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
115
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
StopRead
\begin_inset Index idx
status open

\begin_layout Plain Layout
StopRead
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Interrompt la lecture ou l'enregistrement en cours.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
116
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
PauzRead
\begin_inset Index idx
status open

\begin_layout Plain Layout
PauzRead
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Toggle pause/play en lecture (ou en enregistrement).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
117
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
GetPPos
\begin_inset Index idx
status open

\begin_layout Plain Layout
GetPPos
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Fournit la position de la tête de lecture REAPER en secondes.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
118
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
GetPPos2
\begin_inset Index idx
status open

\begin_layout Plain Layout
GetPPos2
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Fournit la position en secondes du prochain bloc à lire par REAPER.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
119
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
GetPStat
\begin_inset Index idx
status open

\begin_layout Plain Layout
GetPStat
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Fournit l'état du mode lecture de REAPER.
 Combinaison de:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\size footnotesize
1 Il est en cours de lecture
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\size footnotesize
2 Il est en pause
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\size footnotesize
4 Il est en enregistrement
\end_layout

\begin_layout Plain Layout

\size footnotesize
Le résultat peut donc être:
\end_layout

\begin_layout Description

\size footnotesize
0 A l'arrêt
\end_layout

\begin_layout Description

\size footnotesize
1 En lecture
\end_layout

\begin_layout Description

\size footnotesize
2 En pause durant la lecture
\end_layout

\begin_layout Description

\size footnotesize
5 En enregistrement
\end_layout

\begin_layout Description

\size footnotesize
6 En pause durant l'enregistrement
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
120
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
EdtCurP
\begin_inset Index idx
status open

\begin_layout Plain Layout
EdtCurP
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Fournit (en secondes dans le projet) la position du curseur d'édition de
 REAPER.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
121,<p>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
MvEdPos
\begin_inset Index idx
status open

\begin_layout Plain Layout
MvEdPos
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Déplace la position du curseur d'édition de REAPER à la seconde <p>.
 Si REAPER est en lecture, celle-ci se poursuit à la position courante.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
122,<p>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
MvEdPos2
\begin_inset Index idx
status open

\begin_layout Plain Layout
MvEdPos2
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Déplace la position du curseur d'édition de REAPER à la seconde <p>.
 Si REAPER est en lecture, celle-ci se poursuit à la nouvelle position.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
123
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
MvEdStrt
\begin_inset Index idx
status open

\begin_layout Plain Layout
MvEdStrt
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Positionne le curseur d'édition de REAPER au début du projet.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
124
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
ProjPRat
\begin_inset Index idx
status open

\begin_layout Plain Layout
ProjPRat
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Fournit le 
\begin_inset Quotes cld
\end_inset

play rate
\begin_inset Quotes crd
\end_inset

 courant du projet REAPER: entre 0.25 et 4, 1 pour une vitesse normale, 2
 pour une vitesse double, etc.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
125,<A>
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
ReAct
\begin_inset Index idx
status open

\begin_layout Plain Layout
ReAct
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Exécute une action REAPER.
 <A> est le numéro de l'action, qui doit être un entier entre 0 et 65535.
 C.f.
 le menu 
\begin_inset Quotes cld
\end_inset

Actions
\begin_inset Quotes crd
\end_inset

 de REAPER pour la liste de celles-ci.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
128
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
\size footnotesize
ASStop
\begin_inset Index idx
status open

\begin_layout Plain Layout
ASStop
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Arrêt du script auxiliaire.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Séquences d'actions
\end_layout

\begin_layout Standard
Les différentes procédures qui acceptent ces commandes prennent également
 en compte les 
\emph on
séquences
\emph default
 d'actions.
 Une telle séquence est une suite de commandes, chacune avec ses paramètres,
 la séquence débutant par la taille effective (en nombre d'éléments) de
 la séquence, cette taille n'incluant pas la valeur de la taille (une séquence
 de 2 éléments, 
\begin_inset Quotes cld
\end_inset

A
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

B
\begin_inset Quotes crd
\end_inset

, est donc notée 
\begin_inset Quotes cld
\end_inset

2, A, B
\begin_inset Quotes crd
\end_inset

).
 
\end_layout

\begin_layout Section
Utilisation des actions
\end_layout

\begin_layout Standard
La 
\begin_inset Quotes cld
\end_inset

programmation
\begin_inset Quotes crd
\end_inset

 des senseurs fait appel à nombre de ces commandes.
 On en trouvera des exemples dans le fichier de description 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-Sensors.mSL
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
config-Sensors.mSL
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Fichiers-de-configuration"

\end_inset

Fichiers de configuration
\end_layout

\begin_layout Standard
Ce chapitre aborde les différents fichiers de configuration utiles à l'exécution
 du 
\begin_inset Quotes cld
\end_inset


\series bold
\emph on
Game Master
\series default
\emph default

\begin_inset Quotes crd
\end_inset

.
 A partir de la version 1.5.5, ces fichiers sont décrits en 
\emph on
mSL
\emph default
, le langage de script intégré.
 Les fichiers de configuration écrits dans ce langage utilisent le suffixe
 
\begin_inset Quotes cld
\end_inset


\family typewriter
.mSL
\family default

\begin_inset Quotes crd
\end_inset

 .
\end_layout

\begin_layout Standard
Le langage 
\emph on
mSL
\emph default
, lui-même, est décrit au chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Presentation-mSL"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Rappelons simplement que l'on peut aussi placer dans un fichier de configuratio
n des commentaires, similaires à ceux du langage 
\begin_inset Quotes cld
\end_inset

C
\begin_inset Quotes crd
\end_inset

, qui, pour un commentaire de ligne, débutent par la séquence de caractères
 
\begin_inset Quotes cld
\end_inset


\family typewriter
//
\family default

\begin_inset Quotes crd
\end_inset

 et se terminent à la fin de la ligne, et qui, pour un commentaire de bloc,
 débutent par la séquence de caractères 
\begin_inset Quotes cld
\end_inset


\family typewriter
/*
\family default

\begin_inset Quotes crd
\end_inset

 et se terminent par la séquence de caractères 
\begin_inset Quotes cld
\end_inset


\family typewriter
*/
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Tous les fichiers du système se définissent au moyen d'une même fonction,
 de nom 
\begin_inset Quotes cld
\end_inset


\family typewriter
table
\begin_inset Index idx
status open

\begin_layout Plain Layout
table
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, qui prend un tableau comme paramètre.
 En général, ce tableau est lui-même défini sous une forme symbolique, décrite
 ci-dessous, au moyen d'une directive 
\begin_inset Quotes cld
\end_inset


\family typewriter
data
\begin_inset Index idx
status open

\begin_layout Plain Layout
data
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
 La syntaxe des fichiers est relativement simple, et consiste en une séquence
 de mots-clefs et de valeurs numériques.
 
\end_layout

\begin_layout Section
Les listes de fichiers de configuration
\end_layout

\begin_layout Standard
Le concept des fichiers de configuration a déjà été évoqué au § 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:IASIAS"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Les deux fichiers 
\family typewriter
GM_txt_configs.txt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GM_txt_configs.txt
\end_layout

\end_inset


\family default
 et 
\family typewriter
GM_mSL_scripts.txt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
GM_mSL_scripts.txt
\end_layout

\end_inset


\family default
 peuvent être générés automatiquement par le script, 
\begin_inset Quotes cld
\end_inset


\family typewriter
mkConfigs.sh
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mkConfigs.sh
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, ou encore peuvent être édités manuellement au moyen d'un utilitaire tel
 que 
\begin_inset Quotes cld
\end_inset

TextEdit
\begin_inset Quotes crd
\end_inset

 sous Mac.
 Ces fichiers peuvent dès lors être sélectionnés directement grâce au menu
 de choix de scripts.
 Une autre méthode pour lire un fichier consiste à faire un 
\emph on
glisser-déposer
\begin_inset Index idx
status open

\begin_layout Plain Layout
glisser-déposer
\end_layout

\end_inset


\emph default
 du fichier depuis une fenêtre du finder/explorer jusqu'à la fenêtre du
 Game Master.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Syntaxe-de-data"

\end_inset

Syntaxe de la commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
data
\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
La commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
\series bold
data
\begin_inset Index idx
status open

\begin_layout Plain Layout
data
\end_layout

\end_inset


\family default
\series default

\begin_inset Quotes crd
\end_inset

 est suivie d'une liste d'éléments placés entre parenthèses.
 Tous ces éléments sont des 
\emph on
constantes
\emph default
 du langage 
\begin_inset Quotes cld
\end_inset

mSL
\begin_inset Quotes crd
\end_inset

, c'est-à-dire des nombres ou des chaînes de caractères.
 
\end_layout

\begin_layout Itemize
Les chaînes de caractères sont représentées par une suite de caractères
 placée entre doubles quotes 
\begin_inset Quotes cld
\end_inset


\family typewriter
"
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
Les nombres sont représentés:
\end_layout

\begin_deeper
\begin_layout Itemize
par des notations traditionnelles (flottants, entiers représentés en décimal,
 hexadécimal ou en binaire);
\end_layout

\begin_layout Itemize
par la codification depuis l'ASCII d'une séquence de 1 à 4 caractères, placée
 entre quotes simples 
\begin_inset Quotes cld
\end_inset


\family typewriter
'
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
par une codification interne représentant les identificateurs 
\emph on
mSL
\emph default
.
 Ainsi, à l'intérieur d'un 
\begin_inset Quotes cld
\end_inset

data
\begin_inset Quotes crd
\end_inset

, le mot 
\begin_inset Quotes cld
\end_inset

toto
\begin_inset Quotes crd
\end_inset

 est représenté par la codification interne du symbole 
\emph on
toto
\emph default
.
 Attention, la 
\emph on
casse
\emph default
 des caractères est significative
\begin_inset space ~
\end_inset

!
\end_layout

\begin_layout Itemize
par certaines notations reconnues uniquement à l'intérieur d'une séquence
 
\begin_inset Quotes cld
\end_inset


\emph on
data
\emph default

\begin_inset Quotes crd
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
une valeur numérique précédée du caractère 
\begin_inset Quotes cld
\end_inset


\family typewriter
-
\family default

\begin_inset Quotes crd
\end_inset

 est codifiée comme l'opposé de cette valeur numérique.
\end_layout

\begin_layout Itemize
deux valeurs numériques séparées par le caractère 
\begin_inset Quotes cld
\end_inset

+
\begin_inset Quotes crd
\end_inset

 sont remplacées par leur somme.
\end_layout

\begin_layout Itemize
deux valeurs numériques séparées par le caractère 
\begin_inset Quotes cld
\end_inset


\family typewriter
|
\family default

\begin_inset Quotes crd
\end_inset

 sont remplacées par leur 
\begin_inset Quotes cld
\end_inset

ou
\begin_inset Quotes crd
\end_inset

 logique.
\end_layout

\begin_layout Itemize
deux valeurs numériques séparées par le caractère 
\begin_inset Quotes cld
\end_inset


\family typewriter
&
\family default

\begin_inset Quotes crd
\end_inset

 sont remplacées par leur 
\begin_inset Quotes cld
\end_inset

et
\begin_inset Quotes crd
\end_inset

 logique.
\end_layout

\begin_layout Itemize
deux valeurs numériques séparées par le caractère 
\begin_inset Quotes cld
\end_inset


\family typewriter
/
\family default

\begin_inset Quotes crd
\end_inset

 sont considérées comme des numéros de bits dans un entier.
 Le résultat est l'entier dont les bits correspondants sont mis à 1.
 Ainsi, 
\begin_inset Quotes cld
\end_inset


\family typewriter
6/2/0
\family default

\begin_inset Quotes crd
\end_inset

 est calculé comme 
\begin_inset Quotes cld
\end_inset


\family typewriter
2^6|2^2|2^0
\family default

\begin_inset Quotes crd
\end_inset

, fournissant la valeur 
\begin_inset Quotes cld
\end_inset


\family typewriter
64|2|1
\family default

\begin_inset Quotes crd
\end_inset

, soit 
\begin_inset Quotes cld
\end_inset


\family typewriter
67
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
Les éléments de ces listes peuvent être séparés par des virgules 
\begin_inset Quotes cld
\end_inset


\family typewriter
,
\family default

\begin_inset Quotes crd
\end_inset

 ou des espaces (blanc, tabulation, passage à la ligne, etc.).
 Il est possible de placer, à l'intérieur d'une commande 
\emph on
data
\emph default
, des commentaires de ligne (débutant par 
\begin_inset Quotes cld
\end_inset


\family typewriter
//
\family default

\begin_inset Quotes crd
\end_inset

) ou des commentaires de blocs (encadrés par 
\begin_inset Quotes cld
\end_inset


\family typewriter
/*
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
*/
\family default

\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Configuration-des-canaux-hp"

\end_inset

Configuration des canaux/haut-parleurs
\end_layout

\begin_layout Standard
Les configurations de canaux (et, a priori, de haut-parleurs) définissent
 des zones logiques ou physiques relatives au lieu d'écoute
\begin_inset space ~
\end_inset

: des localisations quasi géographiques, liées à une position et une orientation
 supposées de l'auditeur, telles la gauche, la droite, l'avant, l'arrière,
 le haut, le bas, et leurs combinatoires, des localisations conceptuelles,
 telles un point isolé, un cluster de haut-parleurs, un groupe de haut-parleurs
 distants les uns des autres, ou encore des combinaisons de ces différentes
 approches, comme une ligne horizonale ou verticale de haut-parleurs, etc.
\end_layout

\begin_layout Standard
Ces configurations sont décrites dans un fichier externe, de nom 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-HP.mSL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
config-HP.mSL
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 (nom par défaut, mais tout autre nom de fichier est acceptable).
 Chaque configuration précise le nombre de HP qu'elle décrit (entre 1 et
 64).
 Les configurations sont classées implicitement et informellement en catégories,
 repérées par un chiffre 
\begin_inset Quotes cld
\end_inset

rond
\begin_inset Quotes crd
\end_inset

 de centaine.
 On peut par exemple décider que 
\begin_inset Quotes cld
\end_inset

101
\begin_inset Quotes crd
\end_inset

 et suivants sont les haut-parleurs les plus 
\begin_inset Quotes cld
\end_inset

proches
\begin_inset Quotes crd
\end_inset

 d'un point donné, 
\begin_inset Quotes cld
\end_inset

201
\begin_inset Quotes crd
\end_inset

 et suivants les haut-parleurs les plus 
\begin_inset Quotes cld
\end_inset

éloignés
\begin_inset Quotes crd
\end_inset

 d'un point donné, etc.
\end_layout

\begin_layout Standard
Il est possible de décrire un nombre arbitraire de configurations, mais
 tous les numéros de 0 à 100000 n'ont pas nécessairement à être utilisés,
 et les configurations décrites n'ont pas à porter des numéros consécutifs.
 Par exemple, si l'on utilise une configuration non définie (disons 
\begin_inset Quotes cld
\end_inset

683
\begin_inset Quotes crd
\end_inset

), le système va utiliser une configuration valide, tirée au hasard dans
 la même catégorie 
\begin_inset Quotes cld
\end_inset

600
\begin_inset Quotes crd
\end_inset

, telle que 643 ou 627.
 Pour rendre les choses explicites, on utilisera par exemple 
\begin_inset Quotes cld
\end_inset

100
\begin_inset Quotes crd
\end_inset

 pour désigner un ensemble, choisi au hasard, de HP groupés, 
\begin_inset Quotes cld
\end_inset

700
\begin_inset Quotes crd
\end_inset

 pour désigner un ensemble, choisi au hasard, de 8 HP dispersés, etc.
 – si ces valeurs correspondent à la convention que vous avez adoptée, bien
 sûr.
 
\end_layout

\begin_layout Standard
Il est ainsi possible, en fonction de ses envies, de créer nombre de configurati
ons, classiques, ou non
\begin_inset space ~
\end_inset

: cubes, quads, octophonies diverses, cercles, dômes, plans, etc.
\end_layout

\begin_layout Standard
La syntaxe du fichier 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-HP.mSL
\family default

\begin_inset Quotes crd
\end_inset

 est particulièrement simple.
 Il débute par deux lignes contenant:
\end_layout

\begin_layout LyX-Code
table(data(
\end_layout

\begin_layout LyX-Code
   Table HPConf Clear
\end_layout

\begin_layout Standard
et se termine par une ligne contenant:
\end_layout

\begin_layout LyX-Code
End ));
\end_layout

\begin_layout Standard
Les deux premières lignes correspondent à un appel de la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
table
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
table
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 dont le rôle est de définir une structure de données du Game Master, fonction
 qui prend comme paramètre le résultat de la directive 
\begin_inset Quotes cld
\end_inset


\family typewriter
data
\begin_inset Index idx
status open

\begin_layout Plain Layout
data
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 qui permet de définir un tableau de nombres, correspondant à la description
 des données destinées à cette fonction 
\family typewriter
table
\family default
.
 Cette description débute par le mot-clef 
\begin_inset Quotes cld
\end_inset


\family typewriter
Table
\begin_inset Index idx
status open

\begin_layout Plain Layout
Table
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, qui indique qu'une des tables du système va être modifiée, du nom de cette
 table, ici 
\begin_inset Quotes cld
\end_inset


\family typewriter
HPConf
\begin_inset Index idx
status open

\begin_layout Plain Layout
HPConf
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, et enfin (c'est optionnel) du mot-clef 
\begin_inset Quotes cld
\end_inset


\family typewriter
Clear
\begin_inset Index idx
status open

\begin_layout Plain Layout
Clear
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, demandant à ce que cette table soit réinitialisée avant de recevoir de
 nouvelles données.
 Il est possible également de placer une commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
FIdent
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
FIdent
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

, suivi d'un nombre entier, qui permet de préciser l'indice d'évolution
 du fichier sous une forme hiérarchique, en version, sous-version (de 0
 à 99), évolution (de 0 à 99), calculé par la formule 
\begin_inset Quotes cld
\end_inset

version * 10000 + sous-version * 100 + évolution
\begin_inset Quotes crd
\end_inset

.
 La version 3, sous-version 2, évolution 7 se notera ainsi 30207.
 A la place de 
\begin_inset Quotes cld
\end_inset


\family typewriter
Clear
\family default

\begin_inset Quotes crd
\end_inset

, il est possible d'utiliser 
\begin_inset Quotes cld
\end_inset


\family typewriter
Default
\begin_inset Index idx
status open

\begin_layout Plain Layout
Default
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, qui va créer quelques entrées appropriées à une configuration Stéréo.
\end_layout

\begin_layout Standard
L'épilogue contient le mot clef 
\begin_inset Quotes cld
\end_inset


\family typewriter
End
\begin_inset Index idx
status open

\begin_layout Plain Layout
End
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, qui indique que l'on a terminé la description des données.
 La dernière ligne contient deux parenthèses fermantes et un point-virgule,
 nécessaires pour respecter la syntaxe du langage 
\emph on
mSL
\emph default
.
\end_layout

\begin_layout Standard
Entre les deux, se trouve la description des configurations de haut-parleurs,
 dont chacune est réalisée par une séquence de nombres entiers, séparés
 les uns des autres par une virgule, un espace ou un passage à la ligne.
 Le premier de ces nombres est une identification de la configuration, valeur
 comprise entre 0 et une valeur maximale relativement élevée (dépendant
 de la configuration du 
\begin_inset Quotes cld
\end_inset

Game Master
\begin_inset Quotes crd
\end_inset

, par exemple, 2000), qui doit être unique.
 Le second est le nombre de haut-parleurs décrits par la configuration,
 un entier 
\begin_inset Quotes cld
\end_inset


\emph on
N
\emph default

\begin_inset Quotes crd
\end_inset

 compris entre 1 et 64.
 Il est suivi par la liste de 
\begin_inset Quotes cld
\end_inset


\emph on
N
\emph default

\begin_inset Quotes crd
\end_inset

 éléments des numéros (1 à 64) des haut-parleurs de la configuration.
 Enfin, un nombre supplémentaire, égal à 0, indique la fin de la description
\begin_inset Foot
status open

\begin_layout Plain Layout
Il y a une redondance dans le fait de préciser le nombre de haut-parleurs,
 avant d'en donner leur liste, et le fait d'ajouter un 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 après cette liste, mais cette précaution permet de déceler au plus vite
 les erreurs dans la description des configurations.
\end_layout

\end_inset

.
 Une configuration de 
\begin_inset Quotes cld
\end_inset


\emph on
N
\emph default

\begin_inset Quotes crd
\end_inset

 HP nécessite donc 
\begin_inset Quotes cld
\end_inset


\emph on
N+3
\emph default

\begin_inset Quotes crd
\end_inset

 valeurs.
 Voici un exemple de 3 configurations, extraites d'un fichier décrivant
 une installation spécifique
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
39, 1, 39, 0,
\end_layout

\begin_layout LyX-Code
610, 5, 
\end_layout

\begin_layout LyX-Code
    10, 1, 5, 47, 52, 0, 
\end_layout

\begin_layout LyX-Code
1201, 4,  // La configuration 1201 comporte 4 HP
\end_layout

\begin_layout LyX-Code
    1, 3, 8, 10, // ce sont les HP 1, 3, 8 et 10
\end_layout

\begin_layout LyX-Code
    0,   // on termine par un zéro.
 
\end_layout

\begin_layout Standard
La première, de numéro 
\begin_inset Quotes cld
\end_inset

39
\begin_inset Quotes crd
\end_inset

, décrit une configuration d'un seul haut-parleur, le numéro 
\begin_inset Quotes cld
\end_inset

39
\begin_inset Quotes crd
\end_inset

, justement.
 La seconde, de numéro 
\begin_inset Quotes cld
\end_inset

610
\begin_inset Quotes crd
\end_inset

, décrit une configuration de 5 HP éloignés les uns des autres, contenant
 le HP 10.
 La dernière enfin, de numéro 
\begin_inset Quotes cld
\end_inset

1201
\begin_inset Quotes crd
\end_inset

, décrit une configuration contenant les HP situés aux quatre coins du bas
 de la salle.
 On notera que le format est libre, que les virgules sont facultatives,
 les indentations et passages à la ligne permettant de rendre plus claire
 la description des données.
 Les numéros des configurations n'ont pas à être successifs, et les configuratio
ns peuvent être décrites dans un ordre arbitraire.
\end_layout

\begin_layout Standard
Ces numéros de configuration sont utilisées dans un autre fichier, qui décrit
 les 
\begin_inset Quotes cld
\end_inset

Modes d'espace
\begin_inset Quotes crd
\end_inset

 (c.f.
 paragraphe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Modes-d-espace"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
Le fichier est lu à l'ouverture du 
\begin_inset Quotes cld
\end_inset

Game Master
\begin_inset Quotes crd
\end_inset

, mais peut à tout moment être modifié au moyen d'un éditeur externe et
 être rechargé depuis le logiciel, sans interrompre ce dernier.
\end_layout

\begin_layout Section
Configuration des clips
\end_layout

\begin_layout Standard
Les clips sont localisés dans un répertoire spécifique, de nom, par défaut,
 
\begin_inset Quotes cld
\end_inset

WAVES
\begin_inset Quotes crd
\end_inset

.
 Le fichier de configuration des clips va permettre d'associer à chaque
 clip un réglage de volume.
 Ces informations sont décrites dans un fichier, de nom 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-Clips.mSL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
config-Clips.mSL
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
La syntaxe des opérations est la suivante :
\end_layout

\begin_layout Description

\family typewriter
Clear
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Clear
\end_layout

\end_inset

 indique que l'on veut réinitialiser toutes les informations concernant
 les clips.
\end_layout

\begin_layout Description

\family typewriter
FIdent
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
FIdent
\end_layout

\end_inset

 suivi d'un nombre entier permet de préciser l'indice d'évolution du fichier
 sous une forme hiérarchique, en version, sous-version (de 0 à 99), évolution
 (de 0 à 99), calculé par la formule 
\begin_inset Quotes cld
\end_inset

version * 10000 + sous-version * 100 + indice
\begin_inset Quotes crd
\end_inset

.
 La version 3, sous-version 2, évolution 7 se notera ainsi 30207.
\end_layout

\begin_layout Description

\family typewriter
ClipDir
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ClipDir
\end_layout

\end_inset

 suivi d'une chaîne de caractères (placée entre doubles quotes) indique
 le nom du répertoire où se situent les clips.
 Ce répertoire est en général un sous-répertoire de 
\begin_inset Quotes cld
\end_inset


\family typewriter
Data
\family default

\begin_inset Quotes crd
\end_inset

 contenu dans le répertoire système des resources de REAPER, ou un sous-répertoi
re de 
\begin_inset Quotes cld
\end_inset


\family typewriter
Data
\family default

\begin_inset Quotes crd
\end_inset

 contenu dans le répertoire du projet courant.
\end_layout

\begin_layout Description

\family typewriter
ClipFmt
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ClipFmt
\end_layout

\end_inset

 suivi d'une chaîne de caractères (placée entre doubles quotes) décrit la
 syntaxe des noms des clips.
 Sa valeur par défaut est 
\begin_inset Quotes cld
\end_inset


\family typewriter
"clip1%04d.%s"
\family default

\begin_inset Quotes crd
\end_inset

.
 Le segment 
\begin_inset Quotes cld
\end_inset

%04d
\begin_inset Quotes crd
\end_inset

 dont la présence est obligatoire, indique que l'édition du numéro de clip
 se fera sur 4 chiffres, complétés par des zéros.
 Le suffixe 
\begin_inset Quotes cld
\end_inset

%s
\begin_inset Quotes crd
\end_inset

, qui décrit l'édition d'une chaîne de caractères, va permettre au logiciel
 de placer l'extension appropriée au type de fichier (
\begin_inset Quotes cld
\end_inset

wav
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

aiff
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

flac
\begin_inset Quotes crd
\end_inset

, etc.).
\end_layout

\begin_layout Description

\family typewriter
ClVol
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ClVol
\end_layout

\end_inset

 suivi d'une valeur en décibels, définit le changement de volume appliqué
 à tous les numéros de clips qui suivent.
\end_layout

\begin_layout Description

\family typewriter
ClRange
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ClRange
\end_layout

\end_inset

 suivi de deux numéros de clips, va appliquer le changement de volume à
 tous les clips compris dans l'intervalle défini par ces deux numéros.
\end_layout

\begin_layout Description
Un
\begin_inset space ~
\end_inset

nombre indique un numéro de clip.
\end_layout

\begin_layout Standard
Les commandes 
\family typewriter
Clear
\family default
, 
\family typewriter
ClipDir
\family default
, 
\family typewriter
ClipFmt
\family default
 et 
\family typewriter
FIdent
\family default
 seront typiquement utilisées une fois au plus, et apparaîtront en tête.
 Voici un exemple de contenu du fichier
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
/* Configuration des clips */
\end_layout

\begin_layout LyX-Code
table(data(
\end_layout

\begin_layout LyX-Code
   Table Clips Clear
\end_layout

\begin_layout LyX-Code
      ClVol -3    // volume courant à -3 dB 
\end_layout

\begin_layout LyX-Code
      ClRange 7200 7257 // pour les clips 7200 à 7257
\end_layout

\begin_layout LyX-Code
      ClVol -2.5 7260 7261 // volume à -2.5dB pour 
\end_layout

\begin_layout LyX-Code
      7266 7281 7252 7721 7726 // ces clips-ci 
\end_layout

\begin_layout LyX-Code
      7712 7742 7743 7751 // et ceux-ci également
\end_layout

\begin_layout LyX-Code
      ClVol -4 7264 33 21 325// -4 dB
\end_layout

\begin_layout LyX-Code
      ClVol 3 6602 2510 2514 2517 2518 2524 2525
\end_layout

\begin_layout LyX-Code
      ClVol -12 2358 ClVol -9 2359 2363 2364
\end_layout

\begin_layout LyX-Code
      ClVol 10 6609  
\end_layout

\begin_layout LyX-Code
      // boost +9 dB des 2000 premiers clips
\end_layout

\begin_layout LyX-Code
      ClVol 9 ClRange 0 1999 
\end_layout

\begin_layout LyX-Code
      ClVol 8 6611 ClVol 7 521 6604
\end_layout

\begin_layout LyX-Code
   End
\end_layout

\begin_layout LyX-Code
)); 
\end_layout

\begin_layout Standard
On notera, comme dans la descriptions des autres fichiers de configuration,
 que le fichier débute par le prologue habituel
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
table(data(
\end_layout

\begin_layout LyX-Code
   Table Clips Clear
\end_layout

\begin_layout Standard
et se termine, de même, par l'épilogue
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
   End
\end_layout

\begin_layout LyX-Code
)); 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Configuration-des-ClipSets"

\end_inset

Configuration des ClipSets
\begin_inset Index idx
status open

\begin_layout Plain Layout
ClipSets (configuration)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Les ClipSets sont définis par un fichier externe, de nom 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-ClSets.mSL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
config-ClSets.mSL
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 (nom par défaut, mais tout autre nom de fichier est acceptable).
 Un 
\emph on
ensemble
\emph default
 de clips (
\begin_inset Quotes cld
\end_inset


\emph on
Set
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set
\end_layout

\end_inset


\emph default

\begin_inset Quotes crd
\end_inset

) est repéré par un numéro, compris entre 0 et 999, choisi par l'utilisateur,
 mais tous les numéros n'ont pas nécessairement à être utilisés, et les
 configurations décrites n'ont pas à porter des numéros consécutifs.
 La syntaxe du fichier 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-ClSets.mSL
\family default

\begin_inset Quotes crd
\end_inset

 est relativement simple.
 Le fichier débute par deux lignes contenant:
\end_layout

\begin_layout LyX-Code
table(data(
\end_layout

\begin_layout LyX-Code
    Table ClipSets Clear
\end_layout

\begin_layout Standard
et se termine par une ligne contenant:
\end_layout

\begin_layout LyX-Code
End ));
\end_layout

\begin_layout Standard
Les deux premières lignes correspondent à un appel de la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
table
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
table
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 dont le rôle est de définir une structure de données du Game Master, fonction
 qui prend comme paramètre le résultat de la directive 
\begin_inset Quotes cld
\end_inset


\family typewriter
data
\begin_inset Index idx
status open

\begin_layout Plain Layout
data
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 qui permet de définir un tableau de nombres, correspondant à la description
 des données destinées à cette fonction 
\family typewriter
table
\family default
.
 Cette description débute par le mot-clef 
\begin_inset Quotes cld
\end_inset


\family typewriter
Table
\begin_inset Index idx
status open

\begin_layout Plain Layout
Table
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, qui indique qu'une des tables du système va être modifiée, suivi du nom
 de cette table, ici 
\begin_inset Quotes cld
\end_inset


\family typewriter
ClipSets
\begin_inset Index idx
status open

\begin_layout Plain Layout
ClipSets
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, et enfin (c'est optionnel) du mot-clef 
\begin_inset Quotes cld
\end_inset


\family typewriter
Clear
\begin_inset Index idx
status open

\begin_layout Plain Layout
Clear
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, demandant à ce que cette table soit réinitialisée avant de recevoir de
 nouvelles données.
 Il est possible également de placer une commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
FIdent
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
FIdent
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

, suivie d'un nombre entier, qui permet de préciser l'indice d'évolution
 du fichier sous une forme hiérarchique, en version, sous-version (de 0
 à 99), évolution (de 0 à 99), calculé par la formule 
\begin_inset Quotes cld
\end_inset

version * 10000 + sous-version * 100 + indice
\begin_inset Quotes crd
\end_inset

.
 La version 3, sous-version 2, évolution 7 se notera ainsi 30207.
 
\end_layout

\begin_layout Standard
L'épilogue contient le mot clef 
\begin_inset Quotes cld
\end_inset


\family typewriter
\series bold
End
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
End
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, qui indique que l'on a terminé la description des données.
 La dernière ligne contient deux parenthèses fermantes et un point-virgule,
 nécessaires pour respecter la syntaxe du langage 
\emph on
mSL
\emph default
.
\end_layout

\begin_layout Standard
Entre les deux, se trouve la description des configurations d'ensembles
 de clips.
 Une description débute par le mot clef 
\begin_inset Quotes cld
\end_inset


\family typewriter
Set
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, suivi du numéro (0 à 999) du 
\emph on
set
\emph default
 que l'on va définir.
 Ce numéro ne doit pas avoir déjà été utilisé dans les descriptions antérieures
 de ce fichier.
 Le numéro est suivi d'un type d'algorithme de sélection d'un clip dans
 l'ensemble décrit.
 Imaginons un ensemble qui va contenir 200 clips, numérotés de 0 à 199.
 Les algorithmes disponibles sont désignés par un mot-clef, qui est l'un
 des suivants:
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\family typewriter
\series bold
RR
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
RR
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, 
\emph on
Round Robin
\begin_inset Index idx
status open

\begin_layout Plain Layout
Round Robin
\end_layout

\end_inset


\emph default
 : les clips vont être délivrés en ordre séquentiel, du numéro 0 au numéro
 199, puis repartir du numéro 0.
 Tous les clips sont donc utilisés, à une différence de 1 près, un nombre
 égal de fois.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\family typewriter
\series bold
ARR
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
ARR
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, 
\emph on
Alternate Round Robin
\begin_inset Index idx
status open

\begin_layout Plain Layout
Alternate Round Robin
\end_layout

\end_inset


\emph default
 : les clips vont être délivrés en ordre séquentiel inverse, du numéro 199
 au numéro 0, puis repartir du numéro 199.
 Tous les clips sont donc utilisés, à une différence de 1 près, un nombre
 égal de fois.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\family typewriter
\series bold
RRR
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
RRR
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, 
\emph on
Random Round Robin
\begin_inset Index idx
status open

\begin_layout Plain Layout
Random Round Robin
\end_layout

\end_inset


\emph default
 : les clips vont être délivrés en ordre aléatoire, mais vont être utilisés,
 à une différence de 1 près, un nombre égal de fois.
 Un clip ne sera fourni une seconde fois que quand tous les autres clips
 auront été fournis au moins une fois.
 Cet ordre aléatoire sera différent pour chaque cycle recouvrant l'ensemble
 des clips.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\family typewriter
\series bold
Random
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Random
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

: Les clips sont délivrés dans un ordre purement aléatoire.
 La répartition suit une loi de Gauss, et ainsi, sur 1000 tirages parmi
 les 200 clips de notre exemple, beaucoup de clips seront tirés 5 fois,
 moins de clips sortiront 4 ou 6 fois, peu d'entre eux 0, 1, ou encore 9
 fois ou plus.
\end_layout

\begin_layout Standard
Si le type d'algorithme n'est pas spécifié, c'est 
\begin_inset Quotes cld
\end_inset


\emph on
Random Round Robin
\emph default

\begin_inset Quotes crd
\end_inset

 qui est utilisé par défaut.
\end_layout

\begin_layout Standard
Ce mot-clef peut événtuellement être suivi de 
\begin_inset Quotes cld
\end_inset


\family typewriter
PLUC
\begin_inset Index idx
status open

\begin_layout Plain Layout
PLUC
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 (acronyme de 
\emph on

\begin_inset Quotes cld
\end_inset

Prefer Less Used Clips
\emph default

\begin_inset Quotes crd
\end_inset

), demandant au 
\emph on
clipset
\emph default
 de fournir de préférence les clips les moins utilisés.
 A quoi sert cette précision, alors que l'on dispose déjà d'algorithmes
 de 
\emph on
Round Robin
\emph default
 garantissant un tirage équitable des clips ? La différence est la suivante:
\end_layout

\begin_layout Itemize
Les 
\emph on
Round Robin
\emph default
 vont utiliser les clips de manière équitable, 
\emph on
indépendamment
\emph default
 du nombre de fois où ils ont été antérieurement exécutés.
 Ainsi, si dans un ensemble de clips, les 
\emph on
min
\emph default
 et 
\emph on
max
\emph default
 d'utilisation sont 0 et 10, après nombre de tirages, ces 
\emph on
min
\emph default
 et 
\emph on
max
\emph default
 seront peut-être devenus 4 et 14, avec toujours le même écart entre 
\emph on
min
\emph default
 et 
\emph on
max
\emph default
.
\end_layout

\begin_layout Itemize
Avec l'option 
\begin_inset Quotes cld
\end_inset


\family typewriter
PLUC
\family default

\begin_inset Quotes crd
\end_inset

 et une même configuration initiale, le logiciel va tenir compte de l'
\emph on
utilisation antérieure
\emph default
 des clips, et ces valeurs 
\emph on
min
\emph default
 et 
\emph on
max
\emph default
 deviendront peut-être 11 et 12.
\end_layout

\begin_layout Standard
Après cet en-tête, on peut trouver (en nombre et en ordre arbitraires) les
 commandes suivantes :
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\family typewriter
\series bold
Clips
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Clips
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
Clps
\begin_inset Index idx
status open

\begin_layout Plain Layout
Clps
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 : introduit une liste de clips qui feront partie de l'ensemble défini.
 La liste peut comporter jusqu'à 1000 clips.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\family typewriter
\series bold
ClRange
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
ClRange
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
Range
\begin_inset Index idx
status open

\begin_layout Plain Layout
Range
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 : introduit deux numéros de clips, 
\emph on
p
\emph default
 et 
\emph on
q
\emph default
, tous les numéros de clips compris entre 
\emph on
p
\emph default
 et 
\emph on
q
\emph default
 inclus feront partie de l'ensemble défini.
 
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\family typewriter
\series bold
Copy
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Copy
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
Idem
\begin_inset Index idx
status open

\begin_layout Plain Layout
Idem
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 : permet de recopier dans le set courant tous les éléments du set précisé
 après ce mot-clef.
 Ce numéro du set est compris entre 0 et 999, et doit être déjà défini par
 une description antérieure.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\family typewriter
\series bold
Xclude
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Xclude
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
Xcept
\begin_inset Index idx
status open

\begin_layout Plain Layout
Xcept
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 : permet d'indiquer une liste de clips qui seront explicitement exclus
 de l'ensemble défini.
 Cette exclusion s'applique aux clips déjà existant dans le set courant.
 Des clips exclus par cette commande peuvent être (volontairement ou non)
 réintroduits par une commande ultérieure.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\family typewriter
\series bold
MinDur
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
MinDur
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, pour 
\emph on
Minimum Duration
\emph default
.
 Ce mot-clef est suivi d'une valeur en secondes (comme 0.25 ou 15), qui indique
 que les clips lus à vitesse normale d'une durée inférieure à celle-ci ne
 seront pas conservés dans le 
\emph on
set
\emph default
.
 Défault : 0.001.
 Il s'agit d'une valeur gobale, s'appliquant à tous les clips du set.
\end_layout

\begin_layout Itemize
\begin_inset Quotes cld
\end_inset


\family typewriter
\series bold
MaxDur
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
MaxDur
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, pour 
\emph on
Maximum Duration
\emph default
.
 Ce mot-clef est suivi d'une valeur en secondes (comme 10.5 ou 45), qui indique
 que les clips lus à vitesse normale d'une durée supérieure à celle-ci ne
 seront pas conservés dans le 
\emph on
set
\emph default
.
 Défaut : 3600.
 Il s'agit d'une valeur gobale, s'appliquant à tous les clips du set.
\end_layout

\begin_layout Standard
La description d'un set se termine lorsque l'un des mots-clefs 
\begin_inset Quotes cld
\end_inset


\family typewriter
Set
\family default

\begin_inset Quotes crd
\end_inset

 (annonçant la description d'un nouvel ensemble) ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
End
\family default

\begin_inset Quotes crd
\end_inset

 (terminant la description de la table des ClipSets) est rencontré.
 Notons que, comme le suggère le mot 
\begin_inset Quotes cld
\end_inset


\emph on
Set
\emph default

\begin_inset Quotes crd
\end_inset

, tous les clips d'un tel ensemble sont différents.
 Notons aussi qu'il n'est pas équivalent d'utiliser, dans des partiels différent
s (c.f.
 §
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Banques-format"
plural "false"
caps "false"
noprefix "false"

\end_inset

) le même numéro de 
\emph on
set
\emph default
 ou des 
\emph on
set
\emph default
 identiques, puisque l'algorithme de 
\emph on
Round Robin
\emph default
 est associé au 
\emph on
set
\emph default
.
 Dans le premier cas, les partiels se partageront des numéros de clips fournis
 le même 
\emph on
RR
\emph default
, dans le second cas, les clips seront fournis à chaque partiel par des
 
\emph on
RR
\emph default
 différents.
\end_layout

\begin_layout Standard
Voici un exemple de fichier de configuration:
\end_layout

\begin_layout LyX-Code
/*     Configuration des ClipSets */
\end_layout

\begin_layout LyX-Code
var s = stralloc();
\end_layout

\begin_layout LyX-Code
var id = "Configuration des Clipsets";
\end_layout

\begin_layout LyX-Code
sprintf(s, "%s START", id); GM_Log(s);
\end_layout

\begin_layout LyX-Code
var z = table(data(
\end_layout

\begin_layout LyX-Code
  //=========================================
\end_layout

\begin_layout LyX-Code
    Table ClipSets Clear
\end_layout

\begin_layout LyX-Code
        FIdent 10502
\end_layout

\begin_layout LyX-Code
        Set 80 Random             
\end_layout

\begin_layout LyX-Code
            MinDur 8
\end_layout

\begin_layout LyX-Code
            MaxDur 90
\end_layout

\begin_layout LyX-Code
            ClRange 0 9999
\end_layout

\begin_layout LyX-Code
        Set 100 RRR
\end_layout

\begin_layout LyX-Code
            Idem 80
\end_layout

\begin_layout LyX-Code
            Xclude 2500 2501 2502 2503
\end_layout

\begin_layout LyX-Code
        Set 106
\end_layout

\begin_layout LyX-Code
            Clips 3100 3103 3110 2167
\end_layout

\begin_layout LyX-Code
            ClRange 2100 2180
\end_layout

\begin_layout LyX-Code
            Clips 2501 2153
\end_layout

\begin_layout LyX-Code
            ClRange 2510 2515
\end_layout

\begin_layout LyX-Code
            ClRange 2520 2548
\end_layout

\begin_layout LyX-Code
            Xcept 2031 2132
\end_layout

\begin_layout LyX-Code
            ClRange 3200 3299
\end_layout

\begin_layout LyX-Code
            Xcept 3217 3338
\end_layout

\begin_layout LyX-Code
            ClRange 3300 3390
\end_layout

\begin_layout LyX-Code
            Range 100 190
\end_layout

\begin_layout LyX-Code
    End
\end_layout

\begin_layout LyX-Code
  //=========================================
\end_layout

\begin_layout LyX-Code
));
\end_layout

\begin_layout LyX-Code
sprintf(s, "%s END - Res: %d", id, z); GM_Log(s);
\end_layout

\begin_layout LyX-Code
strfree(s); 
\end_layout

\begin_layout Standard
Dans cet exemple, la version du fichier de configuration est dite 1.5.2 (FIdent
 10502).
 Le fichier définit un premier ensemble, le 
\emph on
Set 80
\emph default
, qui recouvre tous les clips (de 0 à 9999), mais en ne sélectionnant que
 ceux dont la durée est comprise entre 8 et 90 secondes, et en leur assignant
 un type de choix 
\begin_inset Quotes cld
\end_inset


\emph on
Random
\emph default

\begin_inset Quotes crd
\end_inset

.
 Le 
\emph on
Set 100
\emph default
 contient (Par 
\begin_inset Quotes cld
\end_inset

Idem 80
\begin_inset Quotes crd
\end_inset

) les mêmes clips, mais 
\emph on
sans
\emph default
 limites sur la durée, mais, par la commande suivante, en en excluant certains
 clips.
 Le choix du tirage des clips est 
\emph on
Random Round Robin
\emph default
.
 Enfin, le 
\emph on
set 106
\emph default
 (utilisant par défaut 
\emph on
Random Round Robin
\emph default
) est constitué d'un assemblage de différents ensembles de clips.
 Les instructions sont exécutées en ordre séquentiel, et l'on notera, par
 exemple, que le clip 3338, explicitement exclu par 
\begin_inset Quotes cld
\end_inset

Xcept 3217 3338
\begin_inset Quotes crd
\end_inset

, est en fait réintroduit dans l'ensemble par la commande suivante.
\end_layout

\begin_layout Paragraph*
Notes
\end_layout

\begin_layout Enumerate
Lorsque l'option 
\begin_inset Quotes cld
\end_inset

PLUC
\begin_inset Quotes crd
\end_inset

 est activée, il peut arriver que le même clip soit sélectionné deux ou
 trois fois de suite.
 En effet, une première demande de clip peut choisir le clip le moins utilisé
 du set.
 Ce numéro de clip va être transmis à un lecteur, qui va ouvrir le fichier
 correspondant, et, si tout se passe bien, incrémenter le compteur d'utilisation
 associé à ce clip.
 Cette demande et cette utilisation sont effectuées par des processus différents.
 Une nouvelle demande peut survenir avant que le lecteur n'ait effectivement
 accompli son travail et incrémenté le compteur d'utilisation.
 La nouvelle demande risque donc de se voir allouer le même numéro de clip.
\end_layout

\begin_layout Enumerate
L'algorithme est complexe, et optimise son fonctionnement par une anticipation
 des demandes
\begin_inset space ~
\end_inset

: si un clip est demandé, plusieurs autres sont calculés dans le même temps,
 l'algorithme se basant sur la situation actuelle (nombre d'utilisation
 des clips à cet instant 
\begin_inset Quotes cld
\end_inset

T
\begin_inset Quotes crd
\end_inset

).
 Si plusieurs sets différents se recouvrent partiellement ou totalement,
 et que l'option 
\begin_inset Quotes cld
\end_inset

PLUC
\begin_inset Quotes crd
\end_inset

 est utilisé, l'utilisation d'un set va perturber le fonctionnement des
 autres
\begin_inset space ~
\end_inset

: des sets différents peuvent alors choisir, du fait de cette anticipation,
 des clips identiques.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Modes-d-espace"

\end_inset

Modes d'espace
\end_layout

\begin_layout Standard
Un 
\begin_inset Quotes cld
\end_inset

mode d'espace
\begin_inset Quotes crd
\end_inset

 définit la configuration spatiale liée à la diffusion des échantillons
 fournis par un player.
 Les différents aspects d'un mode d'espace sont définis par des mots clefs,
 qui sont habituellement suivis d'une ou plusieurs valeurs numériques.
 Les mots-clef et leurs paramètres sont les suivants
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description

\family typewriter
Clear
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Clear
\end_layout

\end_inset

 indique que l'on veut réinitialiser toutes les informations concernant
 les modes d'espace.
\end_layout

\begin_layout Description

\family typewriter
FIdent
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
FIdent
\end_layout

\end_inset

 suivi d'un nombre entier permet de préciser l'indice d'évolution du fichier
 sous une forme hiérarchique, en version, sous-version (de 0 à 99), évolution
 (de 0 à 99), calculé par la formule 
\begin_inset Quotes cld
\end_inset

version * 10000 + sous-version * 100 + indice
\begin_inset Quotes crd
\end_inset

.
 La version 3, sous-version 2, évolution 7 se notera ainsi 30207.
\end_layout

\begin_layout Description

\family typewriter
SMd
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SMd
\end_layout

\end_inset

 Numéro d'identification associé à ce mode d'espace, un entier positif.
 Le nombre de modes d'espace que l'on peut définir n'est limité que par
 la taille allouée à leur représentation (1000 actuellement).
 Ce mot-clef est obligatoire et doit apparaitre en premier, car il définit
 le numéro associé à ce mode d'espace.
 Les autres mots-clefs sont facultatifs, et peuvent être placés dans un
 ordre quelconque.
\end_layout

\begin_layout Description

\family typewriter
HPSet
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
HPSet
\end_layout

\end_inset

 Numéro du groupe de HP associés à ce mode (un nombre de 0 à 1999, c.f.
 description des HP, au paragraphe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Configuration-des-canaux-hp"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Description

\family typewriter
HPCnt
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
HPCnt
\end_layout

\end_inset

 Nombre de HP à utiliser dans le groupe (valeurs minimale et maximale).
\end_layout

\begin_layout Description

\family typewriter
HPMode
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
HPMode
\end_layout

\end_inset

 Modes d'utilisation des HP, un mot-clé 
\begin_inset Quotes cld
\end_inset


\family typewriter
Frst
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
ButFirst
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
Rndm
\family default

\begin_inset Quotes crd
\end_inset

, indiquant que l'on veut, dans un groupe de HP, choisir les 
\begin_inset Quotes cld
\end_inset

N
\begin_inset Quotes crd
\end_inset

 premiers, exclure le premier et choisir les 
\begin_inset Quotes cld
\end_inset

N
\begin_inset Quotes crd
\end_inset

 suivants, ou encore en prendre 
\begin_inset Quotes cld
\end_inset

N
\begin_inset Quotes crd
\end_inset

 tirés au hasard (le nombre étant spécifié par 
\begin_inset Quotes cld
\end_inset

HPCnt
\begin_inset Quotes crd
\end_inset

, et éventuellement d'autres contraintes liées au mode de jeu).
\end_layout

\begin_layout Description

\family typewriter
HPFlags
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
HPFlags
\end_layout

\end_inset


\begin_inset space ~
\end_inset

[*] (flags de modification).
 Un ensemble de flags, permettant de modifier l'utilisation qui est faite
 de ce groupe.
 
\emph on
[non utilisé actuellement]
\end_layout

\begin_layout Description

\family typewriter
HPEv
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
HPEv
\end_layout

\end_inset


\begin_inset space ~
\end_inset

[*] Evolution temporelle de l'utilisation des HP dans le groupe.
 
\emph on
[non utilisé actuellement]
\end_layout

\begin_layout Standard
Les différents modes d'espace sont décrits dans le fichier de nom « 
\family typewriter
config-SModes.mSL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
config-SModes.mSL
\end_layout

\end_inset


\family default
 », qui est un fichier texte, raisonnablement lisible, et pouvant être modifié
 par l’utilisateur.
 Chaque description d’un mode de jeu doit débuter par « 
\family typewriter
SMd
\family default
 » suivi du numéro choisi pour ce mode de jeu.
 Les mots-clefs et les valeurs numériques doivent être séparés par des espaces,
 des virgules ou des passages à la ligne.
 Voici un exemple d’entrées extraites de ce fichier :
\end_layout

\begin_layout LyX-Code
SMd, 1, 
\end_layout

\begin_layout LyX-Code
    HPSet, 100 
\end_layout

\begin_layout LyX-Code
    HPCnt, 2, 8 
\end_layout

\begin_layout LyX-Code
    HPMode, Frst
\end_layout

\begin_layout LyX-Code
SMd, 2 
\end_layout

\begin_layout LyX-Code
    HPSet, 1000 
\end_layout

\begin_layout LyX-Code
    HPCnt, 8, 24 
\end_layout

\begin_layout LyX-Code
    HPMode, Rndm
\end_layout

\begin_layout Standard
Dans cet exemple, le mode d'espace 1 est basé sur la configuration de HP
 
\begin_inset Quotes cld
\end_inset

100
\begin_inset Quotes crd
\end_inset

, qui représente 
\begin_inset Quotes cld
\end_inset

une configuration de 32 HP groupés choisie au hasard
\begin_inset Quotes crd
\end_inset

.
 L'entrée 
\begin_inset Quotes cld
\end_inset


\family typewriter
HPCnt
\family default

\begin_inset Quotes crd
\end_inset

 permet de spécifier que l'on utilisera seulement de 2 à 8 HP parmi les
 32 que définit la configuration, et 
\begin_inset Quotes cld
\end_inset


\family typewriter
HPMode
\family default

\begin_inset Quotes crd
\end_inset

 que l'on utilisera les premiers (mot-clef 
\family typewriter
Frst
\family default
) de la liste de 32.
 De même, le mode d'espace 2 indique que l'on utilisera entre 8 et 24 HP,
 extraits au hasard (mot-cled 
\family typewriter
Rndm
\family default
) de la configuration 
\begin_inset Quotes cld
\end_inset

1000
\begin_inset Quotes crd
\end_inset

, représentant elle-même 
\begin_inset Quotes cld
\end_inset

une configuration de 24 HP distants choisie au hasard
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Les caractéristiques non spécifiées prennent des valeurs par défaut appropriées.
 Les modes d'espaces 1 à 12 du fichier représentent les modes d'espaces
 correspondant aux banques telles que définies dans l'appel à participation
 
\begin_inset Quotes cld
\end_inset

Gran Lux 2020
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
On notera que le fichier débute par un prologue semblable à ceux de fichiers
 de configuration déjà décrits
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
/* Configuration des Modes d'Espace */
\end_layout

\begin_layout LyX-Code
table(data(
\end_layout

\begin_layout LyX-Code
    Table SpModes Clear
\end_layout

\begin_layout Standard
et se termine, de même, par l'épilogue
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
    End
\end_layout

\begin_layout LyX-Code
)); 
\end_layout

\begin_layout Standard
La seule différence avec l'exemple précédent (hormis le commentaire !) est
 le nom de la table concernée, ici 
\begin_inset Quotes cld
\end_inset


\family typewriter
SpModes
\begin_inset Index idx
status open

\begin_layout Plain Layout
SpModes
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Modes-de-jeu"

\end_inset

Modes de jeu
\end_layout

\begin_layout Standard
Les 
\begin_inset Quotes cld
\end_inset

modes de jeu
\begin_inset Quotes crd
\end_inset

 définissent de quelle manière un clip va être joué.
 Les différents aspects d'un mode de jeu sont définis par des mots clefs,
 qui sont habituellement suivis d'une ou plusieurs valeurs numériques.
 Les mots-clef et leurs paramètres sont les suivants
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description

\family typewriter
Clear
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Clear
\end_layout

\end_inset

 indique que l'on veut réinitialiser toutes les informations concernant
 les modes de jeu.
\end_layout

\begin_layout Description

\family typewriter
FIdent
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
FIdent
\end_layout

\end_inset

 suivi d'un nombre entier permet de préciser l'indice d'évolution du fichier
 sous une forme hiérarchique, en version, sous-version (de 0 à 99), évolution
 (de 0 à 99), calculé par la formule 
\begin_inset Quotes cld
\end_inset

version * 10000 + sous-version * 100 + indice
\begin_inset Quotes crd
\end_inset

.
 La version 3, sous-version 2, évolution 7 se notera ainsi 30207.
\end_layout

\begin_layout Description

\family typewriter
PMd
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
PMd
\end_layout

\end_inset

 un numéro d'identification associé à ce mode de jeu (entier positif).
 Le nombre de modes de jeu que l'on peut définir n'est limité que par la
 taille allouée à leur représentation (1000 actuellement).
\end_layout

\begin_layout Description

\family typewriter
Kmd
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Kmd
\end_layout

\end_inset

 Commande associée à ce mode de leu, qui sera envoyée au 
\emph on
player
\emph default
.
 Cette commande est l'un des mots-clefs 
\begin_inset Quotes cld
\end_inset


\family typewriter
KmdPlay
\begin_inset Index idx
status open

\begin_layout Plain Layout
KmdPlay
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 or 
\begin_inset Quotes cld
\end_inset


\family typewriter
KmdLoop
\begin_inset Index idx
status open

\begin_layout Plain Layout
KmdLoop
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
Speed
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Speed
\end_layout

\end_inset

 Trois valeurs numériques : la vitesse de lecture minimale, ci-après 
\begin_inset Quotes cld
\end_inset

A
\begin_inset Quotes crd
\end_inset

, la vitesse de lecture maximale, ci-après 
\begin_inset Quotes cld
\end_inset

B
\begin_inset Quotes crd
\end_inset

, et la probabilité d'inversion du sens de la lecture, 
\begin_inset Quotes cld
\end_inset

C
\begin_inset Quotes crd
\end_inset

.
 La vitesse de lecture est choisie au hasard dans l'intervalle [A, B].
 Ainsi, le couple (1,1) définit une vitesse de lecture qui sera toujours
 la vitesse 
\begin_inset Quotes cld
\end_inset

normale
\begin_inset Quotes crd
\end_inset

 égale à 1, (0.8,1.2) une vitesse qui sera comprise entre 0.8 et 1.2, (-1,-1)
 pour un clip qui doit toujours être lu à l'envers, (0,3) pour un clip qui
 peut être lu à une vitesse comprise entre 0 et 3, etc.
 Rappelons que cette vitesse de lecture fonctionne à l'instar d'un magnétophone
\begin_inset space ~
\end_inset

; plus la vitesse de lecture est basse, plus le son est décalé vers le grave,
 plus elle est rapide, plus le son est décalé vers le haut.
 Notons aussi que dans ce dernier cas, aucun effort n'est fait pour gérer
 l'aliasing.
 In fine, la vitesse de lecture est ramenée à l'intervalle [-3, -0.01] ou
 encore [0.01, 3], selon qu'elle est négative ou positive.
 La valeur 
\begin_inset Quotes cld
\end_inset

C
\begin_inset Quotes crd
\end_inset

 détermine la probabilité d'inversion du sens de la lecture.
 Pour une valeur égale à 0, la vitesse de lecture définie par [A,B] est
 conservée telle qu'elle.
 Pour une valeur égale à 1, elle est inversée.
 Pour une valeur égale à 0.35, elle est inversée dans 35% des cas.
 Si 
\begin_inset Quotes cld
\end_inset

C
\begin_inset Quotes crd
\end_inset

 n'est pas précisé, il est pris égal à 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

.
 Si 
\begin_inset Quotes cld
\end_inset

B
\begin_inset Quotes crd
\end_inset

 n'est pas non plus précisé, il est pris égal à 
\begin_inset Quotes cld
\end_inset

A
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
PVol
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
PVol
\end_layout

\end_inset

 Volume de lecture, une ou deux valeurs numériques, définissant les valeurs
 minimale 
\begin_inset Quotes cld
\end_inset

D
\begin_inset Quotes crd
\end_inset

 et maximale 
\begin_inset Quotes cld
\end_inset

E
\begin_inset Quotes crd
\end_inset

 du volume de base.
 Ces valeurs sont exprimées en dB.
 Le volume est tiré au hasard dans l'intervalle [D, E], et est contraint
 dans l'intervalle [-120, 12] (toujours en dB).
 Ainsi, pour le couple (-6, 0), le volume sera compris entre -6 et 0
\begin_inset space ~
\end_inset

dB.
 Si 
\begin_inset Quotes cld
\end_inset

E
\begin_inset Quotes crd
\end_inset

 n'est pas précisé, il est pris égal à 
\begin_inset Quotes cld
\end_inset

D
\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Description

\family typewriter
ChC
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ChC
\end_layout

\end_inset

 Nombre de canaux à utiliser en sortie ; peut être modifié en fonction du
 nombre de canaux source du clip joué et du mode d'espace choisi.
\end_layout

\begin_layout Description

\family typewriter
FLM
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
FLM
\end_layout

\end_inset

 Flags, transmis au lecteur, sous la forme de deux entiers.
\end_layout

\begin_layout Description

\family typewriter
Gsize
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Gsize
\end_layout

\end_inset

 Durée d'un grain (mode loop), exprimée par des valeurs minimale et maximale,
 en secondes, comprises entre 0.001 et 180.
 Ainsi, (Gsize 3 3) détermine des grains de longueur fixe, égale à 3 secondes,
 (Gsize 0.5 0.8) des grains dont la durée varie entre 500 et 800 millisecondes.
\end_layout

\begin_layout Description

\family typewriter
GDepth
\begin_inset Index idx
status open

\begin_layout Plain Layout
GDepth
\end_layout

\end_inset


\family default
 Polyphonie moyenne de jeu, nombre de grains simultanément actifs, sous
 forme de deux valeurs représentant la polyphonie minimale et la maximale.
 Ces valeurs sont comprises entre 1 et 24.
\end_layout

\begin_layout Description

\family typewriter
PDur
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
PDur
\end_layout

\end_inset

 
\family default
\series default
Play Duration, valeurs minimale et maximale pour la durée de jeu associée
 à ce mode de jeu.
 Ces valeurs sont exprimées en secondes, et comprises entre 0.01 et 300.
\end_layout

\begin_layout Description

\family typewriter
\series bold
FDin
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
\series bold
FDin
\end_layout

\end_inset

 
\family default
\series default
Fade In, valeurs minimale et maximale pour le fade in du clip.
 Ces valeurs sont exprimées en milisecondes, et comprises entre 0.01 et 60000.
 Des valeurs négatives, comprises entre -100 et -1, sont considérées comme
 un pourcentage de la durée de jeu du clip consacré au fade in.
\end_layout

\begin_layout Description

\family typewriter
\series bold
FDout
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
\series bold
FDout
\end_layout

\end_inset

 
\family default
\series default
Fade Out, valeurs minimale et maximale pour le fade out du clip.
 Ces valeurs sont exprimées en milisecondes, et comprises entre 0.01 et 60000.
 Des valeurs négatives, comprises entre -100 et -1, sont considérées comme
 un pourcentage de la durée de jeu du clip consacré au fade out.
\end_layout

\begin_layout Description

\family typewriter
\series bold
GrFDin
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
\series bold
GrFDin
\end_layout

\end_inset

 
\family default
\series default
Grain Fade In, valeurs minimale et maximale pour le fade in des grains du
 clip en mode loop.
 Ces valeurs sont exprimées en milisecondes, et comprises entre 0.01 et 60000.
 Des valeurs négatives, comprises entre -100 et -1, sont considérées comme
 un pourcentage de la durée de jeu du grain consacré au fade in.
\end_layout

\begin_layout Description

\family typewriter
\series bold
GrFDout
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
\series bold
GrFDout
\end_layout

\end_inset

 
\family default
\series default
GrainFade Out, valeurs minimale et maximale pour le fade out des grains
 du clip en mode loop.
 Ces valeurs sont exprimées en milisecondes, et comprises entre 0.01 et 60000.
 Des valeurs négatives, comprises entre -100 et -1, sont considérées comme
 un pourcentage de la durée de jeu du grain consacré au fade out.
\end_layout

\begin_layout Description

\family typewriter
FX1
\begin_inset Index idx
status open

\begin_layout Plain Layout
FX1
\end_layout

\end_inset


\family default
 Une ou deux valeurs numériques, définissant les valeurs minimale 
\begin_inset Quotes cld
\end_inset

F
\begin_inset Quotes crd
\end_inset

 et maximale 
\begin_inset Quotes cld
\end_inset

G
\begin_inset Quotes crd
\end_inset

 du volume d'envoi du son à la piste d'effet 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

.
 Ces valeurs sont exprimées en dB.
 Ce volume d'envoi est tiré au hasard dans l'intervalle [F,G], et est contraint
 dans l'intervalle [-120, 12] (toujours en dB).
 Si 
\begin_inset Quotes cld
\end_inset

G
\begin_inset Quotes crd
\end_inset

 n'est pas précisé, il est pris égal à 
\begin_inset Quotes cld
\end_inset

F
\begin_inset Quotes crd
\end_inset

.
 [non utilisé]
\end_layout

\begin_layout Description

\family typewriter
FX2
\begin_inset Index idx
status open

\begin_layout Plain Layout
FX2
\end_layout

\end_inset


\family default
 Volume d'envoi des sons générés vers la piste d'effet 2.
 [non utilisé]
\end_layout

\begin_layout Standard
Les modes de jeu sont définis dans un fichier de commande, de nom 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-PModes.mSL
\begin_inset Index idx
status open

\begin_layout Plain Layout
config-PModes.mSL
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, qui est un fichier texte, raisonnablement lisible, et pouvant être modifié
 par l’utilisateur.
 Chaque description d’un mode de jeu doit débuter par « 
\family typewriter
PMd
\family default
 » suivi du numéro choisi pour ce mode de jeu.
 Les mots-clefs et les valeurs numériques doivent être séparés par des espaces,
 des virgules ou des passages à la ligne.
 Voici un exemple d’entrées extraites de ce fichier :
\end_layout

\begin_layout LyX-Code
PMd, 3    // Mode n°3
\end_layout

\begin_layout LyX-Code
    Kmd, KmdPlay
\end_layout

\begin_layout LyX-Code
    PVol, -6, 0
\end_layout

\begin_layout LyX-Code
PMd, 4    // Mode n°4
\end_layout

\begin_layout LyX-Code
    Kmd, KmdLoop
\end_layout

\begin_layout LyX-Code
    Speed, 0.5, 2, 0.5
\end_layout

\begin_layout LyX-Code
    Gsize, 3, 3.5
\end_layout

\begin_layout LyX-Code
    GDepth, 3, 4
\end_layout

\begin_layout Standard
Les caractéristiques non spécifiées (comme 
\begin_inset Quotes cld
\end_inset


\family typewriter
PVol
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
FX1
\family default

\begin_inset Quotes crd
\end_inset

) prennent des valeurs par défaut appropriées.
 Les modes de jeux 1 à 12 du fichier représentent les modes de jeux correspondan
t aux banques telles que définies dans l'appel à participation 
\begin_inset Quotes cld
\end_inset

Gran Lux 2020
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
On notera, comme au paragraphe précédent, que le fichier débute toujours
 par le prologue
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
/* Configuration des Modes de Jeu */
\end_layout

\begin_layout LyX-Code
table(data(
\end_layout

\begin_layout LyX-Code
    Table PlModes Clear
\end_layout

\begin_layout Standard
et se termine, de même, par l'épilogue
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
    End
\end_layout

\begin_layout LyX-Code
)); 
\end_layout

\begin_layout Standard
La seule différence avec l'exemple précédent (hormis le commentaire !) est
 le nom de la table concernée, ici 
\begin_inset Quotes cld
\end_inset


\family typewriter
PlModes
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlModes
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Banques-format"

\end_inset

Banques
\end_layout

\begin_layout Standard
Les banques définissent une hiérarchie dans la classification des objets
 sonores.
\end_layout

\begin_layout Standard
Une banque est constituée d'un ensemble de partiels, ainsi définis :
\end_layout

\begin_layout Description

\family typewriter
Grp
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Grp
\end_layout

\end_inset

 Numéro du groupe auquel appartient la banque virtuelle, un entier positif
 ou nul.
 Le nombre de groupes que l'on peut définir n'est pas limité.
\end_layout

\begin_layout Description

\family typewriter
Bnk
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Bnk
\end_layout

\end_inset

 Numéro de la banque définie par ce partiel.
 Un entier positif ou nul.
 Le nombre de banques que l'on peut définir dans un groupe n'est pas limité.
 
\end_layout

\begin_layout Description

\family typewriter
Clps
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Clps
\end_layout

\end_inset

 Numéros (entre 0 et 9999) du premier et du dernier clip de ce partiel.
 Il est possible de préciser deux paramètres supplémentaires, qui sont le
 mode de jeu et le mode d'espace.
 Par défaut, ces deux valeurs sont prises égales au numéro de banque.
 Dans la version actuelle, l'intervalle des clips indiqué est transformé
 en un 
\emph on
Set
\emph default
 de mode 
\emph on
RRR
\emph default
, avec toutes les propriétés d'un tel set (c.f.
 §
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Configuration-des-ClipSets"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Description

\family typewriter
Set
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Set
\end_layout

\end_inset

 Numéro d'un set (c.f.
 §
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Configuration-des-ClipSets"
plural "false"
caps "false"
noprefix "false"

\end_inset

) décrivant l'ensemble des clips utilisés par ce partiel.
 
\end_layout

\begin_layout Description

\family typewriter
PClass
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
PClass
\end_layout

\end_inset


\begin_inset space ~
\end_inset

[*] Classe définie par ce partiel.
 Un entier positif ou nul.
 Défaut : 0.
\end_layout

\begin_layout Description

\family typewriter
PWeight
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
PWeight
\end_layout

\end_inset

 Poids associé aux clips de ce partiel.
 Cette valeur intervient lors de la sélection d'un clip dans une banque
 ou un groupe.
 Défaut : 1.
\end_layout

\begin_layout Description

\family typewriter
PlM
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
PlM
\end_layout

\end_inset

 (PlayMode) Numéro du mode de jeu associé à ce partiel.
 Défaut : le numéro de la banque.
\end_layout

\begin_layout Description

\family typewriter
SpM
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SpM
\end_layout

\end_inset

 (SpaceMode)Numéro du mode d'espace associé à ce partiel.
 Défaut : le numéro de la banque.
\end_layout

\begin_layout Description

\family typewriter
prVol
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
prVol
\end_layout

\end_inset

 Deux entiers, définissant des facteurs de correction de volume min et max,
 exprimés en dB.
 Défaut : [0,0].
\end_layout

\begin_layout Paragraph*
Notes
\end_layout

\begin_layout Itemize
La banque 
\begin_inset Quotes cld
\end_inset


\emph on
b
\emph default

\begin_inset Quotes crd
\end_inset

 du groupe 
\begin_inset Quotes cld
\end_inset


\emph on
g
\emph default

\begin_inset Quotes crd
\end_inset

 est constituée de l'union des partiels qui ont 
\begin_inset Quotes cld
\end_inset


\emph on
g
\emph default

\begin_inset Quotes crd
\end_inset

 comme numéro de groupe (Grp) et 
\begin_inset Quotes cld
\end_inset


\emph on
b
\emph default

\begin_inset Quotes crd
\end_inset

 comme numéro de banque (Bnk).
 Il est ainsi possible de créer des banques à partir d'ensembles de clips
 non contigus et d'affecter à chaque partiel des modes de jeu ou d'espace
 différents.
 On ouvre aussi la possibilité de choisir dans une banque les seuls partiels
 d'une certaine classe (PClass) 
\begin_inset Quotes cld
\end_inset


\emph on
c
\emph default

\begin_inset Quotes crd
\end_inset

, ou encore les partiels de toutes les banques avant une certaine classe...
 Plusieurs partiels peuvent avoir même 
\begin_inset Quotes cld
\end_inset


\emph on
g
\emph default

\begin_inset Quotes crd
\end_inset

, même 
\begin_inset Quotes cld
\end_inset


\emph on
b
\emph default

\begin_inset Quotes crd
\end_inset

 et même 
\begin_inset Quotes cld
\end_inset


\emph on
c
\emph default

\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Itemize
Les numéros de partiels sont automatiquement attribués par le système, à
 partir d'un numéro initial qui est 64.
\end_layout

\begin_layout Itemize
Les partiels de numéro 0 à 63 peuvent être définis par le mot-clef 
\begin_inset Quotes cld
\end_inset


\family typewriter
Partiel
\begin_inset Index idx
status open

\begin_layout Plain Layout
Partiel
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 suivi du numéro correspondant.
 Seuls sont utilisés dans cette définition le 
\emph on
PlayMode
\emph default
 et le 
\emph on
SpaceMode
\emph default
, que l'on précise par les mots-clefs 
\begin_inset Quotes cld
\end_inset


\family typewriter
PlM
\begin_inset Index idx
status open

\begin_layout Plain Layout
PlM
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
SpM
\begin_inset Index idx
status open

\begin_layout Plain Layout
SpM
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
 Voir le § 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Module-Clips-Selection"
plural "false"
caps "false"
noprefix "false"

\end_inset

 pour l'utilisation de ces partiels pour l'écoute des clips définis.
 Les lettres étant utilisées pour déclencher cette écoute, on peut aussi
 utiliser, à la place des numéros 10 à 61, les notations 
\begin_inset Quotes cld
\end_inset

'a'
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

'z'
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

'A'
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

'Z'
\begin_inset Quotes crd
\end_inset

 pour désigner ces partiels.
\end_layout

\begin_layout Itemize
La 
\emph on
classe
\emph default
 permet ainsi, si on le décide, de définir les caractéristiques communes
 aux clips du partiel, par exemple 
\begin_inset Quotes cld
\end_inset

ce sont des sons solistes
\begin_inset Quotes crd
\end_inset

, ou encore 
\begin_inset Quotes cld
\end_inset

ils sont courts
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

ils sont en 8 canaux
\begin_inset Quotes crd
\end_inset

, bref, n'importe quel type d'information susceptible d'être pertinente
 pour les heuristiques de jeu.
 
\end_layout

\begin_layout Itemize
Les options 
\begin_inset Quotes cld
\end_inset


\family typewriter
Clps
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
Set
\family default

\begin_inset Quotes crd
\end_inset

 sont mutuellement exclusives.
\end_layout

\begin_layout Itemize
Notons encore que le nombre total de partiels que l'on peut définir n'est
 limité que par la taille allouée à leur représentation (5000 actuellement).
\end_layout

\begin_layout Itemize
Cependant, dans d'autres circonstances, des heuristiques de jeu peuvent
 s'appuyer sur des ensembles de banques 
\begin_inset Quotes cld
\end_inset

virtuelles
\begin_inset Quotes crd
\end_inset

, qui pourront être extraites de groupes virtuels différents, et filtrées
 sur d'autres caractéristiques, comme le numéro de banque virtuel (catégorisatio
n), la classe, le mode de jeu ou le mode d'espace.
 
\end_layout

\begin_layout Standard
Comme dans les autres syntaxes, les commandes 
\begin_inset Quotes cld
\end_inset


\family typewriter
Clear
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
Fident
\family default

\begin_inset Quotes crd
\end_inset

 sont admises en tête.
\end_layout

\begin_layout Description

\family typewriter
Clear
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Clear
\end_layout

\end_inset

 indique que l'on veut réinitialiser toutes les informations concernant
 les banques.
\end_layout

\begin_layout Description

\family typewriter
FIdent
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
FIdent
\end_layout

\end_inset

 suivi d'un nombre entier permet de préciser l'indice d'évolution du fichier
 sous une forme hiérarchique, en version, sous-version (de 0 à 99), évolution
 (de 0 à 99), calculé par la formule 
\begin_inset Quotes cld
\end_inset

version * 10000 + sous-version * 100 + indice
\begin_inset Quotes crd
\end_inset

.
 La version 3, sous-version 2, évolution 7 se notera ainsi 30207.
\end_layout

\begin_layout Standard
Les banques sont définies dans le fichier 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-Banks.mSL
\begin_inset Index idx
status open

\begin_layout Plain Layout
config-Banks.mSL
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
 Voici un exemple de définition de trois groupes, 1, 2 et 4.
\end_layout

\begin_layout LyX-Code
Grp 1 //  Groupe 1
\end_layout

\begin_layout LyX-Code
    Bnk, 1 // banque 1
\end_layout

\begin_layout LyX-Code
        Clps, 0, 99
\end_layout

\begin_layout LyX-Code
    Bnk, 2
\end_layout

\begin_layout LyX-Code
        Clps 100, 199
\end_layout

\begin_layout LyX-Code
Grp 2 // Groupe 2
\end_layout

\begin_layout LyX-Code
    Bnk 1 
\end_layout

\begin_layout LyX-Code
        Clps 1000, 1099
\end_layout

\begin_layout LyX-Code
    Bnk 4
\end_layout

\begin_layout LyX-Code
        Clps, 1300, 1399
\end_layout

\begin_layout LyX-Code
    Bnk, 7
\end_layout

\begin_layout LyX-Code
        Clps 1600 1699
\end_layout

\begin_layout LyX-Code
Grp, 4
\end_layout

\begin_layout LyX-Code
    Bnk 1, Clps 2000, 2009, PlM 1, SpM 3
\end_layout

\begin_layout LyX-Code
    Bnk 2, Clps 2010, 2019, PlM 14, SpM 2
\end_layout

\begin_layout LyX-Code
    Bnk 5, Clps 2020, 2029, PWeight 3
\end_layout

\begin_layout LyX-Code
           Clps 2020, 2022, PlM 8, SpM 11, PWeight 2
\end_layout

\begin_layout LyX-Code
    Bnk 6, Clps 2040, 2049 PlM 1 SpM 4
\end_layout

\begin_layout LyX-Code
Partiel 'a' SpM 1 PlM 28
\end_layout

\begin_layout LyX-Code
Partiel 'b' SpM 1 PlM 36
\end_layout

\begin_layout Standard
La mise en page est libre (l'indentation est ici présente pour des raisons
 esthétiques), il suffit que les nombres ou les mots-clefs soient séparés
 les uns des autres par des espaces, des virgules ou des fins de ligne.
 Si 
\begin_inset Quotes cld
\end_inset


\family typewriter
Grp
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
Bnk
\family default

\begin_inset Quotes crd
\end_inset

 ne sont pas reprécisés, ils conservent leur valeur antérieure, par exemple
 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 pour 
\begin_inset Quotes cld
\end_inset


\family typewriter
Grp
\family default

\begin_inset Quotes crd
\end_inset

, jusqu'à rencontre de 
\begin_inset Quotes cld
\end_inset


\family typewriter
Grp, 2
\family default

\begin_inset Quotes crd
\end_inset

.
 On remarquera que la banque 
\begin_inset Quotes cld
\end_inset

5
\begin_inset Quotes crd
\end_inset

 du groupe 
\begin_inset Quotes cld
\end_inset

4
\begin_inset Quotes crd
\end_inset

 se compose de deux partiels, utilisant des clips communs (
\begin_inset Quotes cld
\end_inset

2020
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

2022
\begin_inset Quotes crd
\end_inset

), mais avec des modes de jeu et d'espace différents (tous deux égaux à
 5 dans le premier partiel, car ils reçoivent comme valeur le numéro de
 la banque lorsqu'ils ne sont pas précisés) .
 Dans la description du groupe 4, banques 1 et 2, les modes de jeu et d'espace
 sont explicitement précisés, après les deux valeurs représentant les bornes
 des clips.
 Le fichier se termine par la définition de deux partiels, de numéros 'a'
 et 'b', soit 10 et 11, qui permettront en mode interactif dans le module
 
\begin_inset Quotes cld
\end_inset

Clip selection
\begin_inset Quotes crd
\end_inset

 de lire des clips avec les modes de jeu et d'espace indiqués.
 Précisons encore que c'est la rencontre d'une commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
Grp
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
Bnk
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
Partiel
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
End
\family default

\begin_inset Quotes crd
\end_inset

 qui détermine la création d'un nouveau partiel, avec les caractéristiques
 définies par les commandes précédentes.
\end_layout

\begin_layout Standard
Dans cet exemple, 12 partiels sont définis, correspondant à un total de
 9 banques.
\end_layout

\begin_layout Standard
On notera, comme dans les paragraphes précédents, que le fichier débute
 toujours par le prologue
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
/* Configuration des Banques */
\end_layout

\begin_layout LyX-Code
table(data(
\end_layout

\begin_layout LyX-Code
    Table Banks Clear
\end_layout

\begin_layout Standard
et se termine, de même, par l'épilogue
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
    End
\end_layout

\begin_layout LyX-Code
)); 
\end_layout

\begin_layout Standard
La seule différence avec l'exemple précédent (hormis le commentaire !) est
 le nom de la table concernée, ici 
\begin_inset Quotes cld
\end_inset


\family typewriter
Banks
\begin_inset Index idx
status open

\begin_layout Plain Layout
Banks
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Senseurs"

\end_inset

Senseurs
\end_layout

\begin_layout Standard
Ce fichier (de nom 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-Sensors.mSL
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
config-Sensors.mSL
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

) décrit la configuration des senseurs connectés en mode MIDI
\begin_inset Index idx
status open

\begin_layout Plain Layout
MIDI
\end_layout

\end_inset

.
 Concrètement, le hardware d'une telle l'installation peut se composer d'un
 Arduino, connecté à des capteurs infrarouge, qui envoie les interactions
 sous forme de messages MIDI.
 Ceux-ci sont des messages 
\begin_inset Quotes cld
\end_inset

Note On
\begin_inset Quotes crd
\end_inset

, un numéro de note (de 1 à N) étant affecté chaque capteur.
 Le fichier va décrire les actions que doit prendre le Game Master à la
 réception de tels messages, sachant qu'il va reconnaître des 
\begin_inset Quotes cld
\end_inset

mots
\begin_inset Quotes crd
\end_inset

, c'est à dire des séquences de notes MIDI.
 Il peut ainsi réagir à des 
\begin_inset Quotes cld
\end_inset

séquences
\begin_inset Quotes crd
\end_inset

 constituées d'un événement MIDI unique, ou des séquences constituées de
 deux, ou plus, événements MIDI.
 Dans ce dernier cas, le premier sera d'abord détecté comme événement unique,
 puis la séquence qu'il introduit, éventuellement, comme un second événement.
\end_layout

\begin_layout Standard
Le système permet de décrire différentes configurations indépendantes, dans
 lesquelles des actions différentes peuvent être associées à chaque capteur.
 Ces configurations sont dites 
\begin_inset Quotes cld
\end_inset

Modes
\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset

Scène
\begin_inset Quotes crd
\end_inset

 conviendrait également), repérés par un numéro compris entre 0 et 31.
 Il y a donc 32 modes différents possibles.
 Lorsque l'on se trouve dans un mode donné, le système ne reconnait que
 les séquences associées à ce mode.
\end_layout

\begin_layout Standard
La syntaxe, comme dans les autres fichiers de configuration, fait appel
 à des mots-clefs et des valeurs numériques, séparés par des espaces, des
 virgules ou des passages à la ligne.
 Elle utilise les élément suivants
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description

\family typewriter
Clear
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Clear
\end_layout

\end_inset

 indique que l'on veut réinitialiser toutes les informations concernant
 les senseurs.
\end_layout

\begin_layout Description

\family typewriter
FIdent
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
FIdent
\end_layout

\end_inset

 suivi d'un nombre entier permet de préciser l'indice d'évolution du fichier
 sous une forme hiérarchique, en version, sous-version (de 0 à 99), évolution
 (de 0 à 99), calculé par la formule 
\begin_inset Quotes cld
\end_inset

version * 10000 + sous-version * 100 + indice
\begin_inset Quotes crd
\end_inset

.
 La version 3, sous-version 2, évolution 7 se notera ainsi 30207.
\end_layout

\begin_layout Description

\family typewriter
MMode
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
MMode
\end_layout

\end_inset

,
\begin_inset space ~
\end_inset

<n> début de définition du mode 
\begin_inset Quotes cld
\end_inset

n
\begin_inset Quotes crd
\end_inset

, entier compris entre 0 et 31.
\end_layout

\begin_layout Description

\family typewriter
DefSeq
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
DefSeq
\end_layout

\end_inset

,
\begin_inset space ~
\end_inset

<seq> définition d'une séquence de numéros de capteurs.
 La séquence peut se composer de 1 à 3 numéros de capteurs, eux-mêmes compris
 (l'installation étant connectée à 
\begin_inset Quotes cld
\end_inset

N
\begin_inset Quotes crd
\end_inset

 capteurs) entre 1 et 
\begin_inset Quotes cld
\end_inset

N
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
DoKmd
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
DoKmd
\end_layout

\end_inset

,
\begin_inset space ~
\end_inset

<insts> définition d'une suite d'instructions.
 Chaque séquence 
\begin_inset Quotes cld
\end_inset

DoKmd
\begin_inset Quotes crd
\end_inset

 doit suivre une séquence 
\begin_inset Quotes cld
\end_inset

DefSeq
\begin_inset Quotes crd
\end_inset

, dont elle est la conséquence
\begin_inset space ~
\end_inset

: les instructions 
\begin_inset Quotes cld
\end_inset


\emph on
insts
\emph default

\begin_inset Quotes crd
\end_inset

 seront exécutées si, et seulement si, la séquence 
\begin_inset Quotes cld
\end_inset


\emph on
seq
\emph default

\begin_inset Quotes crd
\end_inset

 qui précède a été reconnue.
\end_layout

\begin_layout Description

\family typewriter
End
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
End
\end_layout

\end_inset

 cet ordre termine le fichier.
\end_layout

\begin_layout Description

\family typewriter
Enter
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Enter
\end_layout

\end_inset

,
\begin_inset space ~
\end_inset

<insts> les instructions qui suivent 
\begin_inset Quotes cld
\end_inset


\family typewriter
Enter
\family default

\begin_inset Quotes crd
\end_inset

, jusqu'au prochain mot-clef, seront exécutées chaque fois que l'on passe
 à ce mode MIDI.
\end_layout

\begin_layout Subsection
Instructions
\end_layout

\begin_layout Standard
Les instructions sont repérées par un nombre entier ou un mot-clef, éventuelleme
nt suivi des paramètres attendus par l'instruction.
 Les instructions attendent soit un nombre fixe de paramètres (0, 1, 2...),
 soit un nombre variable, le dernier étant alors typiquement suivi par la
 valeur -1.
 Tous les nombres utilisés doivent être séparés par des virgules ou des
 passages à la ligne.
\end_layout

\begin_layout Standard
Les instructions utilisables sont décrites au chapitre des Actions (c.f.
 chapitre
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Actions"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 On s'y reportera pour une description précise de celles-ci.
\end_layout

\begin_layout Subsection
Exemples
\end_layout

\begin_layout Standard
Dans ce premier exemple, la configuration choisie est le mode MIDI 3.
\end_layout

\begin_layout Standard
La séquence d'activation des capteurs 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 suivi de 
\begin_inset Quotes cld
\end_inset

4
\begin_inset Quotes crd
\end_inset

 exécute la commande 
\begin_inset Quotes cld
\end_inset

341, 4
\begin_inset Quotes crd
\end_inset

, passage au mode MIDI 4, puis 
\begin_inset Quotes cld
\end_inset

350, 7
\begin_inset Quotes crd
\end_inset

 déclenche le jeu du clip 
\begin_inset Quotes cld
\end_inset

7
\begin_inset Quotes crd
\end_inset

, et enfin 
\begin_inset Quotes cld
\end_inset

343
\begin_inset Quotes crd
\end_inset

 nous assure qu'un passage inopiné sous le capteur 1, immédiatement après
 cette séquence, ne sera pas reconnu comme une nouvelle séquence 
\begin_inset Quotes cld
\end_inset

4, 1
\begin_inset Quotes crd
\end_inset

.
 La ligne suivante définit la séquence 
\begin_inset Quotes cld
\end_inset

4, 1
\begin_inset Quotes crd
\end_inset

, permettant le retour au mode MIDI 2.
\end_layout

\begin_layout LyX-Code
// PAD 3 
\end_layout

\begin_layout LyX-Code
MMode, 3 
\end_layout

\begin_layout LyX-Code
DefSeq, 1, 4, DoKmd, 341, 4, 350, 7, 343 // Midi mode 4 
\end_layout

\begin_layout LyX-Code
DefSeq, 4, 1, DoKmd, 341, 2, 343 // ==>  Midi mode 2
\end_layout

\begin_layout Standard
Nous avons ensuite deux séquences de 
\begin_inset Quotes cld
\end_inset

jeu
\begin_inset Quotes crd
\end_inset

 de clip.
 Le capteur 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 va permettre le jeu du clip 6612.
 Le capteur 6 celui du clip 6211.
 La commande 
\begin_inset Quotes cld
\end_inset

352, 6211, 7
\begin_inset Quotes crd
\end_inset

 précise, par son dernier paramètre (7=1+2+4), que le clip doit être joué
 en entier (1), avec un fade-in court et un fade-out long (2), et à la vitesse
 1 (4).
\end_layout

\begin_layout LyX-Code
DefSeq, 1, DoKmd, 350, 6612
\end_layout

\begin_layout LyX-Code
DefSeq, 6, DoKmd, 352, 6211, 7
\end_layout

\begin_layout Standard
Dans les exemples suivants, nous modifions certains paramètres de jeu.
 Le capteur 
\begin_inset Quotes cld
\end_inset

5
\begin_inset Quotes crd
\end_inset

 va lancer le jeu du clip 6208 (
\begin_inset Quotes cld
\end_inset

350, 6208
\begin_inset Quotes crd
\end_inset

), après avoir choisi les modes de jeu et d'espace associés au partiel 7
 (
\begin_inset Quotes cld
\end_inset

326, 7
\begin_inset Quotes crd
\end_inset

).
 De même, la séquence associée au capteur 
\begin_inset Quotes cld
\end_inset

9
\begin_inset Quotes crd
\end_inset

 se compose du choix du partiel 7 pour le jeu, soit 
\begin_inset Quotes cld
\end_inset

326, 7
\begin_inset Quotes crd
\end_inset

, d'un boost du volume de 18dB, 
\begin_inset Quotes cld
\end_inset

328, 18
\begin_inset Quotes crd
\end_inset

, et du choix, par un 
\begin_inset Quotes cld
\end_inset

round robin
\begin_inset Quotes crd
\end_inset

 du jeu des clips 6201, 6209 et 6210, 
\begin_inset Quotes cld
\end_inset

353, 0, 6201, 6209, 6210, -1
\begin_inset Quotes crd
\end_inset

 (c'est-à-dire que le capteur 9 va lancer, la première fois le clip 
\begin_inset Quotes cld
\end_inset

6201
\begin_inset Quotes crd
\end_inset

, la seconde fois le clip 
\begin_inset Quotes cld
\end_inset

6209
\begin_inset Quotes crd
\end_inset

, puis le 
\begin_inset Quotes cld
\end_inset

6210
\begin_inset Quotes crd
\end_inset

, puis à nouveau le 
\begin_inset Quotes cld
\end_inset

6201
\begin_inset Quotes crd
\end_inset

, etc).
 Notons que la commande similaire 
\begin_inset Quotes cld
\end_inset

354, 0, 6201, 6209, 6210, -1
\begin_inset Quotes crd
\end_inset

 aurait lancé le clip 
\begin_inset Quotes cld
\end_inset

6201
\begin_inset Quotes crd
\end_inset

, puis le clip 
\begin_inset Quotes cld
\end_inset

6209
\begin_inset Quotes crd
\end_inset

, et enfin le 
\begin_inset Quotes cld
\end_inset

6210
\begin_inset Quotes crd
\end_inset

, le capteur devenant inactif après ce dernier clip.
 
\end_layout

\begin_layout LyX-Code
DefSeq, 5, DoKmd, 326, 7, 350, 6208 
\end_layout

\begin_layout LyX-Code
DefSeq, 9, DoKmd, 326, 7, 328, 18, 353,
\end_layout

\begin_layout LyX-Code
                  0, 6201, 6209, 6210, -1 
\end_layout

\begin_layout Standard
Dans ce dernier exemple, l'activation du capteur 
\begin_inset Quotes cld
\end_inset

3
\begin_inset Quotes crd
\end_inset

 va exécuter les commandes 
\begin_inset Quotes cld
\end_inset

325, 563
\begin_inset Quotes crd
\end_inset

, choix de la configuration de HP n°563, 
\begin_inset Quotes cld
\end_inset

352, 6251, 5
\begin_inset Quotes crd
\end_inset

, jeu du clip 6251 en entier, à la vitesse 1, et enfin 
\begin_inset Quotes cld
\end_inset

342, 3, 275
\begin_inset Quotes crd
\end_inset

, verrouillage du capteur 
\begin_inset Quotes cld
\end_inset

3
\begin_inset Quotes crd
\end_inset

 pendant 27.5 secondes, durée de la lecture du clip – c'est-à-dire qu'il
 ne sera pas possible de le jouer à nouveau avant l'expiration de ce délai.
\end_layout

\begin_layout LyX-Code
DefSeq, 3, DoKmd, 325, 563, 352, 6251, 5, 342, 3, 27.5 
\end_layout

\begin_layout Subsection
Notes
\end_layout

\begin_layout Standard
Dans une configuration à 
\begin_inset Quotes cld
\end_inset

N
\begin_inset Quotes crd
\end_inset

 capteurs, il est possible d'avoir des séquences associées à des numéros
 de 
\begin_inset Quotes cld
\end_inset

capteurs
\begin_inset Quotes crd
\end_inset

 de numéros supérieurs à 
\begin_inset Quotes cld
\end_inset

N
\begin_inset Quotes crd
\end_inset

.
 Ces séquences peuvent être générées par un contrôleur MIDI envoyant les
 numéros de notes correspondantes, mais aussi déclenchées par programme.
 La commande 345 décrite ci-dessus permet de lancer une action au bout d'un
 temps donné, en simulant l'arrivée de l'événement MIDI correspondant.
 Dans l'exemple ci-dessous, on associe au capteur 
\begin_inset Quotes cld
\end_inset

8
\begin_inset Quotes crd
\end_inset

 un arrêt immédiat de tous les sons joués (
\begin_inset Quotes cld
\end_inset

304
\begin_inset Quotes crd
\end_inset

), puis on 
\begin_inset Quotes cld
\end_inset

programme
\begin_inset Quotes crd
\end_inset

 l'événement 
\begin_inset Quotes cld
\end_inset

12
\begin_inset Quotes crd
\end_inset

 au bout de 20 secondes (
\begin_inset Quotes cld
\end_inset

345, 12, 20
\begin_inset Quotes crd
\end_inset

).
 Cet événement, défini à la ligne suivante, va lancer le clip 
\begin_inset Quotes cld
\end_inset

6670
\begin_inset Quotes crd
\end_inset

, dont on ne joue (commande 
\begin_inset Quotes cld
\end_inset

327, 10
\begin_inset Quotes crd
\end_inset

) que les dix premières secondes.
\end_layout

\begin_layout LyX-Code
DefSeq, 8, DoKmd, 304, 345, 12, 20 
\end_layout

\begin_layout LyX-Code
DefSeq, 12, DoKmd, 327, 10, 350, 6670 
\end_layout

\begin_layout Subsection
Identification des commandes
\end_layout

\begin_layout Standard
Depuis la version 1.5.4, les commandes peuvent être désignées aussi bien par
 une valeur numérique que par un mot-clef.
 La description de ces commandes se trouve au chapitre 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Actions"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Section
Le fichier de configuration général
\end_layout

\begin_layout Standard
Par défaut, le Game Player va tenter de charger les fichiers de configuration
 décrits dans ce chapitre, puis, en dernier, un fichier 
\begin_inset Quotes cld
\end_inset


\emph on
profile
\begin_inset Index idx
status open

\begin_layout Plain Layout
profile
\end_layout

\end_inset


\emph default

\begin_inset Quotes crd
\end_inset

 permettant à l'utilisateur de définir divers autres aspects de ces préférences.
 Ce fichier a pour nom 
\begin_inset Quotes cld
\end_inset


\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
GM_mSL_ini.mSL
\end_layout

\end_inset

GM_mSL_ini.mSL
\family default

\begin_inset Quotes crd
\end_inset

.
 L'utilisateur peut, par exemple, choisir de redéfinir ici certains aspects
 définis dans les fichiers précédents.
 On peut par exemple essayer de nouveaux ensembles de clips avec des modes
 d'espace et de jeu différents, sans avoir à modifier la base de la configuratio
n définie par les fichiers précédents.
 Il suffit pour ce faire de placer les ajouts sous une forme telle que :
\end_layout

\begin_layout LyX-Code
table(data(
\end_layout

\begin_layout LyX-Code
   Table Clips 
\end_layout

\begin_layout LyX-Code
      ClVol 6 410 411 412
\end_layout

\begin_layout LyX-Code
   End
\end_layout

\begin_layout LyX-Code
   Table PlModes
\end_layout

\begin_layout LyX-Code
      PMd 32 
\end_layout

\begin_layout LyX-Code
      Kmd  KmdLoop
\end_layout

\begin_layout LyX-Code
      Speed  0.4  0.7 0.8
\end_layout

\begin_layout LyX-Code
      Gsize  0.2  0.45
\end_layout

\begin_layout LyX-Code
      GDepth 2 3
\end_layout

\begin_layout LyX-Code
   End
\end_layout

\begin_layout LyX-Code
   Table Banks
\end_layout

\begin_layout LyX-Code
      Grp 24 
\end_layout

\begin_layout LyX-Code
      Bnk 1 PlM 32 SpM 8 Clps 410 412
\end_layout

\begin_layout LyX-Code
      Bnk 2 PlM 8 SpM 11 Clps 1201 1207
\end_layout

\begin_layout LyX-Code
   End
\end_layout

\begin_layout LyX-Code
));
\end_layout

\begin_layout Standard
Il possible de la sorte d'ajouter, mais aussi de redéfinir des modes d'espace,
 des modes de jeu, des configurations de HP.
 Il suffira de supprimer ceci dans le profile pour revenir aux modes de
 jeu antérieurs.
\end_layout

\begin_layout Standard
On peut aussi choisir de n'utiliser que ce fichier 
\begin_inset Quotes cld
\end_inset


\family typewriter
GM_mSL_ini.mSL
\family default

\begin_inset Quotes crd
\end_inset

, en y plaçant l'ensemble des définitions des tables nécessaires au fonctionneme
nt du logiciel.
 Il suffit alors de ne pas définir les autres fichiers, ou encore d'indiquer
 que l'on ne désire pas charger ceux-ci.
\end_layout

\begin_layout Chapter
Utilitaires
\end_layout

\begin_layout Standard
On a signalé que le Game Master utilisait essentiellement deux plug-ins
 principaux: le 
\emph on
Game Player 
\emph default
et le 
\emph on
File Player
\emph default
.
 Un petit nombre d'autres plug-ins sont également disponibles, et s'avèrent
 pertinents lors de l'utilisation du logiciel.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-SmoothCompressor.png
	lyxscale 50
	width 14cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Le-compresseur-multicanaux"

\end_inset

Le compresseur multicanaux
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Smooth Compressor
\end_layout

\begin_layout Standard
Il s'agit d'un compresseur multicanaux (C.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Le-compresseur-multicanaux"
plural "false"
caps "false"
noprefix "false"

\end_inset

) dont l'utilisation est relativement simple:
\end_layout

\begin_layout Description
limit
\begin_inset Index idx
status open

\begin_layout Plain Layout
limit
\end_layout

\end_inset

 ce réglage détermine la limite maximale du compresseur.
 
\end_layout

\begin_layout Description
pre-gain
\begin_inset Index idx
status open

\begin_layout Plain Layout
pre-gain
\end_layout

\end_inset

 permet de réduire ou booster le signal à l'entrée su compresseur.
\end_layout

\begin_layout Description
volume
\begin_inset Index idx
status open

\begin_layout Plain Layout
volume
\end_layout

\end_inset

 permet d'augmenter le signal après compression.
 Le volume maximum en sortie sera donc (limit + volume)
\end_layout

\begin_layout Description
attack
\begin_inset Index idx
status open

\begin_layout Plain Layout
attack
\end_layout

\end_inset

 durée de la rampe d'augmentation de compression à l'arrivée d'un signal
 suppérieur à 
\begin_inset Quotes cld
\end_inset

limit
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
release
\begin_inset Index idx
status open

\begin_layout Plain Layout
release
\end_layout

\end_inset

 durée de la rampe de diminution de la compression lorsque le signal d'entrée
 est devenu inférieur à la limite fixée.
\end_layout

\begin_layout Description
distortion
\begin_inset Index idx
status open

\begin_layout Plain Layout
distortion
\end_layout

\end_inset

 variable de 0 à 100%, ce réglage permet de doser une distortion douce appliquée
 au signal lorsque la compression devient effective
\end_layout

\begin_layout Description
zoom
\begin_inset Index idx
status open

\begin_layout Plain Layout
zoom
\end_layout

\end_inset

 utilisé uniquement pour l'affichage, détermine la hauteur du signal dans
 la fenêtre
\end_layout

\begin_layout Description
channels
\begin_inset Index idx
status open

\begin_layout Plain Layout
channels
\end_layout

\end_inset

 choix du nombre de de canaux en sortie.
 Seules les valeurs des quatre canaux les plus forts à un instant donné
 sont affichés en bleu, jaune, vert et rouge.
 Afin d'assurer une bonne visualisation des signaux, l'amplitude du signal
 le plus fort, affichée en bleu, est multipliée par quatre, celle du second
 plus fort, jaune, par trois, cette du troisième, vert, par deux, et celle
 du signal affiché en rouge est inchangée.
\end_layout

\begin_layout Section
Multi Channel VU Meter
\end_layout

\begin_layout Standard
C'est l'afficheur standard multicanaux, livré avec les configurations de
 REAPER.
\end_layout

\begin_layout Section
Cheap Channel Reducer
\end_layout

\begin_layout Standard
Sans aucun réglage, ce tout petit plug-in se contente de replier l'ensemble
 des canaux en entrée de la piste sur les canaux 1 et 2 en sortie, réalisant
 un 
\begin_inset Quotes cld
\end_inset

mixage
\begin_inset Quotes crd
\end_inset

 stéréo sommaire, les canaux 1, 3, 5, etc.
 étant dirigés vers la gauche, les 2, 4, 6, etc.
 vers la droite.
 Il remet également à zéro les sorties des autres canaux.
\end_layout

\begin_layout Section
MIDIduino
\end_layout

\begin_layout Standard
Ce plug-in sert d'interface avec un Arduino connecté à des capteurs infra-rouge,
 et envoyant ses données sur sa sortie USB sous la forme de notes MIDI.
 Mais on peut aussi l'associer à n'importe quel clavier ou surface de contrôle
 MIDI.
 Sa particularité est de 
\begin_inset Quotes cld
\end_inset

replier
\begin_inset Quotes crd
\end_inset

 les numéros de notes MIDI reçues sur les valeurs 0 à 11 (do à si), ce qui
 permet de simuler un ensemble de 12 capteurs au moyen de n'importe quelle
 unité MIDI.
\end_layout

\begin_layout Chapter
Beta testing
\end_layout

\begin_layout Standard
Ce chapitre est destiné plus spécifiquement aux quelques courageux qui acceptent
 de tester des versions du Game Master (GM) pas nécessairement stabilisées.
 Je travaille à l'heure actuelle sur un Macbook Pro de 2013 (prêt de JF
 Minjard, ma propre machine étant en panne), avec une CPU à processeur Intel.
 Le GM est donc assez sérieusement testé sur cete machine, mais peu/pas
 sur des machines Apple à processeur M1 ou M2, et encore moins sous windows.
 C'est dire si votre feed-back peut être utile ! N'oubliez pas, bien sûr,
 de conserver toutes les versions antérieures...
\end_layout

\begin_layout Section
Outils de 
\begin_inset Quotes cld
\end_inset

mise au point
\begin_inset Quotes crd
\end_inset

 disponibles
\end_layout

\begin_layout Standard
Le GM est écrit en 
\begin_inset Quotes cld
\end_inset

eel2
\begin_inset Quotes crd
\end_inset

, langage développé par Cockos, et principalement utilisé sous REAPER.
 Tous les plug-ins de type JSFX peuvent être 
\begin_inset Quotes cld
\end_inset

ouverts
\begin_inset Quotes crd
\end_inset

 durant leur fonctionnement
\begin_inset space ~
\end_inset

: afficher la fenêtre d'interface graphique du plug-in, et cliquer sur le
 bouton 
\begin_inset Quotes cld
\end_inset

Edit...
\begin_inset Quotes crd
\end_inset

 en haut à droite.
 La fenêtre d'édition s'ouvre, affichant à gauche le code du plug-in (qui
 se compose en général d'un grand nombre de référence 
\begin_inset Quotes cld
\end_inset

include
\begin_inset Quotes crd
\end_inset

 à la bibliothèque 
\begin_inset Quotes cld
\end_inset

GM-Libs
\begin_inset Quotes crd
\end_inset

, et qui en fait ne nous intéresse pas), et à droite la liste des variables
 utilisées par le plug-in, dont les valeurs sont mises à jour en temps réel.
 Ces variables sont classées par ordre alphabétique, ce qui permet parfois,
 simplement en les consultant, de détecter des incohérences des programmes.
 
\end_layout

\begin_layout Standard
Utile également est le moniteur d'activité, obtenu par le menu 
\begin_inset Quotes cld
\end_inset

View\SpecialChar menuseparator
Performance Meter
\begin_inset Quotes crd
\end_inset

.
 Cocher toutes les options, choisir l'affichage 
\begin_inset Quotes cld
\end_inset

Display CPU utilization as 100% = all cores fully utilized
\begin_inset Quotes crd
\end_inset

, et afficher le tableau par 
\begin_inset Quotes cld
\end_inset

FX CPU
\begin_inset Quotes crd
\end_inset

 décroissant.
 Veiller à ce que toutes les pistes soient bien visibles.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/Perf-Meter-1.png
	lyxscale 120
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Perf-Meter-A"

\end_inset

Le Performance Meter
\end_layout

\end_inset


\end_layout

\end_inset

Notez dans l'exemple de la figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Perf-Meter-A"
plural "false"
caps "false"
noprefix "false"

\end_inset

 les informations relatives aux 
\begin_inset Quotes cld
\end_inset

RT longest-block
\begin_inset Quotes crd
\end_inset

 (bloc temps réel le plus long rencontré) et 
\begin_inset Quotes cld
\end_inset

RT xruns
\begin_inset Quotes crd
\end_inset

 (incapacité à fournir en sortie le signal audio temps réel).
 On a ici une valeur correcte, la durée du plus long bloc temps réel ayant
 été de 4.27ms, pour une valeur limite de 5.33ms, ce (court) délai correspondant
 à une taille de bloc de 256 échantillons choisi dans les préférences de
 REAPER.
 Au lancement d'une session GM, durant l'initialisation de ce dernier, il
 est 
\begin_inset Quotes cld
\end_inset

normal
\begin_inset Quotes crd
\end_inset

 que cette valeur soit dépassée (par exemple
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset

47.48ms/5.33ms
\begin_inset Quotes crd
\end_inset

, et qu'un petit nombre de 
\begin_inset Quotes cld
\end_inset

xruns
\begin_inset Quotes crd
\end_inset

 se produisent.
 Il faut, juste après le lancement de la session, remettre ces valeurs à
 0 en choisissant, dans le menu contextuel du Performance Meter, l'option
 
\begin_inset Quotes cld
\end_inset

Reset graph
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Section
Modules spécialisés
\end_layout

\begin_layout Standard
Quelques-uns des modules GM sont plus spécifiquement destinés à 
\begin_inset Quotes cld
\end_inset

explorer
\begin_inset Quotes crd
\end_inset

 le GM en cours de fonctionnement.
 Le module 
\begin_inset Quotes cld
\end_inset

System Log
\begin_inset Quotes crd
\end_inset

 est souvent utilisé par le GM pour communiquer avec l'utilisateur, et les
 scripts mSL peuvent y écrire.
 Le module 
\begin_inset Quotes cld
\end_inset

Memory
\begin_inset Quotes crd
\end_inset

 (abordé 
\begin_inset CommandInset ref
LatexCommand vref
reference "Memory-Disc-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

) a pour finalité d'afficher des sections de la mémoire centrale ou de la
 mémoire paragée, sous différents formats.
 
\end_layout

\begin_layout Standard
Une addition récente (source code 
\begin_inset Quotes cld
\end_inset


\family typewriter
mSL_Vars_Access.jsfx-inc
\family default

\begin_inset Quotes crd
\end_inset

 dans GM-Libs) permet d'accéder à près de 200 variables internes du GM,
 en lecture et pour certaines en écriture, au moyen de la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
get
\family default

\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
v = get(`gm, `PWeight);
\end_layout

\begin_layout Standard
pour lire le contenu d'une variable JSFX (ici 
\begin_inset Quotes cld
\end_inset


\family typewriter
PWeight
\family default

\begin_inset Quotes crd
\end_inset

), et de la fonction 
\begin_inset Quotes cld
\end_inset


\family typewriter
set
\family default

\begin_inset Quotes crd
\end_inset

 pour la modifier, lorsque cette modification est permise
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
set(`gm, `PWeight, 3.75);
\end_layout

\begin_layout Subsection
Players
\end_layout

\begin_layout Standard
Les players sont des plug-ins indépendants du GM, mais contrôlés par ce
 dernier, au travers d'informations déposées dans la mémoire partagée.
 Chaque player a un 
\emph on
numéro d'unité
\begin_inset Index idx
status open

\begin_layout Plain Layout
numéro d'unité
\end_layout

\end_inset


\emph default
 (un nombre, compris entre 0 et 127) qu'il s'attribue au hasard au lancement
 d'une session GM, et qu'il modifie éventuellement jusqu'à ce qu'il n'y
 ait plus de conflit avec d'autres players.
 Un player est situé seul sur sa piste, et dispose donc d'un 
\emph on
numéro de piste
\begin_inset Index idx
status open

\begin_layout Plain Layout
numéro de piste
\end_layout

\end_inset


\emph default
 qui lui est propre.
 Enfin, pour l'affichage, le module 
\begin_inset Quotes cld
\end_inset


\emph on
Sound Units
\emph default

\begin_inset Quotes crd
\end_inset

 attribue à chaque player un 
\emph on
numéro de player
\begin_inset Index idx
status open

\begin_layout Plain Layout
numéro de player
\end_layout

\end_inset


\emph default
 unique, compris entre 1 et 
\begin_inset Formula $N$
\end_inset

.
 Le numéro d'unité est utilisé pour attribuer au player un bloc de contrôle
 (270 valeurs environ) permettant la communication entre lui et le GM.
 L'adresse en mémoire partagée de ce bloc est dite 
\begin_inset Quotes cld
\end_inset


\emph on
Unit Address
\begin_inset Index idx
status open

\begin_layout Plain Layout
Unit Address
\end_layout

\end_inset


\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Player-01.png
	lyxscale 90
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Deux-Players-A"

\end_inset

Deux Players
\end_layout

\end_inset


\end_layout

\end_inset

La figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Deux-Players-A"
plural "false"
caps "false"
noprefix "false"

\end_inset

 montre les interfaces graphiques de deux players (dans une session qui
 en comporte 12), affichant des informations qui peuvent être pertinentes
 pour la mise au point
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
Track
\begin_inset space ~
\end_inset

/
\begin_inset space ~
\end_inset

Player
\begin_inset space ~
\end_inset

/
\begin_inset space ~
\end_inset

U.
 De gauche à droite, le numéro de la piste REAPER, du player (celui-ci correspon
dant au numéro de player affiché dans 
\begin_inset Quotes cld
\end_inset


\emph on
Sound Units
\emph default

\begin_inset Quotes crd
\end_inset

), et le numéro d'unité du player (0 à 127).
\end_layout

\begin_layout Description
Status Cet indicateur affiche un mot-clef qui est habituellement 
\begin_inset Quotes cld
\end_inset

Ready
\begin_inset Quotes crd
\end_inset

 lorsque le plug-in est inactif, et prêt à répondre à une demande du GM,
 ou 
\begin_inset Quotes cld
\end_inset

Busy
\begin_inset Quotes crd
\end_inset

 lorsqu'il est en train de jouer.
\end_layout

\begin_layout Description
State Cet indicateur rassemble deux valeurs, qui sont
\begin_inset space ~
\end_inset

: l'activité (1: actif) et l'état (1: disponible, 2: occupé).
\end_layout

\begin_layout Description
Gstate Cet indicateur n'a une valeur différente de 0 que durant la lecture
 physique du fichier audio, ce qui est trop fugace pour être visible, sauf
 en cas d'erreur de lecture.
 La seconde valeur est un nombre premier, alloué au lecteur par le GM.
\end_layout

\begin_layout Description
Err Dernière erreur détectée par le player.
 Une valeur égale à 0 est plutôt bon signe.
\end_layout

\begin_layout Description
Unit
\begin_inset space ~
\end_inset

Addr Adresse mémoire du bloc de contrôle correspondant au numéro d'unité
 du player.
 On peut utiliser cette valeur pour examiner le bloc avec le module 
\begin_inset Quotes cld
\end_inset

Memory
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
Activity
\begin_inset space ~
\end_inset

/
\begin_inset space ~
\end_inset

Check Test régulier (
\begin_inset Quotes cld
\end_inset

ticks
\begin_inset Quotes crd
\end_inset

 à une fréquence de 0.06 Hz envion) des players, et résultat du test.
 Tous les players opérationnels doivent afficher le même numéro de test,
 et une réponse de 0 (occasionnellement 1).
 
\end_layout

\begin_layout Description
Kmds Date (en 
\begin_inset Quotes cld
\end_inset

ticks
\begin_inset Quotes crd
\end_inset

) de la dernière commande reçue, commande reçue (0 en tout début de session,
 16 ou 17 pour Play/Loop, 5 pour Stop), numéro de commande (si en cours)
 ou 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 si terminée.
\end_layout

\begin_layout Description
Gen Activité du générateur: nombre de 
\begin_inset Quotes cld
\end_inset

play
\begin_inset Quotes crd
\end_inset

, nombre de 
\begin_inset Quotes cld
\end_inset

loop
\begin_inset Quotes crd
\end_inset

, total des deux.
\end_layout

\begin_layout Description
Rbase Seed courant du générateur de nombre aléatoires utilisé par ce player
 spécifique.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-Player-02.png
	lyxscale 90
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Deux-Players-B"

\end_inset

Deux Players - B
\end_layout

\end_inset


\end_layout

\end_inset

La figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Deux-Players-B"
plural "false"
caps "false"
noprefix "false"

\end_inset

 montre les mêmes players, le premier ayant été désactivé quelques instants
 plus tôt (case d'activation décochée en haut à droite).
 Le plug-in n'étant plus actif, il est réputé 
\begin_inset Quotes cld
\end_inset

non accessible
\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset

Unresponsive
\begin_inset Quotes crd
\end_inset

).
 Sa dernière activité (
\begin_inset Quotes cld
\end_inset

Activity / Check
\begin_inset Quotes crd
\end_inset

) remonte au test n°310, et il a été désactivé au bout de 7 tentatives de
 communication infructueuses.
 Son état 
\begin_inset Quotes cld
\end_inset

State
\begin_inset Quotes crd
\end_inset

 indique maintenant 
\begin_inset Quotes cld
\end_inset

0 / 12
\begin_inset Quotes crd
\end_inset

 (pour 
\begin_inset Quotes cld
\end_inset

désactivé / non accessible
\begin_inset Quotes crd
\end_inset

).
 Dans ce cas précis, il suffit de cocher à nouveau en haut à droite pour
 qu'il redevienne immédiatement opérationnel.
 
\end_layout

\begin_layout Standard
Notons qu'un plug-in peut être désactivé parce que sa case d'activation
 a été décochée, parce que la piste sur laquelle il se trouve est en 
\begin_inset Quotes cld
\end_inset

mute
\begin_inset Quotes crd
\end_inset

, parce que l'ensemble des plug-ins de la piste ont été 
\begin_inset Quotes cld
\end_inset

bypassés
\begin_inset Quotes crd
\end_inset

 par le bouton 
\begin_inset Quotes cld
\end_inset

FX disable
\begin_inset Quotes crd
\end_inset

 de la piste...
 Ou encore parce que le plug-in ne peut pas s'exécuter du fait d'une erreur
 de programmation...
 Ce dernier cas est explicitement affiché dans la fenêtre du plug-in.
\end_layout

\begin_layout Paragraph*
Remarque
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Standard
c'est le plug-in qui affiche ces indications.
 Comment peut-il le faire lorsqu'il est désactivé ? C'est parce que l'on
 utilise l'option 
\begin_inset Quotes cld
\end_inset


\family typewriter
gfx_idle
\begin_inset Index idx
status open

\begin_layout Plain Layout
gfx_idle
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 qui maintient active l'interface graphique du plug-in, même si sa partie
 audio est désactivée.
 
\end_layout

\begin_layout Section
Et aussi
\end_layout

\begin_layout Standard
Si vous pensez que le fonctionnement du GM est incorrect, n'hésitez pas
 à me contacter par mail, après avoir tenté de qualifier cette erreur le
 mieux possible.
 Idéalement, vous proposez la démarche détaillée qui permet de la reproduire.
 Je ne suis intéressé que si cette erreur se produit, ou est reproductible,
 dans la dernière version distribuée.
 Signalez également tout problème avec le manuel de référence
\begin_inset space ~
\end_inset

: description incomplète ou erronée, manque flagrant, etc.
 N'hésitez pas non plus à me faire part de vos envies d'évolution de la
 chose...
 Amicalement.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Installation-ex-nihilo"

\end_inset

Installation ex-nihilo - v1.6.16
\end_layout

\begin_layout Standard
Ce chapitre décrit (au 31 Août 2023) la procédure utilisée pour créer une
 installation ex-nihilo du Game Master v1.6.1.
 Elle suppose une (petite) connaissance du logiciel REAPER, et une première
 lecture de ce manuel pour fixer les idées...
\end_layout

\begin_layout Section
Projet autonome contenant le Game Master
\end_layout

\begin_layout Standard
Voici la liste des opérations à effectuer, à partir du moment où vous avez
 obtenu le répertoire 
\begin_inset Quotes cld
\end_inset

Game-Master
\begin_inset Quotes crd
\end_inset

, pour créer un projet nouveau contenant le logiciel (et donc autonome).
 Cette approche nécessite la version v6.82 de REAPER.
 
\end_layout

\begin_layout Subsection
Création du projet lui-même
\end_layout

\begin_layout Standard
Imaginons que vous vouliez créer une session en octophonie, à partir d'un
 certain nombre de prises de sons de courtes durées (2' à 3' maximum).
\end_layout

\begin_layout Enumerate
Lancer REAPER.
 S'assurer qu'il n'y a pas de projet antérieur automatiquement lancé
\begin_inset space ~
\end_inset

; dans ce cas, le fermer, puis faire 
\begin_inset Quotes cld
\end_inset

File\SpecialChar menuseparator
New project
\begin_inset Quotes crd
\end_inset

.
 Si nécessaire, vérifier que vous avez bien, dans 
\begin_inset Quotes cld
\end_inset

Options\SpecialChar menuseparator
Préférence...
\begin_inset Quotes crd
\end_inset

 la bonne carte son sélectionnée.
\end_layout

\begin_layout Enumerate
Afficher la piste 
\begin_inset Quotes cld
\end_inset

Master
\begin_inset Quotes crd
\end_inset

 par le menu 
\begin_inset Quotes cld
\end_inset

View\SpecialChar menuseparator
Master track
\begin_inset Quotes crd
\end_inset

.
 Celle-ci apparait, en haut à gauche de la fenêtre REAPER.
\end_layout

\begin_layout Enumerate
Désactiver, toujours dans 
\begin_inset Quotes cld
\end_inset

View
\begin_inset Quotes crd
\end_inset

, le 
\begin_inset Quotes cld
\end_inset

Mixer
\begin_inset Quotes crd
\end_inset

 et le 
\begin_inset Quotes cld
\end_inset

Docker
\begin_inset Quotes crd
\end_inset

 que nous n'utiliserons pas.
\end_layout

\begin_layout Enumerate
Dans la piste 
\begin_inset Quotes cld
\end_inset

MASTER
\begin_inset Quotes crd
\end_inset

, cliquer sur le bouton 
\begin_inset Quotes cld
\end_inset

Route
\begin_inset Quotes crd
\end_inset

 et, dans la boîte de dialogue qui apparaît, choisir le nombre de pistes
 désirées (
\begin_inset Quotes cld
\end_inset

track channels
\begin_inset Quotes crd
\end_inset

, en haut à droite du dialogue), par exemple 8 si vous allez travailler
 en octophonie.
 Dans ce même dialogue, régler 
\begin_inset Quotes cld
\end_inset

Audio Hardware Outputs
\begin_inset Quotes crd
\end_inset

 pour que ces canaux soient envoyés vers les sorties appropriées de votre
 carte son.
 Fermer par la case de fermeture.
\end_layout

\begin_layout Enumerate
Choisir le menu REAPER 
\begin_inset Quotes cld
\end_inset

File\SpecialChar menuseparator
Project settings...
\begin_inset Quotes crd
\end_inset

, ce qui ouvre une boîte de dialogue..
\end_layout

\begin_layout Enumerate
Dans la tabulation 
\begin_inset Quotes cld
\end_inset

Media
\begin_inset Quotes crd
\end_inset

, choisir pour 
\begin_inset Quotes cld
\end_inset

Path to save media files
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset

Audio
\begin_inset Quotes crd
\end_inset

.
 Ce nom permet au script auxiliaire de récupérer la localisation du projet.
 Faire 
\begin_inset Quotes cld
\end_inset

OK
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Choisissez le menu 
\begin_inset Quotes cld
\end_inset

 File\SpecialChar menuseparator
Save project as...
\begin_inset Quotes crd
\end_inset

.
 Dans le dialogue, cocher 
\begin_inset Quotes cld
\end_inset

Create subdirectory for project
\begin_inset Quotes crd
\end_inset

 (et éventuellement 
\begin_inset Quotes cld
\end_inset

Copy all media into project directory
\begin_inset Quotes crd
\end_inset

).
 Choisir un nom (par exemple 
\begin_inset Quotes cld
\end_inset

GM-Test-1
\begin_inset Quotes crd
\end_inset

) et un emplacement pour votre projet, et cliquer 
\begin_inset Quotes cld
\end_inset

Save
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Quitter REAPER.
\end_layout

\begin_layout Enumerate
Allez dans le répertoire de votre projet (disons toujours 
\begin_inset Quotes cld
\end_inset

GM-Test-1
\begin_inset Quotes crd
\end_inset

).
 Il doit contenir un répertoire vide, de nom 
\begin_inset Quotes cld
\end_inset

Audio
\begin_inset Quotes crd
\end_inset

, et un fichier de nom 
\begin_inset Quotes cld
\end_inset

GM-Test-1.RPP
\begin_inset Quotes crd
\end_inset

 qui est la description créée par REAPER de votre projet.
\end_layout

\begin_layout Enumerate
Créez dans ce même répertoire un nouveau répertoire de nom 
\begin_inset Quotes cld
\end_inset

Data
\begin_inset Quotes crd
\end_inset

, un répertoire de nom 
\begin_inset Quotes cld
\end_inset

Effects
\begin_inset Quotes crd
\end_inset

, un répertoire de nom 
\begin_inset Quotes cld
\end_inset

presets
\begin_inset Quotes crd
\end_inset

 et un répertoire de nom 
\begin_inset Quotes cld
\end_inset

Scripts
\begin_inset Quotes crd
\end_inset

.
 Respecter la casse de ces orthographes.
\end_layout

\begin_layout Enumerate
Dans le répertoire de nom 
\begin_inset Quotes cld
\end_inset

Effects
\begin_inset Quotes crd
\end_inset

, placer une 
\emph on
copie
\emph default
 du répertoire 
\begin_inset Quotes cld
\end_inset

GameMaster
\begin_inset Quotes crd
\end_inset

 de la distribution.
\end_layout

\begin_layout Enumerate
Dans le répertoire de nom 
\begin_inset Quotes cld
\end_inset

Scripts
\begin_inset Quotes crd
\end_inset

, placer une 
\emph on
copie
\emph default
 du fichier 
\begin_inset Quotes cld
\end_inset

GMAuxiliary.eel
\begin_inset Quotes crd
\end_inset

 de la distribution.
\end_layout

\begin_layout Enumerate
Vous pouvez maintenant relancer REAPER, qui va ouvrir automatiquement votre
 projet 
\begin_inset Quotes cld
\end_inset

GM-Test-1
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Choisir le menu REAPER 
\begin_inset Quotes cld
\end_inset


\family typewriter
Track\SpecialChar menuseparator
Insert new track
\family default

\begin_inset Quotes crd
\end_inset

.
 Cette commande crée la piste 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

, en-dessous de la piste MASTER.
\end_layout

\begin_layout Enumerate
Eventuellement, changer le nom de cette piste (double clic à droite du cercle
 rouge, indicateur 
\begin_inset Quotes cld
\end_inset

Record Arm/Disarm
\begin_inset Quotes crd
\end_inset

) en 
\begin_inset Quotes cld
\end_inset

Game Player
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Cliquer sur la case 
\begin_inset Quotes cld
\end_inset

FX
\begin_inset Quotes crd
\end_inset

.
 Apparaît un dialogue, avec un choix de plugins.
 A gauche, dans 
\begin_inset Quotes cld
\end_inset

All Plugins
\begin_inset Quotes crd
\end_inset

, cliquer 
\begin_inset Quotes cld
\end_inset

JS
\begin_inset Quotes crd
\end_inset

.
 A droite, vous devez trouver, entre autres, 
\begin_inset Quotes cld
\end_inset


\family typewriter
JS:<Project>/Game-Master/GamePlayer.jsfx
\family default

\begin_inset Quotes crd
\end_inset

.
 Choisir celui-ci, cliquer 
\begin_inset Quotes cld
\end_inset

Add
\begin_inset Quotes crd
\end_inset

 en bas à droite.
 Si tout se passe bien la (toute petite) fenêtre du GamePlayer s'affiche,
 vide.
 A noter que tous les plug-ins référencés par la suite seront ceux qui sont
 situés dans ce répertoire, et dont le nom débutera par 
\begin_inset Quotes cld
\end_inset


\family typewriter
JS:<Project>/Game-Master/....jsfx
\family default

\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Enumerate
Dans cette fenêtre maintenant affichée, en dessous de la barre des tabulations
 (
\begin_inset Quotes cld
\end_inset


\family typewriter
Main
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
Studio A
\family default

\begin_inset Quotes crd
\end_inset

, etc.), faire un shift-clic-droit pour afficher le menu de configuration
 des panneaux.
 Choisir 
\begin_inset Quotes cld
\end_inset


\family typewriter
Modules\SpecialChar menuseparator
Sound Units
\family default

\begin_inset Quotes crd
\end_inset

.
 Le module s'affiche, sous forme d'une ligne de 8 cases grises
\begin_inset space ~
\end_inset

: il n'y a encore aucun module son...
\end_layout

\begin_layout Enumerate
Cliquer sur le bouton 
\begin_inset Quotes cld
\end_inset

Route
\begin_inset Quotes crd
\end_inset

 de la piste 
\begin_inset Quotes cld
\end_inset

Game Player
\begin_inset Quotes crd
\end_inset

.
 Choisir dans 
\begin_inset Quotes cld
\end_inset

track channels
\begin_inset Quotes crd
\end_inset

 2 canaux, et décocher (haut, gauche), 
\begin_inset Quotes cld
\end_inset

Master send channels
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Choisir le menu REAPER 
\begin_inset Quotes cld
\end_inset


\family typewriter
Track\SpecialChar menuseparator
Insert new track
\family default

\begin_inset Quotes crd
\end_inset

.
 Cette commande crée la piste 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

, en-dessous de la piste précédente.
 Donnons lui le nom de 
\begin_inset Quotes cld
\end_inset

Mixer
\begin_inset Quotes crd
\end_inset

.
 C'est elle qui va recevoir tous les sons générés par les différents players.
\end_layout

\begin_layout Enumerate
Cliquer sur 
\begin_inset Quotes cld
\end_inset

Route
\begin_inset Quotes crd
\end_inset

 de la piste 
\begin_inset Quotes cld
\end_inset

Mixer
\begin_inset Quotes crd
\end_inset

.
 Choisir 
\begin_inset Quotes cld
\end_inset

Track channels
\begin_inset Quotes crd
\end_inset

 identique à la valeur de la piste MASTER, 8 dans le cas présent.
\end_layout

\begin_layout Enumerate
Cliquer sur la case 
\begin_inset Quotes cld
\end_inset

FX
\begin_inset Quotes crd
\end_inset

 de la piste 
\begin_inset Quotes cld
\end_inset

Mixer
\begin_inset Quotes crd
\end_inset

.
 Choisir le plug-in 
\begin_inset Quotes cld
\end_inset


\family typewriter
JS: <Project>/Game-Master/SmoothMultLimiter.jsfx
\family default

\begin_inset Quotes crd
\end_inset

.
 Dans celui-ci, régler 
\begin_inset Quotes cld
\end_inset

channels
\begin_inset Quotes crd
\end_inset

 à la valeur appropriée, ici 8.
\end_layout

\begin_layout Enumerate
Choisir le menu REAPER 
\begin_inset Quotes cld
\end_inset


\family typewriter
Track\SpecialChar menuseparator
Insert new track
\family default

\begin_inset Quotes crd
\end_inset

.
 Cette commande crée la piste 
\begin_inset Quotes cld
\end_inset

3
\begin_inset Quotes crd
\end_inset

, en-dessous de la piste précédente.
 Donnons lui le nom de 
\begin_inset Quotes cld
\end_inset

Player
\begin_inset Quotes crd
\end_inset

.
 Ce sera le prototype de tous les players.
\end_layout

\begin_layout Enumerate
Cliquer sur 
\begin_inset Quotes cld
\end_inset

Route
\begin_inset Quotes crd
\end_inset

 de la piste 
\begin_inset Quotes cld
\end_inset

Player
\begin_inset Quotes crd
\end_inset

.
 Choisir 
\begin_inset Quotes cld
\end_inset

Track channels
\begin_inset Quotes crd
\end_inset

 identique à la valeur de la piste MASTER, 8 dans le cas présent.
 Dans ce même dialogue, cliquer sur le menu 
\begin_inset Quotes cld
\end_inset

Add new receive...
\begin_inset Quotes crd
\end_inset

, et choisir 
\begin_inset Quotes cld
\end_inset

1 : Game Player
\begin_inset Quotes crd
\end_inset

.
 Dans le mode de réception associé, choisir 
\begin_inset Quotes cld
\end_inset

Pre-Fader
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pre-Fader
\end_layout

\end_inset

 (Post-FX)
\begin_inset Quotes crd
\end_inset

.
 Grâce à ceci, le player va pouvoir recevoir, déguisées en signaux audio,
 certaines informations venant du Game Master.
\end_layout

\begin_layout Enumerate
Cliquer sur la case 
\begin_inset Quotes cld
\end_inset

FX
\begin_inset Quotes crd
\end_inset

 de la piste 
\begin_inset Quotes cld
\end_inset

Player
\begin_inset Quotes crd
\end_inset

.
 Choisir 
\begin_inset Quotes cld
\end_inset


\family typewriter
JS: <Project>/Game-Master/FilePlayer.jsfx
\family default

\begin_inset Quotes crd
\end_inset

.
 Dans la fenêtre du Game-Master, on doit voir apparaître un premier player,
 dans la première case, sous la forme 
\begin_inset Quotes cld
\end_inset

Player 1
\begin_inset Quotes crd
\end_inset

 (c.f.
 fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Premier-player"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-SU-01.png
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Premier-player"

\end_inset

Premier player 
\emph on
Game Master
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Dans la piste 2, tout à gauche, sous le chiffre 
\begin_inset Quotes cld
\end_inset

2
\begin_inset Quotes crd
\end_inset

, cliquer sur la petite icône à peine visible.
 Au premier clic, on constate que la piste 3 se place en retrait
\begin_inset space ~
\end_inset

: elle est désormais 
\begin_inset Quotes cld
\end_inset

fille
\begin_inset Quotes crd
\end_inset

 de la piste 2, laquelle va recevoir tous les sons émis par la piste 3.
\end_layout

\begin_layout Enumerate
Faire un clic-droit sur la piste 3, et choisir 
\begin_inset Quotes cld
\end_inset

Duplicate tracks
\begin_inset Quotes crd
\end_inset

.
 REAPER crée une copie de cette piste 3, de même nom, et de numéro 4.
 On voit alors apparaître un second player dans la fenêtre du Game Master
 (fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Premier-player-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PIX/GM-SU-02.png
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Premier-player-1"

\end_inset

Second player 
\emph on
Game Master
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Répéter cette opération autant de fois que nécessaire, jusqu'à obtenir le
 nombre voulu de players.
 Cette valeur correspondra à la polyphonie désirée.
 On peut aller jusqu'à 40 ou 50 players sans gros problèmes de CPU.
 Si vous voulez réduire ce nombre, il suffit de supprimer des pistes.
 Notons que dans ce cas les players sont bien sûr immédiatement supprimés,
 mais que le Game Master tente de les reconnecter durant deux minutes environ,
 avant de les retirer de sa liste dans 
\begin_inset Quotes cld
\end_inset


\emph on
Sound Units
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Sauvegarder le projet, qui est désormais prêt à accueillir vos sons.
\end_layout

\begin_layout Enumerate
Il reste à installer le script auxiliaire qui permet d'offrir au GM certaines
 possibilités supplémentaires.
 Il est nécessaire pour ceci d'avoir installé les extensions 
\begin_inset Quotes cld
\end_inset

SWS/S&M
\begin_inset Quotes crd
\end_inset

.
 Chercher ce sigle sur internet, qui vous conduit à 
\begin_inset Quotes cld
\end_inset

www.sws-extensions.org
\begin_inset Quotes crd
\end_inset

.
 Ce site est considéré comme absolument sûr.
 Télécharger et installer la version appropriée à votre machine.
 Relancer REAPER après cette installation.
\end_layout

\begin_layout Enumerate
Vérifiez que votre projet contenant le Game Master est bien actif.
 Choisir le menu 
\begin_inset Quotes cld
\end_inset


\family typewriter
Actions\SpecialChar menuseparator
Show actions list
\family default

\begin_inset Quotes crd
\end_inset

, ce qui ouvre le dialogue des actions.
\end_layout

\begin_layout Enumerate
En bas, à droite, choisir le pop-up menu 
\begin_inset Quotes cld
\end_inset


\family typewriter
New action\SpecialChar menuseparator
Load ReaScript...
\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Enumerate
Dans la fenêtre de dialogue qui s'ouvre, se déplacer jusqu'au répertoire
 
\begin_inset Quotes cld
\end_inset

Scripts
\begin_inset Quotes crd
\end_inset

 de votre projet, et choisir 
\begin_inset Quotes cld
\end_inset

GMAuxiliary.eel
\begin_inset Index idx
status open

\begin_layout Plain Layout
GMAuxiliary.eel
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Le script apparaît dès lors dans la liste des action (en général, tout en
 haut de celle-ci), sous la forme 
\begin_inset Quotes cld
\end_inset

Script:
\begin_inset space ~
\end_inset

GMAuxiliary.eel
\begin_inset Quotes crd
\end_inset

, suivi d'un code du style 
\begin_inset Quotes cld
\end_inset

_RS92e8a687...
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Faire un clic-droit sur cette ligne, et choisir dans le menu 
\begin_inset Quotes cld
\end_inset

Copy selected action command ID
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Dans 
\begin_inset Quotes cld
\end_inset

filter
\begin_inset Quotes crd
\end_inset

, tout en haut, taper 
\begin_inset Quotes cld
\end_inset

startup
\begin_inset Quotes crd
\end_inset

, ce qui n'affiche plus que les actions contenant ce mot.
\end_layout

\begin_layout Enumerate
Choisir par un clic-gauche 
\begin_inset Quotes cld
\end_inset

SWS/S&M: Set project startup action
\begin_inset Quotes crd
\end_inset

, puis cliquer 
\begin_inset Quotes cld
\end_inset

Run
\begin_inset Quotes crd
\end_inset

 tout en bas de la fenêtre.
\end_layout

\begin_layout Enumerate
Dans le dialogue 
\begin_inset Quotes cld
\end_inset

Set project startup action
\begin_inset Quotes crd
\end_inset

, coller l'identification du script 
\begin_inset Quotes cld
\end_inset

GMAuxiliary.eel
\begin_inset Quotes crd
\end_inset

 obtenue lors d'une opération antérieure.
 Faire 
\begin_inset Quotes cld
\end_inset

OK
\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Enumerate
Fermer la fenêtre des actions: 
\begin_inset Quotes cld
\end_inset

Close
\begin_inset Quotes crd
\end_inset

, en bas à droite.
\end_layout

\begin_layout Enumerate

\emph on
Sauver le projet
\emph default
 !
\end_layout

\begin_layout Standard
Il vous est alors loisible de quitter REAPER, puis de le relancer.
 Votre projet se recharge, et vous pouvez vérifier que le menu 
\begin_inset Quotes cld
\end_inset

Actions
\begin_inset Quotes crd
\end_inset

 comporte désormais la ligne supplémentaire 
\begin_inset Quotes cld
\end_inset

Running script: GMAuxiliary.eel
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Subsection
Décisions, décisions...
\end_layout

\begin_layout Standard
Il faut maintenant décrire la configuration de votre installation, choisir
 les sons que vous désirez utiliser, et de quelles manières ils vont être
 mis en œuvre.
 Je suggère de vous intéresser en premier à votre installation sonore, que
 vous ne modifiez probablement pas tous les jours, et dont la description
 sera réutilisable d'une installation à l'autre.
\end_layout

\begin_layout Subsection
Description de l'installation
\end_layout

\begin_layout Standard
Ce qui est dit des canaux et des haut-parleurs, dans la section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Le-mode-d'espace"
plural "false"
caps "false"
noprefix "false"

\end_inset

 est bien sûr toujours d'actualité.
 On considère toujours que chaque HP est relié à un canal différent de la
 carte sons (donc 8 HP pour les 8 canaux).
 
\end_layout

\begin_layout Standard
Votre configuration une fois décrite dans le fichier 
\begin_inset Quotes cld
\end_inset


\family typewriter
config-HP.mSL
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
config-HP.mSL
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 et chargée dans le GM pourra être vérifiée grâce au module 
\begin_inset Quotes cld
\end_inset

HP Configuration
\begin_inset Quotes crd
\end_inset

 (section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Module-HP-Configuration"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Il n'y a guère plus à en dire que ce qui est expliqué à la section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Configuration-des-canaux-hp"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Il est difficile de donner de bons conseils, tant il peut y avoir de variantes
 pour une installation, même de 8 haut-parleurs
\begin_inset space ~
\end_inset

: des différentes formes d'octos circulaires, de la ligne droite au cube,
 les possibilités sont multiples.
 Il est bon de prévoir des sorties mono et stéréo (quand l'auditeur est
 au centre du cercle), des stéréo proches ou lointaines (lorsque les HP
 sont sur scène), et des tutti (tous les HP...).
 
\end_layout

\begin_layout Standard
Considérons d'abord une octo circulaire, avec des HP de n° 1 à 8 dans le
 sens des aiguilles d'une montre.
 On peut imaginer la configuration suivante
\begin_inset Foot
status open

\begin_layout Plain Layout
On se souvient qu'une configuration est définie par un numéro de votre choix,
 suivi d'un nombre de HP, suivi de la liste de ces HP, et se termine par
 un 0.
\end_layout

\end_inset


\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
table(data(
\end_layout

\begin_layout LyX-Code
   Table HPConf Clear
\end_layout

\begin_layout LyX-Code
      101 1 1 0  102 1 2 0  103 1 3 0  104 1 4 0
\end_layout

\begin_layout LyX-Code
      105 1 5 0  106 1 6 0  107 1 7 0  108 1 8 0
\end_layout

\begin_layout LyX-Code
      201 2 1 2 0  202 2 2 3 0  203 2 3 4 0  204 2 4 5 0
\end_layout

\begin_layout LyX-Code
      205 2 5 6 0  206 2 6 7 0  207 2 7 8 0  208 2 8 1 0
\end_layout

\begin_layout LyX-Code
      401 4 1 2 3 4 0  402 4 3 4 5 6 0
\end_layout

\begin_layout LyX-Code
      403 4 5 6 7 8 0  404 4 7 8 1 2 0
\end_layout

\begin_layout LyX-Code
      801 8 1 2 3 4 5 6 7 8 0
\end_layout

\begin_layout LyX-Code
End ));
\end_layout

\begin_layout Standard
Ici le groupe 100 (numéros de 101 à 108) désigne chaque HP individuellement,
 le groupe 200 les paires de HP consécutifs, 400 des ensembles de 4 HP (nord,
 est, sud, ouest, par exemple), et 800 la configuration pour les tutti.
 
\end_layout

\begin_layout Standard
Si au contraîre nous nous intéressons à un cube (4 HP au sol, circulairement
 1 à 4, et 4 HP en hauteur, de 5 à 8, le 5 étant placé au-dessus du 1, le
 6 au-dessus du 2, etc.), on peut choisir
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
table(data(
\end_layout

\begin_layout LyX-Code
   Table HPConf Clear
\end_layout

\begin_layout LyX-Code
      101 1 1 0  102 1 2 0  103 1 3 0  104 1 4 0
\end_layout

\begin_layout LyX-Code
      105 1 5 0  106 1 6 0  107 1 7 0  108 1 8 0
\end_layout

\begin_layout LyX-Code
      201 2 1 7 0  202 2 2 8 0  203 2 3 5 0  204 2 4 6 0
\end_layout

\begin_layout LyX-Code
      401 4 1 2 3 4 0  402 4 5 6 7 8 0
\end_layout

\begin_layout LyX-Code
      801 8 1 2 3 4 5 6 7 8 0
\end_layout

\begin_layout LyX-Code
End ));
\end_layout

\begin_layout Standard
Le groupe 100 (de 101 à 108) désigne comme précédemment chaque HP individuelleme
nt, 800 le tutti
\begin_inset space ~
\end_inset

; nous avons choisi les paires de HP les plus éloignés pour les groupes
 de 2 HP de 200, et 400 représente les deux configurations de 4 HP au sol
 pour la première, 4 HP en hauteur pour la seconde.
\end_layout

\begin_layout Standard
Souvenons nous qu'il est possible d'utiliser, par exemple 203 pour cette
 paire spécifique, et 200 pour l'une quelconque des paires de HP.
\end_layout

\begin_layout Subsection
Création des clips...
\end_layout

\begin_layout Standard
L'aspect suivant du travail consiste à effectuer le choix, au milieu de
 l'immense bibliothèque de sons accumulés depuis des années, voire des décennies
, des clips que vous avez l'intention d'utiliser.
 Là, je ne peux rien pour vous.
\end_layout

\begin_layout Standard
Une fois les clips choisis, il faut les déclarer au Game Master.
\end_layout

\begin_layout Standard
Une première approche consiste à créer explicitement un répertoire, contenant
 l'ensemble des clips que vous désirez utiliser.
 Cette approche est plus complexe, mais offre le grand intérêt de vous permettre
 de créer un projet autonome, qu'il est possible de transférer sur une autre
 machine, lors de la mise en place d'une installation, par exemple.
\end_layout

\begin_layout Standard
Une seconde approche permet de faire du 
\begin_inset Quotes cld
\end_inset

cherry picking
\begin_inset Quotes crd
\end_inset

 de vos clips, et de les rendre accessibles au Game Master par un simple
 glisser-déposer.
 Le projet obtenu sera opérationnel sur votre installation, mais ne sera
 pas facilement exportable sur une autre machine.
 
\end_layout

\begin_layout Subsubsection
Création d'un répertoire spécial pour le projet
\end_layout

\begin_layout Standard
La contrainte supplémentaire que vous impose le Game Master est qu'il ne
 sait utiliser, jusqu'à présent, que des clips dont le nom est de la forme
 
\begin_inset Quotes cld
\end_inset

clip1
\emph on
XXXX.SSS
\emph default

\begin_inset Quotes crd
\end_inset

, où 
\begin_inset Quotes cld
\end_inset


\emph on
XXXX
\emph default

\begin_inset Quotes crd
\end_inset

 est un nombre de 4 chiffres exactement, compris entre 
\begin_inset Quotes cld
\end_inset

0000
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

9999
\begin_inset Quotes crd
\end_inset

, et 
\begin_inset Quotes cld
\end_inset


\emph on
SSS
\emph default

\begin_inset Quotes crd
\end_inset

 est le suffixe qui indique le format du clip, par exemple 
\begin_inset Quotes cld
\end_inset


\family typewriter
wav
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
aiff
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
mp3
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
flac
\family default

\begin_inset Quotes crd
\end_inset

, etc.
 Une fois que vous avez décidé d'utiliser un fichier représentant un son
 particulier, par exemple 
\begin_inset Quotes cld
\end_inset


\family typewriter
cri du cormoran au-dessus des jonques.wav
\family default

\begin_inset Quotes crd
\end_inset

, il ne vous reste plus qu'à le recopier dans le répertoire 
\begin_inset Quotes cld
\end_inset

WAVES
\begin_inset Quotes crd
\end_inset

, lui donner le nom sous lequel vous allez l'utiliser, par exemple 
\begin_inset Quotes cld
\end_inset


\family typewriter
clip12720.wav
\family default

\begin_inset Quotes crd
\end_inset

, et vous souvenir de la correspondance.
\end_layout

\begin_layout Standard
Je vais vous décrire une approche qui va permettre de se simplifier la vie,
 mais...
\end_layout

\begin_layout Paragraph
Mais sur Mac...
\end_layout

\begin_layout Standard
La longue digression qui suit s'adresse aux utilisateurs de Macintosh ou
 de Linux, dans la mesure où vous disposez en natif d'une application de
 type 
\emph on
Terminal
\emph default
, et d'un 
\emph on
shell
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
Un 
\emph on
shell
\emph default
 – il en existe en quantité – est un interprète des commandes introduites
 au terminal.
 Il permet aussi d'écrire, à l'instar de tout langage de programmation,
 des programmes complets, dits 
\emph on
scripts
\emph default
, destinés à exécuter une fonction particlière.
\end_layout

\end_inset

 (
\emph on
sh
\emph default
, 
\emph on
bash
\emph default
, etc.) relativement classique
\begin_inset Foot
status open

\begin_layout Plain Layout
Mais avec un peu de travail supplémentaire, vous pouvez, même sous Windows,
 installer un shell opérationnel.
 Cherchez sur Internet une information telle que 
\begin_inset Quotes cld
\end_inset

Utiliser le terminal bash sous Windows 11
\begin_inset Quotes crd
\end_inset

 ou équivalent pour découvrir la marche à suivre.
\end_layout

\end_inset

.
 Vous aurez besoin de
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
savoir un peu utiliser 
\emph on
TextEdit
\emph default
, le simplissime éditeur de texte du Mac, ou équivalent.
\end_layout

\begin_layout Itemize
savoir recopier sans erreur quelques lignes de code assez absconses
\end_layout

\begin_layout Itemize
comprendre mes explications, même lorsqu'il y a beaucoup d'implicite.
 Par exemple, je n'écrirai nulle part 
\begin_inset Quotes cld
\end_inset


\emph on
l'ordinateur doit être en route pour que ce que vous tapez au clavier soit
 pris en compte
\emph default

\begin_inset Quotes crd
\end_inset

, ni plein d'autres choses du même style.
\end_layout

\begin_layout Standard
Sur Mac, ma première suggestion sera de placer les icônes des utilitaires
 
\begin_inset Quotes cld
\end_inset


\emph on
TextEdit
\emph default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\emph on
Terminal
\emph default

\begin_inset Quotes crd
\end_inset

 dans le 
\begin_inset Quotes cld
\end_inset


\emph on
Dock
\emph default

\begin_inset Quotes crd
\end_inset

 afin qu'ils soient aisément accessibles.
 Dans la suite, nous interviendrons en interaction tantôt avec l'application
 
\emph on
Terminal
\emph default
, tantôt avec 
\emph on
TextEdit
\emph default
.
 Je tenterai de mon mieux d'indiquer quelles commandes doivent être exécutées
 immédiatement au terminal, et quelles autres doivent être introduites dans
 le fichier en cours d'édition dans l'éditeur de texte.
\end_layout

\begin_layout Standard
Pour lancer l'application 
\begin_inset Quotes cld
\end_inset


\emph on
Terminal
\emph default

\begin_inset Quotes crd
\end_inset

, il suffit donc de cliquer sur l'icône de l'application.
 Une fenêtre apparaît, avec un 
\begin_inset Quotes cld
\end_inset


\emph on
prompt
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
Ici, 
\begin_inset Quotes cld
\end_inset

Jonz
\begin_inset Quotes crd
\end_inset

 est l'indentification de l'utilisateur
\begin_inset space ~
\end_inset

; le prompt sera probablement différent sur votre machine.
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 tel que 
\begin_inset Quotes cld
\end_inset


\family typewriter
~
\begin_inset space ~
\end_inset

Jonz$
\begin_inset space ~
\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 qui indique que vous pouvez introduire une commande.
 Si vous faites 
\begin_inset Quotes cld
\end_inset


\emph on
return
\emph default

\begin_inset Quotes crd
\end_inset

, le même prompt réapparaît à la ligne suivante.
 Dans les paragraphes qui suivent, on suppose que les commandes sont tapées
 en réponse à un tel prompt.
\end_layout

\begin_layout Paragraph
Modifications de votre 
\begin_inset Quotes cld
\end_inset

profil
\begin_inset Quotes crd
\end_inset

 sur Mac
\end_layout

\begin_layout Standard
Il n'est pas inutile d'opérer quelques modifications dans votre profil utilisate
ur de terminal pour vous simplifier la vie.
 Lancer 
\begin_inset Quotes cld
\end_inset


\emph on
Terminal
\emph default

\begin_inset Quotes crd
\end_inset

 comme expliqué ci-dessus si ce n'est pas déjà fait.
 Assurez-vous d'être dans votre répertoire d'accueil par 
\begin_inset Quotes cld
\end_inset


\family typewriter
pwd
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
cd
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Paragraph*
A savoir
\end_layout

\begin_layout Standard
La commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
pwd
\family default

\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset


\emph on
print working directory
\emph default

\begin_inset Quotes crd
\end_inset

) liste dans votre terminal le 
\emph on
nom
\emph default
 du répertoire courant.
 Sur un Mac, le répertoire d'accueil de l'utilisateur 
\begin_inset Quotes cld
\end_inset


\emph on
Jonz
\emph default

\begin_inset Quotes crd
\end_inset

 est 
\begin_inset Quotes cld
\end_inset


\family typewriter
/Users/Jonz
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Paragraph*
A savoir
\end_layout

\begin_layout Standard
La commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
cd
\family default

\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset


\emph on
change directory
\emph default

\begin_inset Quotes crd
\end_inset

) utilisée 
\emph on
sans paramètre
\emph default
 vous ramène dans votre répertoire d'accueil.
 Avec un paramètre, elle permet des déplacements relatifs dans l'organisation
 arborescente des répertoires d'un disque
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset


\family typewriter
cd
\begin_inset space ~
\end_inset

toto
\family default

\begin_inset Quotes crd
\end_inset

 descend dans le sous-répertoire 
\begin_inset Quotes cld
\end_inset


\family typewriter
toto
\family default

\begin_inset Quotes crd
\end_inset

 du répertoire courant.
 
\begin_inset Quotes cld
\end_inset


\family typewriter
cd
\begin_inset space ~
\end_inset

..
\family default

\begin_inset Quotes crd
\end_inset

 remonte au répertoire parent.
 Elle permet aussi des déplacements absolus
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset


\family typewriter
cd /Users/Jonz/Library/Application
\backslash
 Support/REAPER
\family default

\begin_inset Quotes crd
\end_inset

 va dans le répertoire personnel des ressources de REAPER de l'utilisateur
 
\emph on
Jonz
\emph default
.
 Remarquons qu'Apple a eu la bonne idée de placer un espace dans le nom
 du répertoire 
\begin_inset Quotes cld
\end_inset


\family typewriter
Application
\begin_inset space ~
\end_inset

Support
\family default

\begin_inset Quotes crd
\end_inset

 ce qui fait que dans le shell, il faut placer un 
\begin_inset Quotes cld
\end_inset


\emph on
backslash
\emph default

\begin_inset Quotes crd
\end_inset

 devant cet espace pour indiquer qu'il fait partie du nom du fichier, et
 n'est pas un séparateur de commandes...
 
\end_layout

\begin_layout Standard
Dans votre répertoire d'accueil, faire 
\begin_inset Quotes cld
\end_inset


\family typewriter
open
\begin_inset space ~
\end_inset

.profile
\family default

\begin_inset Quotes crd
\end_inset

 pour ouvrir le fichier décrivant votre profil utilisateur.
 Si vous avez droit à la réponse 
\begin_inset Quotes cld
\end_inset


\family typewriter
The file /Users/Jonz/.profile does not exist.
\family default

\begin_inset Quotes crd
\end_inset

, faites juste 
\begin_inset Quotes cld
\end_inset


\family typewriter
touch .profile
\family default

\begin_inset Quotes crd
\end_inset

 pour créer ce fichier, que vous pouvez ensuite ouvrir par 
\begin_inset Quotes cld
\end_inset


\family typewriter
open
\begin_inset space ~
\end_inset

.profile
\family default

\begin_inset Quotes crd
\end_inset

.
 Si un autre message d'erreur apparaît (tel que 
\begin_inset Quotes cld
\end_inset

aucune application n'est définie pour ouvrir ce fichier
\begin_inset Quotes crd
\end_inset

), essayez 
\begin_inset Quotes cld
\end_inset


\family typewriter
open
\begin_inset space ~
\end_inset

-e
\begin_inset space ~
\end_inset

.profile
\family default

\begin_inset Quotes crd
\end_inset

, qui suggère explicitement d'utiliser 
\family typewriter
TextEdit
\family default
 pour ouvrir le fichier.
\end_layout

\begin_layout Standard
Pour ma part, je trouve pratique
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
de disposer de quelques commandes personnelles pour aller directement dans
 un répertoire fréquemment utilisé.
 Ainsi, pour se rendre dans le répertoire des ressources de REAPER, je tape
 directement 
\begin_inset Quotes cld
\end_inset


\family typewriter
RR
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Itemize
de disposer de variables du shell qui désignent directement un répertoire
 spécifique.
\end_layout

\begin_layout Itemize
de disposer d'un emplacement personnel pour placer les nouvelles commandes
 que l'on écrit sous forme de shell script, afin qu'elles soient accessibles
 en tout lieu et à tout instant.
\end_layout

\begin_layout Standard
Créons donc une commande pour aller dans le répertoire des ressources de
 REAPER.
 Dans un terminal (on peut en avoir autant que l'on veut, par le menu 
\begin_inset Quotes cld
\end_inset


\family typewriter
Shell\SpecialChar menuseparator
Nouvelle
\begin_inset space ~
\end_inset

fenêtre...
\family default

\begin_inset Quotes crd
\end_inset

), Ouvrons le profil (par 
\begin_inset Quotes cld
\end_inset


\family typewriter
cd
\family default

\begin_inset Quotes crd
\end_inset

 puis 
\begin_inset Quotes cld
\end_inset


\family typewriter
open
\begin_inset space ~
\end_inset

.profile
\family default

\begin_inset Quotes crd
\end_inset

), plaçons nous dans la fenêtre ouverte par 
\emph on
TextEdit
\emph default
, et rajoutons la ligne suivante
\begin_inset Foot
status open

\begin_layout Plain Layout
Ligne unique, malheureusement présentée ici sous la forme de deux lignes
 consécutives pour que le manuel soit lisible – le caractère 
\begin_inset Quotes cld
\end_inset


\family typewriter
A
\family default

\begin_inset Quotes crd
\end_inset

 du début de seconde ligne doit suivre imédiatement, sans espace, le caractère
 
\begin_inset Quotes cld
\end_inset


\family typewriter
/
\family default

\begin_inset Quotes crd
\end_inset

 de fin de ligne précédente.
\end_layout

\end_inset


\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
alias RR="cd '/Users/Jonz/Library/
\end_layout

\begin_layout LyX-Code
Application Support/REAPER'"
\end_layout

\begin_layout Standard
Dès lors (très précisément, à partir du moment où l'on a sauvegardé le fichier,
 et dans tout nouveau terminal ouvert après cet instant), la commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
RR
\family default

\begin_inset Quotes crd
\end_inset

 vous permet de vous positionner immédiatement dans ce répertoire.
 Notons que toute la partie droite de l'affectation est pacée entre double
 quotes, et que le nom du répertoire lui-même est entre simples quotes
\begin_inset space ~
\end_inset

: cette précaution parmet de s'assurer que tout ce qui est entre simple
 quotes fait partie intégrante du nom du fichier, y compris le fameux espace
 séparant 
\begin_inset Quotes cld
\end_inset

Application
\begin_inset Quotes crd
\end_inset

 de 
\begin_inset Quotes cld
\end_inset

Support
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Il peut être pratique de confirmer visuellement que l'on est bien dans ce
 répertoire, par exemple en imprimant son nom.
 On définira alors 
\begin_inset Quotes cld
\end_inset


\family typewriter
RR
\family default

\begin_inset Quotes crd
\end_inset

 sous la forme de la ligne unique (même remarque que ci-dessus) suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
alias RR="cd '/Users/Jonz/Library/
\end_layout

\begin_layout LyX-Code
Application Support/REAPER' ; pwd"
\end_layout

\begin_layout Standard
L'alias que nous créons se compose ici de deux commandes séparées par un
 point-virgule.
 Elle seront exécutées en séquence, de gauche à droite.
\end_layout

\begin_layout Standard
Il peut être également pratique d'imprimer immédiatement le contenu du répertoir
e, ne serait-ce que pour se souvenir de l'endroit où l'on désirait aller
 après nous être rendus dans ce répertoire.
 On peut créer 
\begin_inset Quotes cld
\end_inset


\family typewriter
RR
\family default

\begin_inset Quotes crd
\end_inset

 ainsi
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
alias RR="cd '/Users/Jonz/Library/
\end_layout

\begin_layout LyX-Code
Application Support/REAPER' ; ls"
\end_layout

\begin_layout Paragraph*
A savoir
\end_layout

\begin_layout Standard
La commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
ls
\family default

\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset


\emph on
list
\emph default

\begin_inset Quotes crd
\end_inset

) affiche sur le terminal la liste, ordonnée alphabétiquement en une ou
 plusieurs colonnes selon la largeur disponible, des fichiers contenus dans
 le répertoire courant.
 Cette commande peut aussi accepter nombre d'options dont certaines des
 plus utiles sont
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Standard

\family typewriter
ls
\begin_inset space ~
\end_inset

-l
\family default
 affiche au format long, une entrée par ligne, les noms, tailles, dates
 de modification, droit d'accès, etc.
 de chaque fichier.
\end_layout

\begin_layout Standard

\family typewriter
ls
\begin_inset space ~
\end_inset

-t
\family default
 affiche les noms des fichiers, du plus récemment modifié au plus ancien.
 En combinant 
\begin_inset Quotes cld
\end_inset

l
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

t
\begin_inset Quotes crd
\end_inset

, et 
\begin_inset Quotes cld
\end_inset

r
\begin_inset Quotes crd
\end_inset

 (qui veut dire en ordre inverse), 
\begin_inset Quotes cld
\end_inset


\family typewriter
ls
\begin_inset space ~
\end_inset

-ltr
\family default

\begin_inset Quotes crd
\end_inset

 affiche les fichiers au format long, le plus récent en dernier.
\end_layout

\begin_layout Paragraph*
A savoir
\end_layout

\begin_layout Standard
De manière plus générale, il peut être utile de consulter le manuel de la
 commande, que l'on obtient par 
\begin_inset Quotes cld
\end_inset


\family typewriter
man
\begin_inset space ~
\end_inset

ls
\family default

\begin_inset Quotes crd
\end_inset

.
 Naturellement, il existe des descriptions de toutes les commandes du shell
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset


\family typewriter
man
\begin_inset space ~
\end_inset

cd
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
man
\begin_inset space ~
\end_inset

pwd
\family default

\begin_inset Quotes crd
\end_inset

, etc.
\end_layout

\begin_layout Standard
Enfin et pourquoi pas, vous pouvez imprimer votre message personnel au moyen
 de la commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
echo
\family default

\begin_inset Quotes crd
\end_inset

 par exemple
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
echo Dans le répertoire REAPER
\end_layout

\begin_layout Standard
Nous avons évoqué les 
\begin_inset Quotes cld
\end_inset

variables du shell
\begin_inset Quotes crd
\end_inset

.
 Ce terme concerne un petit nombre de variables, propres à chaque incarnation
 d'un shell (donc liées à une fenêtre terminal particulière).
 La liste de ces variables, avec leur valeur, s'obtient par 
\begin_inset Quotes cld
\end_inset


\family typewriter
env
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout LyX-Code
$ env 
\end_layout

\begin_layout LyX-Code
TERM_PROGRAM=Apple_Terminal
\end_layout

\begin_layout LyX-Code
SHELL=/bin/bash
\end_layout

\begin_layout LyX-Code
TERM=xterm-256color
\end_layout

\begin_layout LyX-Code
TERM_PROGRAM_VERSION=421.2
\end_layout

\begin_layout LyX-Code
PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
\end_layout

\begin_layout LyX-Code
PWD=/Users/Jonz/Library/Application Support/REAPER
\end_layout

\begin_layout LyX-Code
HOME=/Users/Jonz
\end_layout

\begin_layout LyX-Code
LOGNAME=Jonz
\end_layout

\begin_layout Standard
(Quelques variables non intéressantes ici ont été supprimées de cette liste).
\end_layout

\begin_layout Standard
Ces variables peuvent s'utiliser dans un script sous la forme d'un 
\begin_inset Quotes cld
\end_inset


\family typewriter
$
\family default

\begin_inset Quotes crd
\end_inset

 suivi du nom de la variable
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
echo Le répertoire principal de $LOGNAME est $HOME
\end_layout

\begin_layout Standard
S'il peut exister une ambiguité dans la suite de caractères placée après
 un 
\begin_inset Quotes cld
\end_inset


\family typewriter
$
\family default

\begin_inset Quotes crd
\end_inset

, on peut utiliser des accolades autour du nom de la variable
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
echo Le répertoire principal de ${LOGNAME} est ${HOME}
\end_layout

\begin_layout Standard
Il est possible de créer des variables propres à un processus (ce que l'on
 va faire dans de petits scripts), ou des variables d'environnement, qui
 seront connues de tous les processus héritant de cet environnement.
 Ainsi, dans les écritures suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
toto=hello
\end_layout

\begin_layout LyX-Code
export titi=world
\end_layout

\begin_layout Standard
La variable 
\begin_inset Quotes cld
\end_inset


\family typewriter
toto
\family default

\begin_inset Quotes crd
\end_inset

 est propre au processus courant, mais 
\begin_inset Quotes cld
\end_inset


\family typewriter
titi
\family default

\begin_inset Quotes crd
\end_inset

, dont la déclaration est précédée de 
\begin_inset Quotes cld
\end_inset


\family typewriter
export
\family default

\begin_inset Quotes crd
\end_inset

, sera utilisable par des descendants du processus, et apparaîtra dans le
 résultat de 
\begin_inset Quotes cld
\end_inset


\family typewriter
env
\family default

\begin_inset Quotes crd
\end_inset

.
 Décidons que nous avons besoin d'une variable qui désigne le répertoire
 d'accès aux ressources de REAPER.
 Nous pouvons écrire dans notre 
\begin_inset Quotes cld
\end_inset


\family typewriter
.profile
\family default

\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
export RR='/Users/Jonz/Library/Application Support/REAPER'
\end_layout

\begin_layout Standard
puis, ultérieurement, utiliser
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
ls "$RR/Effects"
\end_layout

\begin_layout Standard
pour lister les effets de type JSFX définis dans notre version de REAPER
\begin_inset Foot
status open

\begin_layout Plain Layout
Remarquons que les double-quotes autour du paramètre de 
\begin_inset Quotes cld
\end_inset

ls
\begin_inset Quotes crd
\end_inset

 sont nécessaires pour compenser l'effet nocif de l'espace inclus dans 
\begin_inset Quotes cld
\end_inset

Application Support
\begin_inset Quotes crd
\end_inset

.
 Mais on peut aussi écrire
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset


\family typewriter
ls
\begin_inset space ~
\end_inset

"$RR"/Effects
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Enfin, pour conclure sur l'utilisation du profil, remarquons la variable
 
\begin_inset Quotes cld
\end_inset


\family typewriter
PATH
\family default

\begin_inset Quotes crd
\end_inset

 qui décrit une liste de répertoires, séparés par des caractères 
\begin_inset Quotes cld
\end_inset


\family typewriter
:
\family default

\begin_inset Quotes crd
\end_inset

, où le 
\emph on
shell
\emph default
 peut trouver des programmes exécutables.
 Il est utile, plutôt que de modifier les répertoires du système, de rajouter
 un répertoire personnel dans lequel nous rangerons nos propres programmes.
 Il est pratique d'appeler 
\begin_inset Quotes cld
\end_inset


\family typewriter
bin
\family default

\begin_inset Quotes crd
\end_inset

 ce répertoire, et de le créer dans notre répertoire d'accueil.
 Dans une fenêtre terminal, écrire
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
\begin_inset CommandInset label
LatexCommand label
name "cd-;-mkdir"

\end_inset

cd ; mkdir bin
\end_layout

\begin_layout Standard
On va maintenant indiquer qu'il contient des exécutables, en ajoutant dans
 la fenêtre d'édition du 
\begin_inset Quotes cld
\end_inset

profil
\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
export PATH=.:$HOME/bin:$PATH
\end_layout

\begin_layout Standard
A partir de maintenant, le shell acceptera des scripts ou des exécutables
 situés dans le répertoire courant 
\begin_inset Quotes cld
\end_inset


\family typewriter
.
\family default

\begin_inset Quotes crd
\end_inset

, dans votre répertoire 
\begin_inset Quotes cld
\end_inset


\family typewriter
bin
\family default

\begin_inset Quotes crd
\end_inset

 (par 
\begin_inset Quotes cld
\end_inset


\family typewriter
$HOME/bin
\family default

\begin_inset Quotes crd
\end_inset

), ou encore dans tous les répertoires antérieurement définis par défaut
 (
\begin_inset Quotes cld
\end_inset


\family typewriter
/usr/bin
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
/bin
\family default

\begin_inset Quotes crd
\end_inset

, etc.).
\end_layout

\begin_layout Paragraph
Le concept
\end_layout

\begin_layout Standard
Continuons nos explications, et abordons la notion de 
\begin_inset Quotes cld
\end_inset

lien
\begin_inset Quotes crd
\end_inset

.
 Un système de fichiers décrit l'organisation logique d'un disque dur (ou
 d'une partie de celui-ci).
 L'espace adressable d'un disque dur est partagé en un certain nombre de
 
\begin_inset Quotes cld
\end_inset

secteurs
\begin_inset Quotes crd
\end_inset

 de taille fixe (par exemple 256 octets, 1024 octets, etc.).
 Tout fichier est représenté, selon sa taille, par un ou plusieurs secteurs.
 Les fichiers sont, quant à eux, organisés sous forme arborescente
\begin_inset space ~
\end_inset

: la 
\begin_inset Quotes cld
\end_inset

racine
\begin_inset Quotes crd
\end_inset

 est un répertoire, qui référencie des fichiers ou d'autres répertoires,
 chacun d'eux pouvant référencer des fichiers ou des répertoires, etc.
 Un répertoire n'est lui-même rien d'autre qu'un fichier particulier, qui
 définit des 
\emph on
liens
\emph default
 entre un 
\begin_inset Quotes cld
\end_inset

nom de fichier
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

l'adresse disque
\begin_inset Quotes crd
\end_inset

 de ce fichier.
 Un tel lien n'a de sens qu'au sein d'un certain système de fichier.
 Sur un autre disque, un même numéro de secteur va désigner un autre fichier.
 
\end_layout

\begin_layout Standard
Un nom de fichier peut constituer une référence 
\begin_inset Quotes cld
\end_inset


\emph on
relative
\emph default

\begin_inset Quotes crd
\end_inset

, à l'intérieur du répertoire courant, tel 
\begin_inset Quotes cld
\end_inset


\family typewriter
mouche-noire.aiff
\family default

\begin_inset Quotes crd
\end_inset

, ou un nom 
\begin_inset Quotes cld
\end_inset


\emph on
absolu
\emph default

\begin_inset Quotes crd
\end_inset

, relatif au système de fichier, 
\begin_inset Quotes cld
\end_inset


\family typewriter
/Users/Jonz/Sons/Insectes/mouche-noire.aiff
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Une commande du shell, 
\begin_inset Quotes cld
\end_inset


\family typewriter
ln
\family default

\begin_inset Quotes crd
\end_inset

 (pour 
\begin_inset Quotes cld
\end_inset


\emph on
link
\emph default

\begin_inset Quotes crd
\end_inset

), permet de créer un nouveau lien (ici 
\begin_inset Quotes cld
\end_inset


\family typewriter
clip17021.wav
\family default

\begin_inset Quotes crd
\end_inset

) sur un fichier existant
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
ln criquet-sahara-7.wav clip17021.wav
\end_layout

\begin_layout Standard
La commande ne crée pas une copie
\begin_inset space ~
\end_inset

: simplement, on dispose dorénavant de 
\emph on
deux noms différents
\emph default
 pour référencer le 
\emph on
même
\emph default
 fichier, et l'accès à ce fichier est tout aussi performant, quel que soit
 le nom utilisé.
\end_layout

\begin_layout Standard
L'intérêt, bien sûr, est que ce nouveau nom peut être placé (ou déplacé)
 dans un répertoire différent du répertoire original.
 Ceci va nous permettre, sans utiliser d'espace supplémentaire sur le disque,
 de laisser nos fichiers sons originaux dans leur hiérarchie propre, mais
 aussi d'en fournir l'accès au Game Master selon son propre protocole, à
 l'intérieur du répertoire WAVES.
\end_layout

\begin_layout Standard
Notons encore que, tant que l'on reste dans le même système de fichiers,
 
\begin_inset Quotes cld
\end_inset

déplacer
\begin_inset Quotes crd
\end_inset

 un fichier d'un répertoire à un autre, que ce soit par une commande shell
 ou une action à la souris, ne fait que déplacer ce lien, sans bouger le
 fichier qui reste au même emplacement du disque.
 C'est donc une action extrêmement rapide.
 
\end_layout

\begin_layout Paragraph*
A savoir
\end_layout

\begin_layout Standard
Comparons les résultats de trois commandes assez semblables
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
ln file1 file2
\end_layout

\begin_layout LyX-Code
cp file1 file2
\end_layout

\begin_layout LyX-Code
mv file1 file2
\end_layout

\begin_layout Standard
Après la commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
ln
\family default

\begin_inset Quotes crd
\end_inset

, que l'on vient de voir, il existe un fichier unique sur disque, l'original
 
\begin_inset Quotes cld
\end_inset


\family typewriter
file1
\family default

\begin_inset Quotes crd
\end_inset

, maintenant accessible par les deux noms 
\begin_inset Quotes cld
\end_inset


\family typewriter
file1
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
file2
\family default

\begin_inset Quotes crd
\end_inset

.
 Comme il s'agit du 
\emph on
même
\emph default
 fichier, toute modification de 
\begin_inset Quotes cld
\end_inset


\family typewriter
file1
\family default

\begin_inset Quotes crd
\end_inset

 sera visible dans 
\begin_inset Quotes cld
\end_inset


\family typewriter
file2
\family default

\begin_inset Quotes crd
\end_inset

 et réciproquement.
\end_layout

\begin_layout Standard
Après la commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
cp
\family default

\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset


\emph on
copy
\emph default

\begin_inset Quotes crd
\end_inset

), il existe un nouveau fichier, 
\begin_inset Quotes cld
\end_inset


\family typewriter
file2
\family default

\begin_inset Quotes crd
\end_inset

, qui est en tous points identique à 
\begin_inset Quotes cld
\end_inset


\family typewriter
file1
\family default

\begin_inset Quotes crd
\end_inset

.
 Cependant, de l'espace a été utilisé sur le disque pour représenter ce
 nouveau fichier, et ils sont physiquement différents.
 Une modification de l'un n'a pas d'impact sur l'autre.
\end_layout

\begin_layout Standard
Enfin, 
\begin_inset Quotes cld
\end_inset


\family typewriter
mv
\family default

\begin_inset Quotes crd
\end_inset

 (
\begin_inset Quotes cld
\end_inset


\emph on
move
\emph default

\begin_inset Quotes crd
\end_inset

) va simplement changer le nom du fichier original, de 
\begin_inset Quotes cld
\end_inset


\family typewriter
file1
\family default

\begin_inset Quotes crd
\end_inset

 en 
\begin_inset Quotes cld
\end_inset


\family typewriter
file2
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Dans toutes ces commandes, 
\begin_inset Quotes cld
\end_inset


\family typewriter
file1
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
file2
\family default

\begin_inset Quotes crd
\end_inset

 peuvent être des références relatives ou absolues.
 On peut ainsi déplacer ou copier un fichier d'un répertoire à un autre,
 éventuellement en changeant son nom, etc.
\end_layout

\begin_layout Standard
Lorsque l'on s'intéresse à des fichiers situés dans des systèmes de fichiers
 différents (par exemple, le disque système monté sur la racine 
\begin_inset Quotes cld
\end_inset


\family typewriter
/
\family default

\begin_inset Quotes crd
\end_inset

, et un disque contenant essentiellement des fichiers audios, monté par
 exemple sur 
\begin_inset Quotes cld
\end_inset


\family typewriter
/Volumes/Sons
\family default

\begin_inset Quotes crd
\end_inset

), il n'est pas possible de créer sur l'un des disques un lien direct sur
 un fichier situé sur l'autre disque.
 On va alors créer un 
\emph on
lien symbolique
\begin_inset Index idx
status open

\begin_layout Plain Layout
lien symbolique
\end_layout

\end_inset


\emph default
.
 Imaginons que notre terminal soit positionné sur un répertoire situé sur
 le disque système.
 On pourrait alors écrire
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
ln -s /Volumes/Sons/Baleine-33.wav clip12003.wav
\end_layout

\begin_layout Standard
afin de créer, dans ce répertoire, un lien (symbolique, par l'option 
\begin_inset Quotes cld
\end_inset


\family typewriter
-s
\family default

\begin_inset Quotes crd
\end_inset

) vers un certain fichier se trouvant sur l'autre disque.
 Cette approche permet donc d'utiliser, sans les recopier, des fichiers
 situés sur d'autres volumes que le disque système.
 Elle est un peu plus lente, puisqu'il faut d'abord décoder le lien symbolique,
 puis ouvrir effectivement le fichier référencé.
 Elle est également plus fragile, en ce sens qu'un fichier ainsi référencé
 peut ne pas être en ligne (disque non monté, par exemple).
\end_layout

\begin_layout Standard
Après cette brêve introduction à certains aspects du shell, revenons à notre
 préoccupation initiale, et voyons en quoi ces nouvelles connaissances vont
 nous aider à mieux gérer nos clips.
\end_layout

\begin_layout Standard
Imaginons un scénario raisonnable
\begin_inset space ~
\end_inset

: vous allez choisir des clips dans différents répertoires, les classifier
 selon certains critères, et créer une dizaine de groupes de clips, dont
 vous avez déjà déterminé la finalité.
\end_layout

\begin_layout Standard
La méthode proposée consiste à constituer des listes de clips représentant
 ces groupes, puis à utiliser un utilitaire qui générera les commandes de
 création des noms de clips attendus par le 
\emph on
Game Master
\emph default
.
 Il est facile de construire une telle liste
\begin_inset space ~
\end_inset

: placez-vous dans le répertoire 
\begin_inset Quotes cld
\end_inset

X
\begin_inset Quotes crd
\end_inset

 contenant vos sons, et générez la liste de tous les fichiers de type 
\begin_inset Quotes cld
\end_inset


\emph on
wave
\emph default

\begin_inset Quotes crd
\end_inset

 dans le fichier 
\begin_inset Quotes cld
\end_inset


\family typewriter
listeA.txt
\family default

\begin_inset Quotes crd
\end_inset

 par
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
cd X ; ls *.wav > liste.txt
\end_layout

\begin_layout Standard
L'expression 
\begin_inset Quotes cld
\end_inset


\family typewriter
*.wav
\family default

\begin_inset Quotes crd
\end_inset

 va filtrer tous les noms de fichiers qui se terminent par 
\begin_inset Quotes cld
\end_inset


\family typewriter
.wav
\family default

\begin_inset Quotes crd
\end_inset

, suffixe caractéristique des fichiers au format 
\begin_inset Quotes cld
\end_inset


\emph on
wave
\emph default

\begin_inset Quotes crd
\end_inset

.
 Le caractère 
\begin_inset Quotes cld
\end_inset


\family typewriter
>
\family default

\begin_inset Quotes crd
\end_inset

 qui suit indique une redirection
\begin_inset space ~
\end_inset

: le résultat ne va pas sortir sur le terminal, mais dans le fichier de
 nom 
\begin_inset Quotes cld
\end_inset


\family typewriter
liste.txt
\family default

\begin_inset Quotes crd
\end_inset

 – le suffixe 
\begin_inset Quotes cld
\end_inset


\family typewriter
.txt
\family default

\begin_inset Quotes crd
\end_inset

 indique un format textuel.
\end_layout

\begin_layout Standard
Vérifiez le contenu de ce fichier, en le listant sur le terminal par
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
cat list.txt
\end_layout

\begin_layout Standard
Il vous est maintenant loisible d'éditer ce fichier, pour éliminer les sons
 qui ne vous intéressent pas, éventuellement d'en changer l'ordre, pour
 grouper des sons aux caractéristiques similaires, etc.
 Vous allez effectuer ce travail dans 
\emph on
TextEdit
\emph default
, en ouvrant le fichier par
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
open -e liste.txt
\end_layout

\begin_layout Paragraph*
A savoir
\end_layout

\begin_layout Standard
L'expression 
\begin_inset Quotes cld
\end_inset


\family typewriter
*.wav
\family default

\begin_inset Quotes crd
\end_inset

 va sélecter tous les fichiers 
\begin_inset Quotes cld
\end_inset


\emph on
wave
\emph default

\begin_inset Quotes crd
\end_inset

 du répertoire courant.
 Vous pouvez sélectionner en une seule commande plusieurs types de fichiers
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
ls *.wav *.flac *.aiff
\end_layout

\begin_layout Standard
Vous pouver aussi sélecter les fichiers dans d'autres répertoires, au moyen
 de chemins relatifs ou absolus
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
ls */*.wav
\end_layout

\begin_layout LyX-Code
ls /Volumes/Sons/Bruits/*.wav /Volumes/Sons/Modulations/*.wav
\end_layout

\begin_layout Standard
La première expression va filtrer tous les 
\begin_inset Quotes cld
\end_inset


\emph on
waves
\emph default

\begin_inset Quotes crd
\end_inset

 situés dans des sous-répertoires du répertoire courant, la seconde va chercher
 les 
\begin_inset Quotes cld
\end_inset


\emph on
waves
\emph default

\begin_inset Quotes crd
\end_inset

 dans deux répertoires spécifiques du disque 
\begin_inset Quotes cld
\end_inset


\family typewriter
Sons
\family default

\begin_inset Quotes crd
\end_inset

.
 Dans le premier cas, vous obtiendrez des noms de fichiers relatifs au répertoir
e courant, dans le second des noms absolus.
\end_layout

\begin_layout Standard
Nous allons maintenant utiliser certains scripts 
\emph on
shell
\emph default
 distribués avec le Game-Master, et placés dans le répertoire 
\family typewriter
Scripts
\family default
.
 Allez dans ce répertoire, et copier dans votre répertoire 
\begin_inset Quotes cld
\end_inset


\family typewriter
bin
\family default

\begin_inset Quotes crd
\end_inset

 créé ci-dessus (c.f.
 § 
\begin_inset CommandInset ref
LatexCommand vref
reference "cd-;-mkdir"
plural "false"
caps "false"
noprefix "false"

\end_inset

) tous les fichiers de type 
\begin_inset Quotes cld
\end_inset


\family typewriter
.sh
\family default

\begin_inset Quotes crd
\end_inset

, qui sont des commandes destinées au shell.
 
\end_layout

\begin_layout Paragraph*

\family typewriter
sndfiles.sh
\end_layout

\begin_layout Standard
Ce premier script 
\begin_inset Quotes cld
\end_inset

emballe
\begin_inset Quotes crd
\end_inset

 une séquence de commandes, qui liste les fichiers du répertoire courant
 et des sous-répertoires, filtre ceux dont le suffixe correspond à un type
 de fichier son reconnu (
\begin_inset Quotes cld
\end_inset


\family typewriter
wav
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
aif
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
flac
\family default

\begin_inset Quotes crd
\end_inset

, etc.), et ajoute en tête leur position dans la hiérarchie du système de
 fichier courant.
 Le script est directement utilisable par son nom dans la mesure où il est
 placé dans votre répertoire 
\begin_inset Quotes cld
\end_inset


\family typewriter
bin
\family default

\begin_inset Quotes crd
\end_inset

.
 Deux utilisations typiques
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
sndfiles.sh | more
\end_layout

\begin_layout Standard
va nous permettre de lister page par page cette liste de noms de fichier,
 en utilisant l'opération 
\begin_inset Quotes cld
\end_inset


\family typewriter
|
\family default

\begin_inset Quotes crd
\end_inset

 qui transmet directement la sortie du script à l'entrée de l'utilitaire
 
\begin_inset Quotes cld
\end_inset


\family typewriter
more
\family default

\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

: on passe à la page suivante par un espace, on en sort par 
\begin_inset Quotes cld
\end_inset


\family typewriter
q
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout LyX-Code
sndfiles.sh > liste.txt
\end_layout

\begin_layout Standard
qui cette fois écrit, en utilisant la redirection 
\begin_inset Quotes cld
\end_inset


\family typewriter
>
\family default

\begin_inset Quotes crd
\end_inset

 la liste des sons dans le fichier 
\begin_inset Quotes cld
\end_inset


\family typewriter
liste.txt
\family default

\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Standard
Il est dès lors possible d'éditer cette liste, (par 
\begin_inset Quotes cld
\end_inset


\family typewriter
open -e liste.txt
\family default

\begin_inset Quotes crd
\end_inset

) pour ne conserver que les sons qui vous intéressent, éventuellement en
 les déplaçant dans le fichier, avant de créer une série de clips destinés
 à être inclus dans le répertoire 
\begin_inset Quotes cld
\end_inset

WAVES
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Paragraph*
A savoir
\end_layout

\begin_layout Standard
Sans devoir passer par un éditeur de texte, vous pouvez visualiser le contenu
 d'un fichier texte par la commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
more
\family default

\begin_inset Quotes crd
\end_inset

 ci-dessus, ou encore 
\begin_inset Quotes cld
\end_inset


\family typewriter
cat
\family default

\begin_inset Quotes crd
\end_inset

 qui imprime tout le contenu du fichier sur votre terminal
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
more liste.txt
\end_layout

\begin_layout LyX-Code
cat liste.txt
\end_layout

\begin_layout Paragraph*

\family typewriter
creatclips.sh
\end_layout

\begin_layout Standard
Cet autre script a pour tâche de créer une série de noms adaptés au Game
 Master à partir de cette liste de clips.
 Il attend trois paramètres
\begin_inset space ~
\end_inset

: le premier est le nom d'un fichier, contenant la liste originale des clips,
 à raison d'un nom par ligne
\begin_inset space ~
\end_inset

; le second paramètre est le numéro du premier clip cible (par exemple 2340,
 pour créer les clips 2340, 2341, 2342, etc.)
\begin_inset space ~
\end_inset

; le troisième paramètre est un mot-clef qui indique de quelle manière se
 fait cette génération
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
copy signifie que les clips originaux vont être recopiés, c'est-à-dire dupliqués
, ce qui occupera autant d'espace disque supplémentaire que les clips initiaux.
\end_layout

\begin_layout Description
move indique que les clips originaux vont être déplacés dans le répertoire
 courant, sous ces nouveaux noms.
 Il n'y a pas d'espace disque utilisé en plus, mais les fichiers originaux
 auront disparu de leur répertoire.
\end_layout

\begin_layout Description
link demande qu'un nouveau lien physique soit créé sur le fichier d'origine.
 Il n'y a pas d'espace disque utilisé en plus, le nouveau nom et l'ancien
 faisant référence au même fichier physique.
 Ce lien physique ne peut être créé que si le fichier source et le fichier
 cible sont sur le même disque physique.
\end_layout

\begin_layout Description
symb indique qu'un lien symbolique va être créé sur le fichier d'origine.
 Il n'y a que quelques octets de plus utilisés pour chaque fichier, et les
 clips peuvent faire référence à des fichiers sur n'importe quel disque
 monté.
 En contrepartie, tous les fichiers devront être sur des systèmes de fichiers
 montés pour que le GM puisse les utiliser.
\end_layout

\begin_layout Description
list se contente de vous indiquer quelle sera la correspondance entre les
 noms originaux et les noms transformés, sans rien modifier.
 Cette option peut être utile pour créer après coup la liste des correspondances
, si vous disposez toujours du fichier texte utilisé comme premier paramètre.
\end_layout

\begin_layout Standard
A titre d'exemple, après avoir créé dans un répertoire le fichier 
\begin_inset Quotes cld
\end_inset


\family typewriter
liste.txt
\family default

\begin_inset Quotes crd
\end_inset

, nous pouvons créer les fichiers 
\begin_inset Quotes cld
\end_inset

clips
\begin_inset Quotes crd
\end_inset

 attendus par le GM
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
Jonz$ creatclips.sh liste.txt 4500 symb
\end_layout

\begin_layout LyX-Code
clip14500.wav /Users/Jonz/SONS/DIEGO-2022/Audio 1-SndShGS_09.wav
\end_layout

\begin_layout LyX-Code
clip14501.wav /Users/Jonz/SONS/Serie-1/JJG-STE-002.wav
\end_layout

\begin_layout LyX-Code
clip14502.wav /Users/Jonz/SONS/DIEGO-2022/Audio 1-XNsStr_21.wav
\end_layout

\begin_layout LyX-Code
clip14503.wav /Users/Jonz/SONS/Serie-1/Click-03.wav
\end_layout

\begin_layout LyX-Code
clip14504.wav /Users/Jonz/SONS/DIEGO-2022/Audio 1_03.wav
\end_layout

\begin_layout LyX-Code
clip14505.aif /Users/Jonz/SONS/MarcAntoineMillon/tôle C-Ducer#01.3.aif
\end_layout

\begin_layout LyX-Code
clip14506.wav /Users/Jonz/SONS/Serie-1/Chocs-aigus-forts.wav
\end_layout

\begin_layout LyX-Code
clip14507.aif /Users/Jonz/SONS/MarcAntoineMillon/tôle pavillon#02.3.aif
\end_layout

\begin_layout LyX-Code
clip14508.wav /Users/Jonz/SONS/Serie-1/JJG-STE-006B.wav
\end_layout

\begin_layout LyX-Code
clip14509.wav /Users/Jonz/SONS/REMY/Bim_13.wav
\end_layout

\begin_layout LyX-Code
clip14510.aif /Users/Jonz/SONS/Serie-1/Arrival-01-S.aif
\end_layout

\begin_layout LyX-Code
clip14511.wav /Users/Jonz/SONS/Serie-1/Bip-repetitif.wav
\end_layout

\begin_layout LyX-Code
clip14512.wav /Users/Jonz/SONS/Serie-1/Bips-repetitif-4.wav
\end_layout

\begin_layout LyX-Code
clip14513.wav /Users/Jonz/SONS/Serie-1/Carillon-bruits.wav
\end_layout

\begin_layout LyX-Code
clip14514.wav /Users/Jonz/SONS/Serie-1/Chocs-verre-metal.wav
\end_layout

\begin_layout LyX-Code
clip14515.wav /Users/Jonz/SONS/Serie-1/Click-01.wav
\end_layout

\begin_layout LyX-Code
clip14516.wav /Users/Jonz/SONS/DIEGO-2022/Audio 1_02.wav
\end_layout

\begin_layout LyX-Code
clip14517.wav /Users/Jonz/SONS/Serie-1/JJG-STE-005B.wav
\end_layout

\begin_layout LyX-Code
clip14518.wav /Users/Jonz/SONS/REMY/Bim_26.wav
\end_layout

\begin_layout LyX-Code
clip14519.wav /Users/Jonz/SONS/Serie-1/Machine-en-fonctionnement-01.wav
\end_layout

\begin_layout LyX-Code
Jonz$
\end_layout

\begin_layout Standard
Le script nous imprime d'une part la correspondance entre les fichiers créés
 et les noms originaux – et, bien sûr, nous crée tous ces nouveaux fichiers.
 Les voici
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
Jonz$ ls
\end_layout

\begin_layout LyX-Code
clip14500.wav	clip14507.wav	clip14514.wav
\end_layout

\begin_layout LyX-Code
clip14501.wav	clip14508.aif	clip14515.wav
\end_layout

\begin_layout LyX-Code
clip14502.wav	clip14509.wav	clip14516.wav
\end_layout

\begin_layout LyX-Code
clip14503.wav	clip14510.wav	clip14517.wav
\end_layout

\begin_layout LyX-Code
clip14504.aif	clip14511.wav	clip14518.wav
\end_layout

\begin_layout LyX-Code
clip14505.aif	clip14512.wav	clip14519.wav
\end_layout

\begin_layout LyX-Code
clip14506.wav	clip14513.wav	liste.txt
\end_layout

\begin_layout LyX-Code
Jonz$
\end_layout

\begin_layout Standard
Notons qu'au lieu de laisser la liste des correspondances s'imprimer sur
 le teminal, on peut l'écrire dans un fichier texte - par exemple 
\begin_inset Quotes cld
\end_inset


\family typewriter
set-4500.txt
\family default

\begin_inset Quotes crd
\end_inset


\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
creatclips.sh liste.txt 4500 symb > set-4500.txt
\end_layout

\begin_layout Standard
Conservons précieusement tous ces fichiers indiquant des correspondances.
 On peut les consulter (par 
\begin_inset Quotes cld
\end_inset


\family typewriter
cat
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
more
\family default

\begin_inset Quotes crd
\end_inset

), les imprimer pour en garder la trace, ou même les trier
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
sort set-4500.txt
\end_layout

\begin_layout Standard
va trier le tableau sur les numéros de clips.
\end_layout

\begin_layout LyX-Code
sort -k 2 set-4500.txt
\end_layout

\begin_layout Standard
va trier le tableau selon la seconde colonne, c'est-à-dire les noms des
 fichiers.
 
\end_layout

\begin_layout Standard
En répétant ces opérations sur d'autres fichiers, il est possible de créer
 d'autres familles de clips : 4600, 4210, 4300, etc.
 Il est pratique de conserver l'ensemble de ces fichiers de correspondances
 dans un fichier unique, par exemple
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
cat set-4500.txt set-4600.txt set-4210.txt set-4300.txt > all-sets.txt
\end_layout

\begin_layout Standard
Puis d'imprimer les résultats de 
\begin_inset Quotes cld
\end_inset


\family typewriter
sort all-sets.txt
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
sort -k 2 all-sets.txt
\family default

\begin_inset Quotes crd
\end_inset

 pour disposer des correspondances dans les deux sens pendant vos travaux
 de composition.
\end_layout

\begin_layout Standard
Dans tous les cas, on déplacera les noms ainsi créés dans l'emplacement
 où le GM les attend, par exemple
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
mv clip1* "MyProject/Data/WAVES"
\end_layout

\begin_layout Standard
En cas d'erreur de manipulation, si vous avez utilisé l'option 
\begin_inset Quotes cld
\end_inset


\family typewriter
copy
\family default

\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset


\family typewriter
link
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
symb
\family default

\begin_inset Quotes crd
\end_inset

, les originaux ont été conservés, et vous pouvez tout simplement supprimer
 les clips que vous venez de créer, par
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
rm clip1*
\end_layout

\begin_layout Standard
Si par contre vous avez utilisé l'option 
\begin_inset Quotes cld
\end_inset

move
\begin_inset Quotes crd
\end_inset

, c'est plus ennuyeux, car les clips originaux ont disparu...
 
\end_layout

\begin_layout Standard
En résumé, ce processus n'est pas excessivement complexe, et simplifie grandemen
t la tâche de manipulation des clips à destination du Game Master.
\end_layout

\begin_layout Subsubsection
Seconde approche
\begin_inset space ~
\end_inset

: le glisser-déposer
\end_layout

\begin_layout Standard
Cette opération, disponible depuis la version 1.7, est beaucoup plus simple
 à mettre en œuvre, 
\end_layout

\begin_layout Subsection
Autres fichiers de configuration
\end_layout

\begin_layout Standard
On imagine maintenant que vous avez créé vos différents groupes de clips,
 avec une première idée de l'utilisation que vous allez en faire.
 Supposons que vos choix soient les suivants
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
clips en 6700
\begin_inset space ~
\end_inset

: ils sont courts, vont bien se prêter à des transpositions, des passages
 à l'envers.
 Ils vont être joués dans leur intégralité.
 Ils seront plutôt ponctuels (en mono/stéréo).
\end_layout

\begin_layout Itemize
clips en 6800
\begin_inset space ~
\end_inset

: on peut s'en servir pour des boucles de moyennes durées
\begin_inset space ~
\end_inset

: quelques secondes, boucles qui vont se répéter en s'étirant jusqu'à une
 minute.
 On peut envisager une diffusion plus large, par exemple 4 à 8 HP.
\end_layout

\begin_layout Itemize
clips en 6900
\begin_inset space ~
\end_inset

: ils ont des micro textures intéressantes, et vont être utilisés pour faire
 de la granulation, avec des grains de 50ms à 500ms.
 Là également, on choisira une diffusion mono ou stéréo.
\end_layout

\begin_layout Standard
Il est dès lors possible d'écrire une première version de certaines configuratio
ns de jeu et d'espace.
\end_layout

\begin_layout LyX-Code
table(data(
\end_layout

\begin_layout LyX-Code
  Table PlModes Clear
\end_layout

\begin_layout LyX-Code
    PMd 1,  Kmd KmdPlay,  PVol -9 0
\end_layout

\begin_layout LyX-Code
    PMd 2,  Kmd KmdPlay,  PVol -9 0, Speed 0.5 1.5 0.5
\end_layout

\begin_layout LyX-Code
    PMd 3,  Kmd KmdLoop,  PVol -2 -4, Speed 0.5 0.8,
\end_layout

\begin_layout LyX-Code
            Gsize 5 50, GDepth 3
\end_layout

\begin_layout LyX-Code
    PMd 4,  Kmd KmdLoop,  PVol -4 -8, Speed 0.5 1.8 0.5,
\end_layout

\begin_layout LyX-Code
            Gsize 0.05 0.50, GDepth 6
\end_layout

\begin_layout LyX-Code
  End
\end_layout

\begin_layout LyX-Code
)); 
\end_layout

\begin_layout Standard
Les modes de jeu 1 et 2 proposent des variations de volume, et pour le second,
 des variations de vitesses.
 Les boucles du mode de jeu 3 auront des durées de 5 à 50 secondes, celles
 du groupe 4 des durées de 50 à 500 ms.
\end_layout

\begin_layout LyX-Code
table(data(
\end_layout

\begin_layout LyX-Code
  Table SpModes Clear
\end_layout

\begin_layout LyX-Code
    SMd  1, HPSet  100
\end_layout

\begin_layout LyX-Code
    SMd  2, HPSet  200
\end_layout

\begin_layout LyX-Code
    SMd  4, HPSet  400
\end_layout

\begin_layout LyX-Code
    SMd  7, HPSet  800, HPCnt 5 7
\end_layout

\begin_layout LyX-Code
    SMd  8, HPSet  800, HPCnt 8
\end_layout

\begin_layout LyX-Code
  End
\end_layout

\begin_layout LyX-Code
));
\end_layout

\begin_layout Standard
Les modes d'espace reprennent ici les configurations définies pour les HP.
 On a choisi les configurations 
\begin_inset Quotes cld
\end_inset

génériques
\begin_inset Quotes crd
\end_inset

, 100, 200, etc, si bien qu'à chaque utilisation une configuration spécifique
 tirée au hasard sera utilisée.
 On a ajouté un mode 7, qui utilisera entre 5 et 7 HP parmi ceux de la configura
tion 800.
\end_layout

\begin_layout Standard
Il reste à faire des choix pour les banques, dont les partiels vont associer
 des numéros de clips à des modes d'espace et de jeu.
\end_layout

\begin_layout LyX-Code
table(data(
\end_layout

\begin_layout LyX-Code
  Table Banks Clear
\end_layout

\begin_layout LyX-Code
    Grp  1
\end_layout

\begin_layout LyX-Code
      Bnk, 1, Clps 6700 6799, SpM 1, PlM 1
\end_layout

\begin_layout LyX-Code
      Bnk, 1, Clps 6700 6799, SpM 1, PlM 2
\end_layout

\begin_layout LyX-Code
      Bnk, 1, Clps 6700 6799, SpM 2, PlM 1
\end_layout

\begin_layout LyX-Code
      Bnk, 1, Clps 6700 6799, SpM 2, PlM 2
\end_layout

\begin_layout LyX-Code
      Bnk, 2, Clps 6800 6899, SpM 4, PlM 3
\end_layout

\begin_layout LyX-Code
      Bnk, 2, Clps 6800 6899, SpM 7, PlM 3
\end_layout

\begin_layout LyX-Code
      Bnk, 2, Clps 6800 6899, SpM 8, PlM 3
\end_layout

\begin_layout LyX-Code
      Bnk, 3, Clps 6900 6999, SpM 1, PlM 4
\end_layout

\begin_layout LyX-Code
      Bnk, 3, Clps 6900 6999, SpM 2, PlM 4
\end_layout

\begin_layout LyX-Code
  End
\end_layout

\begin_layout LyX-Code
));
\end_layout

\begin_layout Standard
On a donc défini trois banques (au moyen de 9 partiels) qui recouvrent les
 trois classes de clips définies ci-dessus.
 
\end_layout

\begin_layout Standard
Nous disposons donc a priori de tout le nécessaire pour effectuer nos premières
 expérimentations
\begin_inset space ~
\end_inset

–
\begin_inset space ~
\end_inset

qui nous conduiront probablement à modifier certains de ces fichiers selon
 ce que l'expérience nous apprendra...
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Erreurs-détectées"

\end_inset

Erreurs
\begin_inset Index idx
status open

\begin_layout Plain Layout
Erreurs
\end_layout

\end_inset

 détectées par le Game Master
\end_layout

\begin_layout Standard
Le plug-in propose de nombreuses fonctions, et tente d'effectuer un maximum
 de vérifications avant d'opérer ses actions.
 Pour cette raison, on peut se trouver en présence de nombre d'erreurs différent
es dans les fichiers de configuration, ou dans les scripts.
 Voici une liste non nécessairement exaustive des erreurs qui risquent d'être
 signalées.
 Notons qu'une grande partie de ces erreurs ne s'est jamais présentée lors
 des tests du logiciel.
 Dans certains cas, l'erreur est rendue sous forme d'un nombre négatif:
 -404 correspond alors à l'erreur 404.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0001
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

0255 Erreur de compilation dans un script.
 [exec].
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0257,
\begin_inset space ~
\end_inset

0258 Erreur dans une liste d'actions
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0260 Table des macro-définitions saturée
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0261 Action inconnue
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0262 Macro-definition, symbole non trouvé
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0263 Action inconnue
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0310 Le fichier de configuration des HP ne peut être ouvert
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0311 Numéro de configuration trop élevé
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0312 Nombre de HP incorrect
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0313 Numéro de configuration de HP incorrect
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0314 Numéro de configuration de HP incorrect
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0315 Numéro de HP incorrect
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0316 Zéro final absent
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0317 Configuration déjà définie
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0319 Table des configurations de HP pleine
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0320 Le fichier de configuration des modes de Jeux ne peut être ouvert
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0321 Erreur de syntaxe dans le fichier des modes de Jeux
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0322 Numéro de version du fichier des modes de Jeux incorrect
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0326 Mot-clef attendu
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0327 Nombre attendu
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0328 Mot-clef attendu
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0329 Paramètre invalide
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0330 Le fichier de configuration des partiels ne peut être ouvert
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0331 Erreur de syntaxe dans le fichiers des modes d'espace
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0333 Numéro de version du fichier des modes d'espace incorrect
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0334 Le fichier de configuration des modes d'espace ne peut être ouvert
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0336 Un mot clef est attendu
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0337 Mode d'espace invalide
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0338 Un mot clef est attendu
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0339 Trop de paramètres après un mot-clef
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0342 Numéro de clip incorrect
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0343 Numéro de version incorrect
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0344 Numéro de groupe invalide
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0345 Numéro de banque invalide
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0346 Numéro de clip invalide.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0348 Numéro de mode de jeu invalide
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0349 Numéro de mode d'espace invalide
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0350 Valeur de volume minimum invalide
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0351 Valeur de volume maximum invalide
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0352 
\begin_inset Quotes cld
\end_inset

Poids
\begin_inset Quotes crd
\end_inset

 du partiel invalide
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0353 Valeur des flags invalide
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0354 Table des partiels pleine
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0356 Valeur inattendue
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0357 Paramètres trop nombreux
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0404 Fichier audio non trouvé
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0421 Fichier audio probablement endommagé
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0448 Fichier audio probablement endommagé
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0468 Fichier audio probablement endommagé
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0500 Erreur dans une commande de lecture de clip
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0504 Partiel incorrect
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0506,
\begin_inset space ~
\end_inset

0507 Mode de jeu incorrect 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0508,
\begin_inset space ~
\end_inset

0509 Mode d'espace incorrect 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0511 Aucun player audio disponible
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0513 Commande 
\begin_inset Quotes cld
\end_inset

loop
\begin_inset Quotes crd
\end_inset

 incorrecte
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0515 Commande 
\begin_inset Quotes cld
\end_inset

play
\begin_inset Quotes crd
\end_inset

 incorrecte
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0516 Commande inconnue
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0518 Clip non trouvé
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0524 Partiel incorrect
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0526,
\begin_inset space ~
\end_inset

0527 Mode de jeu incorrect 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0528,
\begin_inset space ~
\end_inset

0529 Mode d'espace incorrect 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0604 Fichier clip incorrect
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0601 Erreur de syntaxe dans le fichier clip
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0606 
\begin_inset Quotes cld
\end_inset

ClVol
\begin_inset Quotes crd
\end_inset

 attendu
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0607,
\begin_inset space ~
\end_inset

0608 Numéro de clip invalide
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0609,
\begin_inset space ~
\end_inset

0610 Intervalle de clips incorrect
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0613 Paramètre de 
\begin_inset Quotes cld
\end_inset

Fident
\begin_inset Quotes crd
\end_inset

 invalide
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0614 Répertoire de clips invalide
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0615 Format de clip invalide
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0600-0999 Erreur dans 
\begin_inset Quotes cld
\end_inset

table
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1001 Compiler structure error
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1002 Compiler table overflow
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1003 Compiler table overflow
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1010 Erreur dans 
\begin_inset Quotes cld
\end_inset

mSL_make_constants_array
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1016 Erreur dans 
\begin_inset Quotes cld
\end_inset

mSL_make_thread
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1100 Appel de 
\begin_inset Quotes cld
\end_inset

malloc
\begin_inset Quotes crd
\end_inset

 incorrect
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1104 Trop de paramètres dans un 
\begin_inset Quotes cld
\end_inset

sprintf
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1105 Appel de 
\begin_inset Quotes cld
\end_inset

set
\begin_inset Quotes crd
\end_inset

 incorrect.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1271
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

1272 Unable to allocate a memory bloc for internal compiler needs
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1601 Pas de bloc de contrôle de thread disponible
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1602 Trop de tâches actives
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1619 Débordement de la pile
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1620
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

1622 Une fonction est attendue [exec].
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1901 Instruction illégale : 0 [exec].
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1980 invalid evaluator
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1983 Erreur dans un appel de 
\begin_inset Quotes cld
\end_inset

mSL_set_compiler
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1999 Erreur dans un paramètre de 
\begin_inset Quotes cld
\end_inset

compile
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2011 Chain structure broken
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2201 Erreur de syntaxe
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2202 Erreur de syntaxe
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2206 Syntax error in operator
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2207 Operand missing 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2220 Erreur de syntaxe
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2221
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

2223 Chaining error
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2224 Bracket missing
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2225 Invalid brackets nesting
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2226
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

2234 Erreur de syntaxe dans les instructions 
\begin_inset Quotes cld
\end_inset

var
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

loc
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

function
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2235 Error in 
\begin_inset Quotes cld
\end_inset

import
\begin_inset Quotes crd
\end_inset

 construct.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2251
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

2255 
\begin_inset Quotes cld
\end_inset

function
\begin_inset Quotes crd
\end_inset

 construct error
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2301 Identifier too long
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2302 Lexical error
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2331 Syntax error in parenthesed expression
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2332 Bracket syntax error
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2333 Missing identifier in indexing
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2334 
\begin_inset Quotes cld
\end_inset

gmem
\begin_inset Quotes crd
\end_inset

 construct error
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2335 Syntax error in function call
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2336,
\begin_inset space ~
\end_inset

2337 Syntax error in 
\begin_inset Quotes cld
\end_inset

while
\begin_inset Quotes crd
\end_inset

 construct
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2338 Syntax error in parenthesed expression
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2341 Unknown unit in expression
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2404 Le fichier sélectionné n'a pas pu être ouvert.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2405 Le script sélectionné n'a pas pu être ouvert.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2407 Le paramètre de 
\begin_inset Quotes cld
\end_inset

mkthread
\begin_inset Quotes crd
\end_inset

 n'est pas une fonction.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2408 Impossible de créer un nouveau thread dans 
\begin_inset Quotes cld
\end_inset

mkthread
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2409 Une erreur dans un script a empêché sa compilation.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2412 incorrect scheduler entry
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2413 incorrect code
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2414 incorrect thread
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2416 incorrect code
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2417 no defined stack
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2418 no defined global table
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2419 no defined pointer table
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2420 no defined own table
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3001 marker lost
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3301 Error in 
\begin_inset Quotes cld
\end_inset

import
\begin_inset Quotes crd
\end_inset

 construct.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3333
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

3335 Undefined operation
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3401
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

3403 Invalid expression
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3404 Invalid indexing construct
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3411 Invalid 
\begin_inset Quotes cld
\end_inset

loop
\begin_inset Quotes crd
\end_inset

 construct
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3412
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

3414 Invalid expression in 
\begin_inset Quotes cld
\end_inset

data
\begin_inset Quotes crd
\end_inset

 construct
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3416
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

3419 Undeclared identifier
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3555
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

3556 Invalid function call
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
4001 Internal table underflow
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
4002 Internal table overflow
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
4401
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

4404 Error in function definition
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
7273 Play log saturé
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
9602 Erreur dans 
\begin_inset Quotes cld
\end_inset

mSL_load_thread
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
9603 Erreur dans 
\begin_inset Quotes cld
\end_inset

mSL_save_thread
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
9606 Pas de thread disponible
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
9900
\begin_inset space ~
\end_inset

et
\begin_inset space ~
\end_inset

suivantes Erreurs internes.
 Ne devraient pas survenir dans les versions distribuées.
 
\end_layout

\begin_layout Part
Annexes
\end_layout

\begin_layout Chapter
Glossaire
\end_layout

\begin_layout Standard
Cette partie tente d'expliciter certains concepts implicitement utilisés
 dans ce document, mais non formellement décrits.
 Elle est organisée sous forme alphabétique.
\end_layout

\begin_layout Subsection*
Flag
\end_layout

\begin_layout Standard
Un 
\emph on
flag
\emph default
 est un indicateur dit 
\begin_inset Quotes cld
\end_inset

booléen
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

logique
\begin_inset Quotes crd
\end_inset

, ne prenant que deux valeurs différentes, 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

, ou encore 
\begin_inset Quotes cld
\end_inset

faux
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

vrai
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

off
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

on
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

non positionné
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

positionné
\begin_inset Quotes crd
\end_inset

, etc.
 Un 
\emph on
flag
\emph default
 peut, par exemple, représenter l'état d'un interrupteur commandant une
 ampoule électrique
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset

on
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

off
\begin_inset Quotes crd
\end_inset

 correspondent alors à 
\begin_inset Quotes cld
\end_inset

allumé
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

éteint
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Un 
\emph on
flag
\emph default
 est parfois représenté seul dans une variable (celle-ci va alors avoir
 la valeur 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

), mais ils sont en fait souvent groupés pour constituer un nombre entier.
 Celui-ci est alors calculé comme la somme (en réalité, mais c'est dans
 ce cas équivalent, le 
\begin_inset Quotes cld
\end_inset

ou
\begin_inset Quotes crd
\end_inset

 logique) des valeurs suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
premier flag (0 ou 1) multiplié par 1 (2 puissance 0), soit 0 ou 1 (décimal),
 ou encore 0x0 ou 0x1 (hexadécimal)
\end_layout

\begin_layout Itemize
deuxième flag (0 ou 1) multiplié par 2 (2 puissance 1), soit 0 ou 2 (décimal),
 ou encore 0x0 ou 0x2 (hexadécimal)
\end_layout

\begin_layout Itemize
troisième flag (0 ou 1) multiplié par 4 (2 puissance 2), soit 0 ou 4 (décimal),
 ou encore 0x0 ou 0x4 (hexadécimal)
\end_layout

\begin_layout Itemize
quatrième flag (...) multiplié par 8 (2 puissance 3), soit 0 ou 8 (décimal),
 ou encore 0x0 ou 0x8 (hexadécimal)
\end_layout

\begin_layout Itemize
cinquième flag (...) multiplié par 16 (2 puissance 4), soit 0 ou 16 (décimal),
 ou encore 0x00 ou 0x10 (hexadécimal)
\end_layout

\begin_layout Itemize
sixième flag (...) multiplié par 32 (2 puissance 5), soit 0 ou 32 (décimal),
 ou encore 0x00 ou 0x20 (hexadécimal)
\end_layout

\begin_layout Itemize
...
\end_layout

\begin_layout Itemize
vingt-huitième flag (...) multiplié par 134217728 (2 puissance 27), soit 0
 ou 134217728 (décimal), ou encore 0x00000000 ou 0x08000000 (hexadécimal)
\end_layout

\begin_layout Itemize
vingt-neuvième flag (...) multiplié par 268435456 (2 puissance 28), soit 0
 ou 268435456 (décimal), ou encore 0x00000000 ou 0x10000000 (hexadécimal)
\end_layout

\begin_layout Itemize
trentième flag (...) multiplié par 536870912 (2 puissance 29), soit 0 ou 536870912
 (décimal), ou encore 0x00000000 ou 0x20000000 (hexadécimal)
\end_layout

\begin_layout Itemize
trente et unième flag (...) multiplié par 1073741824 (2 puissance 30), soit
 0 ou 1073741824 (décimal), ou encore 0x00000000 ou 0x40000000 (hexadécimal)
\end_layout

\begin_layout Itemize
trente-deuxième flag (...) multiplié par 2147483648 (2 puissance 31), soit
 0 ou 2147483648 (décimal), ou encore 0x00000000 ou 0x80000000 (hexadécimal)
\end_layout

\begin_layout Standard
En pratique, les entiers étant souvent représentés sur 32 bits, la dernière
 des valeurs ci-dessus correspond alors à un nombre négatif, ce qui complique
 la manipulation des flags dans cette représentation.
 On se limite toujours à 31 flags par nombre.
\end_layout

\begin_layout Standard
Comme on le voit, un nombre représentant une suite de flags, dont seuls
 les flags 1, 2 et 5 sont positionnés, peut s'écrire 1+2+16 soit 19 en décimal,
 0x13 en hexadécimal.
 Pour des valeurs élevées du numéro de flag, on préfère la notation hexadécimale
, beaucoup plus facile à interpréter visuellement.
 Ainsi, lorsque les flags 1, 2, 5, 28 et 31 sont positionnés, le nombre
 s'écrit 0x48000013, mais 1207959571 en décimal, ce qui est vraiment peu
 parlant.
\end_layout

\begin_layout Standard
Dans une opération 
\begin_inset Quotes cld
\end_inset

data
\begin_inset Quotes crd
\end_inset

, les valeurs exprimées en décimal ou hexadécimal sont acceptées, ce qui
 fait que ces deux notations (0x48000013 ou 1207959571) fournissent naturellemen
t la même valeur.
 L'opération 
\begin_inset Quotes cld
\end_inset

data
\begin_inset Quotes crd
\end_inset

 accepte aussi une opération 
\begin_inset Quotes cld
\end_inset

|
\begin_inset Quotes crd
\end_inset

 de calcul du 
\begin_inset Quotes cld
\end_inset

ou
\begin_inset Quotes crd
\end_inset

 logique de deux constantes.
 On peut alors trouver dans un script une notation telle que 
\begin_inset Quotes cld
\end_inset


\family typewriter
HPFlgs 1|2|16
\family default

\begin_inset Quotes crd
\end_inset

 ou encore 
\begin_inset Quotes cld
\end_inset


\family typewriter
HPFlgs 0x1|0x2|0x10
\family default

\begin_inset Quotes crd
\end_inset

 qui dispense de devoir effectuer manuellement le calcul de ces valeurs.
 Notons encore qu'il existe une notation 
\begin_inset Quotes cld
\end_inset

binaire
\begin_inset Quotes crd
\end_inset

 qui permet de représenter les bits individuels d'un nombre (en l'occurence
 chaque flag), et qui pour les flags 1, 2 et 5 se noterait 
\begin_inset Quotes cld
\end_inset

0b10011
\begin_inset Quotes crd
\end_inset

 (les flags se positionnant donc de droite à gauche).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\backslash
cleardoublepage{}
\backslash
addcontentsline{toc}{chapter}{R{
\backslash
'e}capitulatif}
\backslash
addcontentsline{toc}{section}{R{
\backslash
'e}f{
\backslash
'e}rences}
\end_layout

\end_inset


\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "/Users/jjg4/main"
options "plain"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\backslash
cleardoublepage{}
\backslash
addcontentsline{toc}{section}{Index}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"
name "Index"
literal "true"

\end_inset


\end_layout

\end_body
\end_document
