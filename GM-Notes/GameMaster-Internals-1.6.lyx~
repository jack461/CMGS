#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{a4wide}
\usepackage{url}
\usepackage{times}
\usepackage{graphicx}
\usepackage{tikz}
\addtolength{\hoffset}{-1.5cm}
\addtolength{\textwidth}{2.6cm}
\addtolength{\voffset}{-1.7cm}
\addtolength{\textheight}{3.0cm}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 1
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 1
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty} 
\backslash
vspace*{8.8cm} 
\backslash
begin{flushleft} 
\backslash
Huge
\backslash
bf Game Master 1.6.17 
\backslash

\backslash
 Documentation Interne 
\backslash
end{flushleft} 
\backslash
normalsize 
\backslash
vspace*{-0.3cm} 
\backslash
rule[-0.15cm]{
\backslash
textwidth}{3.2 pt} 
\backslash
rule[0.1cm]{
\backslash
textwidth}{1.8 pt} 
\backslash
begin{flushright} 
\backslash
vspace*{-0.3cm} 
\backslash
normalsize {
\backslash
it Document de travail
\backslash
/} 
\backslash

\backslash
 
\backslash
vspace*{6.8cm} 
\backslash
Large {
\backslash
bf Jean-Jacques Girardot} 
\backslash

\backslash
 {
\backslash
it Octobre 2023
\backslash
/} 
\backslash
end{flushright} 
\backslash
vspace*{-0.4cm} 
\backslash
rule[-0.15cm]{
\backslash
textwidth}{1.8 pt} 
\backslash
rule[0.04cm]{
\backslash
textwidth}{3.2 pt} 
\backslash
vspace*{-0.6cm} 
\backslash
begin{flushleft} 
\backslash
footnotesize {
\backslash
it J.J.
 Girardot {
\backslash
tt jj@girardot.name} 
\backslash

\backslash
 25 Rue Pierre Bérard 
\backslash

\backslash
 42000 Saint-Etienne C
\backslash
'edex
\backslash
/} 
\backslash
end{flushleft} 
\backslash
vfill 
\backslash
eject Document de travail.
 Release 0.1.2.A
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Copyright (c) J.J.Girardot, 2020, 2021, 2022, 2023.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Using :
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

pdfTeX 3.1415926-1.40.9-2.2 (Web2C 7.5.7)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

LyX Version 2.3.0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

TikZ 
\backslash
pgfversion
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Date d'impression 
\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\backslash
cleardoublepage{}
\backslash
addcontentsline{toc}{section}{Table des Mati{
\backslash
`e}res}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\backslash
cleardoublepage{}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Présentation
\end_layout

\begin_layout Standard

\series bold
\emph on
Document rassemblant aussi bien les réflexions en cours que la progression
 effective de l'implantation.
 Pas d'ordre spécifique entre les chapitres.
 Il est clair qu'il faut d'abord une bonne connaissance du logiciel REAPER
 : 
\begin_inset CommandInset citation
LatexCommand cite
key "reaper-site"
literal "false"

\end_inset

, et en particulier du langage JSFX/eel2.
 Nombre d'informations pertinentes relatives au Game Master sont disponibles
 dans le manuel utilisateur du logiciel, qu'il convient de lire attentivement,
 avant de s'intéresser à ce document, qui ne sera utile qu'à une personne
 désirant modifier le logiciel...
 Enfin, il est probable que ni l'un ni l'autre de ces documents ne sont
 réellement à jour et décrivent correctement le logiciel.
 Caveat emptor !
\end_layout

\begin_layout Section
Concepts généraux
\end_layout

\begin_layout Subsection
Les partiels
\end_layout

\begin_layout Standard
Les partiels représentent les constituants des banques.
 Une banque est constituée d'un ensemble de partiels, ainsi définis :
\end_layout

\begin_layout Description
Grp Numéro du groupe auquel appartient la banque virtuelle, un entier positif
 ou nul.
 Le nombre de groupes que l'on peut définir n'est pas limité.
\end_layout

\begin_layout Description
Bnk Numéro de la banque définie par ce partiel.
 Un entier positif ou nul.
 Le nombre de banques que l'on peut définir dans un groupe n'est pas limité.
 
\end_layout

\begin_layout Description
Clps Numéros (entre 0 et 9999) du premier et du dernier clip de ce partiel.
 Il est possible de préciser deux paramètres supplémentaires, qui sont le
 mode de jeu et le mode d'espace.
 Par défaut, ces deux valeurs sont prises égales au numéro de banque.
\end_layout

\begin_layout Description
PClass
\begin_inset space ~
\end_inset

[*] Classe définie par ce partiel.
 Un entier positif ou nul.
 Défaut : 0.
\end_layout

\begin_layout Description
PWeight Poids associé aux clips de ce partiel.
 Cette valeur intervient lors de la sélection d'un clip dans une banque
 ou un groupe.
 Défaut : 1.
\end_layout

\begin_layout Description
PlM (PlM) Numéro du mode de jeu associé à ce partiel.
 Défaut : le numéro de la banque.
\end_layout

\begin_layout Description
SpM Numéro du mode d'espace associé à ce partiel.
 Défaut : le numéro de la banque.
\end_layout

\begin_layout Description
prVol Deux entiers, définissant des facteurs de correction de volume min
 et max, exprimés en dB.
 Défaut : [0,0].
\end_layout

\begin_layout Paragraph*
Notes
\end_layout

\begin_layout Standard
La banque 
\begin_inset Quotes cld
\end_inset


\emph on
b
\emph default

\begin_inset Quotes crd
\end_inset

 du groupe 
\begin_inset Quotes cld
\end_inset


\emph on
g
\emph default

\begin_inset Quotes crd
\end_inset

 est constituée de l'union des partiels qui ont 
\begin_inset Quotes cld
\end_inset


\emph on
g
\emph default

\begin_inset Quotes crd
\end_inset

 comme numéro de groupe et 
\begin_inset Quotes cld
\end_inset


\emph on
b
\emph default

\begin_inset Quotes crd
\end_inset

 comme numéro de banque.
 Il est ainsi possible de créer des banques à partir d'ensembles de clips
 non contigus et d'affecter à chaque partiel des modes de jeu ou d'espace
 différents.
 On ouvre aussi la possibilité de choisir dans une banque les seuls partiels
 d'une certaine classe 
\begin_inset Quotes cld
\end_inset


\emph on
c
\emph default

\begin_inset Quotes crd
\end_inset

, ou encore les partiels de toutes les banques avant une certaine classe...
 Plusieurs partiels peuvent avoir même 
\begin_inset Quotes cld
\end_inset


\emph on
g
\emph default

\begin_inset Quotes crd
\end_inset

, même 
\begin_inset Quotes cld
\end_inset


\emph on
b
\emph default

\begin_inset Quotes crd
\end_inset

 et même 
\begin_inset Quotes cld
\end_inset


\emph on
c
\emph default

\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Standard
La classe permettra de définir les caractéristiques communes aux clips du
 partiel, par exemple 
\begin_inset Quotes cld
\end_inset

ce sont des sons solistes
\begin_inset Quotes crd
\end_inset

, ou encore 
\begin_inset Quotes cld
\end_inset

ils sont courts
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

ils sont en 8 canaux
\begin_inset Quotes crd
\end_inset

, bref, n'importe quel type d'information susceptible d'être pertinente,
 à l'avenir, pour les heuristiques de jeu.
 
\end_layout

\begin_layout Standard
Notons encore que le nombre total de partiels que l'on peut définir n'est
 limité que par la taille allouée à leur représentation (5000 actuellement).
\end_layout

\begin_layout Standard
A priori, on aura une équivalence entre un numéro de groupe virtuel est
 un compositeur, et les banques virtuelles correspondantes, de 1 à 12, devraient
 réfléter la catégorisation décrite dans l'appel à participation.
 Cependant, dans d'autres circonstances, des heuristiques de jeu peuvent
 s'appuyer sur des ensembles de banques virtuelles, qui pourront être extraites
 de groupes virtuels différents, et filtrées sur d'autres caractéristiques,
 comme le numéro de banque virtuel (catégorisation), la classe, le mode
 de jeu ou le mode d'espace.
 Les banques sont définies dans le fichier 
\begin_inset Quotes cld
\end_inset


\family typewriter
Banks.txt
\family default

\begin_inset Quotes crd
\end_inset

.
 Voici un exemple de définition de trois groupes, 1, 2 et 4.
\end_layout

\begin_layout LyX-Code
Grp, 1 // Groupe 1
\end_layout

\begin_layout LyX-Code
    Bnk, 1 // banque 1
\end_layout

\begin_layout LyX-Code
        Clps, 0, 99
\end_layout

\begin_layout LyX-Code
    End
\end_layout

\begin_layout LyX-Code
    Bnk, 2
\end_layout

\begin_layout LyX-Code
        Clps, 100, 199
\end_layout

\begin_layout LyX-Code
    End
\end_layout

\begin_layout LyX-Code
Grp, 2 // Groupe 2
\end_layout

\begin_layout LyX-Code
    Bnk, 1 
\end_layout

\begin_layout LyX-Code
        Clps, 1000, 1099
\end_layout

\begin_layout LyX-Code
    End
\end_layout

\begin_layout LyX-Code
    Bnk, 4
\end_layout

\begin_layout LyX-Code
        Clps, 1300, 1399
\end_layout

\begin_layout LyX-Code
    End
\end_layout

\begin_layout LyX-Code
    Bnk, 7
\end_layout

\begin_layout LyX-Code
        Clps, 1600, 1699
\end_layout

\begin_layout LyX-Code
    End
\end_layout

\begin_layout LyX-Code
Grp, 4
\end_layout

\begin_layout LyX-Code
Bnk, 1, Clps, 2000, 2009, 1, 3, End
\end_layout

\begin_layout LyX-Code
Bnk, 2, Clps, 2010, 2019, 14, 2, End
\end_layout

\begin_layout LyX-Code
Bnk, 5, Clps, 2020, 2029, PWeight, 3, End
\end_layout

\begin_layout LyX-Code
Clps, 2020, 2022, 8, 11, PWeight, 2, End
\end_layout

\begin_layout LyX-Code
Bnk, 6, Clps, 2040, 2049, End End 
\end_layout

\begin_layout Standard
La mise en page est libre, il suffit que les nombres ou les mots-clefs soient
 séparés les uns des autres par des virgules, des espaces ou des fins de
 lignes.
 Si 
\begin_inset Quotes cld
\end_inset


\family typewriter
Grp
\family default

\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset


\family typewriter
Bnk
\family default

\begin_inset Quotes crd
\end_inset

 ne sont pas reprécisés, ils conservent leur valeur antérieure, par exemple
 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 pour 
\begin_inset Quotes cld
\end_inset


\family typewriter
Grp
\family default

\begin_inset Quotes crd
\end_inset

, jusqu'à rencontre de 
\begin_inset Quotes cld
\end_inset


\family typewriter
Grp, 2
\family default

\begin_inset Quotes crd
\end_inset

.
 On remarquera que la banque 
\begin_inset Quotes cld
\end_inset

5
\begin_inset Quotes crd
\end_inset

 du groupe 
\begin_inset Quotes cld
\end_inset

4
\begin_inset Quotes crd
\end_inset

 se compose de deux partiels, utilisant des clips communs (
\begin_inset Quotes cld
\end_inset

2020
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

2022
\begin_inset Quotes crd
\end_inset

), mais avec des modes de jeu et d'espace différents.
 Dans la description du groupe 4, les modes de jeu et d'espace sont explicitemen
t précisés, après les deux valeurs représentant les bornes des clips.
 Précisons encore que c'est la rencontre de la commande 
\begin_inset Quotes cld
\end_inset


\family typewriter
End
\family default

\begin_inset Quotes crd
\end_inset

 qui détermine la création d'un nouveau partiel, avec les caractéristiques
 définies par les commandes précédentes.
\end_layout

\begin_layout Standard
Dans cet exemple, 10 partiels sont définis, correspondant à un total de
 9 banques.
\end_layout

\begin_layout Subsection
Les paramètres
\end_layout

\begin_layout Standard
Les paramètres sont des variables, au sein des JSFX, presque comme les autres.
 Elles ont pourtant des propriétés supplémentaires, qui finissent par imposer
 la mise en place d'une organisation spécifique.
 Ce sont des variables 
\begin_inset Quotes cld
\end_inset

significatives
\begin_inset Quotes crd
\end_inset

 du programme, qui peuvent être modifiées interactivement par l'utilisateur,
 éventuellement affichées ou modifiées dans l'interface graphique, sauvegardées
 avec les présets, quelquefois partagées avec les 
\begin_inset Quotes cld
\end_inset

générateurs
\begin_inset Quotes crd
\end_inset

 audio, et parfois modulables par des événements aléatoires.
 Voici tout d'abord les spécificités de ces variables.
\end_layout

\begin_layout Itemize
Elles peuvent être associées à des sliders gérés par REAPER (même si ces
 sliders sont 
\begin_inset Quotes cld
\end_inset

masqués
\begin_inset Quotes crd
\end_inset

 en tant que tels dans l'interface graphique utilisée).
 On veut cependant pouvoir les automatiser si utile.
\end_layout

\begin_layout Itemize
Elles peuvent être associées à des interfaces graphiques (afficheurs, boutons,
 sliders) gérées par l'extension graphique 
\begin_inset Quotes cld
\end_inset

ui_lib
\begin_inset Quotes crd
\end_inset

 (Geraint Luff/modif.
 JJG).
\end_layout

\begin_layout Itemize
Elles peuvent être associées à un générateur d'aléa.
\end_layout

\begin_layout Itemize
Elles doivent pouvoir être sauvegardées et rechargées avec les présets REAPER.
\end_layout

\begin_layout Itemize
Elles peuvent être utilisées ou modifiées de différentes manières
\begin_inset space ~
\end_inset

: par des interactions (automations REAPER, interactions utilisateur), mais
 aussi modules externes (générateurs de sons), fichiers de commandes, etc.
\end_layout

\begin_layout Standard
Notons que les paramètres sont en petit nombre (une limite actuelle, un
 peu arbitraire, 
\begin_inset Quotes cld
\end_inset


\emph on
paramCount
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
paramCount
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 est fixée à 256).
 Du fait de leurs caractéristiques particulières, les procédures de déclaration,
 consultation et modification sont plus complexes que pour des variables
 
\begin_inset Quotes cld
\end_inset

ordinaires
\begin_inset Quotes crd
\end_inset

 du langage, et vont être enveloppées dans des procédures spécifiques.
\end_layout

\begin_layout Paragraph*
Valeur
\end_layout

\begin_layout Standard
La 
\begin_inset Quotes cld
\end_inset

valeur
\begin_inset Quotes crd
\end_inset

 d'un paramètre correspond à la grandeur visible dans les afficheurs ou
 les sliders.
 Souvent, cette valeur va être modifiée par un générateur aléatoire lié
 à ce paramètre, pour fournir la valeur effectivement utilisée.
\end_layout

\begin_layout Paragraph*
Status
\end_layout

\begin_layout Standard
A chaque paramètre est associé un 
\emph on
status
\emph default
, agrégat d'informations spécifiques liées au paramètre.
 Ainsi, à chaque paramètre peuvent être associés deux indicateurs (A et
 B), chacun pouvant être 
\emph on
on
\emph default
 ou 
\emph on
off
\emph default
, et doté d'une couleur prise dans une palette de 32.
\end_layout

\begin_layout Standard
Un exemple typique est celui des paramètres liés à un générateur d'aléa.
 Celui-ci est déterminé par l'indicateur 
\begin_inset Quotes cld
\end_inset

B
\begin_inset Quotes crd
\end_inset

, la couleur (de 1 à 8) correspondant au numéro de générateur lié, et l'état
 de l'indicateur (on/off) indiquant si la valeur effective du paramètre
 dépend ou non, en ce moment précis, de ce générateur d'aléa.
\end_layout

\begin_layout Standard
Le status est représenté par un entier 22 bits.
 La signification de cette valeur est détaillée ultérieurement.
\end_layout

\begin_layout Paragraph*
Propriétés
\end_layout

\begin_layout Standard
Un paramètre est décrit par les caractéristiques supplémentaire, dites 
\begin_inset Quotes cld
\end_inset

propriétés
\begin_inset Quotes crd
\end_inset

, en plus de sa valeur et de son status.
 Parmi ces propriétés, on va trouver son nom, le format d'affichage, les
 bornes de définition de sa valeur, sa valeur par défaut, son comportement
 d'affichage, etc.
\end_layout

\begin_layout Subsubsection
Aspect technique et implémentation
\end_layout

\begin_layout Standard
Les paramètres sont représentés au moyen des tableaux suivants
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
paramValues
\begin_inset Index idx
status open

\begin_layout Plain Layout
paramValues
\end_layout

\end_inset

 Tableau de taille 
\emph on
paramCount
\emph default
, contenant les valeurs effectives de ces paramètres.
\end_layout

\begin_layout Description
paramStatus
\begin_inset Index idx
status open

\begin_layout Plain Layout
paramStatus
\end_layout

\end_inset

 Tableau de taille 
\emph on
paramCount
\emph default
, contenant les status des paramètres correspondants.
 
\end_layout

\begin_layout Description
paramFlags
\begin_inset Index idx
status open

\begin_layout Plain Layout
paramStatus
\end_layout

\end_inset

 Tableau de taille 
\emph on
paramCount
\emph default
, contenant les flags utilisés pour modifier certains traitements du paramètre.
\end_layout

\begin_layout Description
paramBlock
\begin_inset Index idx
status open

\begin_layout Plain Layout
paramBlock
\end_layout

\end_inset

 Tableau contenant 
\emph on
paramCount
\emph default
 entrées de taille 
\emph on
paramEntSize
\begin_inset Index idx
status open

\begin_layout Plain Layout
paramEntSize
\end_layout

\end_inset


\emph default
 éléments (20 valeurs par paramètre).
\end_layout

\begin_layout Standard
Les deux tableaux 
\emph on
paramValues
\emph default
 et 
\emph on
paramStatus
\emph default
 sont intégrés à la zone 
\begin_inset Quotes cld
\end_inset


\emph on
serialBlock
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
serialBlock
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

, et font donc partie de ce qui est sauvegardé/restauré lors des manipulations
 de présets.
 A noter que lors de ces sauvegardes et restaurations de présets, REAPER
 convertit les valeurs de 64 à 32 bits en sauvegarde, et de 32 en 64 bits
 à la restauration.
 Ceci implique que l'on ne puisse disposer, pour un 
\begin_inset Quotes cld
\end_inset

mot mémoire
\begin_inset Quotes crd
\end_inset

, que de 22 bits 
\begin_inset Quotes cld
\end_inset

certains
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Les autres caractéristiques des paramètres sont des propriétés, a priori
 figées, qui ne nécessitent pas d'être sauvegardées.
 Le tableau 
\begin_inset Quotes cld
\end_inset


\emph on
paramFlags
\emph default

\begin_inset Quotes crd
\end_inset

 rassemble un ensemble d'indicateurs relatifs à la gestion du paramètre.
\end_layout

\begin_layout Paragraph*
Propriétés
\end_layout

\begin_layout Standard
Les propriétés des paramètres sont donc regroupées dans des tableaux spécifiques
, ou dans les entrées consécutives de 
\emph on
paramEntSize
\begin_inset Index idx
status open

\begin_layout Plain Layout
paramEntSize
\end_layout

\end_inset


\emph default
 éléments, elles-mêmes regroupées en un tableau unique, 
\begin_inset Quotes cld
\end_inset


\emph on
paramBlock
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
paramBlock
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

, qui n'est pas sauvegardé avec les présets, mais éventuellement reconstruit.
\end_layout

\begin_layout Standard
Voici les significations et les références de ces diverses entrées.
\end_layout

\begin_layout Description
pp_Name Nom affichable du paramètre
\end_layout

\begin_layout Description
pp_Type Type du paramètre.
 Va en particulier définir de quelle manière un aléa est appliqué pour obtenir
 une valeur 
\begin_inset Quotes cld
\end_inset

randomisée
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
pp_SFmt Format d'affichage du paramètre, utilisé en mode 
\begin_inset Quotes cld
\end_inset

show
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
pp_MFmt Format d'affichage du paramètre, utilisé en mode 
\begin_inset Quotes cld
\end_inset

update
\begin_inset Quotes crd
\end_inset

 (slider, bouton, etc.)
\end_layout

\begin_layout Description
pp_Min Valeur minimale du paramètre
\end_layout

\begin_layout Description
pp_Max Valeur maximale du paramètre
\end_layout

\begin_layout Description
pp_Def Valeur par défaut du paramètre
\end_layout

\begin_layout Description
pp_Step Step d'incrémentation/décrémentation du paramètre lors des modifications
 : typiquement 0.01, 0.1, 1, 10, etc.
\end_layout

\begin_layout Description
pp_Slope Gauchissement, lors des modifications, de la courbe de réponse
 de la valeur en fonction des variations de la commande appliquée.
 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 correspond à une variation linéaire.
\end_layout

\begin_layout Description
pp_Flags Flags utilisés pour modifier certains traitements du paramètre.
\end_layout

\begin_layout Description
pp_SwLim 
\begin_inset Quotes cld
\end_inset


\emph on
switch limit
\emph default

\begin_inset Quotes crd
\end_inset

 : si la valeur du paramètre est plus grande/plus petite que 
\begin_inset Quotes cld
\end_inset


\emph on
switch limit
\emph default

\begin_inset Quotes crd
\end_inset

, ceci indique que l'on doit convertir le paramètre avec le facteur 
\emph on
SwFac
\emph default
, et utiliser l'entrée suivante pour l'affichage.
 Cette acilité peut être utilisée pour des changements dynamiques d'affichage
 secondes/milisecondes, hertz/kilohertz, etc.
\end_layout

\begin_layout Description
pp_SwFac 
\begin_inset Quotes cld
\end_inset


\emph on
switch factor
\emph default

\begin_inset Quotes crd
\end_inset

 : facteur <1 ou >1 de conversion, lié à 
\begin_inset Quotes cld
\end_inset


\emph on
p_SwLim
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
pp_Gen Générateur/modificateur associé à ce paramètre, ou 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

.
 Si 
\begin_inset Quotes cld
\end_inset

P
\begin_inset Quotes crd
\end_inset

 <0, alors le générateur 
\begin_inset Quotes cld
\end_inset

P
\begin_inset Quotes crd
\end_inset

 est associé au paramètre, mais son action est désactivée.
\end_layout

\begin_layout Description
pp_Addr si 
\begin_inset Formula $\neq0$
\end_inset

, c'est une adresse secondaire en mémoire, où placer une copie de la valeur
 du paramètre.
 Pour 
\begin_inset Formula $A>1023$
\end_inset

 : on fait A[0]=v;.
 Pour 
\begin_inset Formula $A<0$
\end_inset

, on fait gmem[-A]=v; Pour A dans 
\begin_inset Formula $[0\,1023]$
\end_inset

, A est une procédure spécifique à exécuter lors de l'affectation.
\end_layout

\begin_layout Description
pp_LowB Borne minimale normalisée de variation du paramètre
\end_layout

\begin_layout Description
pp_HigB Borne maximale normalisée de variation du paramètre
\end_layout

\begin_layout Paragraph*
Status
\end_layout

\begin_layout Standard
Le mot 
\begin_inset Quotes cld
\end_inset

status
\begin_inset Quotes crd
\end_inset

 contient différents indicateurs relatif au paramètre.
 Ces indicateurs peuvent être modifiés, automatiquement ou interactivement.
 Voici la liste des constantes symboliques associées à ce status.
\end_layout

\begin_layout Description
pStat_Mod indique que le paramètre a été modifié par une affectation
\end_layout

\begin_layout Description
pStat_RMod indique que le paramètre a été (implicitement) modifié par le
 générateur aléatoire associé.
\end_layout

\begin_layout Description
pStat_SLmod indique que le paramètre a été modifié par une intervention
 REAPER externe (slider, automation, etc.)
\end_layout

\begin_layout Description
pStat_Updt remettre à jour les différentes valeurs a.s.a.p.
\end_layout

\begin_layout Paragraph*
Flags
\end_layout

\begin_layout Standard
Les flags contiennent des informations (non modifiables interactivement)
 sur le comportement que doit avoir le paramètre.
 Les flags sont redéfinis au lancement de la session, et restent fixes durant
 celle-ci.
\end_layout

\begin_layout Standard
On peut passer, au travers des 
\family typewriter
Flags
\family default
, les informations suivantes :
\end_layout

\begin_layout Description
pflg_Limit les valeurs affectées au paramètre sont bornées par 
\family typewriter
Min
\family default
 et 
\family typewriter
Max
\family default
.
\end_layout

\begin_layout Description
pflg_DupV toute valeur affectée au paramètre doit être copiée dans la mémoire
 référencée par 
\family typewriter
pp_Addr
\family default
.
\end_layout

\begin_layout Description
pflg_LedA associer un indicateur de type 
\begin_inset Quotes cld
\end_inset


\emph on
led A
\emph default

\begin_inset Quotes crd
\end_inset

 au paramètre, qui sera affiché par certaines opérations, en tête du nom
 du paramètre.
 Cet indicateur peut être on/off, et une couleur spécifique peut lui être
 associée, choisie dans une liste limitée.
\end_layout

\begin_layout Description
pflg_LedB associer un indicateur de type 
\begin_inset Quotes cld
\end_inset


\emph on
led B
\emph default

\begin_inset Quotes crd
\end_inset

 au paramètre, qui sera affiché par certaines opérations, en tête du slider
 lié du paramètre.
 Cet indicateur peut être on/off, et une couleur spécifique peut lui être
 associée et modifiée, choisie dans une liste limitée.
\end_layout

\begin_layout Subsubsection
Opérations
\end_layout

\begin_layout Standard
Une procédure permet de définir les propriétés d'un paramètre
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
parDcl(pnum,
\begin_inset space ~
\end_inset

Name,
\begin_inset space ~
\end_inset

Type,
\begin_inset space ~
\end_inset

SFmt,
\begin_inset space ~
\end_inset

MFmt,
\begin_inset space ~
\end_inset

Min,
\begin_inset space ~
\end_inset

Max,
\begin_inset space ~
\end_inset

Def,
\begin_inset space ~
\end_inset

Step,
\begin_inset space ~
\end_inset

Slope,
\begin_inset space ~
\end_inset

Flags,
\begin_inset space ~
\end_inset

Addr,
\begin_inset space ~
\end_inset

SwLim,
\begin_inset space ~
\end_inset

SwFac,
\begin_inset space ~
\end_inset

Gen) avec diverses déclinaisons.Les maramètres ont la signification suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
pnum le numéro du paramètre.
 La valeur 0 est réservée, les valeurs 1 à 64 correspondent aux sliders
 définis par REAPER pour tout plugin JS, les valeurs 65 à 255 représentent
 divers paramètres utilisés dans le logiciel.
\end_layout

\begin_layout Standard
On dispose également des opérations suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
parV(pnum) renvoie la valeur courante du paramètre.
 La plupart du temps, on peut utiliser 
\family typewriter
paramValues[pnum]
\family default
.
 Attention, pour des raisons d'efficacité, la fonction ne fait aucune vérificati
on de la valeur du paramètre.
\end_layout

\begin_layout Description
parSet(pnum,
\begin_inset space ~
\end_inset

value) affecte une nouvelle valeur au paramètre.
 Gère, si besoin, diverses vérifications, etc.
 
\end_layout

\begin_layout Description
parCtl(pnum) affiche, sous la forme d'un slider, la valeur du paramètre,
 et permet de modifier celle-ci.
\end_layout

\begin_layout Description
parShow(pnum) affiche dans une boîte la valeur du paramètre.
\end_layout

\begin_layout Subsubsection
Liste des paramètres
\end_layout

\begin_layout Standard
Voici la liste des paramètres définis, avec leur numéro, nom, finalité et
 caractéristiques.
\end_layout

\begin_layout Description
1
\begin_inset space ~
\end_inset

p_rgenA1 Amplitude du générateur aléatoire 1; idem pour les générateurs
 2 à 8, 
\emph on
p_rgenA2
\emph default
 à 
\emph on
p_rgenA8
\emph default
.
\end_layout

\begin_layout Description
9
\begin_inset space ~
\end_inset

p_rgenP1 Cycle du générateur aléatoire 1; idem pour les générateurs 2 à
 8, 
\emph on
p_rgenP2
\emph default
 à 
\emph on
p_rgenP8
\emph default
.
\end_layout

\begin_layout Description
22
\begin_inset space ~
\end_inset

p_RateCtl Ajustement initial de la vitesse de lecture des clips.
 Compris entre 0.1 et 4.
\end_layout

\begin_layout Description
23
\begin_inset space ~
\end_inset

p_autoFreq Fréquence de lancement des lectures en mode automatique.
 De 0.1 à 60 secondes.
\end_layout

\begin_layout Description
24
\begin_inset space ~
\end_inset

p_Randomness Slider (temporaire) utilisé pour des tests en attente de la
 versions complète des rGen.
\end_layout

\begin_layout Description
25
\begin_inset space ~
\end_inset

p_maxPlayers Réglage du nombre maximum de générateurs actifs.
 Utilisé en mode 
\begin_inset Quotes cld
\end_inset

Auto
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
26
\begin_inset space ~
\end_inset

p_GvChnUse Nombre de canaux en sortie.
 Limitation par repliement.
\end_layout

\begin_layout Description
27
\begin_inset space ~
\end_inset

p_maxClSize Taille maximale à lire depuis un clip.
 Exprimée en secondes, de 1 à 600.
 
\end_layout

\begin_layout Subsection
Les erreurs
\end_layout

\begin_layout Standard
Elles sont repérées par des identificateurs débutant par 
\begin_inset Quotes cld
\end_inset

err_
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
err_sys erreur système
\begin_inset space ~
\end_inset

; détectée lors d'une vérification interne d'une procédure, soit à l'initialisat
ion, soit en cours de fonctionnement.
 Cette variable reçoit l'une des valeurs non nulles dans la série des erreurs
 potentielles décrite ci-dessous.
 La valeur choisie est liée à une priorité décroissante des nocivités des
 erreurs, à l'initialisation, d'abord, à l'exécution ensuite, problèmes
 à signaler au développeur, puis à la lecture des fichiers de configuration,
 problèmes qui peuvent être corrigés par l'utilisateur, et enfin, les erreurs
 de manipulation de ce dernier, qui sont en principe sans conséquences.
 Un indicateur, dans l'onglet 
\begin_inset Quotes cld
\end_inset

Main
\begin_inset Quotes crd
\end_inset

, affiche la dernière erreur rencontrée.
 Il convient de corriger toutes les erreur une à une avant d'obtenir un
 fonctionnement 
\begin_inset Quotes cld
\end_inset

normal
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Description
err_fhpc erreur relative à la description de la configuration physique des
 HP de l'installation.
\end_layout

\begin_deeper
\begin_layout Description
104 can't open file
\end_layout

\begin_layout Description
109 configuration table full
\end_layout

\begin_layout Description
111 conf.
 number too high
\end_layout

\begin_layout Description
112 incorrect HP count in conf.
\end_layout

\begin_layout Description
113 Invalid configuration identification
\end_layout

\begin_layout Description
115 HP num invalid 
\end_layout

\begin_layout Description
116 final "0" expected
\end_layout

\begin_layout Description
117 configuration already defined
\end_layout

\end_deeper
\begin_layout Description
err_fplm erreur relative à la lecture des modes de jeu.
\end_layout

\begin_deeper
\begin_layout Description
201 internal error
\end_layout

\begin_layout Description
204 can't open file 
\begin_inset Quotes cld
\end_inset

PlayModes.txt
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
206 some keyword expected here
\end_layout

\begin_layout Description
207 play mode number expected after 
\begin_inset Quotes cld
\end_inset

Idem
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
208 some keyword expected here
\end_layout

\begin_layout Description
209 invalid parameter
\end_layout

\begin_layout Description
213 invalid file version number
\end_layout

\end_deeper
\begin_layout Description
err_fspm erreur relative à la lecture des modes d'espace.
\end_layout

\begin_deeper
\begin_layout Description
301 internal error
\end_layout

\begin_layout Description
304 can't open file
\end_layout

\begin_layout Description
306 a keyword is expected here
\end_layout

\begin_layout Description
307 invalid space mode reference in 
\begin_inset Quotes cld
\end_inset

Idem
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
308 some keyword expected here
\end_layout

\begin_layout Description
309 too many parameters after a keyword
\end_layout

\begin_layout Description
313 invalid file version number
\end_layout

\end_deeper
\begin_layout Description
err_fclp erreur relative à la lecture des fichiers de description des clips.
 Voici la liste des numéros d'erreurs sucptibles d'être signalées, ainsi
 que leur signification
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Description
601 internal error
\end_layout

\begin_layout Description
604 can't open 
\begin_inset Quotes cld
\end_inset

Clips.txt
\begin_inset Quotes crd
\end_inset

 file
\end_layout

\begin_layout Description
606 
\begin_inset Quotes cld
\end_inset

ClVol
\begin_inset Quotes crd
\end_inset

 expected
\end_layout

\begin_layout Description
607 
\begin_inset Quotes cld
\end_inset

ClVol
\begin_inset Quotes crd
\end_inset

 parameter is invalid
\end_layout

\begin_layout Description
608 incorrect clip number
\end_layout

\begin_layout Description
609 
\begin_inset Quotes cld
\end_inset

ClRange
\begin_inset Quotes crd
\end_inset

 incorrect first clip number
\end_layout

\begin_layout Description
610 
\begin_inset Quotes cld
\end_inset

ClRange
\begin_inset Quotes crd
\end_inset

 incorrect range second clip number
\end_layout

\begin_layout Description
613 
\begin_inset Quotes cld
\end_inset

FIdent
\begin_inset Quotes crd
\end_inset

 incorrect config number
\end_layout

\end_deeper
\begin_layout Description
err_fbnk erreur relative à la lecture des fichiers de description des partiels
\end_layout

\begin_deeper
\begin_layout Description
704 can't open file
\end_layout

\begin_layout Description
713 
\begin_inset Quotes cld
\end_inset

FIdent
\begin_inset Quotes crd
\end_inset

 invalid version
\end_layout

\begin_layout Description
721 unexpected entry
\end_layout

\begin_layout Description
722 too many parameters
\end_layout

\begin_layout Description
724 invalid group number
\end_layout

\begin_layout Description
725 invalid bank number
\end_layout

\begin_layout Description
726 invalid clip number
\end_layout

\begin_layout Description
728 invalid play mode
\end_layout

\begin_layout Description
729 invalid space mode
\end_layout

\begin_layout Description
730 invalid min vol
\end_layout

\begin_layout Description
731 invalid max vol
\end_layout

\begin_layout Description
732 invalid partial weight
\end_layout

\begin_layout Description
733 invalid class type
\end_layout

\begin_layout Description
736 partial table full
\end_layout

\end_deeper
\begin_layout Description
err_sys_ini erreur survenue lors de l'initialisation du système
\end_layout

\begin_deeper
\begin_layout Description
10000+n paramEntSize error 
\begin_inset Quotes cld
\end_inset

n
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
10010+n error in parDclAlt
\end_layout

\begin_layout Description
10020+n error in RandomSColors
\end_layout

\begin_layout Description
11000 error in parDcl
\end_layout

\begin_layout Description
11000+num parameter 
\begin_inset Quotes cld
\end_inset

num
\begin_inset Quotes crd
\end_inset

 already declared
\end_layout

\end_deeper
\begin_layout Description
err_sys_rtm erreur survenue dans la section 
\begin_inset Quotes cld
\end_inset

real time
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
err_sys_gfx erreur survenue dans la section graphique
\end_layout

\begin_layout Section
Onglets, Modules, Widgets et interactions
\end_layout

\begin_layout Standard
Deux aspects interviennent dans les interactions
\begin_inset space ~
\end_inset

: la souris et le clavier.
 On veut disposer d'une interface cohérente, ergonomique et efficiente.
 Pour ce faire, il est nécessaire que tous les widgets, et tous les items
 de ces widgets, réagissent de la même manière aux mêmes interactions.
\end_layout

\begin_layout Standard
La cohérence des interactions est liée à la position de la souris, qui va
 être :
\end_layout

\begin_layout Itemize
dans un item d'un widget
\begin_inset space ~
\end_inset

: une cellule d'un pad, ou, dans le cas d'un slider, le label, le slider
 lui-même, ou le bouton de connexion à un générateur d'aléa.
\end_layout

\begin_layout Itemize
dans le widget
\begin_inset space ~
\end_inset

: pad ou slider.
\end_layout

\begin_layout Itemize
dans le module.
\end_layout

\begin_layout Itemize
dans l'onglet.
\end_layout

\begin_layout Standard
L'autre aspect de la cohérence est liée à la nature de la grandeur représentée
 par le widget, ou l'item spécifique de ce widget.
 Si une 
\emph on
cellule
\emph default
 d'un 
\emph on
pad
\emph default
 représente un numéro de clip modifiable, il est pertinent que toutes les
 cellules ayant cette propriété réalissent de la même façon aux mêmes interactio
ns.
\end_layout

\begin_layout Subsection
Implantation des modules
\end_layout

\begin_layout Standard
Un module va contenir un certain nombre de widgets graphiques (pads, sliders,
 showboxes) organisés verticalement, parfois en sous-groupes.
 
\end_layout

\begin_layout Subsubsection
Le play pad
\end_layout

\begin_layout Paragraph*
Finalité
\end_layout

\begin_layout Standard
Le 
\emph on
PlayPad
\emph default
 affiche un unique pad, de 2 lignes et 8 colonnes.
 Chacune de ses cellules permet de déclencher la lecture d'un clip, en fonction
 du mode d'affichage, repéré par une couleur.
 Chaque cellule fait référence à un numéro de partiel (dit 
\begin_inset Quotes cld
\end_inset

partiel de base
\begin_inset Quotes crd
\end_inset

), qui est utilisé de la manière suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0
\begin_inset space ~
\end_inset

–
\begin_inset space ~
\end_inset

gris la cellule est muette
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1
\begin_inset space ~
\end_inset

–
\begin_inset space ~
\end_inset

vert
\begin_inset space ~
\end_inset

clair/partiel l'un des clips du partiel indiqué va être joué
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2
\begin_inset space ~
\end_inset

–
\begin_inset space ~
\end_inset

vert
\begin_inset space ~
\end_inset

foncé/groupe la cellule contient un numéro de groupe
\begin_inset space ~
\end_inset

; l'un des clips du groupe indiqué va être joué
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3
\begin_inset space ~
\end_inset

–
\begin_inset space ~
\end_inset

vert
\begin_inset space ~
\end_inset

foncé
\begin_inset space ~
\end_inset

2/gr&banque la cellule affiche un numéro de groupe et de banque
\begin_inset space ~
\end_inset

; l'un des clips de la banque sélectionnée est joué
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
4
\begin_inset space ~
\end_inset

–
\begin_inset space ~
\end_inset

jaune
\begin_inset space ~
\end_inset

d'or/range l'un des clips de l'intervalle indiqué est joué, avec les réglages
 du partiel de base.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
5
\begin_inset space ~
\end_inset

–
\begin_inset space ~
\end_inset

jaune
\begin_inset space ~
\end_inset

pâle/clip le clip indiqué va être joué, avec les réglages du partiel de
 base.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
128
\begin_inset space ~
\end_inset

–
\begin_inset space ~
\end_inset

erreur affichage temporaire, puis retour à l'affichage précédent.
\end_layout

\begin_layout Subsubsection*
Données
\end_layout

\begin_layout Standard
A la base : 
\family typewriter
padStudio
\family default
, de taille 
\family typewriter
padStSiz {16}
\family default
 = 
\family typewriter
padStvNL
\family default
 {2} * 
\family typewriter
padStNC
\family default
 {8} ; Tableaux associés : 
\family typewriter
padStLabs
\family default
 (labels), 
\family typewriter
padStColrs
\family default
 (couleurs), 
\family typewriter
padStCells
\family default
 (description des cellules), 
\family typewriter
padStVals
\family default
 (valeur affichable), 
\family typewriter
padStFlags
\family default
 (flags supplémentaires) et 
\family typewriter
padStErrors
\family default
 (erreur associées).
\end_layout

\begin_layout Paragraph*

\family typewriter
padStLabs
\end_layout

\begin_layout Standard
Les labels affectés aux cellules du Pad.
 Ils sont redéfinis à chaque affichage, le tableau étant lui-même réalisé
 par affectation de numéro de variables de type chaînes.Il n'est pas nécessaire
 de sauvegarder ces valeurs.
\end_layout

\begin_layout Paragraph*

\family typewriter
padStColrs
\end_layout

\begin_layout Standard
Les couleurs des cellules.
 Elle sont elles aussi calculées dynamiquement, et n'ont pas besoin d'être
 sauvées.
\end_layout

\begin_layout Paragraph*

\family typewriter
padStCells
\end_layout

\begin_layout Standard
Les valeurs associées aux pads.
 Elles sont systématiquement présentes, et ne sont utilisées que pour sélectionn
er/désélectionner les cellules.
 Elles ne nécessitent pas d'être sauvées.
\end_layout

\begin_layout Paragraph*

\family typewriter
padStVals
\end_layout

\begin_layout Standard
Numéro de partiel associé à la cellule.
 C'est, soit 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 (toujours valide), soit un autre numéro.
 Il est utilisé modulo 
\family typewriter
BKEcnt
\family default
 {5000}.
 A partir 
\end_layout

\begin_layout Paragraph*

\family typewriter
padStFlags 
\end_layout

\begin_layout Description
padStFlDspM
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

0xf masque des types d'affichage.
 Détermine le type d'affichage de la cellule (n° de 0 à 6).
\end_layout

\begin_layout Description
padStFlErrbit
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

0x80 error flag
\end_layout

\begin_layout Description
\begin_inset Quotes cld
\end_inset

ty
\begin_inset Quotes crd
\end_inset

 valeur & (padStFlDspM | padStFlErrbit).
 Avec padStDispNone = 0; padStDispPar = 1; padStDispGrp = 2; padStDispGBk
 = 3; padStDispRng = 4; padStDispClip = 5; padStDispErr = 6;
\end_layout

\begin_layout Paragraph*

\family typewriter
padStErrors
\end_layout

\begin_layout Standard
Compte-rendu d'erreur, s'affichant temporairement lorsque la cellule a été
 cliquée et qu'il n'est pas possible de jouer un clip.
\end_layout

\begin_layout Subsubsection
Module 
\begin_inset Quotes cld
\end_inset

Sound Units
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Il va afficher, sous la forme d'un pad de 8 colonnes, et une ou plusieurs
 lignes, la liste des générateurs de sons actifs ou au repos.
 Les générateurs actifs affichent leur mode de jeu (
\begin_inset Quotes cld
\end_inset

Play
\begin_inset Quotes crd
\end_inset

 ou 
\begin_inset Quotes cld
\end_inset

Loop
\begin_inset Quotes crd
\end_inset

), et le numéro du clip joué.
\end_layout

\begin_layout Standard
Il est possible, par un clic gauche sur un générateur en fonctionnement,
 de verrouiller ce générateur, c'est-à-dire qu'il va jouer répétitivement
 le même clip, en conservant les paramètres de jeu.
 Un nouveau clic gauche déverrouille le générateur, qui peut terminer normalemen
t son travail.
\end_layout

\begin_layout Standard
Un clic gauche combiné à aux touches 
\begin_inset Quotes cld
\end_inset

ctrl
\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset

shift
\begin_inset Quotes crd
\end_inset

 verrouille l'ensemble des générateurs, permettant de créer un paysage sonore
 à la fois fixe et évolutif.
 Un clic gauche combiné avec la touche 
\begin_inset Quotes cld
\end_inset

ctrl
\begin_inset Quotes crd
\end_inset

 déverrouille l'ensemble des générateurs.
\end_layout

\begin_layout Standard
Un clic droit arrête immédiatement le générateur.
\end_layout

\begin_layout Subsubsection
Module 
\begin_inset Quotes cld
\end_inset

Clip Section
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Ce module permet d'afficher, par groupes de 100, les 10000 clips potentiels
 pouvant être gérés par le système.
 Deux sliders permettent de choisir la zone affichée (réglage de milliers
 et des centaines).
 Un premier pad, d'une ligne, permet également de choisir le groupe de clips
 à afficher dans les centaines, et indique le nombre de clips joués dans
 ce groupe de 100.
 
\end_layout

\begin_layout Section
Variables importantes
\end_layout

\begin_layout Standard
Ce ne sont pas des paramètres, mais elles jouent un rôle important dans
 le logiciel
\end_layout

\begin_layout Description
Kbtp Peut être positionnée à différents endroit du logiciel.
 Une valeur positive ou nulle va indiquer un clip à jouer.
 Elle est décodée de la manière suivante par le logiciel :
\end_layout

\begin_layout Description
0
\begin_inset space ~
\end_inset

à
\begin_inset space ~
\end_inset

15 la touche correspondante du pad a été jouée, ou l'on est en mode automatique
 et et l'on a sélectionné le play pad.
\end_layout

\begin_layout Description
17 Jouer un clip du groupe courant
\end_layout

\begin_layout Description
18 Jouer un clip du de la selection groupe/banque courante
\end_layout

\begin_layout Description
19 Jouer un clip du partiel courant
\end_layout

\begin_layout Description
20 Jouer le clip spécifique sélectionné (variable 
\begin_inset Quotes cld
\end_inset


\family typewriter
GvPlayCl0
\family default

\begin_inset Quotes crd
\end_inset

 positionnée par le module 
\begin_inset Quotes cld
\end_inset


\emph on
Play Control
\emph default

\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Description
21 Jouer un clip de l'intervale spécifié (
\begin_inset Quotes cld
\end_inset


\family typewriter
GvPlayCl
\family default
1
\begin_inset Quotes crd
\end_inset


\begin_inset Quotes cld
\end_inset


\family typewriter
GvPlayCl
\family default
2
\begin_inset Quotes crd
\end_inset

)
\end_layout

\begin_layout Description
22 Jouer n'importe quel clip connu, avec les réglages du partiel indiqué
\end_layout

\begin_layout Description
23 Jouer un clip de n'importe quel partiel, avec les réglages de ce partiel.
\end_layout

\begin_layout Description
24 Jouer un clip (numéro passé dans la variable 
\begin_inset Quotes cld
\end_inset


\family typewriter
GvPlayCl3
\family default

\begin_inset Quotes crd
\end_inset

) avec les régages du partiel courant
\end_layout

\begin_layout Description
0x1000+x où 
\begin_inset Quotes cld
\end_inset

x
\begin_inset Quotes crd
\end_inset

 est l'un des modes précédents
\begin_inset space ~
\end_inset

: jouer le clip sans tenir compte des limitations sur le nombre de players
 ou loopers actifs.
\end_layout

\begin_layout Section
MIDI Modules
\end_layout

\begin_layout Standard
Les périphériques MIDI sont gérés de la manière suivante.
 Pour chaque type de périphérique connecté (nanoKONTROL2, nanoPAD2, APCmini,
 etc.) sont créés deux plugins.
 Dans l'exemple de 
\emph on
l'APCmini
\emph default
, on aura
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
APCmini_In.jsfx
\begin_inset Index idx
status open

\begin_layout Plain Layout
APCmini_In.jsfx
\end_layout

\end_inset

 Il est placé dans les 
\begin_inset Quotes cld
\end_inset

IN FX
\begin_inset Quotes crd
\end_inset

 d'une piste consacrée à ce périphérique.
 Il va recevoir les commandes MIDI issues du périphérique, appliquer un
 certain nombre de règles, et transmettre des commandes adéquates au GameMaster.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
APCmini_Out.jsfx
\begin_inset Index idx
status open

\begin_layout Plain Layout
APCmini_Out.jsfx
\end_layout

\end_inset

 Il est placé dans les 
\begin_inset Quotes cld
\end_inset

FX
\begin_inset Quotes crd
\end_inset

 de la même piste.
 Il va reçevoir des commandes du GameMaster, et envoyer du MIDI au périphérique
 (par l'intermédiaire de Route\SpecialChar menuseparator
Hardware send).
\end_layout

\begin_layout Standard
Ces deux plug-ins communiquent, par l'intermédiaire de leurs blocs de contrôle,
 avec le GameMaster.
 Un protocole simple permet l'échange de commandes entre les deux plug-ins
 et le GameMaster.
\end_layout

\begin_layout Chapter
Variables et autres paramètres
\end_layout

\begin_layout Section
Parameters
\end_layout

\begin_layout Standard
Parameters are 
\emph on

\begin_inset Quotes eld
\end_inset

important
\begin_inset Quotes erd
\end_inset


\emph default
 values that condition the behaviour of the GM.
 They are referenced by a JS variable name, which value is actually the
 
\emph on
index
\emph default
 of the parameter in an array.
 For example, the maximum number of sounds generators to use is referenced
 by 
\family typewriter
p_maxGenerators
\family default
.
 Its number is (currently) 20, and its value is kept in 
\family typewriter
paramValues[p_maxGenerators]
\family default
.
\end_layout

\begin_layout Standard
The application currently defines 256 parameters (constant 
\family typewriter
paramCount
\family default
), numbered from 0 to 255.
 Parameters from 1 to 64 are mapped to the native (hidden) sliders.
 Numbers 1 to 16 are used as settings for the 8 random generators (amplitudes
 and frequencies).
 A read-only 
\emph on
copy
\emph default
 of the values of the parameters is provided in the common memory, at address
 
\family typewriter
gmem[paramGCopy]
\family default
 and followings.
\end_layout

\begin_layout Standard
A parameter, in some cases, can have a global value, and, in a player, a
 local value.
 Usually, the player receives a copy of the global value as part of a play
 command, then the local value may be interactively changed.
\end_layout

\begin_layout Standard
There may exist two declarations for a parameter
\begin_inset space ~
\end_inset

; one is use beneath some limit, the other beyond that limit.
\end_layout

\begin_layout Standard
The characteristics of the parameters are kept in 5 arrays:
\end_layout

\begin_layout Itemize

\family typewriter
paramValues
\family default
 (size: paramCount): the current values of the parameters 
\end_layout

\begin_layout Itemize

\family typewriter
paramStatus
\family default
 (size: paramCount): a set of bits (with the same meaning for all parameters)
 describing the status of the parameter.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
pStat_Mod
\family default
 is set if the parameter has 
\begin_inset Quotes eld
\end_inset

recently
\begin_inset Quotes erd
\end_inset

 been modified 
\end_layout

\begin_layout Itemize

\family typewriter
pStat_RMod
\family default
 is set if the parameter is modified by an associated Random Generator 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
paramFlags
\family default
 (size: paramCount): a set of bits (with a meaning specific to each parameter)
 
\end_layout

\begin_layout Itemize

\family typewriter
paramPrevValues
\family default
 (size: paramCount): the previous values of the parameters 
\end_layout

\begin_layout Itemize

\family typewriter
paramBlock
\family default
 (size: paramCount * paramEntSize, with 
\family typewriter
paramEntSize
\family default
 equal to 20), describing additionnal properties of the parameters.
 
\end_layout

\begin_layout Standard
Interacting with parameters is best done with specialized functions:
\end_layout

\begin_layout Itemize

\family typewriter
parV(xpnum)
\family default
 returns the value of parameter 
\family typewriter
xpnum
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
parGetV(xpnum)
\family default
 returns the value of parameter 
\family typewriter
xpnum
\family default
 for parameters with constraints.
 
\end_layout

\begin_layout Itemize

\family typewriter
parGetPP(xpnum,
\begin_inset space \space{}
\end_inset

prop)
\family default
 returns the value of the property 
\family typewriter
prop
\family default
 of parameter 
\family typewriter
xpnum
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
parSet(xpnum,
\begin_inset space \space{}
\end_inset

value)
\family default
 sets the value of parameter 
\family typewriter
xpnum
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
parSetPP(xpnum,
\begin_inset space \space{}
\end_inset

prop,
\begin_inset space \space{}
\end_inset

value)
\family default
 sets the property 
\family typewriter
prop
\family default
 of parameter 
\family typewriter
xpnum
\family default
.
 
\end_layout

\begin_layout Standard
Parameters are declared with the following functions:
\end_layout

\begin_layout Itemize

\family typewriter
parDcl(xpnum,
\begin_inset space \space{}
\end_inset

xpname,
\begin_inset space \space{}
\end_inset

xptype,
\begin_inset space \space{}
\end_inset

xpsfmt,
\begin_inset space \space{}
\end_inset

xpmfmt,
\begin_inset space \space{}
\end_inset

xpmin,
\begin_inset space \space{}
\end_inset

xpmax,
\begin_inset space \space{}
\end_inset

xpdef,
\begin_inset space \space{}
\end_inset

xpstep,
\begin_inset space \space{}
\end_inset

xpslope,
\begin_inset space \space{}
\end_inset

xpflags,
\begin_inset space \space{}
\end_inset

xpaddr,
\begin_inset space \space{}
\end_inset

xpswlim,
\begin_inset space \space{}
\end_inset

xpswfact,
\begin_inset space \space{}
\end_inset

xpgen)
\family default
 where the various parameters have the following meaning:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
xpnum
\family default
 (a number, between 0 and 255) is the numeric identification of the parameter,
 used in functions like 
\family typewriter
parV
\family default
, 
\family typewriter
parGetPP
\family default
, etc.
 
\end_layout

\begin_layout Itemize

\family typewriter
xpname
\family default
 (
\family typewriter
pp_Name
\family default
) is a string, which is used to display the name of the parameter 
\end_layout

\begin_layout Itemize

\family typewriter
xptype
\family default
 (
\family typewriter
pp_Type
\family default
) is an internal 
\emph on
type
\emph default
 associated to the parameter.
 
\end_layout

\begin_layout Itemize

\family typewriter
xpsfmt
\family default
 (
\family typewriter
pp_SFmt
\family default
) is a string, the format used when the parameter is displayed in a show
 box.
 
\end_layout

\begin_layout Itemize

\family typewriter
xpmfmt
\family default
 (
\family typewriter
pp_MFmt
\family default
) is a string, the format used when the parameter is displayed in an interactive
 control.
 
\end_layout

\begin_layout Itemize

\family typewriter
xpmin
\family default
 (
\family typewriter
pp_Min
\family default
) is the minimal value the parameter can take when updated through a control.
 
\end_layout

\begin_layout Itemize

\family typewriter
xpmax
\family default
 (
\family typewriter
pp_Max
\family default
) is the maximal value the parameter can take when updated through a control.
 
\end_layout

\begin_layout Itemize

\family typewriter
xpdef
\family default
 (
\family typewriter
pp_Def
\family default
) is the default value for the parameter.
 
\end_layout

\begin_layout Itemize

\family typewriter
xpstep
\family default
 (
\family typewriter
pp_Step
\family default
) is the step used for the parameter to progress from a value to the next
 one.
 It will be an integer (typically, 1) for an integer parameter, or a value
 such as 0.1, 0.001, etc.
 
\end_layout

\begin_layout Itemize

\family typewriter
xpslope
\family default
 (
\family typewriter
pp_Slope
\family default
) is the type of the variation 
\end_layout

\begin_layout Itemize

\family typewriter
xpflags
\family default
 (
\family typewriter
pp_Flags
\family default
) 
\end_layout

\begin_layout Itemize

\family typewriter
xpaddr
\family default
 (
\family typewriter
pp_Addr
\family default
) if not zero, a memory address where the new value of a parameter is written
 
\end_layout

\begin_layout Itemize

\family typewriter
xpswlim
\family default
 (
\family typewriter
pp_SwLim
\family default
) if param value is beyond this limit, switch to alternate display of the
 parameter
\end_layout

\begin_layout Itemize

\family typewriter
xpswfact
\family default
 (
\family typewriter
pp_SwFac
\family default
) factor for alernate display of the parameter
\end_layout

\begin_layout Itemize

\family typewriter
xpgen
\family default
 (
\family typewriter
pp_Gen
\family default
) 
\end_layout

\end_deeper
\begin_layout Itemize
Other functions are available when you need to provide only a subset of
 the properties:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
parDcl(xpnum,
\begin_inset space \space{}
\end_inset

xpname,
\begin_inset space \space{}
\end_inset

xptype,
\begin_inset space \space{}
\end_inset

xpsfmt,
\begin_inset space \space{}
\end_inset

xpmfmt,
\begin_inset space \space{}
\end_inset

xpmin,
\begin_inset space \space{}
\end_inset

xpmax,
\begin_inset space \space{}
\end_inset

xpdef,
\begin_inset space \space{}
\end_inset

xpstep,
\begin_inset space \space{}
\end_inset

xpslope,
\begin_inset space \space{}
\end_inset

xpflags,
\begin_inset space \space{}
\end_inset

xpaddr)
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
parDcl(xpnum,
\begin_inset space \space{}
\end_inset

xpname,
\begin_inset space \space{}
\end_inset

xptype,
\begin_inset space \space{}
\end_inset

xpsfmt,
\begin_inset space \space{}
\end_inset

xpmfmt,
\begin_inset space \space{}
\end_inset

xpmin,
\begin_inset space \space{}
\end_inset

xpmax,
\begin_inset space \space{}
\end_inset

xpdef,
\begin_inset space \space{}
\end_inset

xpstep,
\begin_inset space \space{}
\end_inset

xpslope,
\begin_inset space \space{}
\end_inset

xpflags)
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
parDcl(xpnum,
\begin_inset space \space{}
\end_inset

xpname,
\begin_inset space \space{}
\end_inset

xptype,
\begin_inset space \space{}
\end_inset

xpsfmt,
\begin_inset space \space{}
\end_inset

xpmfmt,
\begin_inset space \space{}
\end_inset

xpmin,
\begin_inset space \space{}
\end_inset

xpmax,
\begin_inset space \space{}
\end_inset

xpdef,
\begin_inset space \space{}
\end_inset

xpstep,
\begin_inset space \space{}
\end_inset

xpslope)
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
parDcl(xpnum,
\begin_inset space \space{}
\end_inset

xpname,
\begin_inset space \space{}
\end_inset

xptype,
\begin_inset space \space{}
\end_inset

xpsfmt,
\begin_inset space \space{}
\end_inset

xpmfmt,
\begin_inset space \space{}
\end_inset

xpmin,
\begin_inset space \space{}
\end_inset

xpmax,
\begin_inset space \space{}
\end_inset

xpdef,
\begin_inset space \space{}
\end_inset

xpstep)
\family default
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
parDclAlt(xpnum,
\begin_inset space \space{}
\end_inset

xalt,
\begin_inset space \space{}
\end_inset

xpswlim,
\begin_inset space \space{}
\end_inset

xpswfact)
\family default
 lets you declare an alternate 
\begin_inset Quotes eld
\end_inset

presentation
\begin_inset Quotes erd
\end_inset

 of the parameter, for display purposes (for example, to use 
\family typewriter
s
\family default
 or 
\family typewriter
ms
\family default
, or 
\family typewriter
Hz
\family default
 or 
\family typewriter
kHz
\family default
 where appropriate).
 
\end_layout

\begin_layout Subsection
Parameters properties
\end_layout

\begin_layout Standard
Here is the list of the parameters properties:
\end_layout

\begin_layout Itemize

\family typewriter
pp_Value
\family default
 just in case it is more convenient to access the value this way.
 
\end_layout

\begin_layout Itemize

\family typewriter
pp_Flags
\family default
 is a set of 
\emph on
read only
\emph default
 properties associated with the parameters
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
pflg_Limit
\family default
 is set to indicate that when setting the parameter value, this value must
 be bounded by the properties 
\family typewriter
pp_Min
\family default
 and 
\family typewriter
pp_Max
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
pflg_LedA
\family default
 is set to indicate that a 
\emph on
type A
\emph default
 led is associated with the parameter, and must be displayed in a control.
 
\end_layout

\begin_layout Itemize

\family typewriter
pflg_LedB
\family default
 is set to indicate that a 
\emph on
type B
\emph default
 led is associated with the parameter, and must be displayed in a control.
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
pp_Status
\family default
 is a set of 
\emph on
read write
\emph default
 flags describing the status of the parameters.
 It uses:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
pStat_Mod
\family default
 is set if the parameter has 
\begin_inset Quotes eld
\end_inset

recently
\begin_inset Quotes erd
\end_inset

 been modified 
\end_layout

\begin_layout Itemize

\family typewriter
pStat_RMod
\family default
 is set if the parameter has a random generator associated 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
pp_Type
\family default
 le type d'utilisation (affichage, modification) qui peut être fait du paramètre.
\end_layout

\begin_layout Itemize

\family typewriter
pp_Altent
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
pp_SwFac
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
pp_LowB
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
pp_HigB
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
pp_Type
\family default
 currently not used 
\end_layout

\begin_layout Itemize

\family typewriter
pp_Name
\family default
 a string, the name of the parameter 
\end_layout

\begin_layout Itemize
pp_mSLCode the name of the parameters, compacted as a mSL identifier
\end_layout

\begin_layout Itemize

\family typewriter
pp_SFmt
\family default
 editing format for the parameter, as displayed in a show box 
\end_layout

\begin_layout Itemize

\family typewriter
pp_MFmt
\family default
 name and editing format for the parameter, as displayed in a control 
\end_layout

\begin_layout Itemize

\family typewriter
pp_Min
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
pp_Max
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
pp_Def
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
pp_Step
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
pp_Slope
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
pp_SwLim
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
pp_Gen
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
pp_Action
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
pp_PrevValue
\family default
 The previous value of the parameter 
\end_layout

\begin_layout Subsection
Parameters list
\end_layout

\begin_layout Standard
Currently, up to 256 parameters can be defined.
 Only a few of them are actually used in the application:
\end_layout

\begin_layout Itemize

\family typewriter
p_maxGenerators
\family default
 (20) max number of simultaneously active generators (sum of readers and
 looper) 
\end_layout

\begin_layout Itemize

\family typewriter
p_maxReaders
\family default
 (21) max number of simultaneously active readers 
\end_layout

\begin_layout Itemize

\family typewriter
p_maxLoopers
\family default
 (22) max number of simultaneously active loopers 
\end_layout

\begin_layout Itemize

\family typewriter
p_ratioReadLoop
\family default
 (23) a setting of the ratio between loopers and players.
 Equal to 0 when the numbers of loopers and players are equal; its value
 is -100 when there are no loopers, and 100 when there are no players.
 
\end_layout

\begin_layout Itemize

\family typewriter
p_latency
\family default
 (24) the 
\begin_inset Quotes eld
\end_inset

size
\begin_inset Quotes erd
\end_inset

 of the time-interval during which the ratio reader/looper is evaluated.
 The values 1 to 10 correspond to an exponential scale from 1 second to
 about 20 minutes.
 
\end_layout

\begin_layout Chapter
Structure des presets
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Section
Presets
\begin_inset Index idx
status open

\begin_layout Plain Layout
Presets
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Les presets constituent, en gros, la seule méthode permettant de sauvegarder
 des informations depuis un plugin JSFX.
 Après de nombreuses iter(hésit)ations, il a été choisi d'utiliser un bloc
 mémoire unique, 
\family typewriter
serialBlock
\family default
, de taille 
\family typewriter
serialSize
\family default
, actuellement 12288 mots (de 64 bits, au format double précision).
 On notera que REAPER convertit, lors de la sauvegarde du préset, chaque
 flottant 64 bits en flottants 32 bits, ce qui fait perdre énormément de
 précision dans les valeurs des variables sauvegardées.
 Ainsi, il n'est pas possible de conserver dans un préset des 
\begin_inset Quotes cld
\end_inset

entiers
\begin_inset Quotes crd
\end_inset

 de plus de 24 bits, ce qui explique certains des algorithmes utilisés lors
 de la sauvegarde et de la restoration de présets.
 La structure suivante en sous-blocs est adoptée, où dans chaque description
 le premier nombre représente une adresse mémoire dans le préset, et le
 second nombre la taille de la zone associée :
\end_layout

\begin_layout Description
0
\begin_inset space ~
\end_inset

[taille
\begin_inset space ~
\end_inset

4] en-tête de bloc, avec 4 valeur
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Description
presetVersionCurrent la version courante du preset.
 Cette version est enregistrée dans le préset.
 Lors de la lecture d'un préset, la valeur correspondante est placée dans
 la variable 
\family typewriter
presetVersionLoaded
\family default
, et comparée avec la valeur attendue, pour effectuer les ajustements nécessaire
s, si possible.
\end_layout

\begin_layout Description
presetCheckValue une valeur enregistrée à titre de validation du préset.
 La lecture s'effectue dans la variable 
\family typewriter
presetCheckLoaded
\family default
, et comparée avec la valeur attendue.
\end_layout

\begin_layout Description
presetAux1
\begin_inset space ~
\end_inset

et
\begin_inset space ~
\end_inset

presetAux1 deux valeurs auxiliaires
\end_layout

\end_deeper
\begin_layout Description
4
\begin_inset space ~
\end_inset

[taille
\begin_inset space ~
\end_inset

124] sauvegarde de valeurs/variables individuelles.
 Au 
\emph on
load
\emph default
 ou au 
\emph on
save
\emph default
, les variables sont recopiées individuellement, éventuellement avec une
 mise à jour d'autres objets.
 Ces variables sont les suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Description
variables une douzaine environ : GvPlayTyp, GvPlayGrp, GvPlayBnk, GvPlayPart,
 GvPlayPM, GvPlaySM, GvPlayCl0, GvPlayCl1, GvPlayCl2, padBKVals[0], padSMVals[0]
, padPMVals[0], studPrefDispPanes, studPrefDispSize, UplayControl.
\end_layout

\begin_layout Description
partiel-0 une copie du partiel 0, de 12 mots.
\end_layout

\end_deeper
\begin_layout Description
128
\begin_inset space ~
\end_inset

[taille
\begin_inset space ~
\end_inset

384] Sauvegarde des noms de fichiers de configuration utilisés dans le preset.
 Chaque entrée utilise 32 mots, permettant de conserver un nom de fichier
 allant jusqu'à 90 caractères.
 On trouve :
\end_layout

\begin_layout Itemize
fichier des définitions des configurations de haut-parleurs.
 Defaut : 
\family typewriter
#HPConfigs = "config-HP.mSL";
\end_layout

\begin_layout Itemize
fichier de description des modes de jeux : 
\family typewriter
#PlayModes = "config-PModes.mSL";
\end_layout

\begin_layout Itemize
fichier de description des modes d'espace : 
\family typewriter
#SpaceModes = "config-SModes.mSL";
\end_layout

\begin_layout Itemize
fichier de description des partiels, dit fichier 
\begin_inset Quotes cld
\end_inset

banques
\begin_inset Quotes crd
\end_inset

 : 
\family typewriter
#BanksDefs = "config-Banks.mSL";
\end_layout

\begin_layout Itemize
fichier de modification des clips : 
\family typewriter
#ClipsModifiers = "config-Clips.mSL";
\end_layout

\begin_layout Itemize
fichier de description des ensembles de clips : 
\family typewriter
#ClipSetConf = "config-ClSets.mSL";
\end_layout

\begin_layout Itemize
fichier de description des senseurs connectés : 
\family typewriter
#InSens_Name = "config-Sensors.mSL";
\end_layout

\begin_layout Itemize
fichier d'initialisation du GM, en mSL : 
\family typewriter
#GM_mSL_ini= "GM_mSL_ini.mSL";
\end_layout

\begin_layout Itemize
fichier script auxiliaire, 
\family typewriter
#Script_Name = "GenPlayScript.txt";
\end_layout

\begin_layout Description
512
\begin_inset space ~
\end_inset

[512] 
\begin_inset Quotes cld
\end_inset

Studio Play Pad
\begin_inset Quotes crd
\end_inset

, 4 zones de 128 mots décrivant les propriétés des 128 pads.
\end_layout

\begin_layout Description
1024
\begin_inset space ~
\end_inset

[512] Blocs de description des 8 modules 
\begin_inset Quotes cld
\end_inset

sliders
\begin_inset Quotes crd
\end_inset

, 128 mots chacun, permettant chacun de définir 120 sliders potentiels.
\end_layout

\begin_layout Description
2048
\begin_inset space ~
\end_inset

[1024] Blocs de descriptions des paramètres, 3 entrées de 256 mots chacune,
 une entrée inutilisée pour l'instant.
\end_layout

\begin_layout Description
3072
\begin_inset space ~
\end_inset

[2048] blocs de configuration des affichages de modules.
 4 tabulations, 4 panneaux par tabulation, soit 16 blocs de 128 mots, permettant
 de définir la position de 63 modules par panneau.
\end_layout

\begin_layout Description
5120
\begin_inset space ~
\end_inset

[768] blocs de configuration des afficheurs de players, 4 visibles, 2 de
 transfert intermédiaire (+ 2 externes, non inclus dans le préset).
\end_layout

\begin_layout Description
6144
\begin_inset space ~
\end_inset

[1024] zone de sauvegarde de 256 MIDI Links.
\end_layout

\begin_layout Description
7168 début de la zone libre.
\end_layout

\begin_layout Chapter
Commandes internes
\end_layout

\begin_layout Section
Executing commands
\end_layout

\begin_layout Standard
There is a single thread for executing commands, inside the 
\series bold
@block
\series default
 section of the GM.
 The maximum duration of the block is itself limited by the 
\emph on
sample rate
\emph default
 (JSFX variable 
\family typewriter
srate
\family default
) and the 
\emph on
block size
\emph default
 (JSFX variable 
\family typewriter
samplesblock
\family default
).
 This means that the duration, in seconds, to generate a block of samples
 may never exceed 
\family typewriter
samplesblock/srate
\family default
.
 For a a block of 1024 samples, and a rate of 48000, this value is about
 21.33ms.
 Note that during this laps of time, all players should also have generated
 their outputs.
 Actual times can be monitored in the 
\emph on
Performance Meter
\emph default
 window of REAPER.
\end_layout

\begin_layout Standard
Executing commands is an asynchronous operation.
 The procedure 
\family typewriter
doCmd(Kmd)
\family default
 lets you enter a new command in a circular list.
 The commands are executed in a first-in first-out order, when CPU time
 is available for them.
\end_layout

\begin_layout Standard
A command is a single number.
 The following commands are recognized.
\end_layout

\begin_layout Itemize
(cmdPadBase + 0 to 127): play the corresponding pad (0 to 127) of the 
\emph on
Studio Play Pad
\emph default
 
\end_layout

\begin_layout Itemize
(cmdClMdBase + GvPlayTypGroup): play a clip from the current group (displayed
 in the 
\emph on
Play Control
\emph default
).
 
\end_layout

\begin_layout Itemize
(cmdClMdBase + GvPlayTypGrPlay): play a clip in play mode from the current
 group (displayed in the 
\emph on
Play Control
\emph default
).
 
\end_layout

\begin_layout Itemize
(cmdClMdBase + GvPlayTypGrLoop): play a clip in loop mode from the current
 group (displayed in the 
\emph on
Play Control
\emph default
).
 
\end_layout

\begin_layout Itemize
(cmdClMdBase + GvPlayTypBank): play a clip from the current bank (displayed
 in the 
\emph on
Play Control
\emph default
).
 
\end_layout

\begin_layout Itemize
(cmdClMdBase + GvPlayTypPartiel): play a clip from the current partiel (displaye
d in the 
\emph on
Play Control
\emph default
).
 
\end_layout

\begin_layout Itemize
(cmdClMdBase + GvPlayTypClip): play the current clip (displayed in the 
\emph on
Play Control
\emph default
).
 
\end_layout

\begin_layout Itemize
(cmdClMdBase + GvPlayTypRange): play a clip from the current clip range
 with the parameters defined by the current partiel (displayed in the 
\emph on
Play Control
\emph default
).
 
\end_layout

\begin_layout Itemize
(cmdClMdBase + GvPlayTypAnyClip): play any clip in the system, with the
 parameters defined by the current partiel (displayed in the 
\emph on
Play Control
\emph default
) 
\end_layout

\begin_layout Itemize
(cmdClMdBase + GvPlayTypAnyBank): play a clip from any bank, with its own
 parameters.
 
\end_layout

\begin_layout Section
Who is sending commands ?
\end_layout

\begin_layout Standard
The following codes can send commands with the 
\family typewriter
doCmd
\family default
 function.
\end_layout

\begin_layout Itemize
The MIDI receiver code, when a 
\emph on
note on
\emph default
 is received.
 
\end_layout

\begin_layout Itemize
When the 
\emph on
play pad
\emph default
 is clicked, the corresponding cell number is sent as a command.
 
\end_layout

\begin_layout Itemize
In auto-play mode, a play command is sent 
\end_layout

\begin_layout Section
Studios and Modules
\end_layout

\begin_layout Standard
There are 3 studios tabs, and each tab can be further partitionned in one,
 two, or three panes.
 In any pane, 
\emph on
alt-right-click
\emph default
 lets you add, arrange, or suppress modules.
 A specific menu is associated with each pane, and the plug-in configuration
 is kept with the preset.
 
\end_layout

\begin_layout Section
Gestion des commandes
\end_layout

\begin_layout Standard
Intégration des différents systèmes de gestion des commandes avec le scheduler
 et la gestion des threads.
 Une version unique de la gestion des commandes est mise en place.
\end_layout

\begin_layout Standard
Une commande est conservée dans un élément d'une liste.
 
\end_layout

\begin_layout Standard
La séquence typique pour lancer une commande sans attente (commande immédiate)
 est :
\end_layout

\begin_layout LyX-Code
xent = SchedDetachHead(SchedFreePts);
\end_layout

\begin_layout LyX-Code
SchedCode[xent] = command_code;
\end_layout

\begin_layout LyX-Code
SchedPar1[xent] = command_parameter_1;
\end_layout

\begin_layout LyX-Code
SchedPar2[xent] = command_parameter_2;
\end_layout

\begin_layout LyX-Code
SchedInsertTail(SchedActivPts, xent);
\end_layout

\begin_layout Standard
Ces opérations peuvent être déléguées à la fonction suivante :
\end_layout

\begin_layout LyX-Code
SchedAddTask
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedAddTask
\end_layout

\end_inset

(code, p1, p2, p3, p4);
\end_layout

\begin_layout Standard
Une commande avec délai peut être définie de la manière suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
SchedAddDelayedTask
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedAddDelayedTask
\end_layout

\end_inset

(delaytype, delayvalue, code, p1, p2, p3, p4);
\end_layout

\begin_layout Chapter
Autres structures
\end_layout

\begin_layout Section
Raccourcis et autres
\end_layout

\begin_layout Standard
Une table unique permet la liaison entre les entrées MIDI, les Sliders JSFX
 (au nombre de 64), les raccourcis claviers définis par l'utilisateur, et
 les paramètres ou les commandes.
\end_layout

\begin_layout Subsection
Codification des événéments
\end_layout

\begin_layout Standard
Les entrées MIDI, claviers et manipulations des Sliders JSFX (au travers
 de courbes d'automation) sont traités de manière identique.
 Un événement est créé, qui est une codification ainsi composée
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
Contrôleur MIDI
\begin_inset space ~
\end_inset

: la codification est 0xBcnn, où 
\begin_inset Quotes cld
\end_inset

c
\begin_inset Quotes crd
\end_inset

 est le numéro de canal MIDI (
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

15
\begin_inset Quotes crd
\end_inset

), et 
\begin_inset Quotes cld
\end_inset

nn
\begin_inset Quotes crd
\end_inset

 le numéro du contrôleur (
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

127
\begin_inset Quotes crd
\end_inset

).
 
\end_layout

\begin_layout Itemize
Note MIDI
\begin_inset space ~
\end_inset

: la codification est 0x8cnn (note off) ou 0x9cnn (note on), où 
\begin_inset Quotes cld
\end_inset

c
\begin_inset Quotes crd
\end_inset

 est le numéro de canal MIDI (
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

15
\begin_inset Quotes crd
\end_inset

), et 
\begin_inset Quotes cld
\end_inset

nn
\begin_inset Quotes crd
\end_inset

 le numéro de la note (
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

127
\begin_inset Quotes crd
\end_inset

).
 
\end_layout

\begin_layout Itemize
Slider JSFX
\begin_inset space ~
\end_inset

: la codification est 0x10nn, où 
\begin_inset Quotes cld
\end_inset

nn
\begin_inset Quotes crd
\end_inset

 est le numéro du slider (
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

64
\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Itemize
Clavier
\begin_inset space ~
\end_inset

: la codification est 0xttttttttmm, où 
\begin_inset Quotes cld
\end_inset

mm
\begin_inset Quotes crd
\end_inset

 sont les modificateurs (1, 0, ctl, alt, shift, cmd, 0, 0) et 
\begin_inset Quotes cld
\end_inset

tt
\begin_inset Quotes crd
\end_inset

 un numéro de touche.
\end_layout

\begin_layout Itemize
Evénement interne
\begin_inset space ~
\end_inset

: codé sous la forme 0x2nnn, où 
\begin_inset Quotes cld
\end_inset

nnn
\begin_inset Quotes crd
\end_inset

 est un numéro d'événement interne.
\end_layout

\begin_layout Subsection
Gestion des associations
\end_layout

\begin_layout Standard
Un événement peut être lié à une action à effectuer
\begin_inset space ~
\end_inset

: modification d'un paramètre, exécution d'une action particulière.
 Une association permet de lier un événement à une opération à exécuter.
 Elle est représentée par un même index dans un ensemble de 4 tables
\begin_inset space ~
\end_inset

: 
\end_layout

\begin_layout Description
Links_HTab Contient la codification de l'événement attendu.
 C'est une table de hashcode, le hash de l'événement étant obtenu par le
 modulo de la division de sa codification par la taille de la table.
\end_layout

\begin_layout Description
Links_Actn L'action à déclancher.
 Celle-ci est elle-même codifiée de la façon suivante, sous la forme de
 la somme de deux valeurs
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
un type d'opération
\begin_inset space ~
\end_inset

: 0x1000=paramètre, 0x2000=single_value, 0x3000=action interne.
\end_layout

\begin_layout Itemize
le numéro du paramètre, ou de l'action à réaliser.
\end_layout

\end_deeper
\begin_layout Description
Links_Par1 Une valeur 
\begin_inset Quotes cld
\end_inset

minimale
\begin_inset Quotes crd
\end_inset

 (paramètre) ou une valeur auxiliaire
\end_layout

\begin_layout Description
Links_Par2 Une valeur 
\begin_inset Quotes cld
\end_inset

maximale
\begin_inset Quotes crd
\end_inset

 (paramètre) ou une valeur auxiliaire.
\end_layout

\begin_layout Standard
Dans le cas d'un paramètre, la nouvelle valeur du contrôle est obtenue par
 interpolation entre les valeurs minimale et maximale associées.
 
\end_layout

\begin_layout Chapter
Les générateurs d'aléa
\end_layout

\begin_layout Section
Principe
\end_layout

\begin_layout Standard
Ils génèrent à la base une valeur aléatoire comprise entre -1 et 1.
 Cette valeur est, pour l'utilisation, multipliée par un pourcentage [de
 0 à 100] défini par l'amplitude du générateur.
 Ils ont en particulier un type et un mode, utilisés de la manière suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
le type indique la nature de l'aléa.
 Ce type peut être
\end_layout

\begin_deeper
\begin_layout Itemize
aléatoire périodique : la valeur aléatoire est calculée une fois et une
 seule pour chaque période.
 Elle est toujours la même si deux demandes différentes tombent durant une
 même période.
\end_layout

\begin_layout Itemize
pur aléatoire : la valeur aléatoire est recalculée lors de chaque utilisation.
\end_layout

\begin_layout Itemize
périodique sinusoïdal : la valeur est basée sur la valeur d'une fonction
 périodique de type sinus.
 
\end_layout

\begin_layout Itemize
périodique dent de scie ascendante, descendante, etc
\begin_inset space ~
\end_inset

: variation linéaire entre -1 et 1.
\end_layout

\end_deeper
\begin_layout Itemize
le mode indique la nature de transformation de la valeur initiale (entre
 -1 et 1) par l'amplitude.
 Soit 
\begin_inset Formula $\mathcal{A}$
\end_inset

 l'amplitude (indiquée en pourcentage, et ici ramenée entre 0 et 1) et 
\begin_inset Formula $\mathcal{V}$
\end_inset

la valeur de l'aléa (entre -1 et 1), les modes définissent les transformations
 suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
linéaire direct
\begin_inset space ~
\end_inset

: 
\begin_inset Formula $\mathcal{R}=\mathcal{V}\times\mathcal{A}$
\end_inset

.
\end_layout

\begin_layout Itemize
linéaire positif : 
\begin_inset Formula $\mathcal{R}=\frac{\mathcal{V}+1}{2}\times\mathcal{A}$
\end_inset

.
\end_layout

\begin_layout Itemize
linéaire négatif : 
\begin_inset Formula $\mathcal{R}=\frac{\mathcal{V}-1}{2}\times\mathcal{A}$
\end_inset

.
\end_layout

\begin_layout Itemize
exponentiel 1
\begin_inset space ~
\end_inset

: 
\begin_inset Formula $\mathcal{R}=10^{\mathcal{V}\times\mathcal{A}}$
\end_inset

.
\end_layout

\begin_layout Itemize
exponentiel 2
\begin_inset space ~
\end_inset

: 
\begin_inset Formula $\mathcal{R}=2^{\mathcal{V}\times\mathcal{A}}$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
On notera que l'amplitude peut être modifiée par un facteur supplémentaire
 modifiant l'amplitude globale du résultat.
\end_layout

\begin_layout Section
Implantation
\end_layout

\begin_layout Standard
Elle est basée sur les tableaux (de 8 éléments) suivants, résidant en mémoire
 partagée :
\end_layout

\begin_layout Description
RandomSMxSL correspond à la valeur du slider 
\begin_inset Quotes cld
\end_inset

amplitude
\begin_inset Quotes crd
\end_inset

, exprimée sous forme d'un pourcentage (valeur interne entre 0 et 100)
\end_layout

\begin_layout Description
RandomSChSL correspond à la valeur du slider 
\begin_inset Quotes cld
\end_inset

période
\begin_inset Quotes crd
\end_inset

.
 Elle est exprimée en ms.
\end_layout

\begin_layout Description
RandomSActiv indique si le générateur correspondant est actif ou non.
 S'il n'est pas actif, la valeur générée est toujours 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 (modes linéaires) ou 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 (modes exponentiels).
\end_layout

\begin_layout Description
RandomSCurr valeur courante du générateur.
\end_layout

\begin_layout Description
RandomSFlags utilisé dans le type 
\begin_inset Quotes cld
\end_inset

aléatoire périodique
\begin_inset Quotes crd
\end_inset

, indique (valeur 0) si la valeur courante de l'aléa est valide, ou (valeur
 1) si elle doit être recalculée.
 
\end_layout

\begin_layout Description
RandomSTimr valeur courante du timer [entre 0 et RandomSChSL].
\end_layout

\begin_layout Chapter
Présentation du Langage mSL
\end_layout

\begin_layout Standard
Section décrivant l'implantation d'un mini langage de script, 
\emph on
mSL
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL
\end_layout

\end_inset

, destiné à être incorporé à des effets écrits en JSFX, fonctionnant sous
 REAPER 
\begin_inset CommandInset citation
LatexCommand cite
key "reaper-site"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
Concepts généraux
\end_layout

\begin_layout Standard
This section describes 
\emph on
mSL
\emph default
, a programming language that can be integrated within a JSFX plug-in.
 
\emph on
mSL
\emph default
 (for 
\emph on
micro Script Language
\emph default
) is written in 
\emph on
JS
\emph default
 (
\emph on
jesusonic
\emph default
, aka 
\emph on
eel2
\emph default
), and is available in the form of two import files, 
\emph on
mSL_Clib.jsfx-inc
\emph default
 and 
\emph on
mSL_Xlib.jsfx-inc
\emph default
.
\end_layout

\begin_layout Standard
Since 
\emph on
mSL
\emph default
 can 
\emph on
only
\emph default
 be used inside a JSFX plug-in, or at least a software that supports 
\emph on
JS
\emph default
, the potential user is supposed to be familiar with the JSFX syntax.
 Therefore, the mSL language has been designed to be very similar to JSFX,
 and this document, after a brief introduction to the particularities of
 
\emph on
mSL
\emph default
, concentrates mainly on its usage and its integration within a JSFX plug-in.
\end_layout

\begin_layout Subsection
The language
\end_layout

\begin_layout Standard
The language 
\emph on
mSL
\emph default
 is very similar to 
\emph on
JS
\emph default
.
 Like 
\emph on
JS
\emph default
, 
\emph on
mSL
\emph default
 provides only 
\emph on
numbers
\emph default
, as 64 bits floating point values, access to the 
\emph on
JS
\emph default
 memory (by indexation) and to the shared memory (with the 
\family typewriter
gmem[x]
\family default
 construct), definition of functions and use of strings.
 Many operations and functions of 
\emph on
JS
\emph default
 are available with the same name, syntax and semantics.
\end_layout

\begin_layout Standard
There are however some differences, that reflect either impossibilities,
 or choices of the implementer.
 Most are documented in the next paragraphs.
\end_layout

\begin_layout Subsubsection
Differences between 
\emph on
mSL
\emph default
 and 
\emph on
JS
\end_layout

\begin_layout Paragraph
Variables
\end_layout

\begin_layout Enumerate
Variables names are limited to 8 chars, start with a letter or the underscore
 character, and contain letters, digits and underscore.
 Upper case and lower case letters are considered 
\emph on
distinct
\emph default
, so 
\family typewriter
abc
\family default
, 
\family typewriter
AbC
\family default
 and 
\family typewriter
ABC
\family default
 refer to three different variables.
 
\end_layout

\begin_layout Enumerate
All variables 
\emph on
must
\emph default
 be declared, with the 
\family typewriter
var
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
var
\end_layout

\end_inset


\family default
 keyword.
 Here is an example of such a declaration:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
var
\begin_inset space \space{}
\end_inset

a=10,
\begin_inset space \space{}
\end_inset

b,
\begin_inset space \space{}
\end_inset

c=a+5,
\begin_inset space \space{}
\end_inset

d=2*$pi;
\family default
 
\end_layout

\end_deeper
\begin_layout Enumerate
However, declarations and other instructions can be mixed, and variables
 can even be used before their declarations, as long as they are declared
 somewhere in the source text.
 
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
a
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

3;
\end_layout

\begin_layout LyX-Code

\family typewriter
b
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

5<<
\begin_inset space \space{}
\end_inset

a;
\end_layout

\begin_layout LyX-Code

\family typewriter
c
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

b | 3; //returns 43 
\end_layout

\begin_layout LyX-Code

\family typewriter
//
\begin_inset space \space{}
\end_inset

declarations
\begin_inset space \space{}
\end_inset

can
\begin_inset space \space{}
\end_inset

follow
\end_layout

\begin_layout LyX-Code

\family typewriter
var
\begin_inset space \space{}
\end_inset

a,
\begin_inset space \space{}
\end_inset

b,
\begin_inset space \space{}
\end_inset

c;
\family default
 
\end_layout

\end_deeper
\begin_layout Paragraph
Constants
\end_layout

\begin_layout Standard
All values used in programs are 64 bits floating point numbers.
 However, different notations are available to construct these values.
\end_layout

\begin_layout Enumerate
Classical numeric notation.
 This includes integers and decimal notations, hexadecimal starting with
 
\family typewriter
0x
\family default
 or 
\family typewriter
0X
\family default
, and binary notation, using only the digits 0 and 1, which starts with
 
\family typewriter
0b
\family default
 or 
\family typewriter
0B
\family default
.
 
\end_layout

\begin_layout Enumerate
Characters and multibyte characters are constituted by a sequence of up
 to 4 characters between quotes, like
\family typewriter
 
\family default
'
\family typewriter
A
\family default
' or '
\family typewriter
u2,+
\family default
'.
 This notation has the same semantics as in 
\emph on
JS
\emph default
.
 
\end_layout

\begin_layout Enumerate

\emph on
Symbols
\emph default
 constitute a compact notation for identifiers of up to 8 characters such
 as variables names (starting with a letter or underscore, and containing
 letters, digits or undescore).
 This notation is introduced by a backquote character, as in 
\family typewriter
`symbol
\family default
.
 This notation generates integers between 
\family typewriter
0x02C0000000000
\family default
 and 
\family typewriter
0x1000000000000
\family default
.
 
\end_layout

\begin_layout Enumerate
Symbolic constants start with a 
\family typewriter
$
\family default
 character, followed by a symbol.
 Symbolic constants, like 
\family typewriter
$pi
\family default
 and 
\family typewriter
$e
\family default
 are predefined, and an application can add new ones.
 
\end_layout

\begin_layout Paragraph
Primitive operators
\end_layout

\begin_layout Standard
The semantics of the operations are quasi-similar in both languages.
 Note the following differences.
\end_layout

\begin_layout Enumerate
In 
\emph on
JS
\emph default
, the logical operations 
\family typewriter
&&
\family default
 and || return 0 or 1.
 
\emph on
mSL
\emph default
 uses the 
\begin_inset Quotes eld
\end_inset

C
\begin_inset Quotes erd
\end_inset

 semantics, so, while 
\family typewriter
2
\begin_inset space \space{}
\end_inset

&&
\begin_inset space \space{}
\end_inset

3
\family default
 is 1 in 
\emph on
JS
\emph default
, the same expression in 
\emph on
mSL
\emph default
 returns 3.
 Both results, of course, are valid 
\emph on
true
\emph default
 values.
 
\end_layout

\begin_layout Enumerate
In 
\emph on
mSL
\emph default
 the assignment operators (
\family typewriter
=
\family default
, 
\family typewriter
+=
\family default
, etc.) have a lower priority than the condition 
\family typewriter
?
\begin_inset space \space{}
\end_inset

:
\family default
.
 As a result, you may need to use parentheses to obtain the desired result.
 
\end_layout

\begin_layout Paragraph
Loops
\end_layout

\begin_layout Standard
The 
\family typewriter
loop
\family default
 and 
\family typewriter
while
\family default
 constructs are available, with the same semantics as in 
\emph on
JS
\emph default
.
\end_layout

\begin_layout Paragraph
Defined Functions
\end_layout

\begin_layout Enumerate
Function definition syntax is identical in 
\emph on
mSL
\emph default
 and 
\emph on
JS
\emph default
.
 However, parameters and local variables 
\emph on
must
\emph default
 be separated by 
\emph on
commas
\emph default
, while the comma is optionnal in 
\emph on
JS
\emph default
.
 Contrary to the 
\emph on
JS
\emph default
 language, functions can be recursive, cross-recursive, and can be used
 before their declaration:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
fib(25);
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

//returns
\begin_inset space \space{}
\end_inset

75025
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

fib(n)
\end_layout

\begin_layout LyX-Code

\family typewriter
(
\end_layout

\begin_layout LyX-Code

\family typewriter
    (n
\begin_inset space \space{}
\end_inset

<
\begin_inset space \space{}
\end_inset

2)
\begin_inset space \space{}
\end_inset

?
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

:
\begin_inset space \space{}
\end_inset

fib(n-1)
\begin_inset space \space{}
\end_inset

+
\begin_inset space \space{}
\end_inset

fib(n-2);
\end_layout

\begin_layout LyX-Code

\family typewriter
);
\family default
 
\end_layout

\end_deeper
\begin_layout Enumerate
Parameters and local variables are allocated (on the stack) at each function
 call.
 They are not attached to the function, and therefore are not remanent as
 in 
\emph on
JS
\emph default
.
 The values of local variables are undefined when the function is entered.
 Just to show this fact (and this is not an example to follow!), in the
 
\family typewriter
f
\family default
 function, the third local variable, 
\family typewriter
z
\family default
 happens to capture the value of the third element on the stack, 1331, which
 is the result of 
\family typewriter
11^3
\family default
 left by the execution of the previous expression:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f()
\end_layout

\begin_layout LyX-Code

\family typewriter
local
\begin_inset space \space{}
\end_inset

(x,
\begin_inset space \space{}
\end_inset

y,
\begin_inset space \space{}
\end_inset

z)
\end_layout

\begin_layout LyX-Code

\family typewriter
(
\begin_inset space \space{}
\end_inset

z;
\begin_inset space \space{}
\end_inset

);
\end_layout

\begin_layout LyX-Code

\family typewriter
7+8*11^3;
\end_layout

\begin_layout LyX-Code

\family typewriter
f();
\begin_inset space \space{}
\end_inset

//
\begin_inset space \space{}
\end_inset

return
\begin_inset space \space{}
\end_inset

1331
\family default
 
\end_layout

\end_deeper
\begin_layout Enumerate
The arity (number of arguments) of standard defined functions is fixed.
 A function with no arguments is said to be 
\emph on
niladic
\emph default
, a one argument function is 
\emph on
monadic
\emph default
, a two arguments functions is 
\emph on
dyadic
\emph default
, etc.
 However, it is possible to define a 
\emph on
variadic
\emph default
 function, i.e.
\begin_inset space ~
\end_inset

one that accepts a variable number of arguments, from 0 to whatever the
 size of the stack allows.
 Such a function must be defined with two parameters, separated not by a
 
\emph on
comma
\emph default
, but by a 
\emph on
semicolon
\emph default
.
 The semantics of such a definition is similar to the one of a 
\family typewriter
main
\family default
 
\emph on
C
\emph default
 program: the first parameter is the 
\emph on
number
\emph default
 of arguments, the second parameter is the 
\emph on
address
\emph default
 of the array of the actual arguments.
 With the definition 
\family typewriter
function
\begin_inset space \space{}
\end_inset

f(x
\begin_inset space \space{}
\end_inset

;
\begin_inset space \space{}
\end_inset

y)
\family default
 and a call such as 
\family typewriter
f(12,
\begin_inset space \space{}
\end_inset

8,
\begin_inset space \space{}
\end_inset

5)
\family default
, 
\family typewriter
x
\family default
 is equal to 3, because there are 3 parameters in the function call, 
\family typewriter
y[0]
\family default
 is 12, 
\family typewriter
y[1]
\family default
 is 8, and 
\family typewriter
y[2]
\family default
 is 5.
 Here is an example:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
//
\begin_inset space \space{}
\end_inset

variadic
\begin_inset space \space{}
\end_inset

function
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f(a;b)
\end_layout

\begin_layout LyX-Code

\family typewriter
local
\begin_inset space \space{}
\end_inset

(s,i)
\end_layout

\begin_layout LyX-Code

\family typewriter
(
\end_layout

\begin_layout LyX-Code

\family typewriter
    s
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

i
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

0;
\end_layout

\begin_layout LyX-Code

\family typewriter
    loop
\begin_inset space \space{}
\end_inset

(a,
\begin_inset space \space{}
\end_inset

s
\begin_inset space \space{}
\end_inset

+=
\begin_inset space \space{}
\end_inset

b[i];
\begin_inset space \space{}
\end_inset

i+=
\begin_inset space \space{}
\end_inset

1;
\begin_inset space \space{}
\end_inset

);
\end_layout

\begin_layout LyX-Code

\family typewriter
    s;
\end_layout

\begin_layout LyX-Code

\family typewriter
);
\end_layout

\begin_layout LyX-Code

\family typewriter
f(2,
\begin_inset space \space{}
\end_inset

3,
\begin_inset space \space{}
\end_inset

5,
\begin_inset space \space{}
\end_inset

6)
\begin_inset space \space{}
\end_inset

+
\begin_inset space \space{}
\end_inset

f(5,
\begin_inset space \space{}
\end_inset

7)
\begin_inset space \space{}
\end_inset

+
\begin_inset space \space{}
\end_inset

f();
\begin_inset space \space{}
\end_inset

//
\begin_inset space \space{}
\end_inset

returns
\begin_inset space \space{}
\end_inset

28
\family default
 
\end_layout

\begin_layout Standard
Note that the array of actual arguments (
\family typewriter
b
\family default
 in this example) is a temporary object, which is allocated in the stack,
 which is valid inside the function but can't be returned as a result, and
 which may not be suited as an argument to a function call.
 
\end_layout

\end_deeper
\begin_layout Enumerate
Functions are 
\emph on
first class objects
\emph default
.
 They can be assigned to variables, passed as parameters to another function,
 etc.
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
//
\begin_inset space \space{}
\end_inset

functions
\begin_inset space \space{}
\end_inset

as
\begin_inset space \space{}
\end_inset

values
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

toto(a,
\begin_inset space \space{}
\end_inset

b,
\begin_inset space \space{}
\end_inset

c)
\begin_inset space \space{}
\end_inset

(a+2*b˖^c;);
\end_layout

\begin_layout LyX-Code

\family typewriter
var
\begin_inset space \space{}
\end_inset

fun
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

toto;
\end_layout

\begin_layout LyX-Code

\family typewriter
fun(3,
\begin_inset space \space{}
\end_inset

5,
\begin_inset space \space{}
\end_inset

2);
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

//returns
\begin_inset space \space{}
\end_inset

53
\end_layout

\begin_layout LyX-Code

\family typewriter
//
\begin_inset space \space{}
\end_inset

functions
\begin_inset space \space{}
\end_inset

as
\begin_inset space \space{}
\end_inset

arguments
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f1(x,y)
\begin_inset space \space{}
\end_inset

(x+3*y;);
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f2(x,y)
\begin_inset space \space{}
\end_inset

(x*y+7;);
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

g(f,
\begin_inset space \space{}
\end_inset

a,
\begin_inset space \space{}
\end_inset

b)
\begin_inset space \space{}
\end_inset

( 1+f(a,b); );
\end_layout

\begin_layout LyX-Code

\family typewriter
g(f1,
\begin_inset space \space{}
\end_inset

3,
\begin_inset space \space{}
\end_inset

5)
\begin_inset space \space{}
\end_inset

+
\begin_inset space \space{}
\end_inset

g(f2,
\begin_inset space \space{}
\end_inset

5,
\begin_inset space \space{}
\end_inset

6);
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

//returns
\begin_inset space \space{}
\end_inset

57
\family default
 
\end_layout

\end_deeper
\begin_layout Enumerate
The primitive operation 
\family typewriter
return
\family default
 lets you exit from a function, returning its parameter as result.
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f(u)
\begin_inset space \space{}
\end_inset

(
\end_layout

\begin_layout LyX-Code

\family typewriter
    u
\begin_inset space \space{}
\end_inset

==
\begin_inset space \space{}
\end_inset

3
\begin_inset space \space{}
\end_inset

?
\begin_inset space \space{}
\end_inset

return(31);
\end_layout

\begin_layout LyX-Code

\family typewriter
    2*u
\begin_inset space \space{}
\end_inset

+
\begin_inset space \space{}
\end_inset

5;
\end_layout

\begin_layout LyX-Code

\family typewriter
);
\end_layout

\begin_layout LyX-Code

\family typewriter
f(2)+f(3);
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

//returns
\begin_inset space \space{}
\end_inset

40
\family default
 
\end_layout

\end_deeper
\begin_layout Enumerate
The interpreter detects and optimizes the cases of terminal recursion (i.e.
\begin_inset space ~
\end_inset

the cases where a function call is immediately followed by an implicit or
 explicit 
\family typewriter
return
\family default
).
 As an example, in this (stupidely complex) definition of the addition of
 two positive integers:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f1(x,
\begin_inset space \space{}
\end_inset

y)
\begin_inset space \space{}
\end_inset

(
\end_layout

\begin_layout LyX-Code

\family typewriter
    x
\begin_inset space \space{}
\end_inset

<=
\begin_inset space \space{}
\end_inset

0
\begin_inset space \space{}
\end_inset

?
\begin_inset space \space{}
\end_inset

return(y);
\end_layout

\begin_layout LyX-Code

\family typewriter
    f2(x,
\begin_inset space \space{}
\end_inset

y);
\end_layout

\begin_layout LyX-Code

\family typewriter
);
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f2(u,
\begin_inset space \space{}
\end_inset

v)
\end_layout

\begin_layout LyX-Code

\family typewriter
local
\begin_inset space \space{}
\end_inset

(x,
\begin_inset space \space{}
\end_inset

y,
\begin_inset space \space{}
\end_inset

z,
\begin_inset space \space{}
\end_inset

t)
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

(
\end_layout

\begin_layout LyX-Code

\family typewriter
    x
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

u;
\begin_inset space \space{}
\end_inset

y
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

v;
\end_layout

\begin_layout LyX-Code

\family typewriter
    z
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

x-1;
\begin_inset space \space{}
\end_inset

t
\begin_inset space \space{}
\end_inset

=
\begin_inset space \space{}
\end_inset

1;
\end_layout

\begin_layout LyX-Code

\family typewriter
    f3(z,
\begin_inset space \space{}
\end_inset

y,
\begin_inset space \space{}
\end_inset

t);
\end_layout

\begin_layout LyX-Code

\family typewriter
);
\end_layout

\begin_layout LyX-Code

\family typewriter
function
\begin_inset space \space{}
\end_inset

f3(a,
\begin_inset space \space{}
\end_inset

b,
\begin_inset space \space{}
\end_inset

c)
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

(
\end_layout

\begin_layout LyX-Code

\family typewriter
    f1(a,
\begin_inset space \space{}
\end_inset

b+c);
\end_layout

\begin_layout LyX-Code

\family typewriter
);
\end_layout

\begin_layout LyX-Code

\family typewriter
f1
\begin_inset space \space{}
\end_inset

(5000000,
\begin_inset space \space{}
\end_inset

5000000);
\end_layout

\begin_layout Standard
the last expression returns 10000000, and involves 15 millions of recursive
 function calls, but uses no space in the stack.
 
\end_layout

\end_deeper
\begin_layout Paragraph
System functions
\end_layout

\begin_layout Standard
Some of 
\emph on
JS
\emph default
 primitive are available in 
\emph on
mSL
\emph default
 with the same name and same semantics.
 However, there are some minor differences, mainly due to the fact that
 symbol names are limited to 8 characters.
\end_layout

\begin_layout Itemize
The 
\family typewriter
time_precise()
\family default
 operation is available under the name 
\family typewriter
ptime()
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ptime()
\end_layout

\end_inset


\family default
 
\end_layout

\begin_layout Itemize
The 
\family typewriter
__memtop()
\family default
 operation is available under the name 
\family typewriter
memtop()
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
memtop()
\end_layout

\end_inset


\family default
 
\end_layout

\begin_layout Itemize
The system variables, such as 
\family typewriter
srate
\family default
, 
\family typewriter
num_ch
\family default
, 
\family typewriter
tempo
\family default
 are available as niladic functions, 
\family typewriter
srate()
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
srate()
\end_layout

\end_inset

, 
\family typewriter
num_ch()
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
num_ch()
\end_layout

\end_inset

, etc.
 
\end_layout

\begin_layout Paragraph
Strings
\end_layout

\begin_layout Standard
Strings in 
\emph on
mSL
\emph default
 are dynamically allocated from a predefined small pool of strings, either
 implicitely by the compiler, when a string is encountered in a program,
 or explicitely by the allocation function, 
\family typewriter
stralloc
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
stralloc()
\end_layout

\end_inset

.
 Strings are referenced, like any value, by ordinary variables.
\end_layout

\begin_layout LyX-Code
var s1 = "This is a string";
\end_layout

\begin_layout LyX-Code
var s2 = stralloc();
\end_layout

\begin_layout Standard
Strings can be released, when no longer in use, with the 
\family typewriter
strfree
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
strfree()
\end_layout

\end_inset


\family default
 operation:
\end_layout

\begin_layout LyX-Code
strfree(s1);
\end_layout

\begin_layout LyX-Code
strfree(s2);
\end_layout

\begin_layout Standard
Only a few operations on strings, like 
\family typewriter
strlen
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
strlen()
\end_layout

\end_inset


\family default
 and 
\family typewriter
compile
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
compile()
\end_layout

\end_inset

, are currently implemented in the language.
\end_layout

\begin_layout Paragraph
Memory access
\end_layout

\begin_layout Standard

\emph on
mSL
\emph default
 provides the indexing operator, 
\family typewriter
[]
\family default
 which has the same semantics as in 
\emph on
JS
\emph default
.
 A sequence like 
\family typewriter
a=100;
\begin_inset space \space{}
\end_inset

a[7];
\family default
 has the exact same effect in both languages (and returns the value of the
 memory at 107).
 This is true also for 
\family typewriter
gmem[x];
\family default
 and 
\family typewriter
gmem[x]=y;
\family default
.
\end_layout

\begin_layout Standard
Aditionnaly, 
\emph on
mSL
\emph default
 can use a part of the plug-in memory to provide a dynamic memory management.
 Allocation in this memory is provided by the 
\family typewriter
malloc
\family default
 operation, and its liberation by 
\family typewriter
mfree
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mfree()
\end_layout

\end_inset

.
\end_layout

\begin_layout Paragraph
Imports
\end_layout

\begin_layout Standard

\emph on
mSL
\emph default
 can import external files containing 
\emph on
mSL
\emph default
 instructions.
 The syntax of an import directive is the keyword 
\family typewriter
import
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
import
\end_layout

\end_inset

, followed by a string containing the file-name to import (which 
\emph on
must
\emph default
 have a 
\family typewriter
.txt
\family default
 suffix), and terminated by a semicolon.
 Ex:
\end_layout

\begin_layout LyX-Code
import "file.txt";
\end_layout

\begin_layout Standard
Import instructions can be mixed with other instructions.
\end_layout

\begin_layout Subsubsection
Some unique features
\end_layout

\begin_layout Paragraph
Blocks
\begin_inset Index idx
status open

\begin_layout Plain Layout
Blocks
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
mSL 
\emph default
définit une unique structure de donnée, dit 
\emph on
mBlock
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
mBlock
\end_layout

\end_inset


\emph default
 (pour 
\begin_inset Quotes cld
\end_inset

Memory Block
\begin_inset Quotes crd
\end_inset

), ou plus simplement, bloc, qui est une portion de la mémoire centrale,
 dont la structure est la suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Quote
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="8">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Taille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Taille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
~Type
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Les cases représentent, de gauche à droite, les addresses consécutives en
 mémoire, et les mots 
\family typewriter
C0
\family default
, 
\family typewriter
C1
\family default
, 
\family typewriter
C2
\family default
, etc.
 symbolisent les valeurs contenues dans le bloc.
 L'adresse 
\begin_inset Quotes cld
\end_inset

officielle
\begin_inset Quotes crd
\end_inset

 du bloc, telle qu'elle est manipulée par les programmes, est celle du premier
 élément, 
\family typewriter
C0
\family default
.
 Dans les programmes 
\emph on
mSL
\emph default
 (ou dans le code JSFX du plug-in), on accède donc à la première valeur,
 
\family typewriter
C0
\family default
, du bloc 
\family typewriter
Bl
\family default
 par l'expression 
\family typewriter
Bl[0]
\family default
.
 Le système utilise 4 mots supplémentaires pour gérer le bloc
\begin_inset space ~
\end_inset

: 
\family typewriter
Bl[-2]
\family default
 qui décrit le 
\emph on
type
\emph default
 du bloc, 
\family typewriter
Bl[-1]
\family default
 qui décrit sa 
\emph on
taille utile
\emph default
, 
\family typewriter
Bl[Bl[-1]]
\family default
, qui est une copie de la taille utile, et 
\family typewriter
Bl[Bl[-1]+1]
\family default
, notée 
\begin_inset Quotes cld
\end_inset


\emph on
~Type
\emph default

\begin_inset Quotes crd
\end_inset

, qui est une 
\begin_inset Quotes cld
\end_inset

validation
\begin_inset Quotes crd
\end_inset

 du type du bloc, et dont la valeur est 
\family typewriter
Bl[-2]~0x7FFFFFFF
\family default
.
\end_layout

\begin_layout Standard
In many aspects, such a block behaves like an array in other languages.
 It can be dynamically created by an external 
\emph on
JS
\emph default
 procedure, 
\family typewriter
mSL_make_block
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_make_block()
\end_layout

\end_inset


\family default
 from a memory address provided by you, by a call to the memory allocator,
 
\family typewriter
mSL_malloc
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_malloc()
\end_layout

\end_inset

, or, inside 
\emph on
mSL
\emph default
, by a call to 
\family typewriter
malloc
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
malloc()
\end_layout

\end_inset

.
 A block can also be statically created at compile type in a mSL program
 with the directive 
\family typewriter
data
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
data()
\end_layout

\end_inset

, which syntax consists in the keyword 
\family typewriter
data
\family default
 followed by a list of constant values enclosed inside parentheses:
\end_layout

\begin_layout LyX-Code
var bl = data(1,2,3.4, hello, world, ’ABCD’, 0x3ffA27342C5, $pi, ’x’);
\end_layout

\begin_layout Standard
In this expression, all values are numbers, and `hello`, for example, is
 actually the codification of the corresponding symbol, i.e.
 a 64 bit floating point number.
 Se souvenir que ces symboles sont composés de lettres, chiffres et du caractère
 
\begin_inset Quotes cld
\end_inset

_
\begin_inset Quotes crd
\end_inset

, et sont d'une longueur maximale de 8 caractères.
 In this specific construct, the separating commas are not mandatory, and
 whitespaces can be used instead.
\end_layout

\begin_layout Standard
Blocks are used to represent all the internal structures of the *mSL* system.
 They are "typed" by a 4 byte multichar, but this type is mainly a "label"
 associated with the block.
 Information about blocks can be easily queried by *mSL* programs.
 If 
\family typewriter
bl
\family default
 is any block, 
\family typewriter
bl[-2]
\family default
 is its 
\emph on
type
\emph default
, 
\family typewriter
bl[-1]
\family default
 its 
\emph on
length
\emph default
, and 
\family typewriter
bl[0]
\family default
 to 
\family typewriter
bl[length-1]
\family default
 provide access to its items.
\end_layout

\begin_layout Standard
Blocks can also be used as *associative memories*, where even numbered elements
 represent a key, and odd numbered elements the associated value.
 If we define:
\end_layout

\begin_layout LyX-Code
var tab = data(item1 1 item2 2 hello 3.4 world 333
\end_layout

\begin_layout LyX-Code
               'ABCD' 0x3ffA27342C5 last 'x');
\end_layout

\begin_layout Standard
then:
\end_layout

\begin_layout LyX-Code
tab[`hello]
\end_layout

\begin_layout Standard
returns:
\end_layout

\begin_layout LyX-Code
3.4
\end_layout

\begin_layout Standard
and:
\end_layout

\begin_layout LyX-Code
tab['ABCD']
\end_layout

\begin_layout Standard
returns:
\end_layout

\begin_layout LyX-Code
0x3ffA27342C5.
\end_layout

\begin_layout Section

\emph on
mSL
\emph default
, in short
\end_layout

\begin_layout Enumerate

\series bold
\emph on
mSL
\series default
\emph default
 is very similar to 
\series bold
\emph on
JS
\series default
\emph default
.
\end_layout

\begin_layout Enumerate
Standard operators : 
\family typewriter
+
\family default
, 
\family typewriter
-
\family default
, 
\family typewriter
*
\family default
, 
\family typewriter
/
\family default
, 
\family typewriter
%
\family default
, 
\family typewriter
<
\family default
, 
\family typewriter
<=
\family default
, 
\family typewriter
==
\family default
, 
\family typewriter
!=
\family default
, 
\family typewriter
>=
\family default
, 
\family typewriter
>
\family default
, 
\family typewriter
===
\family default
, 
\family typewriter
!==
\family default
, 
\family typewriter
&
\family default
, 
\family typewriter
|
\family default
, 
\family typewriter
&&
\family default
, 
\family typewriter
||
\family default
, 
\family typewriter
!
\family default
 , 
\family typewriter
^
\family default
, 
\family typewriter
~
\family default
, 
\family typewriter
?:
\family default
, 
\family typewriter
=
\family default
, 
\family typewriter
+=
\family default
, 
\family typewriter
-=
\family default
, 
\family typewriter
*=
\family default
, 
\family typewriter
/=
\family default
, 
\family typewriter
%=
\family default
, 
\family typewriter
&=
\family default
, 
\family typewriter
|=
\family default
 have the same semantics.
 
\end_layout

\begin_layout Enumerate
Standard functions : 
\family typewriter
sin
\family default
, 
\family typewriter
cos
\family default
, 
\family typewriter
tan
\family default
, 
\family typewriter
asin
\family default
, 
\family typewriter
acos
\family default
, 
\family typewriter
atan
\family default
, 
\family typewriter
max
\family default
, 
\family typewriter
min
\family default
, 
\family typewriter
atan2
\family default
, 
\family typewriter
pow
\family default
, 
\family typewriter
sqr
\family default
, 
\family typewriter
sqrt
\family default
, 
\family typewriter
exp
\family default
, 
\family typewriter
log
\family default
, 
\family typewriter
abs
\family default
, 
\family typewriter
sign
\family default
, 
\family typewriter
log10
\family default
, 
\family typewriter
floor
\family default
, 
\family typewriter
ceil
\family default
, 
\family typewriter
invsqrt
\family default
, 
\family typewriter
rand
\family default
, 
\family typewriter
time
\family default
, 
\family typewriter
strlen
\family default
 are identical.
\end_layout

\begin_layout Enumerate
Some Standard functions are defined with a different name, or a different
 syntax: 
\family typewriter
ptime()
\family default
 for 
\family typewriter
time_precise()
\family default
, 
\family typewriter
srate()
\family default
, 
\family typewriter
num_ch()
\family default
, 
\family typewriter
tempo()
\family default
, 
\family typewriter
memtop()
\family default
 for 
\family typewriter
__memtop()
\family default
.
\end_layout

\begin_layout Enumerate
Introduced functions : 
\family typewriter
int(x)
\family default
 (convert 
\family typewriter
x
\family default
 to an int), 
\family typewriter
irand(x)
\family default
 (provide a random integer in [0 x-1]), 
\family typewriter
isint(x)
\family default
 (test if x is integer), 
\family typewriter
isfun(x)
\family default
 (test is x represents a function), 
\family typewriter
return(v)
\family default
 (return from a function), 
\family typewriter
strcode(string)
\family default
 (code a string as a symbol), 
\family typewriter
sum(x1, x2, ...
 xn)
\family default
 (sum of its parameters), 
\family typewriter
compile(string)
\family default
 (compile a string and return the code as a niladic function), 
\family typewriter
error(code)
\family default
 (signal an error, and stop execution), 
\family typewriter
malloc(size [,type])
\family default
 (allocate some dynamic memory), 
\family typewriter
mfree(mref)
\family default
 (free an allocated bloc of dynamic memory), 
\family typewriter
stralloc()
\family default
 (allocate a dynamic string), 
\family typewriter
strfree(str)
\family default
 (free a dynamically allocated string), 
\family typewriter
get(t, x)
\family default
 (access to the property 
\family typewriter
x
\family default
 of a table 
\family typewriter
t
\family default
), 
\family typewriter
set(t, x, y)
\family default
 (set the value 
\family typewriter
y
\family default
 of the property 
\family typewriter
x
\family default
 of a table 
\family typewriter
t
\family default
).
\end_layout

\begin_layout Enumerate
Variables are limited to 8 chars and 
\series bold
must
\series default
 be declared.
\end_layout

\begin_layout Enumerate
Defined functions can be recursive and cross recursive.
 They are 
\emph on
"first class citizen"
\emph default
, and can be assigned to variables, passed as parameters, and returned from
 a function.
 
\end_layout

\begin_layout Chapter
La compilation de mSL
\end_layout

\begin_layout Standard
Le compilateur utilise un mécanisme en plusieurs passes, au cours desquelles
 il construit l'arbre syntaxique du programme, le réduit par l'application
 successives de règles, et génère un code conçu pour une machine à pile.
 Il utilise pour ses besoins propres la mémoire dynamique, mais celle-ci
 peut (pourrait) être réinitialisée entre deux compilations.
 
\end_layout

\begin_layout Section
La table des symboles
\end_layout

\begin_layout Standard
Les symboles représentent une codification compacte des identificateurs,
 limités à 8 caractères, et ne contenant que les lettres, les chiffres et
 le caractère 
\begin_inset Quotes cld
\end_inset

_
\begin_inset Quotes crd
\end_inset

.
 Cette codification est représentée sur 48 bits en entier, et reste valide
 sur les flottants 64 bits utilisés pour représenter toutes les valeurs
 au sein du système (limitation liée aux JSFX).
 Un symbole est donc représenté par une valeur numérique unique.
\end_layout

\begin_layout Standard
La table des symboles utilisée par le compilateur est en fait une table
 hashcodée.
 Sa taille est un nombre premier (ici, 3313), et la fonction de hashcode
 utilisée est le résidu de la division par ce nombre de la codification
 du symbole.
 En cas de collision, une autre entrée est essayée (avec un incrément de
 73), etc.
 
\end_layout

\begin_layout Standard
A cette table, de nom 
\family typewriter
mSL_GCTab
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_GCTab
\end_layout

\end_inset


\family default
, sont associées trois autres tables de même taille, 
\family typewriter
mSL_GCCod
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_GCCod
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_GCTyp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_GCTyp
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_GCVal
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_GCVal
\end_layout

\end_inset


\family default
, l'ensemble définissant, pour une même entrée, le symbole, son numéro interne
 dans l'une des futures tables liées à l'exécution (variables globales,
 variables 
\begin_inset Quotes cld
\end_inset

own
\begin_inset Quotes crd
\end_inset

 ou semi-locales, pointeurs), son type (identificateur ou autre), et sa
 valeur (dans le cas des objets 
\begin_inset Quotes cld
\end_inset

prédéclarés
\begin_inset Quotes crd
\end_inset

, tels que les fonctions du système), et les objets compilés (fonctions
 définies).
\end_layout

\begin_layout Standard
Un schema similaire est utilisé pour la tables des variables 
\begin_inset Quotes cld
\end_inset

semi-locales
\begin_inset Quotes crd
\end_inset

, déclarées par le mot-clef 
\begin_inset Quotes cld
\end_inset


\family typewriter
loc
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
loc
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Section
Les phases de la compilation
\end_layout

\begin_layout Subsection
Analyse lexicale
\end_layout

\begin_layout Standard
Elle est réalisée par des appels successifs d'un analyseur lexical, la fonction
 
\family typewriter
mSL_lex()
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_lex()
\end_layout

\end_inset


\family default
, qui va transformer le code entrant en lexèmes successifs.
 Ces lexèmes sont alors conservés sous la forme d'une liste doublement chaînée,
 qui débute et se termine par des symboles spéciaux de début et de fin (
\family typewriter
mSL_tyHEAD
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_tyHEAD
\end_layout

\end_inset


\family default
 et 
\family typewriter
mSL_tyTAIL
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_tyTAIL
\end_layout

\end_inset


\family default
).
 De même, la directive 
\begin_inset Quotes cld
\end_inset


\family typewriter
import
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
import
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 va remplacer la séquence 
\emph on

\begin_inset Quotes cld
\end_inset

import file-name
\emph default

\begin_inset Quotes crd
\end_inset

 par la liste des lexèmes contenus dans le fichier.
 Cette opération peut éventuellement être récursive, si le fichier importé
 contient lui-même des directive 
\begin_inset Quotes cld
\end_inset

import
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Subsection
Analyse syntaxique
\end_layout

\begin_layout Standard
Dans un second temps, les expressions parenthésées (encadrées de parenthèses
 ou de crochets) sont réduites, de la plus interne à la plus externe, puis
 différentes règles de réductions sont appliquées, modélisant les priorités
 des opérateurs.
 Ces règles vont en général remplacer une séquence de 0, 1 ou plusieurs
 lexèmes par un lexème unique, ou un sous-arbre 
\end_layout

\begin_layout Standard
Des règles spécifiques prennent en compte les déclarations de variables
 (
\begin_inset Quotes cld
\end_inset

var
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

loc
\begin_inset Quotes crd
\end_inset

), de fonctions (
\begin_inset Quotes cld
\end_inset

function
\begin_inset Quotes crd
\end_inset

), et les instructions 
\begin_inset Quotes cld
\end_inset

import
\begin_inset Quotes crd
\end_inset

.
 
\end_layout

\begin_layout Standard
A l'issue de ces opérations, l'arbre syntaxique du programme a été construit
 et peut être validé.
\end_layout

\begin_layout Subsection
Génération de code
\end_layout

\begin_layout Standard
La génération de code effectue un parcours de l'arbre et génère le byte
 code au fur et à mesure de ce parcours.
 Des générations indépendantes sont effectuées, pour chaque fonction, et
 pour le programme complet, considéré comme une fonction sans résultat.
\end_layout

\begin_layout Section
Structure d'un code objet 
\end_layout

\begin_layout Standard
Code objet et fonctions ont la même représentation, un code objet étant
 représenté comme une fonction sans paramètre ni variable locale.
 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="30" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Adresse
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nom
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Utilisation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_Key
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification d'un code compilé.
 Valeur : 
\family typewriter
mSL_CC_KeyCKod 'ccod'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_Size
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Taille du bloc, préfixe de 2 mots et suffixe de 2 mots non compris
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_Flags_Idt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
`ccflags
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_Flags
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Infos: 1 pour une fonction multiadique.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_dpCode_Idt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
`ccname
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_dpCode
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Position relative du code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_CodSize_Idt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
`ccode
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_CodSize
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Taille du code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_Name_Idt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
`ccodesiz
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nom du code (pour une fonction) ou 
\begin_inset Quotes xld
\end_inset

0
\begin_inset Quotes xrd
\end_inset

.
 Identificateur compacté.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_ParCnt_Idt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
`ccparcnt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_ParCnt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nombre de paramètres de la fonction
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_LocCnt_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
`ccloccnt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_LocCnt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nombre de variables locales de la fonction
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_GlbCnt_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
`ccglbcnt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_GlbCnt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nombre de références globales
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_GlbTab_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
`ccglbtbl
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_GlbTab
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Table des variables globales utilisée
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_OwnTab_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
`ccowntbl
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_OwnTab
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Table des variables semi-locales
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_PtrTab_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
`ccptrtbl
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_PtrTab
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Table des pointeurs externes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_last
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Verrou: 
\family typewriter
mSL_End_Mark 0x20200901 538970369
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_CC_1stId
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Position du premier identificateur (paramètre ou variable locale) ou début
 du code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code de la fonction
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes xld
\end_inset

0
\begin_inset Quotes xrd
\end_inset

 End code 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes xld
\end_inset

taille
\begin_inset Quotes xrd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Taille du bloc, idem -1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes xld
\end_inset

check
\begin_inset Quotes xrd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fin de code, valeur 
\family typewriter
mSL_CC_KeyKEnd (mSL_CC_Chksum ~ mSL_CC_KeyCKod)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Chapter
Le Mécanisme d'exécution du code mSL
\end_layout

\begin_layout Standard
Comment fonctionne le mécanisme d'exécution d'un code mSL ? Voici une question
 que je me pose régulièrement, ce qui me permet occasionnellement d'apporter
 de petites améliorations.
\end_layout

\begin_layout Section
Les tables utilisées
\end_layout

\begin_layout Standard
Trois classes de symboles sont utilisées, les symboles globaux, mis en place
 dans la table 
\family typewriter
mSL_baseAVars
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_baseAVars
\end_layout

\end_inset


\family default
, les symboles semi-locaux, mis en place dans la table 
\family typewriter
mSL_baseOVars
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_baseOVars
\end_layout

\end_inset


\family default
, et les variables de type pointeurs, dans la table 
\family typewriter
mSL_basePVars
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_basePVars
\end_layout

\end_inset


\family default
 (les variables locales à une fonction sont, elles, allouées temporairement
 dans la pile d'exécution).
 Ces trois tables ont la même structure, et sont des séquences de symboles
 (identificateurs compactés) suivis de leur valeur associée.
 L'exécution accède directement aux valeurs des symboles, car leurs indices
 ont été calculés lors de la compilation, mais il est possible de lire,
 ou modifier dynamiquement des valeurs dans ces tables au moyen des opérations
 
\begin_inset Quotes cld
\end_inset


\family typewriter
get
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
get
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
set
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
set
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Subsection
Structure du 
\begin_inset Quotes cld
\end_inset

code objet
\begin_inset Quotes crd
\end_inset

 
\end_layout

\begin_layout Standard
Après compilation, le code correspondant à une fonction (ou un fichier contenant
 des instructions mSL, et considéré comme une fonction sans paramètre) est
 assemblé à l'intérieur d'un bloc de mémoire alloué par 
\family typewriter
mSL_malloc
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_malloc
\end_layout

\end_inset


\family default
.
 Sa structure est la suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
-2
\begin_inset space ~
\end_inset

mSL_CC_Key 
\family typewriter
mSL_CC_KeyCKod
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_CC_KeyCKod
\end_layout

\end_inset


\family default
, valeur 
\family typewriter
'ccod'
\family default
.
\end_layout

\begin_layout Description
-1
\begin_inset space ~
\end_inset

mSL_CC_Size Taille du bloc (- 4)
\end_layout

\begin_layout Description
0
\begin_inset space ~
\end_inset

mSL_CC_Flags_Idt symbole 
\begin_inset Quotes cld
\end_inset


\family typewriter
ccflags
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ccflags
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
1
\begin_inset space ~
\end_inset

mSL_CC_Flags Indicateurs relatifs au code
\end_layout

\begin_layout Description
2
\begin_inset space ~
\end_inset

mSL_CC_dpCode_Idt symbole 
\begin_inset Quotes cld
\end_inset


\family typewriter
ccode
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ccode
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
3
\begin_inset space ~
\end_inset

mSL_CC_dpCode addresse relative du code
\end_layout

\begin_layout Description
4
\begin_inset space ~
\end_inset

mSL_CC_CodSize_Idt symbole 
\begin_inset Quotes cld
\end_inset


\family typewriter
ccodesiz
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ccodesiz
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
5
\begin_inset space ~
\end_inset

mSL_CC_CodSize taille du code objet généré
\end_layout

\begin_layout Description
6
\begin_inset space ~
\end_inset

mSL_CC_Name_Idt symbole 
\begin_inset Quotes cld
\end_inset


\family typewriter
ccname
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ccname
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
7
\begin_inset space ~
\end_inset

mSL_CC_Name valeur 0, ou symbole correspondant au nom de la fonction.
\end_layout

\begin_layout Description
8
\begin_inset space ~
\end_inset

mSL_CC_ParCnt_Idt symbole 
\begin_inset Quotes cld
\end_inset


\family typewriter
ccparcnt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ccparcnt
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
9
\begin_inset space ~
\end_inset

mSL_CC_ParCnt nombre de paramètres de la fonction
\end_layout

\begin_layout Description
10
\begin_inset space ~
\end_inset

mSL_CC_LocCnt_Idt symbole 
\begin_inset Quotes cld
\end_inset


\family typewriter
ccloccnt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ccloccnt
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
11
\begin_inset space ~
\end_inset

mSL_CC_LocCnt nombre de variables locales de la fonction
\end_layout

\begin_layout Description
12
\begin_inset space ~
\end_inset

mSL_CC_GlbCnt_Idt symbole 
\begin_inset Quotes cld
\end_inset


\family typewriter
ccglbcnt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ccglbcnt
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
13
\begin_inset space ~
\end_inset

mSL_CC_GlbCnt nombre de variables globales de la fonction
\end_layout

\begin_layout Description
14
\begin_inset space ~
\end_inset

mSL_CC_GlbTab_Idt symbole 
\begin_inset Quotes cld
\end_inset


\family typewriter
ccglbtbl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ccglbtbl
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
15
\begin_inset space ~
\end_inset

mSL_CC_GlbTab table des variables globales de la fonction
\end_layout

\begin_layout Description
16
\begin_inset space ~
\end_inset

mSL_CC_OwnTab_Idt symbole 
\begin_inset Quotes cld
\end_inset


\family typewriter
ccowntbl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ccowntbl
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
17
\begin_inset space ~
\end_inset

mSL_CC_OwnTab table des variables globales de la fonction
\end_layout

\begin_layout Description
18
\begin_inset space ~
\end_inset

mSL_CC_PtrTab_Idt symbole 
\begin_inset Quotes cld
\end_inset


\family typewriter
ccptrtbl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ccptrtbl
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
19
\begin_inset space ~
\end_inset

mSL_CC_PtrTab table des variables globales de la fonction
\end_layout

\begin_layout Description
20
\begin_inset space ~
\end_inset

mSL_CC_last 
\family typewriter
mSL_End_Mark
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_End_Mark
\end_layout

\end_inset


\family default
, valeur 
\family typewriter
0x20200901
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
0x20200901
\end_layout

\end_inset


\family default
.
 Marqueur de fin des valeurs consultables.
\end_layout

\begin_layout Description
21
\begin_inset space ~
\end_inset

mSL_CC_1stId position du premier identificateur
\end_layout

\begin_layout Description
x dernier paramètre
\end_layout

\begin_layout Description
x+1 première variable locale
\end_layout

\begin_layout Description
x+p dernière variable locale
\end_layout

\begin_layout Description
x+p+1 premier byte code.
\end_layout

\begin_layout Description
z dernier byte code
\end_layout

\begin_layout Description
z+1 taille interne du bloc.
 Idem 
\family typewriter
mSL_CC_Size
\family default
.
\end_layout

\begin_layout Description
z+2 valeur 
\family typewriter
mSL_CC_KeyKEnd = (mSL_CC_Chksum ~ 'ccod')
\family default
.
\end_layout

\begin_layout Subsection
Structure d'un 
\emph on
thread
\begin_inset Index idx
status open

\begin_layout Plain Layout
thread
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un thread est représenté par un bloc.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="65" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Adresse
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nom
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Utilisation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_Key
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification d'un thread.
 Valeur : 
\family typewriter
mSL_THR_KeyStrt
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_THR_KeyStrt
\end_layout

\end_inset

 'thrd'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_Size
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Taille du bloc, préfixe de 2 mots et suffixe de 2 mots non compris
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_State_Idt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'stat'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_State
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mot d'état du thread
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_Flags_Idt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'flgs'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_Flags
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Infos diverses
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_SchedEnt_Idt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'sche'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_SchedEnt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
scheduler entry
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_baseAVars_Idt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'gitb'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_baseAVars
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointeur sur la table des variables globale (au module)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_baseLocals_Idt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'litb'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_baseLocals
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointeur sur la tables des variables locales (au thread)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_baseOVars_Idt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'oitb'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_baseOVars
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointeur sur la tables des variables semi-locales (au thread)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_basePVar_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'pitb'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_basePVar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointeur sur la tables des pointeurs (globale)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_basePhStack_Id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'stkp'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_basePhStack
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start of the physical stack
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_baseTOS_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'stka'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_baseTOS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start of the logical stack
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_StackSize_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'stks'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_StackSize
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
size of the stack
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_baseAddStack_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'stkb'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_baseAddStack
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
base of the stack
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_StackCurr_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'stkc'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_StackCurr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
current stack
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_baseHighStack_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'stkh'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_baseHighStack
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
top of the stack
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
26
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_TOS_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'ctos'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
27
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_TOS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
current top of stack
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_baseCode_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'codb'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_baseCode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
start of the code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_CodeSize_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'cods'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_CodeSize
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
size of the code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_CodeCurr_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'codc'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
33
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_CodeCurr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
current code address
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
34
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_CodePtr_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'codp'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
35
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_CodePtr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pointer in code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
36
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_NxtOp_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'nxop'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
37
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_NxtOp
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
next operation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
38
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_rtrnVal_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'rval'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
39
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_rtrnVal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
return value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_errX_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'errx'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
41
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_errX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error code (if any)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
42
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_PCode_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'errp'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
43
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_PCode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error location
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
44
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_ICount_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'icnt'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
45
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_ICount
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Instruction count
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
46
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_MxStk_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'stmx'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_MxStk
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stack max size
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
48
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_Evnt_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'evnt'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
49
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_Evnt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
event information
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_Ident_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'idnt'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
51
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_Ident
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification externe du processus (nom symbolique)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
52 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_IPCA_Idt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification du champ suivant.
 
\family typewriter
'ipca'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
53
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_THR_IPCA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interprocess Communication Area Head Informations
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
54
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HBQ1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
55
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HBQ2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
56
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HBQ3 + 'Tipa'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
57
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HBQ4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
58
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HBQ5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
59
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HBQ6
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
60
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HBQ7- 'Tipa'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
61
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HBQ8
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Structure du 
\emph on
stack
\end_layout

\begin_layout Standard
Le 
\emph on
stack
\emph default
 est une zone mémoire 
\begin_inset Quotes cld
\end_inset

valide
\begin_inset Quotes crd
\end_inset

, de taille au moins égale à 
\family typewriter
mSL_baseStkMin
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_baseStkMin
\end_layout

\end_inset


\family default
 (512).
 Son code est 
\family typewriter
mSL_KODE_stack
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_KODE_stack
\end_layout

\end_inset


\family default
 (
\family typewriter
'stak'
\family default
).
 Il sert à empiler les opérandes des fonctions primitives, reçevoir les
 résultats de celles-ci, et réaliser les appels de fonctions définies par
 l'utilisateur.
\end_layout

\begin_layout Subsubsection
Appel de fonction
\end_layout

\begin_layout Standard
Lors d'un appel de fonction utilisateur 
\begin_inset Quotes cld
\end_inset

classique
\begin_inset Quotes crd
\end_inset

, on se retrouve avec la configuration suivante, dans laquelle TOS est l'adresse
 du sommet du stack.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
TOS[0] est l'adresse mémoire de la fonction à appeler.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
TOS[-1] est le nombre de paramètres passés à la fonction [dit ci-après 
\begin_inset Quotes cld
\end_inset

argc
\begin_inset Quotes crd
\end_inset

].
 
\end_layout

\begin_deeper
\begin_layout Standard
Le TOS est décrémenté, puis on lui ajoute le nombre de variables locales
 à la fonction.
 On obtient alors une liste, à partir de de 
\family typewriter
TOS-argc
\family default
, des valeurs des arguments de la fonction, suivies d'une zone de taille
 égale au nombre de variables locales.
\end_layout

\begin_layout Standard
Le 
\begin_inset Quotes cld
\end_inset

contexte
\begin_inset Quotes crd
\end_inset

 est sauvegardé dans la pile.
 Le stack va recevoir dans l'ordre
\begin_inset space ~
\end_inset

: une copie (sauvegarde) de 
\family typewriter
mSL_baseAddStack
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_baseAddStack
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_baseLocals
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_baseLocals
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_baseTOS
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_baseTOS
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_baseCode
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_baseCode
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_CodePtr
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_CodePtr
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_baseAVars
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_baseAVars
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_baseOVars
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_baseOVars
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_basePVars
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_basePVars
\end_layout

\end_inset


\family default
.
 Sauvegarder les adresses de tables des symboles permet de faire appel à
 des fonctions compilées dans des contextes indépendants du code principal.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
mSL_baseLocals
\family default
 reçoit la valeur de l'adresse qui précède la liste des variables locales,
 et 
\family typewriter
mSL_baseTOS
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_baseTOS
\end_layout

\end_inset


\family default
 l'adresse du premier argument de la fonction.
\end_layout

\end_deeper
\begin_layout Subsubsection
Appel de fonction 
\begin_inset Quotes cld
\end_inset

tail recursive
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Lorsque l'interprète détecte que l'appel de fonction est immédiatement suivi
 d'une instruction 
\begin_inset Quotes cld
\end_inset

return
\begin_inset Quotes crd
\end_inset

, il transforme l'appel en un 
\begin_inset Quotes cld
\end_inset

branchement
\begin_inset Quotes crd
\end_inset

 à la fonction appelée.
 Il sauvegarde le contexte dans une zone temporaire externe, puis les arguments
 de la fonction appelée dans une autre zone, de (très) grande taille.
 Il peut alors recopier ces paramètres dans la zone 
\family typewriter
mSL_baseTOS
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_baseTOS
\end_layout

\end_inset


\family default
 de la fonction appelante, ajouter le nombre de variables locales de la
 fonction, puis restorer à la suite le contexte sauvegardé.
 
\end_layout

\begin_layout Subsubsection
Appel de fonction multiadique
\end_layout

\begin_layout Subsubsection
Initialisation
\end_layout

\begin_layout Standard
A l'initialisation, le stack 
\begin_inset Quotes cld
\end_inset


\family typewriter
stack
\family default

\begin_inset Quotes crd
\end_inset

 de taille interne 
\begin_inset Quotes cld
\end_inset


\family typewriter
size
\family default

\begin_inset Quotes crd
\end_inset

 reçoit les valeurs suivantes:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
stack[0] 
\family typewriter
mSL_K_stop
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_K_stop
\end_layout

\end_inset


\family default
: 
\begin_inset Quotes cld
\end_inset

stop & lock
\begin_inset Quotes crd
\end_inset

 instruction.
 (valeur 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
stack[1] base effective du 
\emph on
stack
\emph default
.
 Reçoit la valeur 
\family typewriter
stack+1
\family default
.
 La valeur 
\family typewriter
stack+1
\family default
 est également placée dans 
\family typewriter
thread[mSL_THR_baseAddStack
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_THR_baseAddStack
\end_layout

\end_inset

]
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
stack[2] reçoit la valeur 
\family typewriter
stack+5
\family default
.
 Cette valeur est également plaçée dans 
\family typewriter
thread[mSL_THR_baseTOS
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_THR_baseTOS
\end_layout

\end_inset

]
\family default
 et 
\family typewriter
thread[mSL_THR_baseLocals
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_THR_baseLocals
\end_layout

\end_inset

]
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
stack[3] reçoit la valeur 
\family typewriter
stack+5
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
stack[4] reçoit la valeur 
\family typewriter
stack
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
stack[5] reçoit la valeur 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
stack[size-65], stack[size-33], stack[size-1], reçoivent la valeur 
\family typewriter
mSL_End_Mark
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_End_Mark
\end_layout

\end_inset


\family default
 (marqueur spécifique de 
\begin_inset Quotes cld
\end_inset

sommet
\begin_inset Quotes crd
\end_inset

 de stack, pour éviter les débordements).
 
\family typewriter
thrd[mSL_THR_baseHighStack
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_THR_baseHighStack
\end_layout

\end_inset

]
\family default
 prend la valeur 
\family typewriter
stack+size-65
\family default
.
\end_layout

\begin_layout Subsection
Structure d'un 
\emph on
IPCA - Inter Process Communication Area
\end_layout

\begin_layout Standard
Un IPCA est une zone mémoire de 16 mots (ou plus), dont la structure est
 la suivante:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="21" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Adresse
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nom
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Utilisation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification d'un IPCA : 
\family typewriter
'ipca'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Taille: 16 ou plus
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_IPCA_next
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointeur mémoire sur le bloc 
\emph on
ipca
\emph default
 suivant.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_IPCA_prev
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointeur mémoire sur le bloc 
\emph on
ipca
\emph default
 précédent.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_IPCA_Date
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date de création de l'événement
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_IPCA_Obsc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date d'obsolescence de l'événement
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_IPCA_Src
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Créateur/Source de l'événement
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_IPCA_Src_Id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification Symbolique du Créateur/Source de l'événement
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_IPCA_Dst
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destinataire de l'événement
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_IPCA_Dst_Id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification Symbolique du Destinataire de l'événement
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_IPCA_EVTy
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type de l'événement : nombre ou `symbole
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_IPCA_Status
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Statut de l'événement
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_IPCA_Flags
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Flags
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_IPCA_Notified
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nature de la notification
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_IPCA_Pcnt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameter count
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mSL_IPCA_P1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
First parameter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Taille 16 ou plus
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tail identification :
\family typewriter
 ~'ipca'
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Les initialisations
\end_layout

\begin_layout Standard
L'initialisation des structures de données du compilateur/interprète mSL
 s'effectue au sein du GM.
 Les opérations suivantes s'exécutent :
\end_layout

\begin_layout Description
mSL_make_strings_array
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_make_strings_array
\end_layout

\end_inset

 création de la structure destinée à 
\begin_inset Quotes cld
\end_inset

recevoir
\begin_inset Quotes crd
\end_inset

 des chaînes de caractères (
\family typewriter
mSL_current_StrPtrs
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_current_StrPtrs
\end_layout

\end_inset


\family default
 et 
\family typewriter
mSL_new_StrPtrs
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_new_StrPtrs
\end_layout

\end_inset


\family default
), et à les allouer lorsque nécessaire.
\end_layout

\begin_layout Description
mSL_provideString
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_provideString
\end_layout

\end_inset

 insertion d'une chaîne de caractères dans la structure 
\family typewriter
mSL_current_StrPtrs
\family default
.
 La fonction est appelée un nombre suffisant de fois, avec des chaînes différent
es, afin de fournir un nombre suffisant d'objets (512 à l'heure actuelle).
\end_layout

\begin_layout Description
mSL_make_memory
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_make_memory
\end_layout

\end_inset

 création de la mémoire allouable par 
\family typewriter
mSL_malloc
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_malloc
\end_layout

\end_inset


\family default
 et libérable par 
\family typewriter
mSL_mfree
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_mfree
\end_layout

\end_inset


\family default
 (tableaux 
\family typewriter
mSL_current_memory
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_current_memory
\end_layout

\end_inset


\family default
 et 
\family typewriter
mSL_new_memory
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_new_memory
\end_layout

\end_inset


\family default
).
\end_layout

\begin_layout Description
mSL_buildGVTab
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_buildGVTab
\end_layout

\end_inset

 création d'une table de symbole principale, qui sera utilisée par le compilateu
r (tableaux 
\family typewriter
mSL_GCTab
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_GCTab
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_GCCod
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_GCCod
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_GCTyp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_GCTyp
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_GCVal
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_GCVal
\end_layout

\end_inset


\family default
).
\end_layout

\begin_layout Description
mSL_buildLCTab
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_buildLCTab
\end_layout

\end_inset

 création d'une table de symbole spécifique pour les variables semi-locales
 (tableaux mSL_LCTab
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_LCTab
\end_layout

\end_inset

, 
\family typewriter
mSL_LCCod
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_LCCod
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_LCTyp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_LCTyp
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_LCVal
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_LCVal
\end_layout

\end_inset


\family default
).
\end_layout

\begin_layout Description
mSL_make_compiler
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_make_compiler
\end_layout

\end_inset

 création des structures même du compilateur, qui va utiliser les objets
 créés par les opérations ci-dessus.
\end_layout

\begin_layout Description
mSL_make_block
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_make_block
\end_layout

\end_inset

 est utilisé pour créer les tables de symboles utilisées par l'interprète
\begin_inset space ~
\end_inset

: 
\family typewriter
mSL_baseAVars
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_baseAVars
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_baseOVars
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_baseOVars
\end_layout

\end_inset


\family default
, 
\family typewriter
mSL_basePVars
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_basePVars
\end_layout

\end_inset


\family default
.
\end_layout

\begin_layout Description
mSL_make_evaluator
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_make_evaluator
\end_layout

\end_inset

 création des structures de l'interprète, qui va utiliser les objets créés
 ci-dessus.
\end_layout

\begin_layout Description
mSL_define_extensions
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_define_extensions
\end_layout

\end_inset

 permet d'introduire dans les données du compilateurs les extensions (fonctions)
 propres au Game Master
\end_layout

\begin_layout Description
mSL_define_constant
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_define_constant
\end_layout

\end_inset

 ainsi que 
\series bold
mSL_define_global
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series bold
mSL_define_global
\end_layout

\end_inset


\series default
 et 
\series bold
mSL_define_pointer
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series bold
mSL_define_pointer
\end_layout

\end_inset


\series default
 permettent d'introduire de nouveaux objets (constantes, variables, pointeurs),
 propres au Game Master
\end_layout

\begin_layout Description
mSL_make_thread
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_make_thread
\end_layout

\end_inset

 permet de créer un 
\emph on
thread
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
thread
\end_layout

\end_inset


\emph default
, qui sera ultérieurement 
\begin_inset Quotes cld
\end_inset

garni
\begin_inset Quotes crd
\end_inset

 avec les valeur appropriées lors d'un lancement d'exécution.
 Cette fonction est appelées plusieurs fois (32) pour créer un certain nombre
 de threads prédéfinis, accélérant le lancement de l'exécution d'un script
 mSL.
 Chaque thread contient une table de variables globales, de variables semi-local
es et de pointeurs, ainsi qu'un stack
\begin_inset Index idx
status open

\begin_layout Plain Layout
stack
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Schéma typique
\end_layout

\begin_layout Standard
Prenons le cas d'un fichier contenant un programme source mSL, que l'on
 se propose d'exécuter.
 Le 
\emph on
Game Master
\emph default
 va affecter à la variable 
\family typewriter
uuuMslFn
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
uuuMslFn
\end_layout

\end_inset


\family default
 une valeur non nulle (de fait, la chaîne de caractères contenant le nom
 du fichier à charger).
 Cette chaîne va être transmise, dans la section 
\begin_inset Quotes cld
\end_inset


\family typewriter
@gfx
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
gfx
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 (choisie car elle permet d'utiliser des périodes de CPU relativement importante
s, de basse priorité, sans interrompre les threads audio), à la fonction
 
\family typewriter
mSL_load_file_inGFX
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_load_file_inGFX
\end_layout

\end_inset


\family default
, qui va effectuer la lecture du fichier, compiler celui-ci, et affecter
 un thread libre au code généré.
 Le numéro du thread créé est rendu dans la variable 
\family typewriter
uuuMslFent
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
uuuMslFent
\end_layout

\end_inset


\family default
.
 La variable 
\family typewriter
uuuMslFn
\family default
 est remise à zéro pour signaler l'exécution de l'opération.
\end_layout

\begin_layout Standard
Dans la section 
\begin_inset Quotes cld
\end_inset


\family typewriter
@block
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
block
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, le thread ainsi créé est inséré dans la liste des processus éligibles
 (avec le code 
\family typewriter
KRun_mSL_Thread
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
KRun_mSL_Thread
\end_layout

\end_inset


\family default
 = 10, indiquant un thread à exécuter).
\end_layout

\begin_layout Standard
Lorsqu'un thread a été rendu actif, il est périodiquement exécuté par un
 code situé dans la section 
\begin_inset Quotes cld
\end_inset


\family typewriter
@block
\family default

\begin_inset Quotes crd
\end_inset

.
 Ceci s'effectue par un appel de 
\family typewriter
mSL_evaluate
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_evaluate
\end_layout

\end_inset


\family default
, après avoir affecté à la variable 
\family typewriter
mSL_rpeat
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_rpeat
\end_layout

\end_inset


\family default
 un nombre maximal de 
\begin_inset Quotes cld
\end_inset

bytecodes
\begin_inset Quotes crd
\end_inset

 à exécuter.
 Ce nombre dépend du temps disponible, celui-ci étant évalué comme une petite
 portion du temps alloué à un block, qui dépend lui-même de la taille des
 blocs de samples fournis au plug-in.
\end_layout

\begin_layout Standard
Préalablement à cette exécution, certaines variables globales utilisées
 par l'évaluateur sont peuplées avec des valeurs extraites de la structure
 du 
\emph on
thread
\emph default
, par la fonction 
\family typewriter
mSL_load_thread
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_load_thread
\end_layout

\end_inset


\family default
.
 Après l'exécution, les variables sont rappatriées au sein du thread par
 la fonction 
\family typewriter
mSL_save_thread
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_save_thread
\end_layout

\end_inset


\family default
.
\end_layout

\begin_layout Standard
Le compte rendu de l'exécution est testé à ce moment.
 L'exécution peut s'être arrêtée parce que le nombre de 
\begin_inset Quotes cld
\end_inset

bytecodes
\begin_inset Quotes crd
\end_inset

 exécutables alloués à la fonction a été atteint, ou parce que celle-ci
 a exécuté une commande 
\family typewriter
yield()
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
yield()
\end_layout

\end_inset


\family default
, pour rendre la main.
 Dans ces deux cas, le thread est réintroduit en queue de liste des processus
 éligibles, et son exécution sera poursuivie ultérieurement.
 L'exécution peut également s'être interrompue parce que le processus s'est
 mis en attente pour une certaine durée de temps, au moyen de la fonction
 
\family typewriter
wait()
\family default
.
 Le tread est alors introduit dans la file d'attente du dispatcher, qui
 le rendra à nouveau éligible lorsque le laps de temps demandé se sera écoulé.
 L'exécution d'une instruction 
\family typewriter
exit()
\begin_inset Index idx
status open

\begin_layout Plain Layout
exit()
\end_layout

\end_inset


\family default
 termine le thread.
 Enfin, le thread peut s'être interrompu parce qu'une erreur a été détectée.
 
\end_layout

\begin_layout Subsection
Variables globales utilisées dans un thread
\end_layout

\begin_layout Description
mSL_current_thread
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_current_thread
\end_layout

\end_inset

 Un pointeur mémoire sur le thread courant
\end_layout

\begin_layout Description
mSL_baseAVars
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_baseAVars
\end_layout

\end_inset

 La table des variables globales
\end_layout

\begin_layout Description
mSL_baseLocals
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_baseLocals
\end_layout

\end_inset

 La table des variables locales : un pointeur dans le stack.
\end_layout

\begin_layout Description
mSL_baseOVars
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_baseOVars
\end_layout

\end_inset

 La table des variables semi-locales (own).
\end_layout

\begin_layout Description
mSL_basePVars
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_basePVars
\end_layout

\end_inset

 La table des pointeurs.
\end_layout

\begin_layout Description
mSL_baseCode
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_baseCode
\end_layout

\end_inset

 La base du code.
 Adresse mémoire du premier byte code à exécuter, 
\end_layout

\begin_layout Description
mSL_CodePtr
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_CodePtr
\end_layout

\end_inset

 pointeur relatif dans mSL_baseCode sur le prochain byte code à exécuter
\end_layout

\begin_layout Description
mSL_NxtOp
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_NxtOp
\end_layout

\end_inset

 Instruction courante/ prochaine instruction
\end_layout

\begin_layout Description
mSL_PCode
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_PCode
\end_layout

\end_inset

 pointeur relatif sur le code en cours d'exécution
\end_layout

\begin_layout Description
mSL_ICount
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_ICount
\end_layout

\end_inset

 nombre d'instructions exécutées par le thread
\end_layout

\begin_layout Description
mSL_TOS
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_TOS
\end_layout

\end_inset

 pointeur (absolu) sur le sommet de la pile
\end_layout

\begin_layout Description
mSL_baseAddStack
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_baseAddStack
\end_layout

\end_inset

 adresse de base de la pile
\end_layout

\begin_layout Description
mSL_baseTOS
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_baseTOS
\end_layout

\end_inset

 base locale de la pile 
\end_layout

\begin_layout Description
mSL_baseHighStack
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_baseHighStack
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
mSL_CodeStop
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_CodeStop
\end_layout

\end_inset

 raison de l'arrêt de l'exécution
\end_layout

\begin_layout Description
mSL_rpeat
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_rpeat
\end_layout

\end_inset

 nombre d'instructions allouées pour cette phase de l'exécution
\end_layout

\begin_layout Description
mSL_WaitDuration
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_WaitDuration
\end_layout

\end_inset

 durée d'attente demandée par un appel de wait(x).
\end_layout

\begin_layout Description
mSL_ExitValue
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_ExitValue
\end_layout

\end_inset

 valeur transmise par la fonction exit(x)
\end_layout

\begin_layout Chapter
La gestion de la mémoire
\end_layout

\begin_layout Standard
La gestion de la mémoire est réalisée sous deux formes distinctes: une gestion
 de mémoire statique, qui permet l'allocation (définitive, et sans recyclage)
 de mémoire, utilisée pour les structures permanentes, et une gestion de
 mémoire dynamique, qui va être utilisée pour satisfaire les besoins temporaires
 du logiciel.
\end_layout

\begin_layout Section
Présentation
\end_layout

\begin_layout Standard
Le compilateur et l'interprète mSL font appel à une gestion de mémoire dynamique
 (
\emph on
GDM
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
GDM
\end_layout

\end_inset


\emph default
 dans la suite du texte).
 Cette gestion repose sur l'usage de blocs, qui sont des portions de la
 mémoire centrale dont la structure est la suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Quote
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="8">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Taille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Taille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
~Type
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Les cases représentent, de gauche à droite, les addresses consécutives en
 mémoire, et les mots 
\family typewriter
C0
\family default
, 
\family typewriter
C1
\family default
, 
\family typewriter
C2
\family default
, etc.
 symbolisent les valeurs contenues dans le bloc.
 L'adresse 
\begin_inset Quotes cld
\end_inset

officielle
\begin_inset Quotes crd
\end_inset

 du bloc, telle qu'elle est manipulée par les programmes, est celle du premier
 élément, 
\family typewriter
C0
\family default
.
 Dans les programmes 
\emph on
mSL
\emph default
 (ou dans le code JSFX du plug-in), on accède donc à la première valeur,
 
\family typewriter
C0
\family default
, du bloc 
\family typewriter
Bl
\family default
 par l'expression 
\family typewriter
Bl[0]
\family default
.
 Le système utilise 4 mots supplémentaires pour gérer le bloc
\begin_inset space ~
\end_inset

: 
\family typewriter
Bl[-2]
\family default
 qui décrit le 
\emph on
type
\emph default
 du bloc, 
\family typewriter
Bl[-1]
\family default
 qui décrit sa 
\emph on
taille utile
\emph default
, 
\family typewriter
Bl[Bl[-1]]
\family default
, qui est une copie de la taille utile, et 
\family typewriter
Bl[Bl[-1]+1]
\family default
, notée 
\begin_inset Quotes cld
\end_inset


\emph on
~Type
\emph default

\begin_inset Quotes crd
\end_inset

, qui est une 
\begin_inset Quotes cld
\end_inset

validation
\begin_inset Quotes crd
\end_inset

 du type du bloc, et dont la valeur est 
\family typewriter
Bl[-2]~0x7FFFFFFF
\family default
.
\end_layout

\begin_layout Standard
Certains blocs peuvent être statiques, et ont été créés hors de la zone
 mémoire gérée par le gestionnaire de mémoire.
 D'autres blocs ont été créés dynamiquement, soit par le 
\emph on
Game Master
\emph default
, soit par des programmes 
\emph on
mSL
\emph default
 ayant fait appel pour celà à la fonction 
\family typewriter
malloc()
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
malloc()
\end_layout

\end_inset


\family default
.
\end_layout

\begin_layout Standard
La mémoire gérée par le gestionnaire de mémoire est elle-même un bloc mémoire
 unique, dont la structure est la suivante (représentée sur deux lignes
 consécutives)
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Quote
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="12">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
'memr'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Taille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
'frhd'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
head
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
'frtl'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
tail
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
'fmwd'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
low
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
'lmwd'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
high
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
'blid'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
id
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

...
\end_layout

\begin_layout Quote
...
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="18">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
STOP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
STOP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Taille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
~'memr'
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Dans cette structure, les deux premières et deux dernières valeurs sont
 conformes à celle d'un bloc classique, dont le type est 
\family typewriter
'memr'
\family default
 (cette valeur est une constante multicaractères, comme les autres 
\begin_inset Quotes cld
\end_inset

identificateurs
\begin_inset Quotes crd
\end_inset

 utilisés dans cette structure.
 
\emph on
head
\emph default
 est le pointeur vers le premier bloc de la liste libre, 
\emph on
tail
\emph default
 vers le dernier.
 
\emph on
low
\emph default
 et 
\emph on
high
\emph default
 sont les adresses mémoires entre lesquelles sont comprises toutes celles
 des blocs alloués par la gestion de la mémoire.
 
\emph on
id
\emph default
 est une identification associée à la représentation de la mémoire.
 STOP est un marqueur spécifique (de valeur 
\family typewriter
0x20200901
\family default
) de début et de fin de la zone allouable, utilisé par les algorithmes de
 la GDM.
 La zone effectivement manipulable par la GDM, et disponible pour les programmes
, est donc comprise entre ces deux bornes.
\end_layout

\begin_layout Standard
Un bloc libre a la structure suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Quote
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="8">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
FREE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Taille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
prev
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
next
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Taille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
~FREE
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Il a donc une structure classique, avec un type spécifique (
\family typewriter
FREE
\family default
, de valeur 
\family typewriter
0x20210902
\family default
).
 Les deux premiers mots du contenu du bloc sont utilisés pour le chaînage
 du bloc dans la liste libre, 
\emph on
prev
\emph default
 pointant sur le bloc précédent, 
\emph on
next
\emph default
 sur le bloc suivant.
 Un bloc libre a donc une taille minimale égale à deux.
 Cependant, il est possible de demander à la GDM des blocs plus petits,
 de taille 0 ou 1.
 Un bloc de taille 0, par exemple, sera représenté par
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Quote
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
~Type
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Lorsqu'un tel bloc vient à être libéré, soit explicitement (par un appel
 de 
\family typewriter
mfree()
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mfree()
\end_layout

\end_inset


\family default
), soit implicitement (terminaison du programme principal), le bloc est,
 si possible fusionné avec un bloc libre immédiatement précédent ou suivant
 en mémoire.
 Si ce n'est pas possible, l'ensemble du bloc est rempli avec une valeur
 spécifique (
\family typewriter
mSL_Filler
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_Filler
\end_layout

\end_inset


\family default
, de valeur 
\family typewriter
0x10084900000
\family default
), ce qui donne
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Quote
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
mSL_Filler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
mSL_Filler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
mSL_Filler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
mSL_Filler
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Il n'est pas immédiatement réutilisable, mais sera ultérieurement fusionné
 avec le bloc précédent ou le bloc suivant lorsque l'un de ceux-ci sera
 libéré.
\end_layout

\begin_layout Section
Opérations
\end_layout

\begin_layout Subsection
Accès JSFX
\end_layout

\begin_layout Standard
Les fonctions disponibles sont les suivantes.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
mSL_make_block
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
mSL_make_block()
\end_layout

\end_inset

(addr,
\begin_inset space ~
\end_inset

size,
\begin_inset space ~
\end_inset

type)
\family default
 Construction d'un bloc valide statique, à partir des paramètres fournis
\begin_inset space ~
\end_inset

: addresse mémoire, 
\family typewriter
addr
\family default
, taille, 
\family typewriter
size
\family default
, et 
\family typewriter
type
\family default
, qui doit être une constante de 4 caractères.
 Lorsque cette constante n'est pas adéquate, elle est remplacée par 
\family typewriter
'data'
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
'data'
\end_layout

\end_inset


\family default
.
\end_layout

\begin_layout Subsection
Accès mSL
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
block=malloc(
\begin_inset Index idx
status open

\begin_layout Plain Layout
malloc()
\end_layout

\end_inset

size[,type])
\family default
 allocation d'un bloc mémoire de taille donnée par 
\begin_inset Quotes cld
\end_inset

size
\begin_inset Quotes crd
\end_inset

, de type 
\begin_inset Quotes cld
\end_inset

type
\begin_inset Quotes crd
\end_inset

 (
\family typewriter
'data'
\family default
 par défaut).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
mfree(
\begin_inset Index idx
status open

\begin_layout Plain Layout
mfree()
\end_layout

\end_inset

block)
\family default
 libération d'un bloc mémoire alloué par 
\begin_inset Quotes cld
\end_inset

malloc
\begin_inset Quotes crd
\end_inset

.
 La fonction est ineffective si le paramètre n'est pas reconnu comme un
 bloc de mémoire.
\end_layout

\begin_layout Chapter
La gestion des chaînes de caractères
\end_layout

\begin_layout Section
Le gestionnaire 
\end_layout

\begin_layout Standard
Il est pour l'instant dans le fichier 
\begin_inset Quotes xld
\end_inset

mSL_StringsA.jsfx-inc
\begin_inset Quotes xrd
\end_inset

.
 Il y a deux modes d'allocation, sous la forme d'allocation 
\begin_inset Quotes xld
\end_inset

permanente
\begin_inset Quotes xrd
\end_inset

 d'une chaîne, qui peut être ultérieurement libérée, et sous la forme d'allocati
on 
\begin_inset Quotes xld
\end_inset

temporaire
\begin_inset Quotes xrd
\end_inset

, la chaîne fournie étant réutilisée au bout d'un moment.
 Dans tous les cas, les chaînes en uestion sont, du point de vue du JSFX,
 des chaînes permanentes, modifiables, avec une identification interne débutant
 à 90000.
\end_layout

\begin_layout Subsection
Allocation temporaire
\end_layout

\begin_layout Standard
Un ensemble contigü de chaînes fixes (le pool) est fourni à la fonction
 
\begin_inset Quotes xld
\end_inset

mSL_Str_TInit
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_Str_TInit
\end_layout

\end_inset

(first, last)
\begin_inset Quotes xrd
\end_inset

, puis une 
\begin_inset Quotes xld
\end_inset

nouvelle
\begin_inset Quotes xrd
\end_inset

 chaine est obtenue par 
\begin_inset Quotes xld
\end_inset

str=mSL_Str_Tmp
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_Str_Tmp
\end_layout

\end_inset

()
\begin_inset Quotes xrd
\end_inset

.
 Cette chaine est alloué par 
\begin_inset Quotes xld
\end_inset

round robin
\begin_inset Quotes xrd
\end_inset

, et sa réutilisation ultérieure est déterminée par la fréquence des demandes
 et la taille du pool alloué.
\end_layout

\begin_layout Standard
Dans le GM, l'initialisation s'effectue par 
\begin_inset Quotes xld
\end_inset

mSL_Str_TInit(#wstrFirst, #wstrLast);
\begin_inset Quotes xrd
\end_inset

.
 Le pool utilisé est donc le pool 
\begin_inset Quotes xld
\end_inset

w
\begin_inset Quotes xrd
\end_inset

, défini dans 
\begin_inset Quotes xld
\end_inset

mSL_string_list_2000W.jsfx-inc
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_string_list_2000W.jsfx-inc
\end_layout

\end_inset


\begin_inset Quotes xrd
\end_inset

, qui contient 2000 chaînes.
\end_layout

\begin_layout Standard
La variable 
\begin_inset Quotes xld
\end_inset

mSL_Str_TempU
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_Str_TempU
\end_layout

\end_inset


\begin_inset Quotes xrd
\end_inset

 contient le nombre de demandes effectuées, et donne donc une idée de la
 fréquence de réallocation d'une même chaîne.
\end_layout

\begin_layout Subsection
Allocation permanente
\end_layout

\begin_layout Standard
Elle est réalisée au moyen de trois fonctions: 
\begin_inset Quotes xld
\end_inset

mSL_Str_Init
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_Str_Init
\end_layout

\end_inset

(first, last)
\begin_inset Quotes xrd
\end_inset

 qui définit le pool initial de chaînes permanentes, toujours à partir d'un
 ensemble de chaînes déclarées séquentiellement
\begin_inset space ~
\end_inset

; 
\begin_inset Quotes xld
\end_inset

mSL_Str_Alloc
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_Str_Alloc
\end_layout

\end_inset

(val)
\begin_inset Quotes xrd
\end_inset

 qui alloue une nouvelle chaîne.
 
\begin_inset Quotes xld
\end_inset

val
\begin_inset Quotes xrd
\end_inset

 est soit 
\begin_inset Quotes xld
\end_inset

0
\begin_inset Quotes xrd
\end_inset

, et la nouvelle chaine est alors vide, soit une chaîne de caractères, et
 la nouvelle chaîne contient alors une copie de cette chaîne
\begin_inset space ~
\end_inset

; 
\begin_inset Quotes xld
\end_inset

mSL_Str_Free
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_Str_Free
\end_layout

\end_inset

(str)
\begin_inset Quotes xrd
\end_inset

 qui libère une chaîne allouée par 
\begin_inset Quotes xld
\end_inset

mSL_Str_Alloc
\begin_inset Quotes xrd
\end_inset

.
 La chaîne libérée est remise à 
\begin_inset Quotes xld
\end_inset


\family typewriter
""
\family default

\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Standard
Les fonctions d'allocation et de libération vérifient la validité de leurs
 paramètres et de leurs résultats.
 Il est possible de 
\begin_inset Quotes xld
\end_inset

libérer
\begin_inset Quotes xrd
\end_inset

 plusieurs fois la même chaîne, seul le premier appel étant significatif.
 Notons encore que les fonctions d'allocation et de désallocation opèrent
 en 
\begin_inset Formula $0(1)$
\end_inset

, et sont donc relativement rapides.
\end_layout

\begin_layout Standard
Dans le GM, l'initialisation s'effectue par 
\begin_inset Quotes xld
\end_inset

mSL_Str_Init(#strFirst, #strLast);
\begin_inset Quotes xrd
\end_inset

.
 Le pool utilisé est donc le pool défini dans 
\begin_inset Quotes xld
\end_inset

mSL_string_list_10000.jsfx-inc
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_string_list_10000.jsfx-inc
\end_layout

\end_inset


\begin_inset Quotes xrd
\end_inset

, qui contient 10000 chaînes.
\end_layout

\begin_layout Standard
Notons que lorsque le pool est vide (les 10000 chaînes ont été allouées),
 la fonction 
\begin_inset Quotes xld
\end_inset

mSL_Str_Alloc(val)
\begin_inset Quotes xrd
\end_inset

 s'addresse à 
\begin_inset Quotes xld
\end_inset

mSL_Str_Tmp()
\begin_inset Quotes xrd
\end_inset

 pour fournir une chaîne 
\emph on
temporaire
\emph default
.
 Il est possible de vérifier que le résultat de 
\begin_inset Quotes xld
\end_inset

mSL_Str_Alloc
\begin_inset Quotes xrd
\end_inset

 est bien une chaîne 
\emph on
permanente
\emph default
, en utilisant 
\begin_inset Quotes xld
\end_inset

mSL_isStrin
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_isString
\end_layout

\end_inset

(str)
\begin_inset Quotes xrd
\end_inset

, qui répond 
\begin_inset Quotes xld
\end_inset

1
\begin_inset Quotes xrd
\end_inset

 dans ce cas, 
\begin_inset Quotes xld
\end_inset

0
\begin_inset Quotes xrd
\end_inset

 sinon.
\end_layout

\begin_layout Standard
La variable 
\begin_inset Quotes xld
\end_inset

mSL_Str_Uptr
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_Str_Uptr
\end_layout

\end_inset


\begin_inset Quotes xrd
\end_inset

 contient le nombre de chaînes permanenets encore disponibles.
\end_layout

\begin_layout Section
Utilisation des chaînes
\end_layout

\begin_layout Standard
Une partie des chaînes permanentes est utilisée:
\end_layout

\begin_layout Itemize
A l'initialisation du GM, pour représenter les chaînes qui vont être lues/écrite
s dans les présents (128), et pour représenter la liste des fichiers de
 type 
\begin_inset Quotes xld
\end_inset

mSL
\begin_inset Quotes xrd
\end_inset

, préfabriquée avant le lancement du GM, et conservée dans le fichier 
\begin_inset Quotes xld
\end_inset

GM_mSL_scripts.txt
\begin_inset Index idx
status open

\begin_layout Plain Layout
GM_mSL_scripts.txt
\end_layout

\end_inset


\begin_inset Quotes xrd
\end_inset

 (typiquement, une centaine de lignes).
\end_layout

\begin_layout Itemize
Dans les 
\emph on
menus
\emph default
.
 Une chaîne est utilisée pour chaque item d'un menu, plus quatre autres
 par menu.
 Là aussi, cette utilisation est fixe et non dynamique.
 Il y a cependant près d'un millier de chaînes utilisées.
\end_layout

\begin_layout Itemize
Par le compilateur, qui utilise dans certains cas des chaînes temporaires,
 mais la plupart du temps des chaînes permanentes pour représenter les chaînes
 utilisées dans les programmes mSL.
 
\end_layout

\begin_layout Section
Implantation des chaînes
\end_layout

\begin_layout Chapter
Interface avec le Game Master
\end_layout

\begin_layout Section
Variables globales relative à l'exécution
\end_layout

\begin_layout Standard
Lorsque le GM lance l'exécution d'une séquence d'instruction venant du thread
 actif, on dispose des éléments suivants
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
mSL_dispatch_entry adresse mémoire de l'entrée du dispatcher support du
 thread actif
\end_layout

\begin_layout Description
mSL_active_Thread adresse du thread en cours d'exécution
\end_layout

\begin_layout Description
mSL_baseAVars adresse de la table des variables globales
\end_layout

\begin_layout Description
mSL_baseOVars adresse de la table des variables locales
\end_layout

\begin_layout Description
mSL_basePVars adresse de la table des pointeurs
\end_layout

\begin_layout Standard
Les fonctions JS appelées par l'exécutant le sont le plus souvent sous la
 forme 
\family typewriter
fct(argc, argv)
\family default
, 
\end_layout

\begin_layout Section
Fonctions d'interface
\end_layout

\begin_layout Standard
mSL propose plusieurs opérations permettant à des programmes mSL d'agir
 sur le Game Master.
 Ajouter une nouvelle procédure, est, au sein du code, relativement simple.
 Prenons l'exemple de l'accès aux procédures internes du Game Master, la
 fonction 
\begin_inset Quotes cld
\end_inset

Simple_Action
\begin_inset Quotes crd
\end_inset

.
 Celle-ci prend comme paramètres un code (valeur numérique) et un tableau
 de nombres.
 Elle a en fait deux modes de fonctionnements
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Itemize
si le code n'est pas nul, il représente une opération à exécuter, et le
 tableau de nombre constitue les paramètres (en nombre fixe ou variable,
 dans ce dernier cas la liste se termine par un 
\begin_inset Quotes cld
\end_inset

-1
\begin_inset Quotes crd
\end_inset

) de cette opération.
\end_layout

\begin_layout Itemize
si le code est null, le tableau est constitué d'une liste d'operations à
 exécuter, débutant par la taille totale de la liste (-1), la liste étant
 elle-même constituée d'une séquence de couples {opération, paramètres}.
\end_layout

\begin_layout Standard
L'accès à cette fonction est déclarée (dans 
\begin_inset Quotes cld
\end_inset


\family typewriter
mSL_Clib.jsfx-inc
\family default

\begin_inset Quotes crd
\end_inset

) comme un accès avec un nombre variable de paramètres, au sein de la fonction
 
\begin_inset Quotes cld
\end_inset


\family typewriter
mSL_define_primitives()
\family default

\begin_inset Quotes crd
\end_inset

 du compilateur
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
mSL_defGlobal("sysact", 0, mSL_tyPrimF, mSL_tyPrimFun | (0xff << 12) | mSL_K_pGM
Action);
\end_layout

\begin_layout Standard
Ici on a choisi un numéro de byte code pour cette fonction, déclaré (vers
 la ligne 300) par :
\end_layout

\begin_layout LyX-Code
mSL_K_pGMAction = 117;
\end_layout

\begin_layout Standard
et on définit le reste des infos nécessaires : 
\end_layout

\begin_layout LyX-Code
dsttab[mSL_K_pGMAction] = "sysact"; // dans mSL_define_opnames()
\end_layout

\begin_layout Standard
et
\end_layout

\begin_layout LyX-Code
dsttab[mSL_K_pGMAction] = -1; // no limit on arg.
 counr, dans mSL_define_oparities()
\end_layout

\begin_layout Standard
Il reste à implémenter (dans 
\begin_inset Quotes cld
\end_inset


\family typewriter
mSL_Xlib.jsfx-inc
\family default

\begin_inset Quotes crd
\end_inset

, code qui est en fait maintenant directement intégré au Game Master) dans
 la procédure 
\begin_inset Quotes cld
\end_inset


\family typewriter
mSL_evaluate()
\family default

\begin_inset Quotes crd
\end_inset

 le code 
\begin_inset Quotes cld
\end_inset

117
\begin_inset Quotes crd
\end_inset

 que nous venons de définir.
\end_layout

\begin_layout Chapter
Scheduler
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Le but du scheduler est de réguler l'activité des différentes tâches (ou
 
\begin_inset Quotes xld
\end_inset

process
\begin_inset Quotes xrd
\end_inset

) au sein du GameMaster.
 Il permet la gestion de files d'attentes d'événements, et va 
\begin_inset Quotes cld
\end_inset

sérialiser
\begin_inset Quotes crd
\end_inset

 ceux-ci lors de l'exécution.
 Il y a donc une seule tâche active à la fois, et le scheduler a pour rôle
 de donner la main aux tâches prêtes à être exécutées.
\end_layout

\begin_layout Subsection
Gestion du temps
\end_layout

\begin_layout Standard
Quelle durée le GM peut-il consacrer aux tâches gérées par le Scheduler
 ? Elle résulte du calcul suivant (48kH, blocs de 1024):
\end_layout

\begin_layout Itemize
pTBlockStart = time_precise() + timeD; // date précise, réelle, compensée,
 de début du bloc
\end_layout

\begin_layout Itemize
Curr_Block_Max_Delay = (samplesblock / srate); // taille du bloc (ex: 1024)
 / rate (ex: 48000) : 21ms max par bloc.
\end_layout

\begin_layout Itemize
BlDurationProp = 0.16; // 16% choix (arbitraire) du pourcentage de cette
 durée réellement disponible pour le 
\begin_inset Quotes xld
\end_inset

@block
\begin_inset Quotes xrd
\end_inset

 GM
\end_layout

\begin_layout Itemize
Curr_Block_Alloc = BlDurationProp * Curr_Block_Max_Delay; // soit 3.41 ms
\end_layout

\begin_layout Itemize
ptBlockLimit = pTBlockStart + Curr_Block_Alloc; // date au-delà de laquelle
 
\begin_inset Quotes xld
\end_inset

@block
\begin_inset Quotes xrd
\end_inset

 doit rendre la main à REAPER
\end_layout

\begin_layout Itemize
TLeftMin = Curr_Block_Alloc * 0.35; // soit 1.195 ms durée maximale (évaluée)
 nécessaire pour exécuter la tâche suivante du scheduler.
\end_layout

\begin_layout Itemize
TLeft = ptBlockLimit - (time_precise() + timeD); // durée relative écoulée
 depuis le début du 
\begin_inset Quotes xld
\end_inset

@block
\begin_inset Quotes xrd
\end_inset


\end_layout

\begin_layout Itemize
Tant que (TLeft > TLeftMin), le Scheduler exécute la tâche suivante.
\end_layout

\begin_layout Standard
On notera que 
\begin_inset Quotes xld
\end_inset

une tâche
\begin_inset Quotes xrd
\end_inset

 est ici une tâche système élémentaire - en général extrêmement courte -
 ou encore l'exécution d'un petit nombre d'instructions (entre 4096 et 20000)
 d'un script mSL.
\end_layout

\begin_layout Subsection
Structure d'un bloc
\end_layout

\begin_layout Standard
Chaque tâche est représentée par un bloc de contrôle (TCB
\begin_inset Index idx
status open

\begin_layout Plain Layout
TCB
\end_layout

\end_inset

, Task Control Block
\begin_inset Index idx
status open

\begin_layout Plain Layout
Task Control Block
\end_layout

\end_inset

), de taille 24 mots.
 Le nombre de ces blocs est de 
\begin_inset Quotes xld
\end_inset

SchedNEmax=4096
\begin_inset Quotes xrd
\end_inset

, correspondant donc au nombre maximal de tâches pouvant être actives.
 
\end_layout

\begin_layout Standard
Chaque bloc est ainsi organisé:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="18" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nom
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rôle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedNxtEnt
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedNxtEnt
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointeur vers l'entrée suivante, une adresse en mémoire centrale.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedPrvEnt
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedPrvEnt
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointeur vers l'entrée précédente, une adresse en mémoire centrale.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedThrId
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedThrId
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes xld
\end_inset

Identification
\begin_inset Quotes xrd
\end_inset

 symbolique du thread : un symbole, pouvant être utilisé à la place de SchedPid
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedThList
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedThList
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Liste à laquelle est, en ce moment précis, rattaché le thread.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedEntryN
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedEntryN
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Numéro de l'entrée (de 0 à SchedNEmax-1)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedPid
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedPid
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Process Id.
 Numéro*SchedNEmax + SchedEntryN
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedCode
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedCode
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code d'action
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedStatus
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedStatus
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Contient les flags suivants: 1 si le process est un thread mSL; 8 s'il est
 actif.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedThrdPt
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedThrdPt
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointeur vers le thread block associé au thread mSL.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedDly
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedDly
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Délai d'attente jusqu'à la reprise du thread.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedPar1
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedPar1
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Paramètre 1 de l'action
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedPar2
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedPar2
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Paramètre 2 de l'action
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedPar3
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedPar3
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Paramètre 3 de l'action
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedPar4
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedPar4
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Paramètre 4 de l'action
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedVal1
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedVal1
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Valeur interne 1 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedVal2
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedVal2
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Valeur interne 2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedHQB
\end_layout

\end_inset

SchedHQB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A 8 words used as an HQB for the private messages received by this thread.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Structure d'une liste
\end_layout

\begin_layout Standard
Les listes sont organisées par chaînage, depuis une Tête/Queue de liste
 (HQB
\begin_inset Index idx
status open

\begin_layout Plain Layout
HQB
\end_layout

\end_inset

, Head-Queue Block
\begin_inset Index idx
status open

\begin_layout Plain Layout
Head-Queue Block
\end_layout

\end_inset

 de taille SchedLstSiz
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedLstSiz
\end_layout

\end_inset

=8) dont la structure est détaillée ci-dessous.
 Soit 
\begin_inset Quotes xld
\end_inset

L
\begin_inset Quotes xrd
\end_inset

 l'adresse mémoire de ce bloc:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Adresse
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nom
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rôle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
L + 0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedNxtEnt
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedNxtEnt
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointeur vers l'entrée suivante, soit un TCB, soit la queue de liste, ici
 
\begin_inset Quotes xld
\end_inset

L+4
\begin_inset Quotes xrd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
L + 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedPrvEnt
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedPrvEnt
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointeur vers l'entrée précédente, toujours 
\begin_inset Quotes xld
\end_inset

0
\begin_inset Quotes xrd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
L + 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Identification de la liste, par exemple 
\family typewriter
'Free'
\family default
, 
\family typewriter
'Actv'
\family default
, etc.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
L + 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedOtherEnd
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedOtherEnd
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointer vers 
\begin_inset Quotes xld
\end_inset

l'autre extrémité
\begin_inset Quotes xrd
\end_inset

 de la liste, ici la queue de liste.
 Valeur: 
\begin_inset Quotes xld
\end_inset

L+4
\begin_inset Quotes xrd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
L + 4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedNxtEnt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointeur vers l'entrée suivante, toujours 
\begin_inset Quotes xld
\end_inset

0
\begin_inset Quotes xrd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
L + 5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedPrvEnt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointeur vers l'entrée précédente, soit un TCB, soit la tête de liste, ici
 
\begin_inset Quotes xld
\end_inset

L
\begin_inset Quotes xrd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
L + 6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Opposé de l'Identification de la liste, par exemple 
\family typewriter
-'Free'
\family default
, 
\family typewriter
-'Actv'
\family default
, etc.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
L + 7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SchedOtherEnd
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointeur vers 
\begin_inset Quotes xld
\end_inset

l'autre extrémité
\begin_inset Quotes xrd
\end_inset

 de la liste, ici la tête de liste.
 Valeur: 
\begin_inset Quotes xld
\end_inset

L
\begin_inset Quotes xrd
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
En pratique, les quatre premiers mots représentent la 
\begin_inset Quotes xld
\end_inset

tête
\begin_inset Quotes xrd
\end_inset

 de liste, les quatre derniers la 
\begin_inset Quotes xld
\end_inset

queue
\begin_inset Quotes xrd
\end_inset

 de liste.
 On peut passer à certaines opérations soit l'adresse 
\begin_inset Quotes xld
\end_inset

L
\begin_inset Quotes xrd
\end_inset

, soit l'adresse 
\begin_inset Quotes xld
\end_inset

L+4
\begin_inset Quotes xrd
\end_inset

.
 La liste est vide si HQB[SchedNxtEnt] == HQB[SchedOtherEnd] pour la tête,
 et HQB[SchedPrvEnt] == HQB[SchedOtherEnd] pour la queue.
\end_layout

\begin_layout Standard
Un TCB est référencé par son adresse mémoire.
 Il est soit temporairement 
\begin_inset Quotes cld
\end_inset

détaché
\begin_inset Quotes crd
\end_inset

 (ses pointeurs aux adresses relatives 0, 1 et 3 contiennent alors la valeur
 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

), soit chaîné dans l'une des listes du système.
\end_layout

\begin_layout Subsection
Données disponibles
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedEntSiz
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedEntSiz
\end_layout

\end_inset


\family default
 Taille d'une entrée (24)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedNEmax
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedNEmax
\end_layout

\end_inset


\family default
 Nombre d'entrées (4096)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedFirstEnt
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedFirstEnt
\end_layout

\end_inset


\family default
 Adresse mémoire du premier TCB
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedLastEnt
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedLastEnt
\end_layout

\end_inset


\family default
 Adresse mémoire du dernier TCB
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
Sched_TStart
\begin_inset Index idx
status open

\begin_layout Plain Layout
Sched_TStart
\end_layout

\end_inset


\family default
 Date de lancement du scheduler
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
Sched_TimeNow
\begin_inset Index idx
status open

\begin_layout Plain Layout
Sched_TimeNow
\end_layout

\end_inset


\family default
 Date courante
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
Sched_TimeLast
\begin_inset Index idx
status open

\begin_layout Plain Layout
Sched_TimeLast
\end_layout

\end_inset


\family default
 Date du précédent appel de 
\begin_inset Quotes xld
\end_inset

Schedule
\begin_inset Quotes xrd
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedNone
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedNone
\end_layout

\end_inset


\family default
 Pointeur 
\begin_inset Quotes xld
\end_inset

null
\begin_inset Quotes xrd
\end_inset

 de valeur 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedFreePts
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedFreePts
\end_layout

\end_inset


\family default
 HQB (identification 
\family typewriter
'Free'
\family default
): liste des TCB inutilisés.
 Tous les TCB font initialement partie de cette liste.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedInactPts
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedInactPts
\end_layout

\end_inset


\family default
 HQB (identification 
\family typewriter
'Fthr'
\family default
): liste des TCB décrivant des processus mSL (thread) inactifs.
 A chaque entrée est associé un ensemble de structures de données permettant
 d'exécuter un processus mSL
\begin_inset space ~
\end_inset

: la description du thread, et une pile d'exécution.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedActivPts
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedActivPts
\end_layout

\end_inset


\family default
 HQB (identification 
\family typewriter
'Actv'
\family default
): liste des TCB décrivant des processus actifs, liste contenant soit des
 processus mSL, soit des processus système.
 Le premier processus de la liste est exécuté au sein de la section 
\begin_inset Quotes cld
\end_inset

@block
\begin_inset Quotes crd
\end_inset

 dès qu'un peu de temps CPU est jugé disponible.
 Il est ensuite réinséré, soit en queue de liste, soit dans l'une des autres
 listes, selon les cas.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedDlydPts
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedDlydPts
\end_layout

\end_inset


\family default
 HQB (identification 
\family typewriter
'Dlay'
\family default
): liste des TCB en attente sur un timer, classés par date croissantes.
 Là également, la liste contient soit des processus mSL, soit des processus
 système.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedEvntPts
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedEvntPts
\end_layout

\end_inset


\family default
 HQB (identification 
\family typewriter
'Wait'
\family default
): liste des TCB en attente d'un événement.
 Là également, la liste contient soit des processus mSL, soit des processus
 système.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedSuspPts
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedSuspPts
\end_layout

\end_inset


\family default
 HQB (identification 
\family typewriter
'Pndg'
\family default
): liste des TCB décrivant des processus temporairement suspendus à cause
 d'une opération prioritaire (compilation, garbage collection) nécessitant
 l'accès exclusif aux ressources utilisées par mSL.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedLockdPts
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedLockdPts
\end_layout

\end_inset


\family default
 HQB (identification 
\family typewriter
'Lckd'
\family default
): liste des TCB décrivant des processus verrouillés.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedDlydTailPts
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedDlydTailPts
\end_layout

\end_inset


\family default
 Queue de la liste SchedDlydPts.
 Valeur: 
\family typewriter
SchedDlydPts+4
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedRcyclPts
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedRcyclPts
\end_layout

\end_inset


\family default
 Liste de messages disponibles, recyclés par les processus.
 Chaque message est un bloc de 16 mots.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
mSL_dispatch_entry
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_dispatch_entry
\end_layout

\end_inset


\family default
 est l'adresse du TCB correspondant au processus mSL actuellement en cours
 d'exécution, ou vaut 0 si aucun process mSL n'est encours.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
SchedControl
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedControl
\end_layout

\end_inset


\family default
 Code d'action pour le scheduler
\begin_inset space ~
\end_inset

: une valeur différente de 
\begin_inset Quotes xld
\end_inset

0
\begin_inset Quotes xrd
\end_inset

, exécute, lors du prochain appel de Scheduler(), une action spécifique.
 On notera que ces actions sont exécutées, même si le scheduler est à l'arrêt
 (suite à un code 4)
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Enumerate
Inhibition de la première tâche en attente.
 Son code est remis à 0.
\end_layout

\begin_layout Enumerate
Exécution immédiate de la première tâche en attente.
\end_layout

\begin_layout Enumerate
Arrêt du scheduler
\end_layout

\begin_layout Enumerate
Remise en route du scheduler
\end_layout

\begin_layout Enumerate
Inhibition de toutes les tâches en attente.
\end_layout

\end_deeper
\begin_layout Subsection
Opérations disponibles
\end_layout

\begin_layout Description

\family typewriter
SchedListEmpty
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SchedListEmpty()
\end_layout

\end_inset

(list_head)
\family default
 Vrai si la liste passée en paramètre (noms décrits ci-dessus) est vide,
 faux si elle contient au moins un élément.
\end_layout

\begin_layout Description

\family typewriter
SchedListNonEmpty
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SchedListNonEmpty()
\end_layout

\end_inset

(list_head)
\family default
 Faux si la liste passée en paramètre (noms décrits ci-dessus) est vide,
 vrai si elle contient au moins un élément.
\end_layout

\begin_layout Description

\family typewriter
SchedNeeded()
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SchedNeeded()
\end_layout

\end_inset

 Calcule la taille nécessaire pour représenter l'ensemble des données du
 Scheduler.
 Construit: SchedNEmax (nombre d'entrées) et SchedNeeds (taille totale nécessair
e).
\end_layout

\begin_layout Description

\family typewriter
SchedSetup
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SchedSetup
\end_layout

\end_inset

(mem,
\begin_inset space ~
\end_inset

size) Construit effectivement les structures de données du scheduler.
 
\begin_inset Quotes xld
\end_inset

mem
\begin_inset Quotes xrd
\end_inset

 est la zone mémoire que l'on fournit, 
\begin_inset Quotes xld
\end_inset

size
\begin_inset Quotes xrd
\end_inset

 la taille de cette zone.
 
\begin_inset Quotes xld
\end_inset

size
\begin_inset Quotes xrd
\end_inset

 doit être égal à 
\begin_inset Quotes xld
\end_inset

SchedNeeds
\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
SchedInsertHead
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SchedInsertHead
\end_layout

\end_inset

(HBQ,
\begin_inset space ~
\end_inset

TCB,
\begin_inset space ~
\end_inset

flg)
\family default
 Insère en tête de la liste HBQ l'élément TCB.
 Celui-ci doit être libre, c'est-à-dire avoir été préalablement retiré de
 sa liste d'origine par une opération de détachement.
 Cette condition n'est pas testée par la procédure.
\end_layout

\begin_layout Description

\family typewriter
SchedInsertTail
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SchedInsertTail
\end_layout

\end_inset

(HBQ,
\begin_inset space ~
\end_inset

TCB,
\begin_inset space ~
\end_inset

flg)
\family default
 Insère en queue de la liste HBQ l'élément TCB.
 Celui-ci doit être libre, c'est-à-dire avoir été préalablement retiré de
 sa liste d'origine par une opération de détachement.
 Cette condition n'est pas testée par la procédure.
\end_layout

\begin_layout Description

\family typewriter
SchedDetachHead(HQB)
\family default
 Retrait du premier élément de la liste gérée par le bloc HQB.
 Le résultat est l'adresse d'un SBC, ou zéro si la liste est vide ou si
 une erreur s'est produite.
\end_layout

\begin_layout Description

\family typewriter
SchedDetachTail
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedDetachTail
\end_layout

\end_inset

(HQB)
\family default
 Retrait du dernier élément de la liste gérée par le bloc HQB.
 Le résultat est l'adresse d'un SBC, ou zéro si la liste est vide ou si
 une erreur s'est produite.
\end_layout

\begin_layout Description

\family typewriter
SchedUnchainEnt
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedUnchainEnt
\end_layout

\end_inset

(HQB,
\begin_inset space ~
\end_inset

TCB,
\begin_inset space ~
\end_inset

flg)
\family default
 Retrait du TCB de la liste HQB.
 Le résultat est le TCB dont certains champs ont été mis à jour.
\end_layout

\begin_layout Description

\family typewriter
SchedInsertBefore
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedInsertBefore
\end_layout

\end_inset

(TCB1,
\begin_inset space ~
\end_inset

TCB2,
\begin_inset space ~
\end_inset

flg)
\family default
 Insertion du TCB1 (qui doit être libre) avant TCB2 (qui doit appartenir
 à une liste).
 
\end_layout

\begin_layout Description

\family typewriter
SchedFree
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SchedFree()
\end_layout

\end_inset

(ent)
\family default
 Libère l'entrée 
\family typewriter
ent
\family default
, qui est recyclée, selon sa nature, dans l'une des listes 
\family typewriter
SchedFreePts
\family default
 ou 
\family typewriter
SchedInactPts
\family default
.
\end_layout

\begin_layout Description

\family typewriter
SchedRemove
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedRemove
\end_layout

\end_inset

(HQB,
\begin_inset space ~
\end_inset

Ecode)
\family default
 Parcourt la liste HQB, en remettant à 
\begin_inset Quotes xld
\end_inset

0
\begin_inset Quotes xrd
\end_inset

, dans les SBC rencontrés, les champs 
\begin_inset Quotes xld
\end_inset

SchedCode
\begin_inset Quotes xrd
\end_inset

 égaux à 
\begin_inset Quotes xld
\end_inset

Ecode
\begin_inset Quotes xrd
\end_inset

.
 Les blocs ne sont pas retirés de la queue, mais leur code opération est
 ainsi mis à 0, qui est un code inactif.
\end_layout

\begin_layout Description

\family typewriter
SchedRemove
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedRemove
\end_layout

\end_inset

(HQB,
\begin_inset space ~
\end_inset

Ecode,
\begin_inset space ~
\end_inset

Eval)
\family default
 Parcourt la liste HQB, en remettant à 
\begin_inset Quotes xld
\end_inset

0
\begin_inset Quotes xrd
\end_inset

, dans les SBC rencontrés, les champs 
\begin_inset Quotes xld
\end_inset

SchedCode
\begin_inset Quotes xrd
\end_inset

 égaux à 
\begin_inset Quotes xld
\end_inset

Ecode
\begin_inset Quotes xrd
\end_inset

 si la valeur du champs 
\begin_inset Quotes xld
\end_inset

SchedPar1
\begin_inset Quotes xrd
\end_inset

 est égale à 
\begin_inset Quotes xld
\end_inset

Eval
\begin_inset Quotes xrd
\end_inset

.
 Les blocs ne sont pas retirés de la queue, mais leur code opération est
 ainsi mis à 0, qui est un code inactif.
\end_layout

\begin_layout Description

\family typewriter
Schedule
\begin_inset Index idx
status open

\begin_layout Plain Layout
Schedule
\end_layout

\end_inset

(Edate,
\begin_inset space ~
\end_inset

Edelay,
\begin_inset space ~
\end_inset

Ecode,
\begin_inset space ~
\end_inset

...)
\family default
 Crée à partir de ses paramètres un nouvel TCB, qui va être inséré dans
 la liste 
\begin_inset Quotes xld
\end_inset

SchedDlydPts
\begin_inset Quotes xrd
\end_inset

.
 
\begin_inset Quotes xld
\end_inset

Ecode
\begin_inset Quotes xrd
\end_inset

 est le code l'opération, qui est obligatoire.
 Les 
\begin_inset Quotes xld
\end_inset

...
\begin_inset Quotes xrd
\end_inset

 représentent de 0 à 6 paramètres supplémentaires qui seront mis en place
 dans le TCB.
 Les deux premiers paramètres déterminent la date à laquelle l'événement
 va être activé, de la manière suivante:
\end_layout

\begin_deeper
\begin_layout Itemize
si 
\begin_inset Quotes xld
\end_inset

Edate
\begin_inset Quotes xrd
\end_inset

 est la valeur 
\begin_inset Quotes xld
\end_inset

SchedAbsolute
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedAbsolute
\end_layout

\end_inset


\begin_inset Quotes xrd
\end_inset

, le TCB sera programmé à la date 
\begin_inset Quotes xld
\end_inset

 Edelay - Sched_TStart
\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Itemize
si 
\begin_inset Quotes xld
\end_inset

Edate
\begin_inset Quotes xrd
\end_inset

 est la valeur 
\begin_inset Quotes xld
\end_inset

SchedRelative
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedRelative
\end_layout

\end_inset


\begin_inset Quotes xrd
\end_inset

, le TCB sera programmé à la date 
\begin_inset Quotes xld
\end_inset

 Edelay + Sched_TimeNow
\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Itemize
si 
\begin_inset Quotes xld
\end_inset

Edate
\begin_inset Quotes xrd
\end_inset

 est la valeur 
\begin_inset Quotes xld
\end_inset

SchedFromLast
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedFromLast
\end_layout

\end_inset


\begin_inset Quotes xrd
\end_inset

, le TCB sera programmé à la date 
\begin_inset Quotes xld
\end_inset

 Edelay + Sched_TimeLast
\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Itemize
sinon, le TCB sera programmé à 
\begin_inset Quotes xld
\end_inset

Edate + Edelay
\begin_inset Quotes xrd
\end_inset

.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
Scheduler
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
Scheduler()
\end_layout

\end_inset

()
\family default
 Cette fonction appelée régulièrement, fournit soit 
\begin_inset Quotes xld
\end_inset

0
\begin_inset Quotes xrd
\end_inset

 (aucun TCB n'est prêt), soit l'adresse du premier TCB prêt à être déclenché.
 
\end_layout

\begin_layout Description

\family typewriter
SchedAddTask
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedAddTask
\end_layout

\end_inset

(code,
\begin_inset space ~
\end_inset

p1,
\begin_inset space ~
\end_inset

p2,
\begin_inset space ~
\end_inset

p3,
\begin_inset space ~
\end_inset

p4,
\begin_inset space ~
\end_inset

p5,
\begin_inset space ~
\end_inset

p6)
\begin_inset space ~
\end_inset

*
\family default
 Ajoute une tâche 
\begin_inset Quotes xld
\end_inset

immédiate
\begin_inset Quotes xrd
\end_inset

, qui est aussitôt introduite en queue dans la liste des tâches actives.
\end_layout

\begin_layout Description

\family typewriter
SchedAddUrgent
\begin_inset Index idx
status open

\begin_layout Plain Layout
SchedAdd
\family typewriter
Urgent
\end_layout

\end_inset

(code,
\begin_inset space ~
\end_inset

p1,
\begin_inset space ~
\end_inset

p2,
\begin_inset space ~
\end_inset

p3,
\begin_inset space ~
\end_inset

p4,
\begin_inset space ~
\end_inset

p5,
\begin_inset space ~
\end_inset

p6)
\begin_inset space ~
\end_inset

*
\family default
 Ajoute une tâche 
\begin_inset Quotes xld
\end_inset

immédiate, urgente
\begin_inset Quotes xrd
\end_inset

, qui est aussitôt introduite en tête dans la liste des tâches actives.
\end_layout

\begin_layout Description

\family typewriter
SchedAddDefered
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
SchedAddDefered()
\end_layout

\end_inset

(Edate,
\begin_inset space ~
\end_inset

Edelay,
\begin_inset space ~
\end_inset

Ecode,
\begin_inset space ~
\end_inset

Epar1,
\begin_inset space ~
\end_inset

Epar2,
\begin_inset space ~
\end_inset

Epar3,
\begin_inset space ~
\end_inset

Epar4)
\begin_inset space ~
\end_inset

*
\family default
 crée un TCB de type 
\family typewriter
Ecode
\family default
, avec les paramètres 
\family typewriter
Epar1
\family default
, 
\family typewriter
Epar2
\family default
, 
\family typewriter
Epar3
\family default
, 
\family typewriter
Epar4
\family default
, et programme son exécution au moment défini par 
\family typewriter
Edate
\family default
 et 
\family typewriter
Edelay
\family default
.
 Le moment venu, l'action définie par les paramètres sera introduite dans
 la liste 
\family typewriter
SchedActivPts
\family default
.
\end_layout

\begin_layout Standard
Dans les descriptions ci-dessus, 
\begin_inset Quotes xld
\end_inset

flag
\begin_inset Quotes xrd
\end_inset

 est un indicateur, que l'on mettra à 1 si l'on veut que la fonction vérifie
 la validité des structures de données transmises, ou à 
\begin_inset Quotes xld
\end_inset

0
\begin_inset Quotes xrd
\end_inset

 si l'on ne désire pas réaliser cette opération.
 Les fonctions notées 
\begin_inset Quotes xld
\end_inset


\family typewriter
*
\family default

\begin_inset Quotes xrd
\end_inset

 ci-dessus peuvent ne pas créer de tâche, mais rendre un résultat égal à
 
\begin_inset Quotes xld
\end_inset

0
\begin_inset Quotes xrd
\end_inset

 si elles ne peuvent pas allouer de TCB.
\end_layout

\begin_layout Section
Scénarios d'utilisation
\end_layout

\begin_layout Subsection
Gestion du changement de générateurs
\end_layout

\begin_layout Standard
Opération lancée par un clic gauche dans 
\begin_inset Quotes xld
\end_inset

Gen.
 Change
\begin_inset Quotes xrd
\end_inset

, cellule 7 du scheduler.
 Cette première action:
\end_layout

\begin_layout Itemize
retire par 
\begin_inset Quotes xld
\end_inset

SchedRemove(SchedDlydPts, 7)
\begin_inset Quotes xrd
\end_inset

 toute opération de code 
\begin_inset Quotes xld
\end_inset

7
\begin_inset Quotes xrd
\end_inset

 de la liste d'attente 
\begin_inset Quotes xld
\end_inset

SchedDlydPts
\begin_inset Quotes xrd
\end_inset

.
 
\end_layout

\begin_layout Itemize
introduit une nouvelle action de code 
\begin_inset Quotes xld
\end_inset

7
\begin_inset Quotes xrd
\end_inset

 dans la liste d'attente, différée de 1ms.
\end_layout

\begin_layout Standard
Lorsque cette action s'exécute, elle modifie le nombre de générateurs actifs
 en fonction de quelques paramètres du système, puis se reprogramme pour
 une exécution ultérieure.
\end_layout

\begin_layout Standard
On peut interrompre cette exécution récurrente par un clic droit dans 
\begin_inset Quotes xld
\end_inset

Gen.
 Change
\begin_inset Quotes xrd
\end_inset

, action qui retire les opération de code 
\begin_inset Quotes xld
\end_inset

7
\begin_inset Quotes xrd
\end_inset

 sans en ajouter de nouvelles.
\end_layout

\begin_layout Chapter
Les timers
\end_layout

\begin_layout Section
Synchronisation entre plug-ins
\end_layout

\begin_layout Standard
Le Game Master utilise en sortie les canaux 1 et 2 comme 
\begin_inset Quotes xld
\end_inset

synchronisation
\begin_inset Quotes xrd
\end_inset

, en envoyant sur ces canaux, à chaque instant, le numéro 
\begin_inset Quotes xld
\end_inset

T,
\begin_inset space ~
\end_inset

S
\begin_inset Quotes xrd
\end_inset

 du tupple courant, sous la forme 
\begin_inset Formula $spl0=T/2^{48}$
\end_inset

 et 
\begin_inset Formula $spl1=S$
\end_inset

, ce numéro étant ultérieurement recalculé par
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
T_fact = 4096 * 4096 * 4096 * 4096  ; // 2^48  Exact value
\end_layout

\begin_layout LyX-Code
T_maxk = 4096 * 4096 ; // 2^24 = 16777216  Exact value
\end_layout

\begin_layout LyX-Code
currSmpl = (floor(spl0 * T_fact)) + (floor(spl1 * T_fact)) * 16777216;
\end_layout

\begin_layout Standard
Les quantités 
\begin_inset Quotes xld
\end_inset

T,
\begin_inset space ~
\end_inset

S
\begin_inset Quotes xrd
\end_inset

 sont elles-mêmes obtenues par
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
T = S = X = 0;  // au lancement du GM
\end_layout

\begin_layout LyX-Code
T += 1; // a chaque tupple (section @sample)
\end_layout

\begin_layout Standard
et (section @block), pour chaque bloc
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
(T >= T_maxk) ? (T = T - T_maxk; X += 1; S = X / T_fact;);
\end_layout

\begin_layout Standard
On notera que 
\begin_inset Quotes xld
\end_inset

T
\begin_inset Quotes xrd
\end_inset

 peut être occasionnellement supérieur à 
\family typewriter
T_maxk
\family default
, mais que le calcul du numéro de tuple reste toujours valide.
 Les valeurs 
\emph on
spl0
\emph default
 et 
\emph on
spl1
\emph default
 restent inférieures à 
\begin_inset Formula $2^{-24}$
\end_inset

, et se présentent sous la forme de dents de scie à une fréquence inférieure
 à 0.003
\begin_inset space ~
\end_inset

Hz, ces deux aspects impliquant que même en cas de mélange avec un signal
 audio, elles n'interfèrent en rien avec celui-ci.
 Enfin, compte tenu de la représentation des nombres flottants 64 bits,
 le numéro du sample est correctement représenté, pour une fréquence d'échantill
onage de 48kHz, pour des sessions de REAPER pouvant durer plusieurs siècles.
\end_layout

\begin_layout Standard
Les valeurs 
\begin_inset Quotes xld
\end_inset

audio
\begin_inset Quotes xrd
\end_inset

 
\emph on
spl0
\emph default
 et 
\emph on
spl1
\emph default
 envoyées par le GameMaster sont utilisées en entrée par les différents
 players.
 Le GM est ainsi exécuté 
\begin_inset Quotes xld
\end_inset

avant
\begin_inset Quotes xrd
\end_inset

 ces players, et peut donc leur transmettre, par l'intermédiaire de la mémoire
 partagée, des commandes pouvant être précises au sample près.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Chapter
Le jeu de clips dans le GM
\end_layout

\begin_layout Section
Concepts
\end_layout

\begin_layout Standard
Le jeu des clips est une activité partagée entre le 
\begin_inset Quotes cld
\end_inset


\emph on
Game Master
\emph default

\begin_inset Quotes crd
\end_inset

 et les 
\begin_inset Quotes cld
\end_inset


\emph on
Players
\emph default

\begin_inset Quotes crd
\end_inset

 eux-mêmes.
 Le 
\emph on
Game Master
\emph default
 détermine un ensemble de caractéristiques attendues pour le jeu d'un clip,
 choisit un 
\emph on
Player
\emph default
 disponible, et lui envoie les commandes en remplissant un bloc de contrôle
 (UCB) situé en mémoire partagée (
\family typewriter
gmem
\family default
).
\end_layout

\begin_layout Standard
Le jeu des clips est influencé par tout un ensemble de paramètres : des
 choix spécifiques liés à l'appel de la fonction 
\begin_inset Quotes cld
\end_inset

doPlayClip
\begin_inset Quotes crd
\end_inset

, et un ensemble de paramètres globaux.
 Au moment du début du jeu du clip, toutes ces valeurs sont rassemblées
 dans un tableau (de 80 valeurs), placé en mémoire partagée, et transmis
 au 
\begin_inset Quotes cld
\end_inset

player
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
La fonction 
\begin_inset Quotes cld
\end_inset

principale
\begin_inset Quotes crd
\end_inset

 de jeu d'un clip est 
\family typewriter
doPlayClip
\begin_inset Index idx
status open

\begin_layout Plain Layout
doPlayClip
\end_layout

\end_inset


\family default
 :
\end_layout

\begin_layout Description

\family typewriter
doPlayClip(xpart,
\begin_inset space ~
\end_inset

xsel,
\begin_inset space ~
\end_inset

xflgs,
\begin_inset space ~
\end_inset

xtype)
\family default
 Les paramètres ont la fonction suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Description
xpart numéro de partiel
\end_layout

\begin_layout Description
xsel opération de sélection 
\end_layout

\begin_deeper
\begin_layout Description
>=
\begin_inset space ~
\end_inset

0 numéro de partiel, à jouer avec les paramètres du partiel indiqué
\end_layout

\begin_layout Description
-1 jouer n'importe quel clip du partiel
\end_layout

\begin_layout Description
-2 jouer n'importe quel clip du groupe auquel appartient le partiel
\end_layout

\begin_layout Description
-3 jouer n'importe quel clip ayant même groupe et même banque
\end_layout

\begin_layout Description
-4 jouer n'importe quel clip (du système) avec les paramètres de ce partiel
\end_layout

\begin_layout Description
-5 jouer n'importe quel clip du système, par sélection d'un partiel et d'un
 clip de ce partiel
\end_layout

\end_deeper
\begin_layout Description
xflgs flags de 
\begin_inset Quotes cld
\end_inset

contraintes du jeu
\begin_inset Quotes crd
\end_inset

 combinant
\end_layout

\begin_deeper
\begin_layout Description
FLdoForcePlay (0x100000)
\end_layout

\begin_layout Description
FLdoForceLoop (0x200000)
\end_layout

\begin_layout Description
FLdoForceRead (0x400000)
\end_layout

\begin_layout Description
FLdoForceLock (0x080000)
\end_layout

\end_deeper
\begin_layout Description
xtype forcer un mode de choix
\end_layout

\begin_deeper
\begin_layout Description
GvPlayTypClip [4]
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
La fonction utilise en outre les 
\emph on
variables globales
\emph default
 suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
reSelectPartial
\begin_inset Index idx
status open

\begin_layout Plain Layout
reSelectPartial
\end_layout

\end_inset

 si >=0, cette variable contient un numéro de partiel à utiliser, à la place
 du partiel indiqué implicitement
\end_layout

\begin_layout Description
reSelectPlayMode
\begin_inset Index idx
status open

\begin_layout Plain Layout
reSelectPlayMode
\end_layout

\end_inset

 si >=0, cette variable contient un numéro de mode de jeu à utiliser, à
 la place de celui qui est impliqué par le partiel sélecté
\end_layout

\begin_layout Description
reSelectSpaceMode
\begin_inset Index idx
status open

\begin_layout Plain Layout
reSelectSpaceMode
\end_layout

\end_inset

 si >=0, cette variable contient un numéro de mode d'espace à utiliser,
 à la place de celui qui est impliqué par le partiel sélecté
\end_layout

\begin_layout Description
reSelectHpent
\begin_inset Index idx
status open

\begin_layout Plain Layout
reSelectHpent
\end_layout

\end_inset

 si >0, cette variable contient un numéro de configuration de HP à utiliser,
 à la place de celui qui est impliqué par le mode d'espace.
\end_layout

\begin_layout Description
reSelectDuration
\begin_inset Index idx
status open

\begin_layout Plain Layout
reSelectDuration
\end_layout

\end_inset

 si >0, cette variable contient une durée (secondes) de jeu à utiliser,
 à place des celle impliquée par les différents autres paramètres
\end_layout

\begin_layout Description
reSelectGrFades
\begin_inset Index idx
status open

\begin_layout Plain Layout
reSelectGrFades
\end_layout

\end_inset

 si >0, cette variable contient une durée (milisecondes) à utiliser pour
 les fade in et fade out des grains
\end_layout

\begin_layout Description
reSelectVolume
\begin_inset Index idx
status open

\begin_layout Plain Layout
reSelectVolume
\end_layout

\end_inset

 si>-120, cette variable contient une modification de volume (en dB) s'ajoutant
 aux autres paramètres de réglage du volume.
 Sa valeur agit donc comme un ajustement relatif par rapport au volume global.
\end_layout

\begin_layout Description
reSelectRate
\begin_inset Index idx
status open

\begin_layout Plain Layout
reSelectRate
\end_layout

\end_inset

 si !=Undef, 
\end_layout

\begin_layout Standard
On notera que ces variables sont remises à 
\begin_inset Quotes cld
\end_inset

Undef
\begin_inset Index idx
status open

\begin_layout Plain Layout
Undef
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset

 (valeur : -65539/16) après le lancement du clip, et n'interviennent donc
 que pour ce clip spécifique
\end_layout

\begin_layout Standard
La fonction utilise également les 
\emph on
paramètres
\emph default
 suivants
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
Transpose
\begin_inset Index idx
status open

\begin_layout Plain Layout
Transpose
\end_layout

\end_inset

 transposition initiale : une valeur de transposition du jeu du clip, exprimé
 en demi-tons
\end_layout

\begin_layout Description
Rate
\begin_inset space ~
\end_inset

Initial
\begin_inset Index idx
status open

\begin_layout Plain Layout
Rate Initial
\end_layout

\end_inset

 modification globale de la vitesse de lecture, utilisée comme facteur (1
 = pas de modification)
\end_layout

\begin_layout Description
Read
\begin_inset space ~
\end_inset

Reverse
\begin_inset Index idx
status open

\begin_layout Plain Layout
Read Reverse
\end_layout

\end_inset

 inversion de la lecture si égal à un
\end_layout

\begin_layout Description
Play
\begin_inset space ~
\end_inset

Gain
\begin_inset Index idx
status open

\begin_layout Plain Layout
Play Gain
\end_layout

\end_inset

 ajustement relatif (dB) du volume général pour les clips joués en mode
 
\begin_inset Quotes cld
\end_inset

Play
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
Play
\begin_inset space ~
\end_inset

Dur.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Play Dur.
\end_layout

\end_inset

 durée de jeu pour les clips joués en mode 
\begin_inset Quotes cld
\end_inset

Play
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pl.Fade.In
\end_layout

\end_inset

Pl.Fade.In fade-in time (s) en mode play
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pl.Fade.Out
\end_layout

\end_inset

Pl.Fade.Out fade-out time (s) en mode play
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
Loop Gain
\end_layout

\end_inset

Loop
\begin_inset space ~
\end_inset

Gain ajustement relatif (dB) du volume général pour les clips joués en mode
 
\begin_inset Quotes cld
\end_inset

Loop
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
Loop Dur.
\end_layout

\end_inset

Loop
\begin_inset space ~
\end_inset

Dur.
 durée de jeu pour les clips joués en mode 
\begin_inset Quotes cld
\end_inset

Loop
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
Lp.Fade.In
\end_layout

\end_inset

Lp.Fade.In fade-in time (s) en mode loop
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
Lp.Fade.Out
\end_layout

\end_inset

Lp.Fade.Out fade-out ime (s) en mode loop
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
Gr.Fade.In
\end_layout

\end_inset

Gr.Fade.In fade-in time (ms) pour les grains
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
Gr.Fade.Out
\end_layout

\end_inset

Gr.Fade.Out fade-out time (ms) pour les grains
\end_layout

\begin_layout Section
Algorithme
\end_layout

\begin_layout Subsection
Game Master
\end_layout

\begin_layout Enumerate
Vérification de la validité du numéro de partiel transmis dans 
\begin_inset Quotes xld
\end_inset


\family typewriter
xpart
\family default

\begin_inset Quotes xrd
\end_inset

.
 Erreurs: 0503, 0504, 0506, 0507, 0508, 0509.
 Modification de 
\family typewriter
\emph on
pM
\family default
\emph default
, 
\family typewriter
\emph on
sP
\family default
\emph default
 par 
\family typewriter
reSelectPlayMode
\family default
 et 
\family typewriter
reSelectSpaceMode
\family default
.
\end_layout

\begin_layout Enumerate
Test de la valeur de 
\begin_inset Quotes xld
\end_inset


\family typewriter
xsel
\family default

\begin_inset Quotes xrd
\end_inset

.
 Définit dans 
\begin_inset Quotes xld
\end_inset

klc
\begin_inset Quotes xrd
\end_inset

 et 
\begin_inset Quotes xld
\end_inset

khc
\begin_inset Quotes xrd
\end_inset

 des numéros de clips par défaut.
 Transforme les clips en un 
\begin_inset Quotes xld
\end_inset

set
\begin_inset Quotes xrd
\end_inset

 nouveau.
 Si 
\begin_inset Quotes xld
\end_inset

xsel < 0
\begin_inset Quotes xrd
\end_inset

 choisit un nouveau numéro de partiel adapté.
 Utilise 
\begin_inset Quotes xld
\end_inset

reSelectPartial
\begin_inset Quotes xrd
\end_inset

 pour changer le partiel.
 Si différent, retest le nouveau partiel.
 Erreurs: 0524, 0526, 0527, 528, 528.
 Resélectionne 
\begin_inset Quotes xld
\end_inset

klc
\begin_inset Quotes xrd
\end_inset

 et 
\begin_inset Quotes xld
\end_inset

khc
\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Enumerate
Teste, en fonction de la commande (play, loop) si l'on a dépassé une limite
 de players actif.
 Erreurs: 0513, 0515, 0516.
\end_layout

\begin_layout Enumerate
Allocation de player, initialisation de l'UCB, choix d'un clip.
 Erreurs: 0511 (no unit ready), 0518 (unplayable clip).
 Positionne Clipnb.
 Positionnnement de la vitesse de lecture.
\end_layout

\begin_layout Enumerate
Choix des HP.
 Utilie reSelectHpSet, reSelectHpent.
\end_layout

\begin_layout Enumerate
Sélection de la durée à jouer.
 Utilise 
\begin_inset Quotes xld
\end_inset

parV(p_playDur)
\begin_inset Quotes xrd
\end_inset

 ou 
\begin_inset Quotes xld
\end_inset

parV(p_loopDur)
\begin_inset Quotes xrd
\end_inset

 ou 
\begin_inset Quotes xld
\end_inset

reSelectDuration
\begin_inset Quotes xrd
\end_inset

 pour la durée.
 Utilise 
\begin_inset Quotes xld
\end_inset

reSelectGrFades
\begin_inset Quotes xrd
\end_inset

 ou 
\begin_inset Quotes xld
\end_inset

parV(p_GrFadeInTime)
\begin_inset Quotes xrd
\end_inset

 ou 
\begin_inset Quotes xld
\end_inset

parV(p_GrFadeOutTime)
\begin_inset Quotes xrd
\end_inset

 pour les grains.
 Calcule le volume en fonctions de multiples paramètres, dans VolMin, VolMax,
 VolTarget.
\end_layout

\begin_layout Enumerate
Informations d'enregistrement du playLog.
 Erreurs: 7277 can't allocate record entry.
\end_layout

\begin_layout Enumerate
Set RCB_Kmd to send the command to the player.
\end_layout

\begin_layout Subsection
Player
\end_layout

\begin_layout Enumerate
Réception d'une commande [RCB_kmd != 0] dans @block.
\end_layout

\begin_layout Enumerate
Début dans @gfx.
 Test du clip, ouverture du fichier, conservation des infos utiles.
 Erreurs: 0401, 0448 (nb de canals incorrect), 0433 (freq.), 0400 (size),
 0404 (not found)
\end_layout

\begin_layout Enumerate
Phase de lecture.
 Répétée autant de fois que nécessaire.
\end_layout

\begin_layout Enumerate
Phase de début de mode 
\begin_inset Quotes xld
\end_inset

Play
\begin_inset Quotes xrd
\end_inset

.
 Appel de checkRCB().
 State <- busy.
\end_layout

\begin_layout Enumerate
Phase de début de mode 
\begin_inset Quotes xld
\end_inset

Loop
\begin_inset Quotes xrd
\end_inset

.
 Appel de checkRCB().
 State <- busy.
\end_layout

\begin_layout Enumerate
Appel de checkRCB() : check different values.
 
\end_layout

\begin_layout Subsection
Questions
\end_layout

\begin_layout Description
RCB_Rec_Flag ne semble pas être utilisé.
\end_layout

\begin_layout Description
GrStLLimit grain start lower limit
\end_layout

\begin_layout Description
GrStHLimit grain start upper limit
\end_layout

\begin_layout Description
GrMinTpl grain min.
 length in tupples
\end_layout

\begin_layout Description
GrMaxTpl grain max.
 length in tupples
\end_layout

\begin_layout Subsection
Principaux aspects
\end_layout

\begin_layout Standard
Après toutes les vérifications possible, et avant le début effectif du jeu
 d'un clip, on dispose des informations suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
UAdd adresse du bloc de commande du player
\end_layout

\begin_layout Description
UAddChs adresse de la liste des canaux à utiliser pour le clip courant.
\end_layout

\begin_layout Description
KmdKurrent dernière commande de jeu reçue (KmdPlay ou KmdLoop).
\end_layout

\begin_layout Description
currSrate current 
\begin_inset Quotes xld
\end_inset

srate
\begin_inset Quotes xrd
\end_inset

.
 Typiquement 48000.
 Assurée d'être > 0.
\end_layout

\begin_layout Description
clPFlags flags associés à la commande de jeu
\end_layout

\begin_layout Description
FP_Flg flags liés aux paramètres dynamiques du jeu (basé sur FP_Flg1, initiaux,
 et FP_Flg2, dynamiques).
\end_layout

\begin_layout Description
FP_F flags dynamiques, liés aux flags globaux 
\begin_inset Quotes xld
\end_inset

gmem[dynGlFlags]
\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Description
CCCC Le nombre de canaux du clip, 2 le plus souvent.
\end_layout

\begin_layout Description
clDur Durée demandée pour le clip, en seconde.
 
\end_layout

\begin_layout Description
FInDur durée de fade in demandée, en ms.
 
\end_layout

\begin_layout Description
FOutDur durée de fade out demandée, en ms.
 
\end_layout

\begin_layout Description
clRSpeed vitesse de lecture (de 0.01 à 10) relative du clip; négative si
 lecture inverse
\end_layout

\begin_layout Description
UBuffer Le clip est installé dans UBuffer.
 Avant le clip, il y a quelques zéros (2*CCCC), et des zéros après (2*CCCC);
\end_layout

\begin_layout Description
ClTpl1st position du premier tupple dans le buffer.
 L'adresse mémoire du 1er tupple est donc 
\begin_inset Quotes xld
\end_inset

UBuffer+ClTpl1st
\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Description
ClTplLast position du premier tupple à 0 après le fichier.
 L'adresse mémoire est donc 
\begin_inset Quotes xld
\end_inset

UBuffer+ClTplLast*CCCC
\begin_inset Quotes xrd
\end_inset

.
 La longueur du clip, en tupples est 
\begin_inset Quotes xld
\end_inset

ClTplLast-ClTpl1st
\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Description
SpdFact produit de 
\begin_inset Quotes xld
\end_inset

currSrate * abs(clRSpeed)
\begin_inset Quotes xrd
\end_inset

 C'est un nombre de tupples par seconde
\end_layout

\begin_layout Description
SpdFactms valeur 
\begin_inset Quotes xld
\end_inset

SpdFact/1000
\begin_inset Quotes xrd
\end_inset

 C'est un nombre de tupples par milliseconde
\end_layout

\begin_layout Section
Les players
\end_layout

\begin_layout Standard
Chaque player est un plug-in 
\emph on
jsfx
\emph default
, dont le rôle est d'attendre une commande transmise par le 
\begin_inset Quotes cld
\end_inset


\emph on
Game Master
\emph default

\begin_inset Quotes crd
\end_inset

, qui est une commande déclenchant la lecture et le jeu d'un clip, d'exécuter
 celle-ci, et de se mettre en attente d'une nouvelle commande.
 Le plug-in propose actuellement deux modes de jeu, l'un consistant en une
 lecture unique de l'intégralité du clip, l'autre en la lecture d'une succession
/superposition de 
\begin_inset Quotes cld
\end_inset

grains
\begin_inset Quotes crd
\end_inset

 sonores extraits de ce clip.
 
\end_layout

\begin_layout Standard
Le plug-in comporte une réservation de mémoire centrale (
\begin_inset Quotes cld
\end_inset

options:maxmem=12058624
\begin_inset Quotes crd
\end_inset

 ou similaire) qui permet de disposer d'un espace suffisant pour lire à
 peu près 12M échantillons, l'équivalent à 48kHz de 4 minutes de son en
 mono, 2 minutes en stéréo, 30 secondes en octo, ceci quelle que soit la
 représentation (wav, aiff, flac, mp3) initiale du fichier, puisque les
 fichiers lus par REAPER sont fournis convertis au format PCM.
\end_layout

\begin_layout Standard
Le plug-in reçoit des commandes de jeu, qui indiquent un numéro de clip
 à jouer, une manière de le jouer, et une répartition de ses sorties sur
 64 canaux.
 Sa tâche est d'exécuter cette commande, en s'assurant qu'il n'y aura pas
 de 
\begin_inset Quotes cld
\end_inset

drop-out
\begin_inset Quotes crd
\end_inset

 (interruption du son par manque de temps pour calculer les sorties).
\end_layout

\begin_layout Standard
Le dialogue s'effectue au moyen d'une structure de donnée spécifique, l'UCB
 (Unit Control Bloc), située en 
\family typewriter
gmem
\family default
.
\end_layout

\begin_layout Standard
Dans chaque Player, il existe un 
\begin_inset Quotes cld
\end_inset

PCB - Player Control Block
\begin_inset Quotes crd
\end_inset

 qui décrit les caractéristiques du clip courant, et les paramètres transmis
 pour la lecture du clip.
\end_layout

\begin_layout Standard
Pour chaque lecture en cours, il existe un 
\begin_inset Quotes cld
\end_inset

BCB - Buffer Control Block
\begin_inset Quotes crd
\end_inset

 qui décrit la lecture en cours dans le clip.
 Le BCB fait référence au PCB.
 Il peut exister plusieurs BCB à un instant donné (cas des loopers qui construis
ent plusieurs boucles simultanées).
\end_layout

\begin_layout Subsection
Aspect temps réel
\end_layout

\begin_layout Standard
La commande de lecture d'un clip peut arriver à n'importe quel moment, et
 s'effectue dans la partie 
\begin_inset Quotes cld
\end_inset

@block
\begin_inset Quotes crd
\end_inset

 du plug-in.
 Cependant, cette opération est contrainte par l'aspect 
\begin_inset Quotes cld
\end_inset

temps réel
\begin_inset Quotes crd
\end_inset

, qui implique que pour l'ensemble des plug-ins, l'exécution des parties
 
\begin_inset Quotes cld
\end_inset

@block
\begin_inset Quotes crd
\end_inset

 ne dépasse pas une certaine durée (le temps de production, en sortie, d'un
 buffer de 
\begin_inset Quotes cld
\end_inset

N
\begin_inset Quotes crd
\end_inset

 tupples, 
\begin_inset Quotes cld
\end_inset

N
\begin_inset Quotes crd
\end_inset

 étant typiquement une puissance de 2, de 128 à 2048).
 Cette contrainte forte est en partie relaxée par le fait qu'il est possible
 d'allouer plusieurs des coeurs de la CPU à cette tâche.
 Il n'en demeure pas moins que le temps d'exécution d'un 
\begin_inset Quotes cld
\end_inset

@block
\begin_inset Quotes crd
\end_inset

 ne peut en aucun dépasser, pour un buffer de 512 tupples par exemple, 10ms,
 sachant que dans ce laps de temps, le plug-in devra exécuter sa partie
 
\begin_inset Quotes cld
\end_inset

@block
\begin_inset Quotes crd
\end_inset

 et 512 fois sa partie 
\begin_inset Quotes cld
\end_inset

@sample
\begin_inset Quotes crd
\end_inset

.
 Si le nombre de générateur actifs dépasse le nombre de coeurs alloués (de
 4 à 8), alors plusieurs plug-ins devront se partager ce maigre laps de
 temps.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Interpolation-lecteur-1"

\end_inset

Interpolation
\end_layout

\begin_layout Standard
A la base de la lecture des clips se trouve un interpolateur permettant
 de calculer une valeur d'échantillon à partir d'une position (fractionnaire)
 dans un clip, la fonction 
\begin_inset Quotes cld
\end_inset


\emph on
getInterpolated
\emph default

\begin_inset Quotes crd
\end_inset

.
 Celle-ci prend trois paramètres
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
buffer l'emplacement mémoire du buffer de valeurs à partir desquelles un
 résultat doit être interpolé
\end_layout

\begin_layout Description
index une position fractionnaire de lecture dans le buffer.
 Ce n'est pas un numéro d'échantillon, mais un numéro de 
\begin_inset Quotes cld
\end_inset

tupple
\begin_inset Quotes crd
\end_inset

, c'est-à-dire un groupe d'échantillons consécutifs, dont la taille est
 égale au nombre de canaux du fichier son.
\end_layout

\begin_layout Description
canaux le nombre de canaux audio du buffer, entier de 1 à 
\begin_inset Quotes cld
\end_inset

n
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Pour une lecture à vitesse normale, l'index doit donc progresser de 1 en
 1, quel que soit le nombre de canaux.
 Pour lire le 
\begin_inset Quotes cld
\end_inset

nième
\begin_inset Quotes crd
\end_inset

 canal, on ajoute 
\begin_inset Quotes cld
\end_inset

n-1
\begin_inset Quotes crd
\end_inset

 à l'adresse du buffer.
 Ainsi, pour lire les canaux gauche et droit d'un enregistrement stéréo
 (entrelacé), on écrira
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
gauche = getInterpolated(buffer, index, 2);
\end_layout

\begin_layout LyX-Code
droite = getInterpolated(buffer+1, index, 2);
\end_layout

\begin_layout LyX-Code
index += 1; // passer à la paire suivante
\end_layout

\begin_layout Subsection
Vitesse de lecture
\end_layout

\begin_layout Standard
L'un des aspects des players est de pouvoir modifier, éventuellement de
 manière dynamique, la vitesse de lecture des clips, à la manière d'un magnétoph
one.
 Deux variables interviennent ainsi
\begin_inset space ~
\end_inset

: 
\family typewriter
clRSpeed
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
clRSpeed
\end_layout

\end_inset


\family default
, vitesse 
\begin_inset Quotes cld
\end_inset

absolue
\begin_inset Quotes crd
\end_inset

 de lecture, et 
\begin_inset Quotes cld
\end_inset


\family typewriter
FAdjRate
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
FAdjRate
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, valeur d'ajustement, qui tient compte de la fréquence d'échantillonage
 du projet (typiquement, 48kHz), et de la fréquence d'échantillonage du
 clip, typiquement 44.1kHz, 48kHZ, 96kHZ, etc.
 Pour un clip à 44.1kHZ et un projet à 48kHZ, la valeur de 
\family typewriter
FAdjRate
\family default
 est égale à 44100/48000, soit environ 0.91875.
 Le calcul effectif d'une vitesse 
\begin_inset Quotes cld
\end_inset

absolue
\begin_inset Quotes crd
\end_inset

 se base sur
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Enumerate
Une première évaluation de la vitesse de lecture est effectuée dans la procédure
 
\begin_inset Quotes cld
\end_inset


\family typewriter
doPlayPart
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
doPlayPart()
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
 Elle est basée sur la valeur du paramètre 
\emph on
Speed
\begin_inset Index idx
status open

\begin_layout Plain Layout

\emph on
Speed
\end_layout

\end_inset


\emph default
 du mode de jeu, par exemple 
\begin_inset Quotes cld
\end_inset


\family typewriter
Speed, 0.5, 1.2, 0.5
\family default

\begin_inset Quotes crd
\end_inset

 qui indique que la vitesse est comprise entre 0.5 et 1.2, avec une probabilité
 0.5 d'être inversée.
 Ce calcul fournit le paramètre 
\begin_inset Quotes cld
\end_inset


\family typewriter
RCB_SpeedAbs_u
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RCB_SpeedAbs_u
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Un premier modificateur de la vitesse est le réglage du paramètre 
\begin_inset Quotes cld
\end_inset


\family typewriter
p_RateCtl
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
p_RateCtl
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, modificateur 
\begin_inset Quotes cld
\end_inset

au démarrage
\begin_inset Quotes crd
\end_inset

 de la vitesse de lecture d'un clip, qui fournit la valeur 
\begin_inset Quotes cld
\end_inset


\family typewriter
RCB_SpeedMod1_u
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RCB_SpeedMod1_u
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Enumerate
Un modificateur 
\begin_inset Quotes cld
\end_inset

alternatif
\begin_inset Quotes crd
\end_inset

 de cette vitesse est le réglage du paramètre 
\begin_inset Quotes cld
\end_inset


\family typewriter
p_Transpose
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
p_Transpose
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, qui fournit la valeur 
\begin_inset Quotes cld
\end_inset


\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RCB_Transpose_u
\end_layout

\end_inset

RCB_Transpose_u
\family default

\begin_inset Quotes crd
\end_inset

.
 C'est l'un ou l'autre de ces modificateurs qui est utilisé.
\end_layout

\begin_layout Enumerate
Un autre modificateur est celui du sens de la lecture, qui permet d'inverser
 le sens des lectures.
 C'est le paramètre 
\begin_inset Quotes cld
\end_inset


\family typewriter
p_RDirSwitch
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
p_RDirSwitch
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, qui fournit la valeur 
\begin_inset Quotes cld
\end_inset


\family typewriter
RCB_Speed_Dir_u
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
RCB_Speed_Dir_u
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

 (1 ou -1).
\end_layout

\begin_layout Enumerate
Enfin, un modificateur 
\begin_inset Quotes cld
\end_inset

global
\begin_inset Quotes crd
\end_inset

 pour l'ensemble du projet, est 
\begin_inset Quotes cld
\end_inset


\family typewriter
gmem[speedBase
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
speedBase
\end_layout

\end_inset

]
\family default

\begin_inset Quotes crd
\end_inset

, qui est fixé à 1, mais peut être modifié par une procédure externe, pour
 faire varier de manière cohérente l'ensemble des vitesses de lectures des
 clips.
 Cette valeur est modifiable par le paramètre 
\begin_inset Quotes cld
\end_inset


\family typewriter
p_continRate
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
p_continRate
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
La vitesse 
\begin_inset Quotes cld
\end_inset

absolue
\begin_inset Quotes crd
\end_inset

 de lecture d'un clip, 
\family typewriter
clRSpeed
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
clRSpeed
\end_layout

\end_inset


\family default
, est donc le produit des valeurs évoquées en 1, 2, 3, et 5, ou, si le paramètre
 transpose a été 
\begin_inset Quotes cld
\end_inset

touché
\begin_inset Quotes crd
\end_inset

, uniquement 4.
 Cette valeur est multipliée par 
\family typewriter
FAdjRate
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
FAdjRate
\end_layout

\end_inset


\family default
 pour obtenir la valeur 
\begin_inset Quotes cld
\end_inset

finale
\begin_inset Quotes crd
\end_inset

 de la vitesse de lecture.
 Pour l'implantation du lecteur, ceci revient à dire que si l'on vient de
 lire l'échantillon qui est à la position 
\begin_inset Quotes cld
\end_inset


\family typewriter
ClRIndex
\begin_inset Index idx
status open

\begin_layout Plain Layout

\family typewriter
ClRIndex
\end_layout

\end_inset


\family default

\begin_inset Quotes crd
\end_inset

, l'échantillon suivant sera lu à la position 
\begin_inset Quotes cld
\end_inset


\family typewriter
ClRIndex + clRSpeed * FAdjRate
\family default

\begin_inset Quotes crd
\end_inset

.
 Ces valeurs sont le plus souvent fractionnaires, et une interpolation quadratiq
ue (c.f.
 section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Interpolation-lecteur-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

), portant sur les quatre échantillons physiques encadrant cette position,
 est effectuée.
 
\end_layout

\begin_layout Section
Structures de données
\end_layout

\begin_layout Subsection
L'UCB - Unit Control Block
\begin_inset Index idx
status open

\begin_layout Plain Layout
Unit Control Block
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un UCB
\begin_inset Index idx
status open

\begin_layout Plain Layout
UCB
\end_layout

\end_inset

 est de taille UCBSize
\begin_inset Index idx
status open

\begin_layout Plain Layout
UCBSize
\end_layout

\end_inset

 (actuellement 192 mots).
 Il en existe 64, définis statiquement en mémoire partagée gmem.
 Chaque 
\emph on
Player
\emph default
, une fois lancé, s'en approprie dynamiquement un au hasard, qui lui permet
 ensuite de communiquer avec le 
\begin_inset Quotes cld
\end_inset


\emph on
Game Master
\emph default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Subsection
Le PCB - Player Control Block
\begin_inset Index idx
status open

\begin_layout Plain Layout
Player Control Block
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Un PCB
\begin_inset Index idx
status open

\begin_layout Plain Layout
PCB
\end_layout

\end_inset

 est de taille PCBSize
\begin_inset Index idx
status open

\begin_layout Plain Layout
PCBSize
\end_layout

\end_inset

 (somme de UCBSize, actuellement 192 mots, plus 512, soit 704 mots).
 Le PCB est défini statiquement dans la mémoire propre du player.
 Le début (de taille UCBSize) contient une copie de l'UCB (Unit Control
 Block, situé, lui, en 
\family typewriter
gmem
\family default
,) transmis comme commande au player.
 
\end_layout

\begin_layout Standard
Les entrées suivantes sont décrites ci-après:
\end_layout

\begin_layout Description
pcbFname
\begin_inset Index idx
status open

\begin_layout Plain Layout
pcbFname
\end_layout

\end_inset

 le nom du fichier courant (non utilisé)
\end_layout

\begin_layout Description
pcbFClNum
\begin_inset Index idx
status open

\begin_layout Plain Layout
pcbFClNum
\end_layout

\end_inset

 le numéro de clip correspondant au fichier courant
\end_layout

\begin_layout Description
pcbFbuff
\begin_inset Index idx
status open

\begin_layout Plain Layout
pcbFbuff
\end_layout

\end_inset

 l'addresse dans la mémoire du player du buffer dans lequel est lu le fichier.
 Contient typiquement de 8 à 16M d'échantillons.
\end_layout

\begin_layout Description
pcbFsize
\begin_inset Index idx
status open

\begin_layout Plain Layout
pcbFsize
\end_layout

\end_inset

 Nombre d'échantillons lus.
 Calculé comme le minimum de la taille disponible en mémoire, et de la taille
 du fichier.
\end_layout

\begin_layout Description
pcbCFsize
\begin_inset Index idx
status open

\begin_layout Plain Layout
pcbCFsize
\end_layout

\end_inset

 Nombre total d'échantillons dans le fichier (obtenu par 
\begin_inset Quotes cld
\end_inset

file_avail
\begin_inset Quotes crd
\end_inset

)
\end_layout

\begin_layout Description
pcbFrmax
\begin_inset Index idx
status open

\begin_layout Plain Layout
pcbFrmax
\end_layout

\end_inset

 Taille disponible du fichier en nombre de 
\emph on
tuples
\emph default
 (soit pcbFsize / pcbFnch)
\end_layout

\begin_layout Description
pcbFstatus
\begin_inset Index idx
status open

\begin_layout Plain Layout
pcbFstatus
\end_layout

\end_inset

 Indique s'il y a eu - ou non, une erreur ; hélas, 0 en cas d'erreur...
\end_layout

\begin_layout Description
pcbFhandle
\begin_inset Index idx
status open

\begin_layout Plain Layout
pcbFhandle
\end_layout

\end_inset

 Handle (au sens REAPER) du fichier courant, ou 
\begin_inset Quotes cld
\end_inset

-1
\begin_inset Quotes crd
\end_inset

 s'il a déjà été refermé.
\end_layout

\begin_layout Description
pcbFnch
\begin_inset Index idx
status open

\begin_layout Plain Layout
pcbFnch
\end_layout

\end_inset

 Nombre de canaux du fichier.
\end_layout

\begin_layout Description
pcbFsmplRate
\begin_inset Index idx
status open

\begin_layout Plain Layout
pcbFsmplRate
\end_layout

\end_inset

 Fréquence d'échantillonnage du fichier
\end_layout

\begin_layout Description
pcbFformat
\begin_inset Index idx
status open

\begin_layout Plain Layout
pcbFformat
\end_layout

\end_inset

 Type de format du fichier (0: inconnu; 1: 
\begin_inset Quotes cld
\end_inset

wav
\begin_inset Quotes crd
\end_inset

 ; 2: 
\begin_inset Quotes cld
\end_inset

aiff
\begin_inset Quotes crd
\end_inset

 ; 3: 
\begin_inset Quotes cld
\end_inset

flac
\begin_inset Quotes crd
\end_inset

 ; 4 : 
\begin_inset Quotes cld
\end_inset

mp3
\begin_inset Quotes crd
\end_inset

).
 
\end_layout

\begin_layout Description
pcbFAdjRate
\begin_inset Index idx
status open

\begin_layout Plain Layout
pcbFAdjRate
\end_layout

\end_inset

 Facteur d'ajustement de la lecture (ratio pcbFsmplRate/srate).
 
\end_layout

\begin_layout Description
pcbFerrc
\begin_inset Index idx
status open

\begin_layout Plain Layout
pcbFerrc
\end_layout

\end_inset

 Erreur détectée en cours de lecture, ou 0.
 
\end_layout

\begin_layout Description
pcbVSpl0
\begin_inset Index idx
status open

\begin_layout Plain Layout
pcbVSpl0
\end_layout

\end_inset

 volume de sortie appliqué au premier canal de sortie du plug-in.
 Les volumes de 63 autres canaux occupent les adresses mémoires suivantes.
\end_layout

\begin_layout Subsubsection
Notes
\end_layout

\begin_layout Standard
Le début effectif de lecture du fichier audio est décalé, par rapport au
 début du buffer de deux 
\emph on
tuples
\emph default
, soit deux fois le nombre de canaux du fichier.
 Cette zone est mise à zéro.
 Ainsi, un fichier octophonique sera décalé de 2*8 samples.
 Une zone de même taille est ajoutée en fin de fichier.
 Ces valeurs permettent aux procédures d'interpolation de fonctionner correcteme
nt.
\end_layout

\begin_layout Subsection
Le BCB - Buffer Control Block
\begin_inset Index idx
status open

\begin_layout Plain Layout
Buffer Control Block
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le BCB
\begin_inset Index idx
status open

\begin_layout Plain Layout
BCB
\end_layout

\end_inset

 est de taille 128 (constante BCBsize
\begin_inset Index idx
status open

\begin_layout Plain Layout
BCBsize
\end_layout

\end_inset

), contenant un certain nombre de paramètres de contrôle, ainsi que les
 références aux canaux dans lesquels les échantillons vont être écrits.
 Il existe 24 BCB statiquement définis dans la mémoire propre du player.
 Un seul est utilisé lors de la lecture séquentielle d'un clip, plusieurs
 peuvent être utilisés en mode loop.
 Les paramètres de contrôle de la lecture sont les suivants:
\end_layout

\begin_layout Description
bcbTyp
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbTyp
\end_layout

\end_inset

 Type de fonctionnement courant du Player, 0 (mode inactif), ActPlaying
 (jeu continu d'un clip) ou ActLooping (jeu de boucles extraites du clip)
\end_layout

\begin_layout Description
bcbSrcPCB
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbSrcPCB
\end_layout

\end_inset

 Adresse du PCB dont dépend ce BCB.
 A l'heure actuelle
\end_layout

\begin_layout Description
bcbRBuffer
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbRBuffer
\end_layout

\end_inset

 Adresse du buffer de lecture.
 
\end_layout

\begin_layout Description
bcbFSize
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbFSize
\end_layout

\end_inset

 Nombre d'échantillons du buffer
\end_layout

\begin_layout Description
bcbNch
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbNch
\end_layout

\end_inset

 Nombre de canaux du fichier.
\end_layout

\begin_layout Description
bcbRindex
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbRindex
\end_layout

\end_inset

 Index de lecture actuel.
 Cet index peut être fractionnaire.
\end_layout

\begin_layout Description
bcbNIfade
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbNIfade
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbNOfade
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbNOfade
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbSIfade
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbSIfade
\end_layout

\end_inset

 Durée de fade-in en secondes (venue du paramètre p_fadeILpTime
\begin_inset Index idx
status open

\begin_layout Plain Layout
p_fadeILpTime
\end_layout

\end_inset

 ou p_fadeIPlTime
\begin_inset Index idx
status open

\begin_layout Plain Layout
p_fadeIPlTime
\end_layout

\end_inset

 selon le mode de jeu).
\end_layout

\begin_layout Description
bcbSOfade
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbSOfade
\end_layout

\end_inset

 Durée de fade-out en secondes (venue du paramètre p_fadeOPlTime
\begin_inset Index idx
status open

\begin_layout Plain Layout
p_fadeOPlTime
\end_layout

\end_inset

 ou p_fadeOLpTime
\begin_inset Index idx
status open

\begin_layout Plain Layout
p_fadeOLpTime
\end_layout

\end_inset

 selon le mode de jeu).
\end_layout

\begin_layout Description
bcbLLow
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbLLow
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbSLow
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbSLow
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbLHigh
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbLHigh
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbSHigh
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbSHigh
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbSpeed
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbSpeed
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbClSpeed
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbClSpeed
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbClMode
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbClMode
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbGVol
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbGVol
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbLVol
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbLVol
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbRVol
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbRVol
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbSttus
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbSttus
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbFstCh
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbFstCh
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbIncCh
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbIncCh
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbSpl0
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbSpl0
\end_layout

\end_inset


\end_layout

\begin_layout Description
bcbSpl1
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcbSpl1
\end_layout

\end_inset


\end_layout

\begin_layout Section
Opérations
\end_layout

\begin_layout Subsection
Buffer
\end_layout

\begin_layout Standard
Le buffer lui-même est obtenu par une procédure de lecture d'un fichier
 audio, de type wave.
 Un tableau spécifique (
\begin_inset Quotes cld
\end_inset

buffer control bloc
\begin_inset Quotes crd
\end_inset

) représente ce buffer en cours de jeu.
 Cet objet répond aux fonctions suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
BPlayer_init
\begin_inset Index idx
status open

\begin_layout Plain Layout
BPlayer_init()
\end_layout

\end_inset

(bcb,
\begin_inset space ~
\end_inset

buff,
\begin_inset space ~
\end_inset

bsize,
\begin_inset space ~
\end_inset

nbch) Initialisation de l'objet.
 Les paramètres sont l'adresse mémoire du buffer audio, qui peut contenir
 un clip à 
\begin_inset Quotes cld
\end_inset

n
\begin_inset Quotes crd
\end_inset

 canaux, la taille en 
\begin_inset Quotes cld
\end_inset

tuples
\begin_inset Quotes crd
\end_inset

 du buffer, et enfin le nombre de canaux du clip.
 Le nombre d'éléments du buffer est donc égal à 
\begin_inset Formula $bsize\times nbch$
\end_inset

.
 Le clip doit débuter et se terminer par deux tuples initialisés à 0 pour
 permettre une interpolation correcte en début et en fin de lecture.
\end_layout

\begin_layout Description
BPlayer_limits
\begin_inset Index idx
status open

\begin_layout Plain Layout
BPlayer_limits()
\end_layout

\end_inset

(bcb,
\begin_inset space ~
\end_inset

plow,
\begin_inset space ~
\end_inset

phigh) Sélection de bornes basses et hautes du jeu dans le buffer.
 Peut s'effectuer à tout moment, mais implique éventuellement un repositionnemen
t manuel de l'index de lecture.
\end_layout

\begin_layout Description
BPlayer_speed
\begin_inset Index idx
status open

\begin_layout Plain Layout
BPlayer_speed()
\end_layout

\end_inset

(bcb,
\begin_inset space ~
\end_inset

pspeed) Sélection de la vitesse de lecture (bornée, dans [0.1, 4] ou [-4,
 -0.1])
\end_layout

\begin_layout Description
BPlayer_fade
\begin_inset Index idx
status open

\begin_layout Plain Layout
BPlayer_fade()
\end_layout

\end_inset

(bcb,
\begin_inset space ~
\end_inset

pfade) Durée du fade/in, fade out, en ms.
 (de 1ms à 30000 ms).
\end_layout

\begin_layout Description
BPlayer_pan
\begin_inset Index idx
status open

\begin_layout Plain Layout
BPlayer_pan()
\end_layout

\end_inset

(bcb,
\begin_inset space ~
\end_inset

ppan) Réglage du panoramique.
 (de -1 à 1).
\end_layout

\begin_layout Description
BPlayer_play
\begin_inset Index idx
status open

\begin_layout Plain Layout
BPlayer_play()
\end_layout

\end_inset

(bcb) Début de la lecture
\begin_inset space ~
\end_inset

: valide les bornes, la vitesse, positionne l'index de lecture et l'indicateur
 d'état.
\end_layout

\begin_layout Description
BPlayer_stop
\begin_inset Index idx
status open

\begin_layout Plain Layout
BPlayer_stop()
\end_layout

\end_inset

(bcb) Arrêt de la lecture, tenant compte de la durée du fade out.
\end_layout

\begin_layout Description
BPlayer_next
\begin_inset Index idx
status open

\begin_layout Plain Layout
BPlayer_next()
\end_layout

\end_inset

(bcb) Obtention du tuple suivant, par interpolation, tenant compte de la
 vitesse de lecture et des bornes.
 Rend des 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 si hors du mode lecture.
\end_layout

\begin_layout Description
bcb[bcbClSpeed]
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcb[bcbClSpeed]
\end_layout

\end_inset

 Vitesse effective de lecture.
 Peut être modifiée à n'importe quel moment.
\end_layout

\begin_layout Description
bcb[bcbStatus]
\begin_inset Index idx
status open

\begin_layout Plain Layout
bcb[bcbStatus]
\end_layout

\end_inset

 Statut du lecteur : 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 à l'arrêt, 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 en cours de lecture.
\end_layout

\begin_layout Subsection
Lecteur
\end_layout

\begin_layout Standard
Un lecteur va être associé à un fichier disque et une zone mémoire, qui
 va devenir un buffer.
 Un reader est représenté par un objet spécifique, avec les méthodes suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
aReader.BReader_init() Initialisation de l'objet.
\end_layout

\begin_layout Description
aReader.BReader_set(buff,
\begin_inset space ~
\end_inset

m_avail,
\begin_inset space ~
\end_inset

num) Ouverture d'un fichier disque, à partir d'un numéro, 
\begin_inset Quotes cld
\end_inset

num
\begin_inset Quotes crd
\end_inset

.
 Ce fichier sera lu à l'adresse mémoire 
\begin_inset Quotes cld
\end_inset

buff
\begin_inset Quotes crd
\end_inset

, la taille mémoire disponible étant transmise dans 
\begin_inset Quotes cld
\end_inset

m_avail
\begin_inset Quotes crd
\end_inset

.
 Le nom du fichier lu est dérivé du numéro par édition de ce numéro au travers
 du format défini par la variable 
\begin_inset Quotes cld
\end_inset

#clNameFormat
\begin_inset Quotes crd
\end_inset

, qui vaut, par exemple, 
\family typewriter
"WAVES/clip1%04d.wav"
\family default
.
 Ainsi, ouvrir le fichier de numéro 
\begin_inset Quotes cld
\end_inset

23
\begin_inset Quotes crd
\end_inset

 va ouvrir le fichier de nom 
\family typewriter
"WAVES/clip10023.wav"
\family default
.
 Le résultat est le statut, 
\begin_inset Quotes cld
\end_inset

1
\begin_inset Quotes crd
\end_inset

 si la lecture a réussi, 
\begin_inset Quotes cld
\end_inset

0
\begin_inset Quotes crd
\end_inset

 en cas d'échec.
 Dans ce dernier cas, la variable 
\begin_inset Quotes cld
\end_inset

aReader.errc
\begin_inset Quotes crd
\end_inset

 contient le code d'erreur.
 
\end_layout

\begin_deeper
\begin_layout Standard
On peut alors créer un (ou plusieurs) buffers de lecture, par l'appel 
\begin_inset Quotes cld
\end_inset

aBuff.BPlayer_init(cf.fbuff, cf.frmax, cf.fnch);
\begin_inset Quotes crd
\end_inset

.
 Chacun des ces buffers pourra voir ses bornes modifiées, être lu à des
 vitesses différentes, etc.
 
\end_layout

\end_deeper
\begin_layout Subsection
Mise en place d'une lecture
\end_layout

\begin_layout Standard
A tout plug-in de type 
\begin_inset Quotes cld
\end_inset

lecteur
\begin_inset Quotes crd
\end_inset

 est associé un bloc de contrôle, situé en mémoire partagée, et obtenu dynamique
ment (le plug-in va en fait s'allouer un UCB de 256 mots, parmi les 64 disponibl
es, créés statiquement).
 Un plug-in externe (écrit en JSFX) peut remplir ce bloc et lancer une lecture
 sur le lecteur.
\end_layout

\begin_layout Standard
Dans les codes, la variable 
\begin_inset Quotes cld
\end_inset

UAdd
\begin_inset Quotes crd
\end_inset

 contient toujours l'adresse du bloc de contrôle de l'unité en mémoire partagée.
\end_layout

\begin_layout Subsection
Paramètres de lecture
\end_layout

\begin_layout Standard
Les paramètres sont désignés par des constantes, nombres entiers compris
 entre 1 et 36, définis par les constantes 
\begin_inset Quotes cld
\end_inset

cbP1
\begin_inset Quotes crd
\end_inset

 à 
\begin_inset Quotes cld
\end_inset

cbP36
\begin_inset Quotes crd
\end_inset

.
 Certains paramètres ont en outre un nom plus explicite, de la forme 
\begin_inset Quotes cld
\end_inset

cbP_ident
\begin_inset Quotes crd
\end_inset

.
 La valeur d'un paramètre peut donc être obtenue par 
\begin_inset Quotes cld
\end_inset

gmem[UAdd+cpPxxx]
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Standard
Un paramètre peut être défini ou non.
 S'il est indéfini, sa valeur est égale à 0, et le lecteur va lui attribuer
 un valeur par défaut.
 Si il est défini, sa valeur effective est 
\begin_inset Quotes cld
\end_inset

gmem[UAdd+cpPxxx]-cKOffset
\begin_inset Quotes crd
\end_inset

, 
\begin_inset Quotes cld
\end_inset

cKOffset
\begin_inset Quotes crd
\end_inset

 étant une constante fixe prédéfinie.
\end_layout

\begin_layout Section
Déroulé d'une lecture
\end_layout

\begin_layout Standard
Le plug-in, dans le bloc 
\begin_inset Quotes cld
\end_inset

@sample
\begin_inset Quotes crd
\end_inset

, teste si une commande a été transmise au plug-in (le premier mot du bloc
 de contrôle est la commande, avec une valeur différente de 0).
 Dans le cas d'un ordre de lecture, les autres mots du bloc contiennent
 des informations permettant de déterminer le fichier à lire, les paramètres
 de cette lecture, etc.
\end_layout

\begin_layout Paragraph*
Phase1
\end_layout

\begin_layout Standard
Copie de l'UCB (en gmem) dans le PCB, à PCBrdAdd.
 (inutilisé).
 Vérification du numéro de clip,
\end_layout

\begin_layout Paragraph*
Phase2
\end_layout

\begin_layout Standard
Ouverture du fichier.
 Récupération des infos.
 
\end_layout

\begin_layout Paragraph*
Phase3
\end_layout

\begin_layout Standard
[cycle]lecture du bloc suivant.
 1 bloc à chaque exec de @block.
\end_layout

\begin_layout Paragraph*
Play
\end_layout

\begin_layout Standard
appel de checkRCB.
\end_layout

\begin_layout Section
Flags de modification des lectures
\end_layout

\begin_layout Standard
Les flags 
\begin_inset Quotes xld
\end_inset


\family typewriter
PBFlgs
\family default

\begin_inset Quotes xrd
\end_inset

 jouent un rôle important dans le jeu des players.
 Ils ont la signification suivante
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
0x00000001 FLdoForceIntegral : jouer le clip dans son intégralité, quelle
 que soit sa longueur
\end_layout

\begin_layout Description
0x00000002 FLdoForceFadesSL : forcer un short fade-in et un long fade out
\end_layout

\begin_layout Description
0x00000004 FLdoForceSpeed1 : jouer à la vitesse 1
\end_layout

\begin_layout Description
0x00000008 FLdoForcePFS : jouer depuis le début
\end_layout

\begin_layout Description
0x00000010 FLdoForceFChs : ne pas brasser les canaux de sortie
\end_layout

\begin_layout Description
0x00000020 FLdoForceVol : jouer à volume fixe
\end_layout

\begin_layout Description
0x00000040 FLdoForceKeep : maintenir le clip en jeu
\end_layout

\begin_layout Description
0x00000040 FlgnoInterrupt
\end_layout

\begin_layout Description
0x00000080 FLdoForceChCnt : utiliser un HP différent pour chaque canal du
 clip
\end_layout

\begin_layout Description
0x00000100 FLdoClipRpeat : forcer la répétition du clip
\end_layout

\begin_layout Description
0x00080000 FLdoForceLock : play & lock the clip
\end_layout

\begin_layout Description
0x00100000 FLdoForcePlay : forcer le mode play
\end_layout

\begin_layout Description
0x00200000 FLdoForceLoop : forcer le mode loop
\end_layout

\begin_layout Description
0x00400000 FLdoForceRead : forcer le mode 
\begin_inset Quotes xld
\end_inset

read
\begin_inset Quotes xrd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Quotes xld
\end_inset


\family typewriter
PBFlgs
\family default

\begin_inset Quotes xrd
\end_inset

 est transmis dans le champ 
\begin_inset Quotes xld
\end_inset

RCB_PBFlgs
\begin_inset Quotes xrd
\end_inset

 du RCB.
 Il est lui-même défini comme un 
\begin_inset Quotes xld
\end_inset

ou
\begin_inset Quotes xrd
\end_inset

 des valeurs suivantes
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
xflgs troisième paramètre de la fonction jsfx 
\begin_inset Quotes xld
\end_inset

doPlayClip
\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Description
idx_Pa_PBFlgs champ du 
\emph on
partiel
\emph default
 utilisé comme base dans 
\begin_inset Quotes xld
\end_inset

doPlayClip
\begin_inset Quotes xrd
\end_inset

.
 Le mot-clef correspondant dans le fichier de définition est 
\begin_inset Quotes xld
\end_inset


\family typewriter
PBFlgs
\family default

\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Description
idx_Sm_HPFlags champ du mode de jeu utilisé comme base dans 
\begin_inset Quotes xld
\end_inset

doPlayClip
\begin_inset Quotes xrd
\end_inset

.
 Le mot-clef correspondant dans le fichier de définition est 
\begin_inset Quotes xld
\end_inset


\family typewriter
HPFlags
\family default

\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Chapter
De quelques algorithmes
\end_layout

\begin_layout Section
La procédure 
\begin_inset Quotes cld
\end_inset

SetTable
\begin_inset Index idx
status open

\begin_layout Plain Layout
SetTable
\end_layout

\end_inset


\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Cette procédure est un analyseur syntaxique, dont le rôle est de prendre
 une entrée (un bloc mémoire de nombres), et de construire à partir des
 valeurs rencontrés certaines structures utilisées par le logiciel.
 Son appel est le suivant
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
settable(bloc);
\end_layout

\begin_layout Standard
Le paramètre est un bloc, qui est typiquement construit par un 
\begin_inset Quotes cld
\end_inset


\family typewriter
data
\family default

\begin_inset Quotes crd
\end_inset

.
 Ex
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
settable(data(
\end_layout

\begin_layout LyX-Code
    Table
\begin_inset Index idx
status open

\begin_layout Plain Layout
Table
\end_layout

\end_inset

 Sensors Clear
\end_layout

\begin_layout LyX-Code
    MMode 0
\end_layout

\begin_layout LyX-Code
        Enter  324  3   323  7
\end_layout

\begin_layout LyX-Code
        DefSeq  1  DoKmd  324  9  350 7100
\end_layout

\begin_layout LyX-Code
        DefSeq  2  DoKmd  335  0.5  349  7100
\end_layout

\begin_layout LyX-Code
        DefSeq  3  DoKmd  301  334  60  0  302
\end_layout

\begin_layout LyX-Code
    MMode 1
\end_layout

\begin_layout LyX-Code
        DefSeq  1  DoKmd  350, 3001
\end_layout

\begin_layout LyX-Code
    End
\end_layout

\begin_layout LyX-Code
));
\end_layout

\begin_layout Standard
L'analyse est basée sur un simple automate à états fini, dans la mesure
 où toutes les structures de tables utilisées sont simples et non récursives.
\end_layout

\begin_layout Standard
Un préambule est constitué par une séquence
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
Table 
\begin_inset Quotes cld
\end_inset

nom de table
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Standard
Il est suivi d'une description du contenu, compatible avec les syntaxes
 initiales adoptées pour les différentes tables.
 Il peut être judicieux d'ajouter 
\begin_inset Quotes cld
\end_inset


\family typewriter
Clear
\family default

\begin_inset Quotes crd
\end_inset

 après le nom de la table si l'on veut s'assurer que celle-ci est vierge
 de tout contenu.
 
\end_layout

\begin_layout Standard
A noter que les commentaires ne sont pas introduits par 
\begin_inset Quotes cld
\end_inset


\family typewriter
;
\family default

\begin_inset Quotes crd
\end_inset

, mais sont du type 
\begin_inset Quotes cld
\end_inset

C
\begin_inset Quotes crd
\end_inset

, c'est-à dire 
\begin_inset Quotes cld
\end_inset


\family typewriter
//
\family default

\begin_inset Quotes crd
\end_inset

 pour un commentaire de fin de ligne, et 
\begin_inset Quotes cld
\end_inset


\family typewriter
/*
\family default

\begin_inset Quotes crd
\end_inset

 et 
\begin_inset Quotes cld
\end_inset


\family typewriter
*/
\family default

\begin_inset Quotes crd
\end_inset

 pour un commentaire de plusieurs lignes.
\end_layout

\begin_layout Standard
Une description se termine en général par une indication de fin
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
End
\end_layout

\begin_layout Standard
La procédure admet la description consécutive de plusieurs tables, chacune
 encadrée par 
\begin_inset Quotes cld
\end_inset


\family typewriter
Table
\family default

\begin_inset Quotes crd
\end_inset

 ...
 
\begin_inset Quotes cld
\end_inset


\family typewriter
End
\family default

\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Chapter
Implantation
\end_layout

\begin_layout Section
Mémoire 
\begin_inset Quotes cld
\end_inset

centrale
\begin_inset Quotes crd
\end_inset

 du Game Master
\end_layout

\begin_layout Subsection
Organisation (avril 2023)
\end_layout

\begin_layout Standard
La mémoire centrale (de taille 33554432 mots, soit 32M) est organisée de
 la manière suivante.
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
SharedLowMemory
\end_layout

\end_inset

SharedLowMemory (1024) [0 => 1023] En grande partie inutilisée.
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
SerialBlock
\end_layout

\end_inset

SerialBlock (12288) [1024 => 13311] Table de preset.
 Ce qui est lu et écrit lors d'un load/save de preset.
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
savedStrings
\end_layout

\end_inset

savedStrings (128) [13312 => ] Tableau de 128 pointeurs vers des chaînes
 permanentes, sauvées et restituées avec le preset.
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
clipsWorkArea
\end_layout

\end_inset

clipsWorkArea (10000) [13440 => 23439] Tableau de travail pour les opérations
 sur 
\begin_inset Quotes xld
\end_inset

sets
\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
smallPrimeList
\end_layout

\end_inset

smallPrimeList (64) [23440 => ] Une petite liste de nombres premiers entre
 10000 et 20000.
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
smallWA1Size
\end_layout

\end_inset

smallWA1Size (192) [23504 => ] Une petite zone de travail
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_StM_Start
\end_layout

\end_inset

mSL_StM_Start [23696 => ] Début de la zone gérée par la gestion de mémoire
 statique
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_Str_Use
\end_layout

\end_inset

mSL_Str_Use [23699 => ] Zone utilisée par la gestion dynamique des chaînes
 de caractères.
 Chaînes de numéros 90000 à 99999.
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
mSL_Str_Remanent
\end_layout

\end_inset

mSL_Str_Remanent [43707 => ] Zone utilisée pour noter les chaînes rémanentes
 (GC protected)
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
ui_lib_start
\end_layout

\end_inset

ui_lib_start [ 45707 => 48645] Zone utilisée par 
\begin_inset Quotes xld
\end_inset

ui_lib
\begin_inset Quotes xrd
\end_inset


\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
ui_jled_def_menu
\end_layout

\end_inset

ui_jled_def_menu [48649 => ] Début de la zone utilisée par les éléments
 graphiques 
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
TabAddrMin
\end_layout

\end_inset

TabAddrMin [288481] Première adresse mémoire pouvant être considérée comme
 un 
\begin_inset Quotes xld
\end_inset

tableau
\begin_inset Quotes xrd
\end_inset

 au sens mSL.
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
Tables système
\end_layout

\end_inset

Tables
\begin_inset space ~
\end_inset

système [ => ] Tables du système.
 MIDI.
 Liens Actions.
 Senseurs.
 Macros.
 Actions.
 Paramètres.
 Menus.
 Scheduler.
 Statistiques.
 Displayable Blocks.
 Clips infos.
 Playmodes.
 HP.
 
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
gc_MMA
\end_layout

\end_inset

gc_MMA [471501] Début des tables utilisées par la gestion mémoire dynamique
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
C_compArea
\end_layout

\end_inset

C_compArea [635920 => ] Utilisée par le compilateur (32*1024)
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
ProgArea
\end_layout

\end_inset

ProgArea [668692 => ] Utilisée par le compilateur (32*1024)
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
MemrArea
\end_layout

\end_inset

MemrArea [701470 => 30061602] Zone de la mémoire dynamique (28 Mo).
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
A_mSL_GCTab
\end_layout

\end_inset

A_mSL_GCTab [30061609 => ] Main compiler symbol table 
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
A_mSL_LCTab
\end_layout

\end_inset

A_mSL_LCTab [30074873 => ] Main compiler local symbol table 
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
mm_highblocks
\end_layout

\end_inset

mm_highblocks [30075654] End of blocks with memory references
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
scripts_tab
\end_layout

\end_inset

scripts_tab [28985955] Array containing the names of external mSL scripts
 found (size: 512)
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
configs_tab
\end_layout

\end_inset

configs_tab [28986467] Array containing the name of referenced text files
 (size: 256)
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
debugDispl
\end_layout

\end_inset

debugDispl [26986762] Array used for debug - 128.
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
TabAddrMax
\end_layout

\end_inset

TabAddrMax [30086629] Dernière adresse mémoire pouvant être considérée comme
 un 
\begin_inset Quotes xld
\end_inset

tableau
\begin_inset Quotes xrd
\end_inset

 au sens mSL.
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
SharedHighMemory
\end_layout

\end_inset

SharedHighMemory [30086791] Dernière mémoire allouée/utilisée
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
SharedHighMemorySize
\end_layout

\end_inset

SharedHighMemorySize [3426680] Mémoire encore inutilisée dans cett version
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
Memtop
\end_layout

\end_inset

Memtop [33554432] Taille de la mémoire JSFX
\end_layout

\begin_layout Section
Mémoire partagée du Game Master
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
playLogStrt
\end_layout

\end_inset

playLogStrt [83360 => 738720] : 8192 entrées de 80 mots.
 Copie des UCB des clips joués.
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
gMemFree
\end_layout

\end_inset

gMemFree : 738720
\end_layout

\begin_layout Description
\begin_inset Index idx
status open

\begin_layout Plain Layout
gMemLimit
\end_layout

\end_inset

gMemLimit : 8388608 : 8Mo.
 Taille de la mémoire partagée
\end_layout

\begin_layout Chapter
Sauvegarde des Présets
\begin_inset Index idx
status open

\begin_layout Plain Layout
Présets
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Une zone mémoire est prévue pour la sauvegarde des présets.
 Elle débute a l'adresse 
\begin_inset Quotes xld
\end_inset

serialBlock
\begin_inset Quotes xrd
\end_inset

 [1024] et est de taille 
\begin_inset Quotes xld
\end_inset

serialSize = 12288
\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Paragraph*
Subblock 0 - 8 mots
\end_layout

\begin_layout Standard
Contient le numéro de version, une sécurité, et 6 infos (non utilisées)
 sur le préset lui-même.
\end_layout

\begin_layout Paragraph*
Subblock 1 - 120 mots
\end_layout

\begin_layout Standard
Contient des sauvegardes de différentes variables
\end_layout

\begin_layout Paragraph*
Subblock 2 - 384 mots
\end_layout

\begin_layout Standard
Actuellement inutilisé
\end_layout

\begin_layout Paragraph*
Subblock 3 - 512 mots
\end_layout

\begin_layout Standard
Sauvegarde de tous les paramètres du 
\begin_inset Quotes xld
\end_inset

Studio Play Pad
\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Paragraph*
Subblock 4 - 1024 mots
\end_layout

\begin_layout Standard
Sauvegarde des 8 blocks (de 128 mots) décrivant les affichages des sliders.
\end_layout

\begin_layout Chapter
Le Play Log
\end_layout

\begin_layout Standard
L'idée du 
\begin_inset Quotes xld
\end_inset

Play Log
\begin_inset Quotes xrd
\end_inset

 est de sauvegarder les 
\begin_inset Quotes xld
\end_inset

sons figés
\begin_inset Quotes xrd
\end_inset

, c'est-à-dire la recette la plus fidèle possible aboutissant à la génération
 d'un son spécifique par un player donné.
 Pour ceci, on sauvegarde l'ensemble des paramètres transmis au player,
 ainsi que la 
\begin_inset Quotes xld
\end_inset

graine
\begin_inset Quotes xrd
\end_inset

 des aléas utilisés pour la détermination de certaines des caractéristiques
 de la gestion du son.
\end_layout

\begin_layout Section
Structure d'un 
\begin_inset Quotes xld
\end_inset

son figé
\begin_inset Quotes xrd
\end_inset


\end_layout

\begin_layout Standard
Le son figé a la structure suivante:
\end_layout

\begin_layout LyX-Code
RCB_Size = 80;
\end_layout

\begin_layout LyX-Code
plIDNT = 'fsnd'; // frozen sound identification
\end_layout

\begin_layout LyX-Code
// Size of the RCB block 
\end_layout

\begin_layout LyX-Code
0 \SpecialChar menuseparator
 
\end_layout

\begin_layout LyX-Code
RCM_Mode = RCB_FSND = idxpt = 0; // constant 'fsnd' 
\end_layout

\begin_layout LyX-Code
1 \SpecialChar menuseparator
 
\end_layout

\begin_layout LyX-Code
RCB_Rec_Entry = RCB_RefCnt = (idxpt += 1); // Reference couter 
\end_layout

\begin_layout LyX-Code
playLogHdrSize = idxpt + 1; // specific HDR in gmem 
\end_layout

\begin_layout LyX-Code
playLogCopySize = RCB_Size - playLogHdrSize; // size of infos to save
\end_layout

\begin_layout LyX-Code
2 \SpecialChar menuseparator
 
\end_layout

\begin_layout LyX-Code
RCB_Kmd = (idxpt += 1) = 0; // # command for unit
\end_layout

\begin_layout LyX-Code
3 \SpecialChar menuseparator
 
\end_layout

\begin_layout LyX-Code
RCB_KFlgs = (idxpt += 1); // # Flags for the command
\end_layout

\begin_layout LyX-Code
4 \SpecialChar menuseparator
 
\end_layout

\begin_layout LyX-Code
RCB_Random_seed = (idxpt += 1); // seed for random number when starting.
\end_layout

\begin_layout LyX-Code
RCB_ClipLoop = (idxpt += 1); // Clip Flags : loop, mute, etc.
\end_layout

\begin_layout LyX-Code
// Some useful data
\end_layout

\begin_layout LyX-Code
RCB_ClipNb = (idxpt += 1); // # Clip Number to read
\end_layout

\begin_layout LyX-Code
7 \SpecialChar menuseparator

\end_layout

\begin_layout LyX-Code
// Play conditions
\end_layout

\begin_layout LyX-Code
RCB_SpeedAbs_u = (idxpt += 1); // # "Absolute" Play Speed
\end_layout

\begin_layout LyX-Code
RCB_SpeedMod1_u = (idxpt += 1); // # Speed Modifier 1
\end_layout

\begin_layout LyX-Code
RCB_Transpose_u = (idxpt += 1); // # Speed transpose
\end_layout

\begin_layout LyX-Code
RCB_VolumeTarget_dB = (idxpt += 1); // "Target" Volume
\end_layout

\begin_layout LyX-Code
RCB_StdVol = (idxpt += 1); // std clip playing volume
\end_layout

\begin_layout LyX-Code
12 \SpecialChar menuseparator

\end_layout

\begin_layout LyX-Code
// Volume
\end_layout

\begin_layout LyX-Code
RCB_VolBias = (idxpt += 1); // volume change coefficiant
\end_layout

\begin_layout LyX-Code
RCB_VolumeMod1_u = (idxpt += 1); // Volume Modifier 1
\end_layout

\begin_layout LyX-Code
RCB_VolumeMin_dB = (idxpt += 1); // Volume low value
\end_layout

\begin_layout LyX-Code
RCB_VolumeMax_dB = (idxpt += 1); // Volume high value
\end_layout

\begin_layout LyX-Code
RCB_FadeIn_ms = (idxpt += 1); // # Fade-in in milliseconds
\end_layout

\begin_layout LyX-Code
RCB_FadeOut_ms = (idxpt += 1); // # Fade-out in milliseconds
\end_layout

\begin_layout LyX-Code
RCB_PlayTime_sec = (idxpt += 1); // # Play Time in seconds
\end_layout

\begin_layout LyX-Code
19 \SpecialChar menuseparator

\end_layout

\begin_layout LyX-Code
// Looper Add.
 infos
\end_layout

\begin_layout LyX-Code
RCB_GrAlgo_enu = (idxpt += 1); // # Looper Algorithm
\end_layout

\begin_layout LyX-Code
RCB_GrAPar1_v = (idxpt += 1); // # Looper Algorithm Parameter 1
\end_layout

\begin_layout LyX-Code
RCB_MinGrains_ms = (idxpt += 1); // # Min.
 Grains duration, milliseconds
\end_layout

\begin_layout LyX-Code
RCB_MaxGrains_ms = (idxpt += 1); // # Max.
 Grains duration, milliseconds
\end_layout

\begin_layout LyX-Code
RCB_MinNGrains_u = (idxpt += 1); // # Min.
 Grains depth
\end_layout

\begin_layout LyX-Code
RCB_MaxNGrains_u = (idxpt += 1); // # Max.
 Grains depth
\end_layout

\begin_layout LyX-Code
RCB_GrFdIn_ms = (idxpt += 1); // # Grains Fade-in in milliseconds
\end_layout

\begin_layout LyX-Code
RCB_GrFdOut_ms = (idxpt += 1); // # Grains Fade-Out in milliseconds
\end_layout

\begin_layout LyX-Code
RCB_PlayTime = (idxpt += 1); // Clip play duration
\end_layout

\begin_layout LyX-Code
28 \SpecialChar menuseparator

\end_layout

\begin_layout LyX-Code
// Output Channels
\end_layout

\begin_layout LyX-Code
RCB_Channels_cnt_tot = (idxpt += 1); // # Number of total defined out channels
\end_layout

\begin_layout LyX-Code
RCB_Channels_cnt_used = (idxpt += 1); // # Number of used output channels
\end_layout

\begin_layout LyX-Code
RCB_Channels_cnt_min = (idxpt += 1); // # min Number of output channels
 to use
\end_layout

\begin_layout LyX-Code
RCB_Channels_cnt_max = (idxpt += 1); // # max Number of output channels
 to use
\end_layout

\begin_layout LyX-Code
RCB_Channels_flgs = (idxpt += 1); // # Flags for output channels
\end_layout

\begin_layout LyX-Code
RCB_Channels_density = (idxpt += 1); // # Density asked for output channels
\end_layout

\begin_layout LyX-Code
RCB_ChSet1_set = (idxpt += 1); // # Output channels Set 1
\end_layout

\begin_layout LyX-Code
RCB_ChSet2_set = (idxpt += 1); // # Output channels Set 2
\end_layout

\begin_layout LyX-Code
RCB_ChSet3_set = (idxpt += 1); // # Output channels Set 3
\end_layout

\begin_layout LyX-Code
RCB_ChSet4_set = (idxpt += 1); // # Output channels Set 4
\end_layout

\begin_layout LyX-Code
RCB_Channels_conf = (idxpt += 1); // channels configuration
\end_layout

\begin_layout LyX-Code
RCB_Synchro_source = (idxpt += 1); // source for synchronisation
\end_layout

\begin_layout LyX-Code
40 \SpecialChar menuseparator

\end_layout

\begin_layout LyX-Code
// Some infos, actually unused
\end_layout

\begin_layout LyX-Code
RCB_Serial = (idxpt += 1); // this play number [session relative]
\end_layout

\begin_layout LyX-Code
// Other unnecessary informations Sent, but currently unused
\end_layout

\begin_layout LyX-Code
RCB_CGrp_nbr = (idxpt += 1); // Clip Group Number
\end_layout

\begin_layout LyX-Code
RCB_CBnk_nbr = (idxpt += 1); // Clip Bank Number
\end_layout

\begin_layout LyX-Code
RCB_CPart_nbr = (idxpt += 1); // Clip Partial Number
\end_layout

\begin_layout LyX-Code
RCB_CPlMd_nbr = (idxpt += 1); // Clip Play Mode
\end_layout

\begin_layout LyX-Code
RCB_CSpMd_nbr = (idxpt += 1); // Clip space Mode
\end_layout

\begin_layout LyX-Code
RCB_PlaySource = (idxpt += 1); // detailed play command
\end_layout

\begin_layout Standard
There are currently 45 values used, some may be added later.
\end_layout

\begin_layout Standard
Le 
\begin_inset Quotes xld
\end_inset

son figé
\begin_inset Quotes xrd
\end_inset

 a un header de 16 mots, utilisé pour le chaînage des informations
\end_layout

\begin_layout LyX-Code
plIDNT = 'fsnd'; // frozen sound
\end_layout

\begin_layout LyX-Code
playLogHdrSize = 16; // Size of the header
\end_layout

\begin_layout LyX-Code
playLogESize = RCB_Size + playLogHdrSize;  // therefore 96 words
\end_layout

\begin_layout LyX-Code
plocksize = 8;
\end_layout

\begin_layout LyX-Code
idx = -1;
\end_layout

\begin_layout LyX-Code
plockidt = (idx += 1); // 'fsnd'
\end_layout

\begin_layout LyX-Code
plockfwd = (idx += 1); // pointer to next frozen sound
\end_layout

\begin_layout LyX-Code
plockbwd = (idx += 1); // pointer to previous frozen sound
\end_layout

\begin_layout LyX-Code
plockstrt = (idx += 1); // date of start of sound (seconds, decimal)
\end_layout

\begin_layout LyX-Code
plockdur = (idx += 1); // duration of sound (seconds, decimal)
\end_layout

\begin_layout LyX-Code
plockfskod = (idx += 1); // code of the FS [index : 32 bits, position :
 16 bits] (?)
\end_layout

\begin_layout LyX-Code
plockflgs = (idx += 1); // associated flags (solo, mute, etc.)
\end_layout

\begin_layout LyX-Code
plockdelta = (idx += 1); // delta time for start of sound
\end_layout

\begin_layout Section
Utilisation
\end_layout

\begin_layout Standard
Lorsqu'un son est lancé, par 
\begin_inset Quotes xld
\end_inset

doPlayClip
\begin_inset Quotes xrd
\end_inset

, et si l'on est en mode 
\begin_inset Quotes xld
\end_inset

enregistrement
\begin_inset Quotes xrd
\end_inset

, 
\begin_inset Quotes xld
\end_inset

GPlUnit
\begin_inset Quotes xrd
\end_inset

 est l'adresse en 
\emph on
gmem
\emph default
 du bloc associé au player choisi.
\end_layout

\begin_layout Standard
RCB_Size = 80; Infos utiles au player pour déterminer un son.
\end_layout

\begin_layout Standard
RCB_ActualSize = 239; Taille utilisée pour la zone de travail du player
\end_layout

\begin_layout Standard
UGAddr = 0x300; adresse du premier bloc de travail
\end_layout

\begin_layout Standard
UCBSize = 256+16; Taille de chaque bloc de travail
\end_layout

\begin_layout Standard
uCnt = 80; Nombre de blocs de travail: unit count
\end_layout

\begin_layout Standard
UCBparHCnt = 251; utilisé de là à UCBSize-1 => 239 à 251 libres.
\end_layout

\begin_layout Standard
playLogHdrSize = 2
\end_layout

\begin_layout Standard
playLogESize = RCB_Size; 80
\end_layout

\begin_layout Standard
playLogStrt = gMemFree; // now: 94600
\end_layout

\begin_layout Standard
playLogEcnt = 65536
\end_layout

\begin_layout Standard
playLogMaxCnt = 86395
\end_layout

\begin_layout Standard
playLogLimit = 6386056
\end_layout

\begin_layout Standard
playLogSize = 6142956
\end_layout

\begin_layout Chapter
Réflexions
\end_layout

\begin_layout Quote

\emph on
Un endroit où je place des notes informelles...
 Maintenant organisé à la manière d'un blog...
\end_layout

\begin_layout Section*
23-04-2023.
 Extensions
\end_layout

\begin_layout Standard
Revoir le script auxiliaire .eel.
 Réfléchir à l'idée d'avoir d'autres scripts spécialisés, avec lesquels
 le GM puisse communiquer.
 Envoyer des séquences de commandes à un script.
\end_layout

\begin_layout Standard
Dans la gestion des menus, permettre avec la séquence 
\begin_inset Quotes xld
\end_inset


\family typewriter
&~
\family default

\begin_inset Quotes xrd
\end_inset

 l'utilisation de lignes ne s'affichant pas, puis pouvoir rajouter des étiquette
s dans ces lignes, et enfin retrier cette partie spécifique du menu.
\end_layout

\begin_layout Section*
16-04-2023.
 Progression
\end_layout

\begin_layout Standard
Quelques points d'avancée du GM.
\end_layout

\begin_layout Itemize
JSFX MIDIduino.
 Correspond à une version mise à jour de l'interface d'entrée MIDI, qui
 va permettre d'utiliser à la fois le module Arduino de gestion des capteurs,
 et n'importe quel clavier MIDI, pour déclencher les capteurs.
 On a alors l'équivalence: Do\SpecialChar menuseparator
Capteur 1, Do#\SpecialChar menuseparator
Capteur 2, Ré\SpecialChar menuseparator
Capteur 3, Ré#\SpecialChar menuseparator
Capteur
 4, etc.
\end_layout

\begin_layout Itemize
Gestion quasi complète des événements inter process (énorme travail).
 Une action, 
\begin_inset Quotes xld
\end_inset

Notify
\begin_inset Quotes xrd
\end_inset

, permet d'envoyer un message à un script mSL.
 Elle est utilisée, dans la description des capteurs, pour envoyer un message
 à un script mSL lorsqu'un capteur est activé.
 
\end_layout

\begin_layout Itemize
Introduction des événements dans mSL (énorme travail).
 Un script mSL peut envoyer un événement à un autre script, se mettre en
 attente sur un événement.
 Nouvelles primitives: 
\family typewriter
event
\family default
, 
\family typewriter
memcpy
\family default
.
 Nombreux développements dans 
\family typewriter
play
\family default
, 
\family typewriter
thread
\family default
, 
\family typewriter
wait
\family default
 et l'interprète mSL.
\end_layout

\begin_layout Itemize
Introduction de l'accès à certaines fonctions et variables JSFX (gros travail
 aussi): 
\family typewriter
call(`fname)
\family default
, 
\family typewriter
get(`JSFX, `variable)
\family default
 et 
\family typewriter
set(`JSFX, `variable, valeur)
\family default
;
\end_layout

\begin_layout Standard
Besoin: pour Chazelles, une session avec les diverses séquences images que
 JFM montées, la liste des clips 
\begin_inset Quotes xld
\end_inset

courts
\begin_inset Quotes xrd
\end_inset

 et 
\begin_inset Quotes xld
\end_inset

longs
\begin_inset Quotes xrd
\end_inset

.
 
\end_layout

\begin_layout Section*
15-04-2023.
 Utilisation des HP
\end_layout

\begin_layout Standard
Une approche possible à une utilisation 
\begin_inset Quotes xld
\end_inset

plus subtile
\begin_inset Quotes xrd
\end_inset

 des HP est la suivante:
\end_layout

\begin_layout Standard
Le GM suit l'utilisation des HP pour permettre de déterminer ceux qui sont
 le plus/le moins récemment utilisés.
 Pour ce faire, il dispose d'un tableau à 64 (ou 128) entrées, toutes initialisé
es à 0.
 A intervalles réguliers (ex: seconde), il ajoute 1 à chacune de ces valeurs.
 Dans le même temps, les Players, chaque fois qu'ils jouent un clip, remettent
 à 0 les entrées correspondant aux HP utilisés.
 Une entrée du tableau à valeur élevée indique donc que le HP n'a pas été
 utilisé depuis longtemps, une entrée à valeur faible indique qu'il a récemment
 été utilisé.
 Soit HPU ce tableau.
\end_layout

\begin_layout Standard
Imaginons maintenant les contraintes 
\begin_inset Quotes xld
\end_inset

Chazelles
\begin_inset Quotes xrd
\end_inset

.
 On veut, sur un laps de temps donné, jouer sur des paires de HP (numérotés
 de 1 à 14), HP dont on va représenter la contiguïté par la succession de
 nombres [0 à 14], considérée comme une séquence circulaire, avec un gap
 entre 14 et 1 représenté par la valeur 0.
 Dans la même idée, une octophonie circulaire serait représentée par la
 séquence [1 à 8], sans gap cette fois puisqu'il n'y a pas de discontinuité
 entre 8 et 1.
\end_layout

\begin_layout Standard
On a aussi le concept de 
\begin_inset Quotes xld
\end_inset

salve
\begin_inset Quotes xrd
\end_inset

 qui nous dit que plusieurs clips peuvent être lancés en même temps s'ils
 respectent certains critères de proximité.
\end_layout

\begin_layout Standard
On décide que l'on veut jouer des clips stéréos sur des paires de HP, avec,
 entre 2 HP, 0, 1 ou 2 HP inutilisés, et que les deux HP autour de ceux-ci
 devront rester inutilisés.
 Décidons de représenter ces 3 patterns par les schémas: 
\begin_inset Quotes xld
\end_inset

OOXXOO
\begin_inset Quotes xrd
\end_inset

, 
\begin_inset Quotes xld
\end_inset

OOXOXOO
\begin_inset Quotes xrd
\end_inset

 et 
\begin_inset Quotes xld
\end_inset

OOXOOXOO
\begin_inset Quotes xrd
\end_inset

.
 Les 
\begin_inset Quotes xld
\end_inset

X
\begin_inset Quotes xrd
\end_inset

 représentent les HP qui vont jouer, les 
\begin_inset Quotes xld
\end_inset

O
\begin_inset Quotes xrd
\end_inset

 des HP qui devront rester silencieux.
\end_layout

\begin_layout Standard
Un HP pourra jouer si sa valeur 
\begin_inset Quotes xld
\end_inset

d'inutilisation
\begin_inset Quotes xrd
\end_inset

 est par exemple plus grande que 10.
 
\end_layout

\begin_layout Standard
Prenons une copie instantanée de HPU, dite CHPU.
 Imaginons que toutes les valeurs soient égales à 12 dans ce tableau de
 15 éléments, sauf l'entrée 0, à laquelle n'est associée aucun HP, correspondant
 au gap entre 14 et 1:
\end_layout

\begin_layout Quotation
[0 12 12 12 12 12 12 12 12 12 12 12 12 12 12]
\end_layout

\begin_layout Standard
Un pattern tel que 
\begin_inset Quotes xld
\end_inset

OOXOXOO
\begin_inset Quotes xrd
\end_inset

, de taille 7, pourra s'appliquer si l'on trouve, dans CHPU, une séquence
 de nombres 
\begin_inset Quotes xld
\end_inset

abcdefg
\begin_inset Quotes xrd
\end_inset

 tels que 
\begin_inset Quotes xld
\end_inset

c
\begin_inset Quotes xrd
\end_inset

 et 
\begin_inset Quotes xld
\end_inset

e
\begin_inset Quotes xrd
\end_inset

 (correspondant aux valeurs 
\begin_inset Quotes xld
\end_inset

X
\begin_inset Quotes xrd
\end_inset

 du pattern) soient supérieurs à 10.
 Dans un premier tirage au hasard, on choisit la séquence [7 8 9 10 11 12
 13].
 On a trouvé une première paire candidate.
 Remplaçons dans CHPU les valeurs 
\begin_inset Quotes xld
\end_inset

abcdefg
\begin_inset Quotes xrd
\end_inset

 par des zéros.
 Par exemple, dans le tableau de 15 valeurs décrit ci-dessus, on vient de
 remettre à 0 les entrées 7 à 13, la paire jouée correspondant aux HP 9
 et 11.
\end_layout

\begin_layout Quotation
[0 12 12 12 12 12 12 0 0 0 0 0 0 0 12]
\end_layout

\begin_layout Standard
Un second tirage va permettre de sélectionner la séquence [2 à 8], qui recouvre
 une partie de la précédente, mais où les entrées 4 et 6 ont bien une valeur
 supérieure à 10.
 
\end_layout

\begin_layout Quotation
[0 12 0 0 0 0 0 0 0 0 0 0 0 0 12]
\end_layout

\begin_layout Standard
Une dernière recherche permet de sélecter la séquence [12 13 14 0 1 2 3],
 dans laquelle les HP 14 et 1 sont égelement convenables.
\end_layout

\begin_layout Quotation
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
\end_layout

\begin_layout Standard
Il n'y a dès lors plus de possibilité.
 Les trois couples retenus sont donc: (9, 11), (4, 6), (14, 1) – on pourra
 les utiliser, au choix, en Gauche-Droite ou en Droite-Gauche.
\end_layout

\begin_layout Standard
Au fur et à mesure des interactions avec les capteurs, on va utiliser ces
 trois couples, attendre un certain temps, puis récupérer, par exemple au
 bout de dix secondes une nouvelle copie du tableau HPU initial qui, lui,
 ressemblera peut-être à:
\end_layout

\begin_layout Quotation
[0 0 22 22 6 22 6 22 22 5 22 5 22 22 0]
\end_layout

\begin_layout Standard
On imagine ici que le premier clip a duré cinq secondes, le second, lancé
 une seconde plus tard, 3, et le troisième, lancé 4 secondes plus tard,
 8, ce qui fait qu'il est encore en activité.
 Les autres HP, n'ayant pas été utilisés, ont vu 10 s'ajouter à leur valeur
 initiale.
 
\end_layout

\begin_layout Standard
Dans cette nouvelle configuration, pour la 
\begin_inset Quotes xld
\end_inset

salve
\begin_inset Quotes xrd
\end_inset

 suivante, on pourra choisir par exemple (3,5) et (10,12).
\end_layout

\begin_layout Standard
L'algorithme n'est pas universel, mais il est simple, relativement général,
 et peut être décrit par un petit nombre de données: les patterns, et quelques
 valeurs numérique (seuil d'éligibilité d'un HP, durée d'une salve, intervalle
 d'incrémentation, etc.)
\end_layout

\begin_layout Standard
Il résout, je pense, le problème Chazelles et apporte une vision un peu
 plus générale des aspects des installations sonores.
\end_layout

\begin_layout Section*
14-04-2023.
 Messages entre processus
\end_layout

\begin_layout Standard
Un message envoyé entre processus se présente sous forme d'un bloc de mémoire
 de type 'Evnt', contenant un certain nombre d'informations
\end_layout

\begin_layout Section*
13-04-2023.
 Sur l'évolution du GM
\end_layout

\begin_layout Standard
D'une certaine manière, le GM est assez inspiré de REAPER lui-même, et de
 sa gestion des scripts.
 Dans REAPER, il existe, en pratique, nombre d'opérations qu'un script ne
 peut pas directement effectuer.
 REAPER remédie à ceci en fournissant des API (application programming interface
), qui sont des fonctions, disponibles dans le langage de script, qui font
 appel à des fonctions intégrées à REAPER, et des ACTIONS, qui sont des
 opérations individuelles très spécialisées, sans paramètres et sans résultat,
 mais qui, par effet de bord, déclanchent un certain comportement de REAPER.
\end_layout

\begin_layout Standard
Armé de ces possibilités, un script peut définir un algorithme 
\begin_inset Quotes xld
\end_inset

nouveau
\begin_inset Quotes xrd
\end_inset

, utile à l'utilisateur, n'existant pas au sein de REAPER, mais qui peut
 se réaliser par la programmation et l'utilisation de ces API et ACTIONS.
\end_layout

\begin_layout Standard
Le GM est en ce sens assez similaire à REAPER, du fait qu'il offre déjà
 un langage de script, mSL, un certain nombre d'actions élémentaires, qui
 permettent l'accès à des fonctions internes du GM, et quelques 
\begin_inset Quotes xld
\end_inset

API
\begin_inset Quotes xrd
\end_inset

 sous forme de fonctions transposant les fonctions internes de JSFX, ou
 permettant l'accès à d'autres types de fonctions internes du GM.
 D'autre part, il existe déjà dans le GM quelques algorithmes complexes
 déjà programmés, qui réalisent des finalités que l'on a jugé pertinent,
 à un moment donné, d'intégrer au GM, comme l'exécution des actions élémentaires
, la gestion des choix du mode auto-play, la gestion des senseurs, etc.
\end_layout

\begin_layout Standard
En ce qui concerne la requête pour Chazelles, il est clair pour moi qu'elle
 ne peut pas se réaliser au travers des API et actions existantes, qu'elle
 sort du cadre des algorithmes complexes déjà implémentés dans le GM, mais
 en même temps qu'elle est beaucoup trop spécifique pour mériter de faire
 l'objet d'un nouveau développement en JSFX, directement implémenté dans
 le GM.
\end_layout

\begin_layout Standard
Sa solution la plus raisonnable me semble donc aujourd'hui passer par l'écriture
 d'un script en mSL, utilisant Actions et API, et apportant, en tant que
 langage de programmation, cette composante algorithmique qui est nécessaire.
 
\end_layout

\begin_layout Standard
Il faut cependant noter que les développements au sein du GM de ces actions
 élementaires, API, et algorithmes spécialisés ont été des développements
 ad hoc, et que les choix effectués sur le moment ne sont pas les plus généraux
 et pertinents possibles – cette même critique s'applique d'ailleurs aux
 actions de REAPER, qui a le problème supplémentaire du poids du passé,
 qui fait qu'il ne peut se permettre de remettre en cause l'existant.
 Il existe dans le GM des problèmes conceptuellement simples, comme permettre
 depuis un script mSL l'accès aux variables JSFX du GM (consulter, modifier
 une variable) qui ne sont toujours pas résolus.
 En gros, actuellement, il faut écrire une API spécifique pour chaque variable
 que l’on veut pouvoir lire ou écrire.
 Or il existe au moins 1000 ou 2000 variables du GM réellement significatives,
 qui pourraient être utilisées à bon escient par des scripts.
\end_layout

\begin_layout Standard
Cette solution passant par l'écriture d'un script en mSL implique:
\end_layout

\begin_layout Standard
A) Une réflexion approfondie sur la meilleure façon de concevoir ce script;
\end_layout

\begin_layout Standard
B) La création de certaines actions, nouvelles, qui viendraient enrichir
 les existantes;
\end_layout

\begin_layout Standard
C) La création de quelques nouvelles API, comme l'accès aux événements,
 ou, comme évoqué ci-dessus, l'accès aux variables JSFX.
\end_layout

\begin_layout Standard
C'est du travail.
 En même temps, les aspects B) et C) ci-dessus seront directement réutilisables
 pour tout développement futur, et l'expertise obtenue dans le développement
 de A) sera bien sûr ultérieurement la bienvenue.
\end_layout

\begin_layout Section*
25-03-2023.
 ClipSet
\end_layout

\begin_layout Standard
Définir des 
\begin_inset Quotes xld
\end_inset

ensembles de clips
\begin_inset Quotes xrd
\end_inset

, désignés par un numéro, style:
\end_layout

\begin_layout LyX-Code
data(Table ClipSet Set 10 Clp 100 107 108 Range 1000 1200 Xcpt 1045 1046
 1120 End);
\end_layout

\begin_layout Standard
Dans la description d'une banque, 
\family typewriter
Clips 100 120
\family default
 pourrait être remplacée par
\family typewriter
 ClipSet 10
\family default
.
 En interne, on utiliserait comme numéro du 
\begin_inset Quotes xld
\end_inset

premier
\begin_inset Quotes xrd
\end_inset

 clip (-10-1) pour référencer le clipset.
\end_layout

\begin_layout Section*
25-03-2023.
 Description de mappings
\end_layout

\begin_layout Standard
Tables génériques de conversion.
 Ex:
\end_layout

\begin_layout LyX-Code
data(Table Mappings Map 10 MIDI 0 40 20 70 50 70 127 127 End);
\end_layout

\begin_layout Standard
Ici 
\begin_inset Quotes xld
\end_inset

MIDI
\begin_inset Quotes xrd
\end_inset

 implique une conversion en entiers, de 0 à 127 vers 0 à 127.
 On donne les coordonnées de la courbe en (x,y), et on génère par interpolation
 linéaire (ou autre) une table de 128 valeurs.
\end_layout

\begin_layout Section*
25-03-2023.
 Description de devices
\end_layout

\begin_layout Standard
On pourrait avoir la descriptions des particularités d'une interface externe,
 avec 
\family typewriter
data(Device 
\begin_inset Quotes xld
\end_inset

Nom
\begin_inset Quotes xrd
\end_inset

 description...
 End)
\family default
 qui permettrait de faire référence à un device avec toutes ses particularités.
\end_layout

\begin_layout Section*
07-05-2022.
 Pour info...
 Les fonctions non documentées de JSFX...
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Index idx
status open

\begin_layout Plain Layout
##dbg_desc
\end_layout

\end_inset

#dbg_desc chaîne de caractère affichée dans l'interface graphique
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
str_insert
\begin_inset Index idx
status open

\begin_layout Plain Layout
str_insert
\end_layout

\end_inset

(#str,"srcstr",pos) Inserts srcstr into #str at offset pos.
 Returns #str 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
str_delsub
\begin_inset Index idx
status open

\begin_layout Plain Layout
str_delsub
\end_layout

\end_inset

(#str,pos,len) Deletes len characters at offset pos from #str, and returns
 #str.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
str_setlen
\begin_inset Index idx
status open

\begin_layout Plain Layout
str_setlen
\end_layout

\end_inset

(#str,len) Sets length of #str (if increasing, will be space-padded), and
 returns #str.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
gfx_getdropfile
\begin_inset Index idx
status open

\begin_layout Plain Layout
gfx_getdropfile
\end_layout

\end_inset

(idx[,#str]) Enumerates any drag/dropped files.
 call gfx_dropfile(-1) to clear the list when finished.
 Returns 1 if idx is valid, 0 if idx is out of range.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
EEL2: integer retval = gfx_getdropfile(integer idx[, string #filename])
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns filenames, drag'n'dropped into a window created by gfx_init().
 Use idx to get a specific filename, that has been dropped into the gfx_init()-w
indow.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Does NOT support mediaitems/takes or other Reaper-objects!
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
It MUST be called BEFORE calling gfx_update, as gfx_update flushes the filelist
 accessible with gfx_getdropfile.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returnvalues: integer retval 0, if droppped-filename with indexnumber idx
 doesn't exist; 1, if it exists; hints, if you already read all dropped
 filenames.
 string filename the filename of dropped-file with indexnumber idx
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: integer idx the indexnumber for a filename, that has been dropped
 into a gfx_init()-window.
 0, the first file; 1, the second file; 2, the third file, etc.
 -1, clears the filelist.
 
\end_layout

\begin_layout Section*
20-09-2021.
 Directions
\end_layout

\begin_layout Paragraph*
Nouveaux modes de jeu
\end_layout

\begin_layout Standard
En plus de looper et players
\begin_inset space ~
\end_inset

: drone.
 Qu'est-ce qui le différencie fondamentalement des autres modes ? Fondu
 enchaînés de petits extraits, à des vitesses légèrement variées (
\begin_inset Quotes cld
\end_inset

detune
\begin_inset Quotes crd
\end_inset

).
\end_layout

\begin_layout Standard
Jeu synchronisé, sur un ou plusieurs tempos, avec des modulations.
\end_layout

\begin_layout Paragraph*
Effets
\end_layout

\begin_layout Standard
On peut les intégrer par des envois sur des pistes supplémentaires qui comporten
t les effets, ce qui impliquera une déconnexion probable du canal de jeu
 d'un son et du canal de sortie de l'effet associé.
\end_layout

\begin_layout Paragraph*
Gestion de l'historique
\end_layout

\begin_layout Standard
Conservation et affichage en priorité
\begin_inset space ~
\end_inset

; puis rejouer depuis un moment donné.
 Il y aura certainement des différences.
 Changement/transformation du time-line
\begin_inset space ~
\end_inset

: accélérer, ralentir les déclanchement
\begin_inset space ~
\end_inset

; permettre des boucles, des allers-retours, etc.
 Puis modifier certains des paramètres de jeu, conserver l'historique dans
 le preset.
\end_layout

\begin_layout Paragraph*
Presets
\end_layout

\begin_layout Standard
Conserver des présets partiels
\begin_inset space ~
\end_inset

: on choisit ce que l'on veut sauvegarder, par un module spécial
\begin_inset space ~
\end_inset

: 
\begin_inset Quotes cld
\end_inset

Presets manager
\begin_inset Quotes crd
\end_inset

.
 Le 
\begin_inset Quotes cld
\end_inset

chargement
\begin_inset Quotes crd
\end_inset

 du preset correspondant ne vient en fait modifier que ce qui a été sauvegardé,
 en conservant le reste de la session courante 
\begin_inset Quotes cld
\end_inset

intacte
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Paragraph*
mSL
\end_layout

\begin_layout Standard
Réfléchir à de réelles utilisations du langage, en plus de la lecture de
 définitions de tables et de macros.
 Revoir le module 
\begin_inset Quotes cld
\end_inset

custom
\begin_inset Quotes crd
\end_inset

 ci-dessus, cette fois commandé par un programme mSL.
\end_layout

\begin_layout Section*
13-06-2020.
 Customisation
\end_layout

\begin_layout Paragraph*
Fichier de chaînes
\end_layout

\begin_layout Standard
On pourrait avoir un fichier texte qui contiendrait des labels, auxquels
 on pourrait faire référence dans des programmes.
 Exemple
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout LyX-Code
1022 Erreur de ceci, %d
\end_layout

\begin_layout LyX-Code
1024 Custom Group 4
\end_layout

\begin_layout LyX-Code
1030 Volume Auxiliaire 10: %.1f dB
\end_layout

\begin_layout Standard
Une fois lu en un bloc, le fichier est décodé par un utilitaire qui construit
 une petite structure de contrôle, et au final une fonction accepte un numéro
 d'item et rend une chaîne de caractères (ou recopie dans une chaîne de
 caractères) représentant l'entrée correspondante.
 La syntaxe la plus simple est un nombre entier, écrit en décimal, suivi
 d'un (ou plusieurs) espaces, ignorés, suivi de la chaîne de caractères,
 qui serait conservée jusqu'au 'cr' de la fin de ligne.
\end_layout

\begin_layout Standard
On pourrait, de même, avoir un tableau de noms de fichiers, avec des information
s sur la manière de lire les fichiers et de les installer en mémoire...
\end_layout

\begin_layout Paragraph*
Module Custom
\end_layout

\begin_layout Standard
On pourrait avoir une structure de données, qui représenterait des sliders
 customisables.
 Un fichier de 
\begin_inset Quotes cld
\end_inset

commande
\begin_inset Quotes crd
\end_inset

 pour une génération de sons permettrait ainsi de créer un bloc de sliders,
 défini par une successions de valeurs numériques
\begin_inset space ~
\end_inset

:
\end_layout

\begin_layout Description
numéro
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

variable un numéro interne de variable ou paramètre, qui servirait de référence
 dans les codes que l'on chargerait.
\end_layout

\begin_layout Description
label
\begin_inset space ~
\end_inset

du
\begin_inset space ~
\end_inset

slider un numéro de label (comme 1030, exemple précédent).
\end_layout

\begin_layout Description
valeur
\begin_inset space ~
\end_inset

min et successives
\begin_inset space ~
\end_inset

: valeur max, valeur initiale, valeur par défaut, slope pour l'affichage,
 incrément pour le slider, etc.
\end_layout

\begin_layout Standard
On chargerait ainsi un fichier de commandes, qui pourrait créer un module
 custom, lequel permettrait à l'utilisateur d'interagir avec son 
\begin_inset Quotes cld
\end_inset

script
\begin_inset Quotes crd
\end_inset

.
\end_layout

\begin_layout Paragraph*
Module d'exécution JS
\end_layout

\begin_layout Standard
Il permettrait, directement, de charger du code source et de l'exécuter
 dans un jsfx.
 Mais il faudrait un plug-in écrit en 
\begin_inset Quotes cld
\end_inset

C
\begin_inset Quotes crd
\end_inset

, plutôt !
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Fin du document.
 Il est suivi des références.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\backslash
cleardoublepage{}
\backslash
addcontentsline{toc}{chapter}{R{
\backslash
'e}capitulatif}
\backslash
addcontentsline{toc}{section}{R{
\backslash
'e}f{
\backslash
'e}rences}
\end_layout

\end_inset


\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "/Users/jjg4/main"
options "plain"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\backslash
cleardoublepage{}
\backslash
addcontentsline{toc}{section}{Index}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"
name "Index"
literal "true"

\end_inset


\end_layout

\end_body
\end_document
