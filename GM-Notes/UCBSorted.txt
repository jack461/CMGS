/* New Read Control Block Description */
//
cbChkGP = (idxpt -= 1);
cbChkUM = (idxpt -= 1);
cbClipCnt = (idxpt -= 1); // Clip count
cbClipLoop = (idxpt -= 1); // alt/clip loop flags
cbDclass = (idxpt -= 1); // MIDI units
cbErC = (idxpt -= 1); // err counter
cbERR = (idxpt -= 1); // Error return code
cbInacFlg = (idxpt -= 1); // inactive flag
cbLKmd = (idxpt -= 1); // last command
cbLocPrime = (idxpt -= 1); // a given prime, last entry
cbMemory = (idxpt -= 1); // available mplayer memory (words)
cbP08 = (idxpt -= 1); // add. cmd info
cbPch00 = (idxpt += 1); // list of output chan. description
cbPDisp = (idxpt += 1); idxpt += 32; // Traces
cbPlavail = (idxpt -= 1); // available mplayer memory (seconds)
cbPlIdt = (idxpt -= 1); // Player number in the player list
cbPtrPos = (idxpt += 1);
cbRUniq = (idxpt -= 1); // Unique device identification
cbStat = (idxpt -= 1); // unit global status
cbType = (idxpt -= 1); // Unit type
cbUnitIdt = (idxpt -= 1); // Unique Unit number
cbUSt = (idxpt -= 1); // last Use time
pcbVSpl0 = (idxpt += 1); // volume array for 64 channels
playLogCopySize = RCB_Size - playLogHdrSize; // size of infos to save
playLogHdrSize = idxpt + 1; // specific HDR in gmem
plIDNT = 'fsnd'; // frozen sound identification
RCB_ActSize = idxpt + 1;
RCB_ActualSize = (idxpt += 1); // RCB Actual Size
RCB_cbCKmd = (idxpt += 1); // current command - copy
RCB_CBnk_nbr = (idxpt += 1); // Clip Bank Number
RCB_CCh_cnt = (idxpt += 1); // Clip Channel count
RCB_CFrCorr_u = (idxpt += 1); // Clip Frequency correction (v.s. srate)
RCB_CFreq_sps = (idxpt += 1); // Clip sampling frequency, Hz
RCB_CFty_enu = (idxpt += 1); // Clip File Type, an internal enumeration
RCB_CGrp_nbr = (idxpt += 1); // Clip Group Number
RCB_Channels_cnfDup = (idxpt += 1); // channels configuration
RCB_Channels_cnt_max = (idxpt += 1); // # max Number of output channels to use
RCB_Channels_cnt_min = (idxpt += 1); // # min Number of output channels to use
RCB_Channels_cnt_tot = (idxpt += 1); // # Number of total defined out channels
RCB_Channels_cnt_used = (idxpt += 1); // # Number of used output channels
RCB_Channels_conf = (idxpt += 1); // channels configuration
RCB_Channels_density = (idxpt += 1); // # Density asked for output channels
RCB_Channels_flgs = (idxpt += 1); // # Flags for output channels
RCB_ChSet1_set = (idxpt += 1); // # Output channels Set 1
RCB_ChSet2_set = (idxpt += 1); // # Output channels Set 2
RCB_ChSet3_set = (idxpt += 1); // # Output channels Set 3
RCB_ChSet4_set = (idxpt += 1); // # Output channels Set 4
RCB_CKstart_tim = (idxpt += 1); // Command Start Time (ptime)
RCB_ClEnd = (idxpt += 1); // Clip Play End Location (% of sample)
RCB_ClipDup = (idxpt += 1); // # Duplicate of the clip number
RCB_ClipLoop = (idxpt -= 1); // Clip play mode Flags : loop, mute, etc.
RCB_ClipNb = (idxpt += 1); // # Clip Number to read
RCB_ClStart = (idxpt += 1); // Clip Play Start Location (% of sample)
RCB_CPart_nbr = (idxpt += 1); // Clip Partial Number
RCB_CPlMd_nbr = (idxpt += 1); // Clip Play Mode
RCB_CPStart_tim = (idxpt += 1); // Clip Play Start (ptime)
RCB_CPStop_tim = (idxpt += 1); // Clip Play Stop (ptime)
RCB_CSiz_smp = (idxpt += 1); // Clip Size, in Samples
RCB_CSiz_tpl = (idxpt += 1); // Clip Size, in Tuples
RCB_CSpMd_nbr = (idxpt += 1); // Clip space Mode
RCB_Errc = (idxpt += 1); // RCB Error code
RCB_FadeIn_ms = (idxpt += 1); // # Fade-in in milliseconds
RCB_FadeOut_ms = (idxpt += 1); // # Fade-out in milliseconds
RCB_FSND = 'FSND'
RCB_GrAlgo_enu = (idxpt += 1); // # Looper Algorithm
RCB_GrAPar1_v = (idxpt += 1); // # Looper Algorithm Parameter 1
RCB_GrFdIn_ms = (idxpt += 1); // # Grains Fade-in in milliseconds
RCB_GrFdOut_ms = (idxpt += 1); // # Grains Fade-Out in milliseconds
RCB_GrXpect = (idxpt += 1); // number of grains expected
RCB_Item_Changed = (idxpt += 1); // External State Change... Do something !
RCB_KFlgs = (idxpt += 1); // # Flags for the command
RCB_Kmd = (idxpt += 1); // # command for unit
RCB_Log_Entry = 
RCB_MaxGrains_ms = (idxpt += 1); // # Max. Grains duration, milliseconds
RCB_MaxNGrains_u = (idxpt += 1); // # Max. Grains depth
RCB_Mem_Avail = (idxpt += 1); // memory available
RCB_MinGrains_ms = (idxpt += 1); // # Min. Grains duration, milliseconds
RCB_MinNGrains_u = (idxpt += 1); // # Min. Grains depth
RCB_My_Pos = (idxpt -= 1); // My position in the track
RCB_My_Track = (idxpt -= 1); // The track I'm on
RCB_PlaySource = (idxpt += 1); // detailed play command
RCB_PlayTime = (idxpt += 1); // Clip play duration
RCB_PlayTime_sec = (idxpt += 1); // # Play Time in seconds
RCB_Random_seed = (idxpt += 1); // seed for random number when starting to analyse RCB.
RCB_Rec_Duration = (idxpt += 1); // Duration time
RCB_Rec_Entry =
RCB_Rec_Flag  = (idxpt += 1); // Flag "ready to reinsert"
RCB_Rec_Last = (idxpt += 1); // "Record Time" When started
RCB_Rec_Time = (idxpt += 1); // "Record Time" When started
RCB_RefCnt =
RCB_Repl_Src  = (idxpt -= 1); // Source of a replay
RCB_Serial = (idxpt += 1); // this play number [session relative]
RCB_Size = 80; // Size of the RCB block
RCB_SpeedAbs_u = (idxpt += 1); // # "Absolute" Play Speed
RCB_SpeedMod1_u = (idxpt += 1); // # Speed Modifier 1
RCB_SpeedMod2_u = (idxpt += 1); // Speed Modifier 2
RCB_Speed_Dir_u = (idxpt += 1); // Speed direction 1/-1
RCB_StartIndex = (idxpt += 1); // Play start index
RCB_State_Changed = (idxpt += 1); // External State Change... Do something !
RCB_StdVol = (idxpt += 1); // std clip playing volume
RCB_Synchro_source = (idxpt += 1); // source for synchronisation
RCB_Transpose_u = (idxpt += 1); // # Speed transpose
RCB_VolBias = (idxpt += 1); // volume change coefficiant
RCB_VolumeMax_dB = (idxpt += 1); // Volume high value
RCB_VolumeMin_dB = (idxpt += 1); // Volume low value
RCB_VolumeMod1_u = (idxpt += 1); // Volume Modifier 1
RCB_VolumeTarget_dB = (idxpt += 1); // "Target" Volume
RCM_Mode = 
UCBparCnt = (idxpt += 1); // last
UCBparHCnt = (idxpt -= 1); // last
UCBSize = 256+16; // size of a unit Control block description
uCnt = 128; // unit count
UGAddr = 0x300; // units global addresses in shared memory
UGAddrLast = UGAddr + UCBSize * uCnt;
UId = UAdd = UType = UnewId = UIrId = -1;
