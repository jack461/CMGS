desc:SmoothMultiLimiter (by Geraint Luff, mods. JJG 2021)
// version 1.15

slider1:-3<-40,0.0,0.1>-limit (dB)
slider2:10<0.1,120,0.1>-anticipation (ms)
slider3:100<1,1000,0.1>-release (ms)
slider4:0<0,100,1>-distortion (%)
slider5:0<-12,24,0.1>-pre-gain (dB)
slider6:2<2,64,1>-Channel count
slider7:1<0.1,10,0.01>-Zoom
slider8:0<-12,24,0.1>-Volume out (dB)


options:no_meter
options:maxmem=16777216

import GM-Libs/mSL_StM_Memory.jsfx-inc
import GM-Libs/mSL_string_list_2000X.jsfx-inc
import GM-Libs/mSL_string_list_2000W.jsfx-inc
import GM-Libs/mSL_Strings.jsfx-inc
import GM-Libs/ui-lib.jsfx-inc
import GM-Libs/mSL_ui_LibJJ.jsfx-inc
import GM-Libs/mSL_ui_Menus.jsfx-inc
import GM-Libs/mSL_ui_Pads.jsfx-inc
import GM-Libs/ui-lib-JJ-GUI.jsfx-inc


@init
ext_noinit = 1;
gfx_ext_retina = 1;

slc = 8; // slider count
actchn = 2;
buffcnt = 64 ; // max number of channels we want to handle
epspik = 0.000006;
zoom = 1;
overcorrect_factor = 1.002; // about 0.02dB
adjust_limit = -0.06; // adjust limiter
xvol = 1.0;
sclpeak = 0;
p0 = p1 = p2 = p3 = buffcnt;

// Manage memory
freemem = 16; // keep some words for security
xspl = freemem; freemem += buffcnt;
xpik = freemem; freemem += buffcnt + 2; xpik[buffcnt] = -0.1;
// pointers to buffers
buffers = freemem; freemem += buffcnt; // up to 64 channel buffers


// Guess a number of seconds we could buffer
MaxSeconds = (floor(10 *(__memtop() - freemem - buffcnt - 2)/((buffcnt + 1) * srate)))/10;
ActualSeconds = min(MaxSeconds, 8); // make sure all is ok...
bufferlength = ceil(srate*ActualSeconds);

// buffer for peaks
bufferpeak = freemem; freemem += bufferlength;
// allocate buffers
bn = 0;
loop (buffcnt,
    buffers[bn] = freemem; freemem += bufferlength; bn += 1;
);


// Static memory management
mSL_StM_Init(freemem); // init static memory
mSL_Str_Init(#xstrFirst, #xstrLast); // allocate strings for strings allocator
mSL_Str_TInit(#wstrFirst, #wstrLast); // allocate strings for temporary strings
//====== Init "ui-lib-JJ.jsfx-inc" ======
rest = mSL_StM_BlockStart('uilb');
// Graphic set-up
// starting at +X protects location "0" from program errors...
ui_end = ui_setup(rest);
mSL_StM_BlockEnd(ui_end); // stop temporary
//====== Init "ui-lib-JJ.jsfx-inc" ======
gfxInit();
ui_lib_JJ_GUI_init(1);




function tanh(x) (
  x >= 20 ? (
    1;
  ) : x <= -20 ? (
    -1;
  ) : (
    (exp(2*x) - 1)/(exp(2*x) + 1);
  );
);
function atanh(x) (
  x >= 1 ? (
    20;
  ) ? (x <= -1) ? (
    -20;
  ) : (
    log((1 + x)/(1 - x))*0.5;
  );
);

writepos = 10;
delaysamples = 10;
attacksamples = 10;
releasesamples = 100;
limit = 1;

releasestartvalue = 1;
releaseindex = srate;

function update() (
  attacksamples = ceil(slider2*srate/1000);
  releasesamples = ceil(slider3*srate/1000);
  delaysamples = ceil(attacksamples);
  limit = pow(10, (slider1 + adjust_limit)/20);
  pregain_factor = pow(10, slider5/20);
  zoom = slider7;
  actchn = slider6;
  xvol = pow(10, slider8/20);
  sclpeak = slider4/100;
);
// Starts at 0, goes to 1
function attackwindow(ratio) (
  0.5 - 0.5*cos(ratio*$pi);
);
function releasewindow(ratio) (
  0.5 + 0.5*cos(ratio*$pi);
);

A = 0;
B = 1;
function dist(x) (
  B*x/(A*abs(x) + 1);
);
function distortion_for_peak(peak, limit) (
  A = (1 - pow(limit/oldpeak, sclpeak))/limit;
);
function scaling_for_peak(peak, limit) (
  pow(limit/peak, 1 - sclpeak);
);


MemFree = __memtop() - freemem;


@slider

update();

@block

pdc_bot_ch = 0;
pdc_top_ch = actchn;
pdc_delay = delaysamples - 1;

@sample


truepeak = is = 0;
loop (actchn,
    xspl[is] = v = spl(is) * pregain_factor;
    v = abs(v);
    xpik[is] = max(v, (1-epspik) * xpik[is]);
    truepeak = max(truepeak, v);
    is += 1;
);


releasepeak = limit;
releaseindex < releasesamples ? (
  releasepeak = limit + (releasestartvalue - limit) *
      ///   releasewindow(releaseindex/releasesamples); // function releasewindow(ratio) ( 0.5 + 0.5*cos(ratio*$pi); );
      ///
      (0.5 + 0.5 * cos( (releaseindex/releasesamples) * $pi)); ///
  releaseindex += 1;
);
peak = max(releasepeak, truepeak);
//peak = max(peak - releasegradient, truepeak);

peak < limit ? (
  peak = limit;
  releasestartvalue = limit;
  releaseindex = srate;
) : (truepeak == peak) ? (
  // It's a new peak
  peak *= overcorrect_factor; // Add just a little bit extra, in the hopes that we don't have to do this again soon

  // For future decay
  //releasegradient = (peak - limit)/releasesamples;
  releasestartvalue = peak;
  releaseindex = 0;
  // Attempt to extend an existing attack
  i = 1;
  startpeak = limit;
  foundabove = 0;
  foundintersection = 0;

  intersectionindex = -1;
  bestcorrection = -1;
  bestindex = delaysamples - 1;
  beststartpeak = limit;
  while (i < attacksamples && !foundintersection) (
    ///  window = attackwindow(1 - i/attacksamples); // function attackwindow(ratio) ( 0.5 - 0.5*cos(ratio*$pi); );
    ///
    window = 0.5 - 0.5 * cos( (1 - i/attacksamples) * $pi );

    readpos = writepos - i;
    readpos < 0 ? readpos += bufferlength;
    oldpeak = bufferpeak[readpos];

    newstartpeak = peak + (oldpeak - peak)/(1 - window);
    newstartpeak > startpeak ? (
      // Keep track of the smallest alteration,
      //  but with a bias towards f
      diff = (newstartpeak - startpeak)*(1 - window);
      (bestcorrection < 0 || diff < bestcorrection) ? (
        bestcorrection = diff;
        bestindex = i;
        beststartpeak = newstartpeak;
      );

      startpeak = newstartpeak;
      intersectionindex = i;
      foundabove = 1;
    ) : (foundabove) ? (
      foundintersection = 1;
    );
    i += 1;
  );

  foundintersection ? (
    i = 0;
    while (i < intersectionindex) (
      ///  window = attackwindow(1 - i/attacksamples);
      ///
      window = 0.5 - 0.5 * cos( (1 - i/attacksamples) * $pi );

      readpos = writepos - i;
      readpos < 0 ? readpos += bufferlength;
      newpeak = startpeak + (peak - startpeak)*window;
      bufferpeak[readpos] = newpeak;
      i += 1;
    );
  ) : (
    i = 0;
    while (i < bestindex) (
      ///  window = attackwindow(1 - i/attacksamples);
      ///
      window = 0.5 - 0.5 * cos( (1 - i/attacksamples) * $pi );

      readpos = writepos - i;
      readpos < 0 ? readpos += bufferlength;
      newpeak = beststartpeak + (peak - beststartpeak)*window;

      faderatio = (1 - i/bestindex);
      fadewindow = 1 - (1 - faderatio)*(1 - faderatio);
      bufferpeak[readpos] += (newpeak - bufferpeak[readpos])*fadewindow;
      i += 1;
    );
  );
);

is = 0;
loop (actchn,
    ptb = buffers[is];
    ptb[writepos] = xspl[is] ;
    is += 1;
);

bufferpeak[writepos] = peak;

writepos += 1;
writepos >= bufferlength ? (
  writepos = 0;
);

readpos = writepos - delaysamples;
readpos < 0 ? readpos += bufferlength;
// reduction = limit/bufferpeak[readpos];

oldpeak = bufferpeak[readpos];
///
B = scaling_for_peak(oldpeak, limit);
/// B = pow(limit/oldpeak, 1 - sclpeak); ///
///
A = distortion_for_peak(oldpeak, limit);
/// A = (1 - pow(limit/oldpeak, sclpeak))/limit; ///

is = 0;
loop (actchn,
    ptb = buffers[is];
    ///  spl(is) = xvol * dist( ptb[readpos] ); // function dist(x) ( B*x/(A*abs(x) + 1); );
    ///
    u = ptb[readpos]; spl(is) = xvol * (B*u/(A*abs(u) + 1));
    is += 1;
);


@gfx 620 460


function ordchnls() local(ip, v)
(
    p0 = p1 = p2 = p3 = 64;
    ip = 0;
    loop(actchn,
        v = xpik[ip];
        (v > xpik[p0]) ? (p3 = p2; p2 = p1; p1 = p0; p0 = ip;) :
        (v > xpik[p1]) ? (p3 = p2; p2 = p1; p1 = ip;) :
        (v > xpik[p2]) ? (p3 = p2; p2 = ip;) :
        (v > xpik[p3]) ? (p3 = ip;) ;
        ip += 1;
    );
);

function value_to_y(v) (
  ui_top() + max(0, min(1, 0.5*(1 - v)))*ui_height();
);

function draw_response() local(i, x, y, ref) (
  ui_retina(1);
  control_background_passive();
  ui_push(0.2);
    ref = limit*2;
    ui_color(192, 0, 0);
    y = value_to_y(limit/ref);
    gfx_line(ui_left(), y, ui_right() - 1, y);
    y = value_to_y(-limit/ref);
    gfx_line(ui_left(), y, ui_right() - 1, y);
  ui_pop();

  i = 0;
  while (i < ui_width()) (
    x = 2*i/(ui_width() - 1) - 1;
    ///
    y = value_to_y( dist( x*ref )/ref );
    /// u = x*ref; y = value_to_y( (B*u/(A*abs(u) + 1))/ref );

    i == 0 ? (
      gfx_x = ui_left() + i;
      gfx_y = y;
    ) : (
      gfx_lineto(ui_left() + i, y);
    );
    i += 1;
  );
  control_finish_passive();
);

function draw_buffer(buffer, startpos, multiplier)
local(width, i, i2, N, lowindex, highindex, low, high, readpos, v, x, y1, y2)
(
  i = 0;
  N = ceil(bufferlength*0.75);
  width = ui_width();
  while (i < ui_width()) (
    lowindex = floor(i/width*N);
    highindex = ceil((i + 1)/width*N);

    i2 = lowindex;
    step = ceil((highindex - lowindex)/10);
    readpos = (startpos + lowindex - N);
    readpos < 0 ? readpos += bufferlength;
    low = high = buffer[readpos];
    while (i2 < highindex) (
      readpos = (startpos + i2 - N);
      readpos < 0 ? readpos += bufferlength;
      low = min(low, buffer[readpos]);
      high = max(high, buffer[readpos]);
      i2 += step;
    );

    x = ui_left() + i;
    y1 = value_to_y(low*multiplier);
    y2 = value_to_y(high*multiplier);

    gfx_line(x, y1, x, y2);
    i += 1;
  );
);

function draw_peaks(scale) local(startpos, y)
(
  ui_retina(1);

  ui_color(0, 0, 0);
  ui_fill();

  ui_color(255, 0, 0);
  y = ui_top() + 0.5*(1 - limit*scale)*ui_height();
  gfx_line(ui_left(), y, ui_right() - 1, y);
  y = ui_top() + 0.5*(1 + limit*scale)*ui_height();
  gfx_line(ui_left(), y, ui_right() - 1, y);

  ordchnls();

  startpos = writepos;
  ui_color(64, 128, 192);  // blue
  draw_buffer(buffers[p0], startpos, scale*1.02);
  ui_color(218, 168, 64);  // yellow
  draw_buffer(buffers[p1], startpos, scale*0.75);
  (actchn > 2) ? (
    ui_color(0x22, 0x8B, 0x22); // light green
    draw_buffer(buffers[p2], startpos, scale*0.53);
  );
  (actchn > 3) ? (
    ui_color(0xE0, 0x40, 0x30); // light red
    draw_buffer(buffers[p3], startpos, scale*0.30);
  );
  ui_color(255, 255, 255);
  draw_buffer(bufferpeak, startpos, scale);
  draw_buffer(bufferpeak, startpos, -scale);

  control_finish_passive();
);

control_start("main", "tron");

/*
function labelled_dial(value, low, high, bias, label, formatvalue, format, default)
(
  ui_push();
    ui_align(0.6, 0.5);
    ui_push_width(40);
      value = control_dial_left(value, low, high, bias);
    ui_pop();
    ui_push_leftof(50);
      ui_align(1, 0.5);
      ui_text(label);
    ui_pop();
    ui_push_rightof(50);
      ui_align(0, 0.5);
      value = control_hidden_textnumber(value, formatvalue, format);
    ui_pop();
    ui_click() && ui_clickcount() == 2 ? (
      value = default;
    );
  ui_pop();
  value;
);
*/

ui_screen() == "main" ? (
  control_navbar("Multichannel Smooth Limiter  ---  v1.15", -1, -1);
  flg = gfx_w > 320;
  // ui_split_left(max(ui_width()*0.4, 200));
  flg ? (
    ui_split_left(260);
  );
    (zzz1 = ui_height()) > (ui_jd_slidh*slc+20) ? (
      //ui_split_bottom(zzz = min(ui_width()*0.5, ui_height()*0.4));
      ui_split_bottom(max(zzz1*0.15, zzz1 - ui_jd_slidh*slc));
      draw_response();
      ui_pop();
    );
    ui_split_topratio(1/slc);
      r = slider_ctl("limit: %0.1fdB", slider1, -40, -0.0, -3.5, -3, 0.1);
      r ? (slider1 = uix_jsl_val; uix_interacted = 1;);
    ui_split_next();
      r = slider_ctl("pre-gain: %0.1fdB", slider5 + (slider5 >= 0 ? 0.002 : -0.002), -12, 24, 0, 0, 0.1);
      r ? (slider5 = uix_jsl_val; uix_interacted = 1;);
    ui_split_next();
      r = slider_ctl("volume %.1fdB", slider8, -12, 24, 0, 0, 0.1);
      r ? (slider8 = uix_jsl_val; uix_interacted = 1;);
    ui_split_next();
      r = slider_ctl("attack: %0.1fms", slider2, 0.1, 200, 4, 10, 0.1);
      r ? (slider2 = uix_jsl_val; uix_interacted = 1;);
    ui_split_next();
      r = slider_ctl("release: %ims", slider3, 1, 1000, 4, 100, 1);
      r ? (slider3 = uix_jsl_val; uix_interacted = 1;);
    ui_split_next();
      r = slider_ctl("distortion: %i%%", slider4, 0, 100, 0, 0, 1);
      r ? (slider4 = uix_jsl_val; uix_interacted = 1;);
    ui_split_next();
      r = slider_ctl("zoom: %0.2f", slider7, 0.1, 10, 5, 1, 0.01);
      r ? (slider7 = uix_jsl_val; uix_interacted = 1;);
    ui_split_next();
      r = slider_ctl("channels: %i", slider6, 2, 64, 0, 2, 1);
      r ? (slider6 = uix_jsl_val; uix_interacted = 1;);
    ui_pop();
  flg ? (
    ui_pop();
    draw_peaks(0.5 * zoom);
  );
) : (
  control_system();
);

ui_interacted() ? update();
