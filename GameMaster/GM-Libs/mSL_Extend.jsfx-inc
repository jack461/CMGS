/*
    An example of an extension of mSL
        mSL_Extend.jsfx-inc
    Provide a few "new" functions without interfering with
    the existing code, by redefining up to 128 opcodes

    The functions to be redefined are named mSL_128 to mSL_255

    This code is to be inserted after mSL_Comp_lib.jsfx-inc and before the interpreter

    J.J. Girardot - 10/2020
*/

@init

KodedSchFree = mSL_symbol("SchFree");
KodedSchDlay = mSL_symbol("SchDlay");
KodedSchActv = mSL_symbol("SchActv");
KodedSchInac = mSL_symbol("SchInac");
KodedSchCthr = mSL_symbol("CThread");
KodedSchPads = mSL_symbol("SchPads");

padStPVals = padStFlags = padStClipsL = padStClipsH = 0;

SchedPadSet = 0;

// This redefines the function "mSL_134" as the product of its operands
function mSL_134(argc, argv)
local (product, ip)
(
    product = 1;
    ip = 0;
    loop(argc, product *= argv[ip]; ip += 1;);
    product;
);

// Print a sequence of strings
function mSL_133(argc, argv)
(
    while (argc > 0) (
        mSL_log(SysLogBox, argv[0]);
        argc -= 1; argv += 1;
    );
);


// External access to some useful data structures
function mSL_135(argc, argv)
local (item)
(
    item = argv[0];
    (item == 'padv') ? ( padStPVals; ) :
    (item == 'padf') ? ( padStFlags; ) :
    (item == 'padl') ? ( padStClipsL; ) :
    (item == 'padh') ? ( padStClipsH; ) :
    (item == KodedSchFree) ? (
        SchedFreePts;
    ) :
    (item == KodedSchDlay) ? (
        SchedDlydPts;
    ) :
    (item == KodedSchActv) ? (
        SchedActivPts;
    ) :
    (item == KodedSchInac) ? (
        SchedInactPts;
    ) :
    (item == KodedSchCthr) ? (
        mSL_current_thread;
    ) :
    (item == KodedSchPads) ? (
        SchedPadSet; // A 16 entries array
    ) :
    (
        -1;
    );
);


function mSL_define_extensions()
(
    mSL_define_opcode("GM_Log", 133); // define 254 as "GM_Log"
    mSL_define_opcode("prod", 134); // define 255 as "prod"
    mSL_define_opcode("GM_Addr", 135); // etc.
);

