/*
    A micro Script Language for JSFX plug-ins

    Part0 : utilities
        mSL_Utilities.jsfx-inc
    J.J. Girardot - 7/2020
*/


@init





//=====VARIABLES
mSL_errX = 0;
mSL_wbl = 0;
mSL_wfr = 0;
mSL_errPos = 0;
mSL_new_StrPtrs = 0;
mSL_StrsSize = 0;
mSL_PtrPtc = 0; // allocating pointer in strings available
mSL_PtrTPtc = 0; // allocating pointer in temporary strings available
mSL_current_StrPtrs = 0;
mSL_Lock = 0; // lock threads execution while compiling
mSL_loc_tim = 0;
//mSL_EmptyAVars = 0;
//mSL_EmptyOVars = 0;
//mSL_EmptyPVars = 0;
mSL_wa1 = 0;
jvarsHashTbl = jvarsHStep = 0;

// Various structures

// Other variables


// Manage a log
/*
    Keep last "n" strings
*/
mSL_log_flag = 0;
#mSL_Sys_log000 = ""; #mSL_Sys_log001 = ""; #mSL_Sys_log002 = ""; #mSL_Sys_log003 = ""; #mSL_Sys_log004 = "";
#mSL_Sys_log005 = ""; #mSL_Sys_log006 = ""; #mSL_Sys_log007 = ""; #mSL_Sys_log008 = ""; #mSL_Sys_log009 = "";
#mSL_Sys_log010 = ""; #mSL_Sys_log011 = ""; #mSL_Sys_log012 = ""; #mSL_Sys_log013 = ""; #mSL_Sys_log014 = "";
#mSL_Sys_log015 = ""; #mSL_Sys_log016 = ""; #mSL_Sys_log017 = ""; #mSL_Sys_log018 = ""; #mSL_Sys_log019 = "";
#mSL_Sys_log020 = ""; #mSL_Sys_log021 = ""; #mSL_Sys_log022 = ""; #mSL_Sys_log023 = ""; #mSL_Sys_log024 = "";
#mSL_Sys_log025 = ""; #mSL_Sys_log026 = ""; #mSL_Sys_log027 = ""; #mSL_Sys_log028 = ""; #mSL_Sys_log029 = "";
#mSL_Sys_log030 = ""; #mSL_Sys_log031 = ""; #mSL_Sys_log032 = ""; #mSL_Sys_log033 = ""; #mSL_Sys_log034 = "";
#mSL_Sys_log035 = ""; #mSL_Sys_log036 = ""; #mSL_Sys_log037 = ""; #mSL_Sys_log038 = ""; #mSL_Sys_log039 = "";
#mSL_Sys_log040 = ""; #mSL_Sys_log041 = ""; #mSL_Sys_log042 = ""; #mSL_Sys_log043 = ""; #mSL_Sys_log044 = "";
#mSL_Sys_log045 = ""; #mSL_Sys_log046 = ""; #mSL_Sys_log047 = ""; #mSL_Sys_log048 = ""; #mSL_Sys_log049 = "";
#mSL_Sys_log050 = ""; #mSL_Sys_log051 = ""; #mSL_Sys_log052 = ""; #mSL_Sys_log053 = ""; #mSL_Sys_log054 = "";
#mSL_Sys_log055 = ""; #mSL_Sys_log056 = ""; #mSL_Sys_log057 = ""; #mSL_Sys_log058 = ""; #mSL_Sys_log059 = "";
#mSL_Sys_log060 = ""; #mSL_Sys_log061 = ""; #mSL_Sys_log062 = ""; #mSL_Sys_log063 = ""; #mSL_Sys_log064 = "";
#mSL_Sys_log065 = ""; #mSL_Sys_log066 = ""; #mSL_Sys_log067 = ""; #mSL_Sys_log068 = ""; #mSL_Sys_log069 = "";
#mSL_Sys_log070 = ""; #mSL_Sys_log071 = ""; #mSL_Sys_log072 = ""; #mSL_Sys_log073 = ""; #mSL_Sys_log074 = "";
#mSL_Sys_log075 = ""; #mSL_Sys_log076 = ""; #mSL_Sys_log077 = ""; #mSL_Sys_log078 = ""; #mSL_Sys_log079 = "";
#mSL_Sys_log080 = ""; #mSL_Sys_log081 = ""; #mSL_Sys_log082 = ""; #mSL_Sys_log083 = ""; #mSL_Sys_log084 = "";
#mSL_Sys_log085 = ""; #mSL_Sys_log086 = ""; #mSL_Sys_log087 = ""; #mSL_Sys_log088 = ""; #mSL_Sys_log089 = "";
#mSL_Sys_log090 = ""; #mSL_Sys_log091 = ""; #mSL_Sys_log092 = ""; #mSL_Sys_log093 = ""; #mSL_Sys_log094 = "";
#mSL_Sys_log095 = ""; #mSL_Sys_log096 = ""; #mSL_Sys_log097 = ""; #mSL_Sys_log098 = ""; #mSL_Sys_log099 = "";

#mSL_Sys_log100 = ""; #mSL_Sys_log101 = ""; #mSL_Sys_log102 = ""; #mSL_Sys_log103 = ""; #mSL_Sys_log104 = "";
#mSL_Sys_log105 = ""; #mSL_Sys_log106 = ""; #mSL_Sys_log107 = ""; #mSL_Sys_log108 = ""; #mSL_Sys_log109 = "";
#mSL_Sys_log110 = ""; #mSL_Sys_log111 = ""; #mSL_Sys_log112 = ""; #mSL_Sys_log113 = ""; #mSL_Sys_log114 = "";
#mSL_Sys_log115 = ""; #mSL_Sys_log116 = ""; #mSL_Sys_log117 = ""; #mSL_Sys_log118 = ""; #mSL_Sys_log119 = "";
#mSL_Sys_log120 = ""; #mSL_Sys_log121 = ""; #mSL_Sys_log122 = ""; #mSL_Sys_log123 = ""; #mSL_Sys_log124 = "";
#mSL_Sys_log125 = ""; #mSL_Sys_log126 = ""; #mSL_Sys_log127 = ""; #mSL_Sys_log128 = ""; #mSL_Sys_log129 = "";
#mSL_Sys_log130 = ""; #mSL_Sys_log131 = ""; #mSL_Sys_log132 = ""; #mSL_Sys_log133 = ""; #mSL_Sys_log134 = "";
#mSL_Sys_log135 = ""; #mSL_Sys_log136 = ""; #mSL_Sys_log137 = ""; #mSL_Sys_log138 = ""; #mSL_Sys_log139 = "";
#mSL_Sys_log140 = ""; #mSL_Sys_log141 = ""; #mSL_Sys_log142 = ""; #mSL_Sys_log143 = ""; #mSL_Sys_log144 = "";
#mSL_Sys_log145 = ""; #mSL_Sys_log146 = ""; #mSL_Sys_log147 = ""; #mSL_Sys_log148 = ""; #mSL_Sys_log149 = "";
#mSL_Sys_log150 = ""; #mSL_Sys_log151 = ""; #mSL_Sys_log152 = ""; #mSL_Sys_log153 = ""; #mSL_Sys_log154 = "";
#mSL_Sys_log155 = ""; #mSL_Sys_log156 = ""; #mSL_Sys_log157 = ""; #mSL_Sys_log158 = ""; #mSL_Sys_log159 = "";
#mSL_Sys_log160 = ""; #mSL_Sys_log161 = ""; #mSL_Sys_log162 = ""; #mSL_Sys_log163 = ""; #mSL_Sys_log164 = "";
#mSL_Sys_log165 = ""; #mSL_Sys_log166 = ""; #mSL_Sys_log167 = ""; #mSL_Sys_log168 = ""; #mSL_Sys_log169 = "";
#mSL_Sys_log170 = ""; #mSL_Sys_log171 = ""; #mSL_Sys_log172 = ""; #mSL_Sys_log173 = ""; #mSL_Sys_log174 = "";
#mSL_Sys_log175 = ""; #mSL_Sys_log176 = ""; #mSL_Sys_log177 = ""; #mSL_Sys_log178 = ""; #mSL_Sys_log179 = "";
#mSL_Sys_log180 = ""; #mSL_Sys_log181 = ""; #mSL_Sys_log182 = ""; #mSL_Sys_log183 = ""; #mSL_Sys_log184 = "";
#mSL_Sys_log185 = ""; #mSL_Sys_log186 = ""; #mSL_Sys_log187 = ""; #mSL_Sys_log188 = ""; #mSL_Sys_log189 = "";
#mSL_Sys_log190 = ""; #mSL_Sys_log191 = ""; #mSL_Sys_log192 = ""; #mSL_Sys_log193 = ""; #mSL_Sys_log194 = "";
#mSL_Sys_log195 = ""; #mSL_Sys_log196 = ""; #mSL_Sys_log197 = ""; #mSL_Sys_log198 = ""; #mSL_Sys_log199 = "";

#mSL_Sys_log200 = ""; #mSL_Sys_log201 = ""; #mSL_Sys_log202 = ""; #mSL_Sys_log203 = ""; #mSL_Sys_log204 = "";
#mSL_Sys_log205 = ""; #mSL_Sys_log206 = ""; #mSL_Sys_log207 = ""; #mSL_Sys_log208 = ""; #mSL_Sys_log209 = "";
#mSL_Sys_log210 = ""; #mSL_Sys_log211 = ""; #mSL_Sys_log212 = ""; #mSL_Sys_log213 = ""; #mSL_Sys_log214 = "";
#mSL_Sys_log215 = ""; #mSL_Sys_log216 = ""; #mSL_Sys_log217 = ""; #mSL_Sys_log218 = ""; #mSL_Sys_log219 = "";
#mSL_Sys_log220 = ""; #mSL_Sys_log221 = ""; #mSL_Sys_log222 = ""; #mSL_Sys_log223 = ""; #mSL_Sys_log224 = "";
#mSL_Sys_log225 = ""; #mSL_Sys_log226 = ""; #mSL_Sys_log227 = ""; #mSL_Sys_log228 = ""; #mSL_Sys_log229 = "";
#mSL_Sys_log230 = ""; #mSL_Sys_log231 = ""; #mSL_Sys_log232 = ""; #mSL_Sys_log233 = ""; #mSL_Sys_log234 = "";
#mSL_Sys_log235 = ""; #mSL_Sys_log236 = ""; #mSL_Sys_log237 = ""; #mSL_Sys_log238 = ""; #mSL_Sys_log239 = "";
#mSL_Sys_log240 = ""; #mSL_Sys_log241 = ""; #mSL_Sys_log242 = ""; #mSL_Sys_log243 = ""; #mSL_Sys_log244 = "";
#mSL_Sys_log245 = ""; #mSL_Sys_log246 = ""; #mSL_Sys_log247 = ""; #mSL_Sys_log248 = ""; #mSL_Sys_log249 = "";
#mSL_Sys_log250 = ""; #mSL_Sys_log251 = ""; #mSL_Sys_log252 = ""; #mSL_Sys_log253 = ""; #mSL_Sys_log254 = "";
#mSL_Sys_log255 = ""; #mSL_Sys_log256 = ""; #mSL_Sys_log257 = ""; #mSL_Sys_log258 = ""; #mSL_Sys_log259 = "";
#mSL_Sys_log260 = ""; #mSL_Sys_log261 = ""; #mSL_Sys_log262 = ""; #mSL_Sys_log263 = ""; #mSL_Sys_log264 = "";
#mSL_Sys_log265 = ""; #mSL_Sys_log266 = ""; #mSL_Sys_log267 = ""; #mSL_Sys_log268 = ""; #mSL_Sys_log269 = "";
#mSL_Sys_log270 = ""; #mSL_Sys_log271 = ""; #mSL_Sys_log272 = ""; #mSL_Sys_log273 = ""; #mSL_Sys_log274 = "";
#mSL_Sys_log275 = ""; #mSL_Sys_log276 = ""; #mSL_Sys_log277 = ""; #mSL_Sys_log278 = ""; #mSL_Sys_log279 = "";
#mSL_Sys_log280 = ""; #mSL_Sys_log281 = ""; #mSL_Sys_log282 = ""; #mSL_Sys_log283 = ""; #mSL_Sys_log284 = "";
#mSL_Sys_log285 = ""; #mSL_Sys_log286 = ""; #mSL_Sys_log287 = ""; #mSL_Sys_log288 = ""; #mSL_Sys_log289 = "";
#mSL_Sys_log290 = ""; #mSL_Sys_log291 = ""; #mSL_Sys_log292 = ""; #mSL_Sys_log293 = ""; #mSL_Sys_log294 = "";
#mSL_Sys_log295 = ""; #mSL_Sys_log296 = ""; #mSL_Sys_log297 = ""; #mSL_Sys_log298 = ""; #mSL_Sys_log299 = "";

#mSL_Sys_log300 = ""; #mSL_Sys_log301 = ""; #mSL_Sys_log302 = ""; #mSL_Sys_log303 = ""; #mSL_Sys_log304 = "";
#mSL_Sys_log305 = ""; #mSL_Sys_log306 = ""; #mSL_Sys_log307 = ""; #mSL_Sys_log308 = ""; #mSL_Sys_log309 = "";
#mSL_Sys_log310 = ""; #mSL_Sys_log311 = ""; #mSL_Sys_log312 = ""; #mSL_Sys_log313 = ""; #mSL_Sys_log314 = "";
#mSL_Sys_log315 = ""; #mSL_Sys_log316 = ""; #mSL_Sys_log317 = ""; #mSL_Sys_log318 = ""; #mSL_Sys_log319 = "";
#mSL_Sys_log320 = ""; #mSL_Sys_log321 = ""; #mSL_Sys_log322 = ""; #mSL_Sys_log323 = ""; #mSL_Sys_log324 = "";
#mSL_Sys_log325 = ""; #mSL_Sys_log326 = ""; #mSL_Sys_log327 = ""; #mSL_Sys_log328 = ""; #mSL_Sys_log329 = "";
#mSL_Sys_log330 = ""; #mSL_Sys_log331 = ""; #mSL_Sys_log332 = ""; #mSL_Sys_log333 = ""; #mSL_Sys_log334 = "";
#mSL_Sys_log335 = ""; #mSL_Sys_log336 = ""; #mSL_Sys_log337 = ""; #mSL_Sys_log338 = ""; #mSL_Sys_log339 = "";
#mSL_Sys_log340 = ""; #mSL_Sys_log341 = ""; #mSL_Sys_log342 = ""; #mSL_Sys_log343 = ""; #mSL_Sys_log344 = "";
#mSL_Sys_log345 = ""; #mSL_Sys_log346 = ""; #mSL_Sys_log347 = ""; #mSL_Sys_log348 = ""; #mSL_Sys_log349 = "";
#mSL_Sys_log350 = ""; #mSL_Sys_log351 = ""; #mSL_Sys_log352 = ""; #mSL_Sys_log353 = ""; #mSL_Sys_log354 = "";
#mSL_Sys_log355 = ""; #mSL_Sys_log356 = ""; #mSL_Sys_log357 = ""; #mSL_Sys_log358 = ""; #mSL_Sys_log359 = "";
#mSL_Sys_log360 = ""; #mSL_Sys_log361 = ""; #mSL_Sys_log362 = ""; #mSL_Sys_log363 = ""; #mSL_Sys_log364 = "";
#mSL_Sys_log365 = ""; #mSL_Sys_log366 = ""; #mSL_Sys_log367 = ""; #mSL_Sys_log368 = ""; #mSL_Sys_log369 = "";
#mSL_Sys_log370 = ""; #mSL_Sys_log371 = ""; #mSL_Sys_log372 = ""; #mSL_Sys_log373 = ""; #mSL_Sys_log374 = "";
#mSL_Sys_log375 = ""; #mSL_Sys_log376 = ""; #mSL_Sys_log377 = ""; #mSL_Sys_log378 = ""; #mSL_Sys_log379 = "";
#mSL_Sys_log380 = ""; #mSL_Sys_log381 = ""; #mSL_Sys_log382 = ""; #mSL_Sys_log383 = ""; #mSL_Sys_log384 = "";
#mSL_Sys_log385 = ""; #mSL_Sys_log386 = ""; #mSL_Sys_log387 = ""; #mSL_Sys_log388 = ""; #mSL_Sys_log389 = "";
#mSL_Sys_log390 = ""; #mSL_Sys_log391 = ""; #mSL_Sys_log392 = ""; #mSL_Sys_log393 = ""; #mSL_Sys_log394 = "";
#mSL_Sys_log395 = ""; #mSL_Sys_log396 = ""; #mSL_Sys_log397 = ""; #mSL_Sys_log398 = ""; #mSL_Sys_log399 = "";

#mSL_Sys_log400 = ""; #mSL_Sys_log401 = ""; #mSL_Sys_log402 = ""; #mSL_Sys_log403 = ""; #mSL_Sys_log404 = "";
#mSL_Sys_log405 = ""; #mSL_Sys_log406 = ""; #mSL_Sys_log407 = ""; #mSL_Sys_log408 = ""; #mSL_Sys_log409 = "";
#mSL_Sys_log410 = ""; #mSL_Sys_log411 = ""; #mSL_Sys_log412 = ""; #mSL_Sys_log413 = ""; #mSL_Sys_log414 = "";
#mSL_Sys_log415 = ""; #mSL_Sys_log416 = ""; #mSL_Sys_log417 = ""; #mSL_Sys_log418 = ""; #mSL_Sys_log419 = "";
#mSL_Sys_log420 = ""; #mSL_Sys_log421 = ""; #mSL_Sys_log422 = ""; #mSL_Sys_log423 = ""; #mSL_Sys_log424 = "";
#mSL_Sys_log425 = ""; #mSL_Sys_log426 = ""; #mSL_Sys_log427 = ""; #mSL_Sys_log428 = ""; #mSL_Sys_log429 = "";
#mSL_Sys_log430 = ""; #mSL_Sys_log431 = ""; #mSL_Sys_log432 = ""; #mSL_Sys_log433 = ""; #mSL_Sys_log434 = "";
#mSL_Sys_log435 = ""; #mSL_Sys_log436 = ""; #mSL_Sys_log437 = ""; #mSL_Sys_log438 = ""; #mSL_Sys_log439 = "";
#mSL_Sys_log440 = ""; #mSL_Sys_log441 = ""; #mSL_Sys_log442 = ""; #mSL_Sys_log443 = ""; #mSL_Sys_log444 = "";
#mSL_Sys_log445 = ""; #mSL_Sys_log446 = ""; #mSL_Sys_log447 = ""; #mSL_Sys_log448 = ""; #mSL_Sys_log449 = "";
#mSL_Sys_log450 = ""; #mSL_Sys_log451 = ""; #mSL_Sys_log452 = ""; #mSL_Sys_log453 = ""; #mSL_Sys_log454 = "";
#mSL_Sys_log455 = ""; #mSL_Sys_log456 = ""; #mSL_Sys_log457 = ""; #mSL_Sys_log458 = ""; #mSL_Sys_log459 = "";
#mSL_Sys_log460 = ""; #mSL_Sys_log461 = ""; #mSL_Sys_log462 = ""; #mSL_Sys_log463 = ""; #mSL_Sys_log464 = "";
#mSL_Sys_log465 = ""; #mSL_Sys_log466 = ""; #mSL_Sys_log467 = ""; #mSL_Sys_log468 = ""; #mSL_Sys_log469 = "";
#mSL_Sys_log470 = ""; #mSL_Sys_log471 = ""; #mSL_Sys_log472 = ""; #mSL_Sys_log473 = ""; #mSL_Sys_log474 = "";
#mSL_Sys_log475 = ""; #mSL_Sys_log476 = ""; #mSL_Sys_log477 = ""; #mSL_Sys_log478 = ""; #mSL_Sys_log479 = "";
#mSL_Sys_log480 = ""; #mSL_Sys_log481 = ""; #mSL_Sys_log482 = ""; #mSL_Sys_log483 = ""; #mSL_Sys_log484 = "";
#mSL_Sys_log485 = ""; #mSL_Sys_log486 = ""; #mSL_Sys_log487 = ""; #mSL_Sys_log488 = ""; #mSL_Sys_log489 = "";
#mSL_Sys_log490 = ""; #mSL_Sys_log491 = ""; #mSL_Sys_log492 = ""; #mSL_Sys_log493 = ""; #mSL_Sys_log494 = "";
#mSL_Sys_log495 = ""; #mSL_Sys_log496 = ""; #mSL_Sys_log497 = ""; #mSL_Sys_log498 = ""; #mSL_Sys_log499 = "";
#mSL_Sys_logzzz = "";


#mSL_Usr_log000 = ""; #mSL_Usr_log001 = ""; #mSL_Usr_log002 = ""; #mSL_Usr_log003 = ""; #mSL_Usr_log004 = "";
#mSL_Usr_log005 = ""; #mSL_Usr_log006 = ""; #mSL_Usr_log007 = ""; #mSL_Usr_log008 = ""; #mSL_Usr_log009 = "";
#mSL_Usr_log010 = ""; #mSL_Usr_log011 = ""; #mSL_Usr_log012 = ""; #mSL_Usr_log013 = ""; #mSL_Usr_log014 = "";
#mSL_Usr_log015 = ""; #mSL_Usr_log016 = ""; #mSL_Usr_log017 = ""; #mSL_Usr_log018 = ""; #mSL_Usr_log019 = "";
#mSL_Usr_log020 = ""; #mSL_Usr_log021 = ""; #mSL_Usr_log022 = ""; #mSL_Usr_log023 = ""; #mSL_Usr_log024 = "";
#mSL_Usr_log025 = ""; #mSL_Usr_log026 = ""; #mSL_Usr_log027 = ""; #mSL_Usr_log028 = ""; #mSL_Usr_log029 = "";
#mSL_Usr_log030 = ""; #mSL_Usr_log031 = ""; #mSL_Usr_log032 = ""; #mSL_Usr_log033 = ""; #mSL_Usr_log034 = "";
#mSL_Usr_log035 = ""; #mSL_Usr_log036 = ""; #mSL_Usr_log037 = ""; #mSL_Usr_log038 = ""; #mSL_Usr_log039 = "";
#mSL_Usr_log040 = ""; #mSL_Usr_log041 = ""; #mSL_Usr_log042 = ""; #mSL_Usr_log043 = ""; #mSL_Usr_log044 = "";
#mSL_Usr_log045 = ""; #mSL_Usr_log046 = ""; #mSL_Usr_log047 = ""; #mSL_Usr_log048 = ""; #mSL_Usr_log049 = "";
#mSL_Usr_log050 = ""; #mSL_Usr_log051 = ""; #mSL_Usr_log052 = ""; #mSL_Usr_log053 = ""; #mSL_Usr_log054 = "";
#mSL_Usr_log055 = ""; #mSL_Usr_log056 = ""; #mSL_Usr_log057 = ""; #mSL_Usr_log058 = ""; #mSL_Usr_log059 = "";
#mSL_Usr_log060 = ""; #mSL_Usr_log061 = ""; #mSL_Usr_log062 = ""; #mSL_Usr_log063 = ""; #mSL_Usr_log064 = "";
#mSL_Usr_log065 = ""; #mSL_Usr_log066 = ""; #mSL_Usr_log067 = ""; #mSL_Usr_log068 = ""; #mSL_Usr_log069 = "";
#mSL_Usr_log070 = ""; #mSL_Usr_log071 = ""; #mSL_Usr_log072 = ""; #mSL_Usr_log073 = ""; #mSL_Usr_log074 = "";
#mSL_Usr_log075 = ""; #mSL_Usr_log076 = ""; #mSL_Usr_log077 = ""; #mSL_Usr_log078 = ""; #mSL_Usr_log079 = "";
#mSL_Usr_log080 = ""; #mSL_Usr_log081 = ""; #mSL_Usr_log082 = ""; #mSL_Usr_log083 = ""; #mSL_Usr_log084 = "";
#mSL_Usr_log085 = ""; #mSL_Usr_log086 = ""; #mSL_Usr_log087 = ""; #mSL_Usr_log088 = ""; #mSL_Usr_log089 = "";
#mSL_Usr_log090 = ""; #mSL_Usr_log091 = ""; #mSL_Usr_log092 = ""; #mSL_Usr_log093 = ""; #mSL_Usr_log094 = "";
#mSL_Usr_log095 = ""; #mSL_Usr_log096 = ""; #mSL_Usr_log097 = ""; #mSL_Usr_log098 = ""; #mSL_Usr_log099 = "";

#mSL_Usr_log100 = ""; #mSL_Usr_log101 = ""; #mSL_Usr_log102 = ""; #mSL_Usr_log103 = ""; #mSL_Usr_log104 = "";
#mSL_Usr_log105 = ""; #mSL_Usr_log106 = ""; #mSL_Usr_log107 = ""; #mSL_Usr_log108 = ""; #mSL_Usr_log109 = "";
#mSL_Usr_log110 = ""; #mSL_Usr_log111 = ""; #mSL_Usr_log112 = ""; #mSL_Usr_log113 = ""; #mSL_Usr_log114 = "";
#mSL_Usr_log115 = ""; #mSL_Usr_log116 = ""; #mSL_Usr_log117 = ""; #mSL_Usr_log118 = ""; #mSL_Usr_log119 = "";
#mSL_Usr_log120 = ""; #mSL_Usr_log121 = ""; #mSL_Usr_log122 = ""; #mSL_Usr_log123 = ""; #mSL_Usr_log124 = "";
#mSL_Usr_log125 = ""; #mSL_Usr_log126 = ""; #mSL_Usr_log127 = ""; #mSL_Usr_log128 = ""; #mSL_Usr_log129 = "";
#mSL_Usr_log130 = ""; #mSL_Usr_log131 = ""; #mSL_Usr_log132 = ""; #mSL_Usr_log133 = ""; #mSL_Usr_log134 = "";
#mSL_Usr_log135 = ""; #mSL_Usr_log136 = ""; #mSL_Usr_log137 = ""; #mSL_Usr_log138 = ""; #mSL_Usr_log139 = "";
#mSL_Usr_log140 = ""; #mSL_Usr_log141 = ""; #mSL_Usr_log142 = ""; #mSL_Usr_log143 = ""; #mSL_Usr_log144 = "";
#mSL_Usr_log145 = ""; #mSL_Usr_log146 = ""; #mSL_Usr_log147 = ""; #mSL_Usr_log148 = ""; #mSL_Usr_log149 = "";
#mSL_Usr_log150 = ""; #mSL_Usr_log151 = ""; #mSL_Usr_log152 = ""; #mSL_Usr_log153 = ""; #mSL_Usr_log154 = "";
#mSL_Usr_log155 = ""; #mSL_Usr_log156 = ""; #mSL_Usr_log157 = ""; #mSL_Usr_log158 = ""; #mSL_Usr_log159 = "";
#mSL_Usr_log160 = ""; #mSL_Usr_log161 = ""; #mSL_Usr_log162 = ""; #mSL_Usr_log163 = ""; #mSL_Usr_log164 = "";
#mSL_Usr_log165 = ""; #mSL_Usr_log166 = ""; #mSL_Usr_log167 = ""; #mSL_Usr_log168 = ""; #mSL_Usr_log169 = "";
#mSL_Usr_log170 = ""; #mSL_Usr_log171 = ""; #mSL_Usr_log172 = ""; #mSL_Usr_log173 = ""; #mSL_Usr_log174 = "";
#mSL_Usr_log175 = ""; #mSL_Usr_log176 = ""; #mSL_Usr_log177 = ""; #mSL_Usr_log178 = ""; #mSL_Usr_log179 = "";
#mSL_Usr_log180 = ""; #mSL_Usr_log181 = ""; #mSL_Usr_log182 = ""; #mSL_Usr_log183 = ""; #mSL_Usr_log184 = "";
#mSL_Usr_log185 = ""; #mSL_Usr_log186 = ""; #mSL_Usr_log187 = ""; #mSL_Usr_log188 = ""; #mSL_Usr_log189 = "";
#mSL_Usr_log190 = ""; #mSL_Usr_log191 = ""; #mSL_Usr_log192 = ""; #mSL_Usr_log193 = ""; #mSL_Usr_log194 = "";
#mSL_Usr_log195 = ""; #mSL_Usr_log196 = ""; #mSL_Usr_log197 = ""; #mSL_Usr_log198 = ""; #mSL_Usr_log199 = "";

#mSL_Usr_log200 = ""; #mSL_Usr_log201 = ""; #mSL_Usr_log202 = ""; #mSL_Usr_log203 = ""; #mSL_Usr_log204 = "";
#mSL_Usr_log205 = ""; #mSL_Usr_log206 = ""; #mSL_Usr_log207 = ""; #mSL_Usr_log208 = ""; #mSL_Usr_log209 = "";
#mSL_Usr_log210 = ""; #mSL_Usr_log211 = ""; #mSL_Usr_log212 = ""; #mSL_Usr_log213 = ""; #mSL_Usr_log214 = "";
#mSL_Usr_log215 = ""; #mSL_Usr_log216 = ""; #mSL_Usr_log217 = ""; #mSL_Usr_log218 = ""; #mSL_Usr_log219 = "";
#mSL_Usr_log220 = ""; #mSL_Usr_log221 = ""; #mSL_Usr_log222 = ""; #mSL_Usr_log223 = ""; #mSL_Usr_log224 = "";
#mSL_Usr_log225 = ""; #mSL_Usr_log226 = ""; #mSL_Usr_log227 = ""; #mSL_Usr_log228 = ""; #mSL_Usr_log229 = "";
#mSL_Usr_log230 = ""; #mSL_Usr_log231 = ""; #mSL_Usr_log232 = ""; #mSL_Usr_log233 = ""; #mSL_Usr_log234 = "";
#mSL_Usr_log235 = ""; #mSL_Usr_log236 = ""; #mSL_Usr_log237 = ""; #mSL_Usr_log238 = ""; #mSL_Usr_log239 = "";
#mSL_Usr_log240 = ""; #mSL_Usr_log241 = ""; #mSL_Usr_log242 = ""; #mSL_Usr_log243 = ""; #mSL_Usr_log244 = "";
#mSL_Usr_log245 = ""; #mSL_Usr_log246 = ""; #mSL_Usr_log247 = ""; #mSL_Usr_log248 = ""; #mSL_Usr_log249 = "";
#mSL_Usr_log250 = ""; #mSL_Usr_log251 = ""; #mSL_Usr_log252 = ""; #mSL_Usr_log253 = ""; #mSL_Usr_log254 = "";
#mSL_Usr_log255 = ""; #mSL_Usr_log256 = ""; #mSL_Usr_log257 = ""; #mSL_Usr_log258 = ""; #mSL_Usr_log259 = "";
#mSL_Usr_log260 = ""; #mSL_Usr_log261 = ""; #mSL_Usr_log262 = ""; #mSL_Usr_log263 = ""; #mSL_Usr_log264 = "";
#mSL_Usr_log265 = ""; #mSL_Usr_log266 = ""; #mSL_Usr_log267 = ""; #mSL_Usr_log268 = ""; #mSL_Usr_log269 = "";
#mSL_Usr_log270 = ""; #mSL_Usr_log271 = ""; #mSL_Usr_log272 = ""; #mSL_Usr_log273 = ""; #mSL_Usr_log274 = "";
#mSL_Usr_log275 = ""; #mSL_Usr_log276 = ""; #mSL_Usr_log277 = ""; #mSL_Usr_log278 = ""; #mSL_Usr_log279 = "";
#mSL_Usr_log280 = ""; #mSL_Usr_log281 = ""; #mSL_Usr_log282 = ""; #mSL_Usr_log283 = ""; #mSL_Usr_log284 = "";
#mSL_Usr_log285 = ""; #mSL_Usr_log286 = ""; #mSL_Usr_log287 = ""; #mSL_Usr_log288 = ""; #mSL_Usr_log289 = "";
#mSL_Usr_log290 = ""; #mSL_Usr_log291 = ""; #mSL_Usr_log292 = ""; #mSL_Usr_log293 = ""; #mSL_Usr_log294 = "";
#mSL_Usr_log295 = ""; #mSL_Usr_log296 = ""; #mSL_Usr_log297 = ""; #mSL_Usr_log298 = ""; #mSL_Usr_log299 = "";

#mSL_Usr_log300 = ""; #mSL_Usr_log301 = ""; #mSL_Usr_log302 = ""; #mSL_Usr_log303 = ""; #mSL_Usr_log304 = "";
#mSL_Usr_log305 = ""; #mSL_Usr_log306 = ""; #mSL_Usr_log307 = ""; #mSL_Usr_log308 = ""; #mSL_Usr_log309 = "";
#mSL_Usr_log310 = ""; #mSL_Usr_log311 = ""; #mSL_Usr_log312 = ""; #mSL_Usr_log313 = ""; #mSL_Usr_log314 = "";
#mSL_Usr_log315 = ""; #mSL_Usr_log316 = ""; #mSL_Usr_log317 = ""; #mSL_Usr_log318 = ""; #mSL_Usr_log319 = "";
#mSL_Usr_log320 = ""; #mSL_Usr_log321 = ""; #mSL_Usr_log322 = ""; #mSL_Usr_log323 = ""; #mSL_Usr_log324 = "";
#mSL_Usr_log325 = ""; #mSL_Usr_log326 = ""; #mSL_Usr_log327 = ""; #mSL_Usr_log328 = ""; #mSL_Usr_log329 = "";
#mSL_Usr_log330 = ""; #mSL_Usr_log331 = ""; #mSL_Usr_log332 = ""; #mSL_Usr_log333 = ""; #mSL_Usr_log334 = "";
#mSL_Usr_log335 = ""; #mSL_Usr_log336 = ""; #mSL_Usr_log337 = ""; #mSL_Usr_log338 = ""; #mSL_Usr_log339 = "";
#mSL_Usr_log340 = ""; #mSL_Usr_log341 = ""; #mSL_Usr_log342 = ""; #mSL_Usr_log343 = ""; #mSL_Usr_log344 = "";
#mSL_Usr_log345 = ""; #mSL_Usr_log346 = ""; #mSL_Usr_log347 = ""; #mSL_Usr_log348 = ""; #mSL_Usr_log349 = "";
#mSL_Usr_log350 = ""; #mSL_Usr_log351 = ""; #mSL_Usr_log352 = ""; #mSL_Usr_log353 = ""; #mSL_Usr_log354 = "";
#mSL_Usr_log355 = ""; #mSL_Usr_log356 = ""; #mSL_Usr_log357 = ""; #mSL_Usr_log358 = ""; #mSL_Usr_log359 = "";
#mSL_Usr_log360 = ""; #mSL_Usr_log361 = ""; #mSL_Usr_log362 = ""; #mSL_Usr_log363 = ""; #mSL_Usr_log364 = "";
#mSL_Usr_log365 = ""; #mSL_Usr_log366 = ""; #mSL_Usr_log367 = ""; #mSL_Usr_log368 = ""; #mSL_Usr_log369 = "";
#mSL_Usr_log370 = ""; #mSL_Usr_log371 = ""; #mSL_Usr_log372 = ""; #mSL_Usr_log373 = ""; #mSL_Usr_log374 = "";
#mSL_Usr_log375 = ""; #mSL_Usr_log376 = ""; #mSL_Usr_log377 = ""; #mSL_Usr_log378 = ""; #mSL_Usr_log379 = "";
#mSL_Usr_log380 = ""; #mSL_Usr_log381 = ""; #mSL_Usr_log382 = ""; #mSL_Usr_log383 = ""; #mSL_Usr_log384 = "";
#mSL_Usr_log385 = ""; #mSL_Usr_log386 = ""; #mSL_Usr_log387 = ""; #mSL_Usr_log388 = ""; #mSL_Usr_log389 = "";
#mSL_Usr_log390 = ""; #mSL_Usr_log391 = ""; #mSL_Usr_log392 = ""; #mSL_Usr_log393 = ""; #mSL_Usr_log394 = "";
#mSL_Usr_log395 = ""; #mSL_Usr_log396 = ""; #mSL_Usr_log397 = ""; #mSL_Usr_log398 = ""; #mSL_Usr_log399 = "";

#mSL_Usr_log400 = ""; #mSL_Usr_log401 = ""; #mSL_Usr_log402 = ""; #mSL_Usr_log403 = ""; #mSL_Usr_log404 = "";
#mSL_Usr_log405 = ""; #mSL_Usr_log406 = ""; #mSL_Usr_log407 = ""; #mSL_Usr_log408 = ""; #mSL_Usr_log409 = "";
#mSL_Usr_log410 = ""; #mSL_Usr_log411 = ""; #mSL_Usr_log412 = ""; #mSL_Usr_log413 = ""; #mSL_Usr_log414 = "";
#mSL_Usr_log415 = ""; #mSL_Usr_log416 = ""; #mSL_Usr_log417 = ""; #mSL_Usr_log418 = ""; #mSL_Usr_log419 = "";
#mSL_Usr_log420 = ""; #mSL_Usr_log421 = ""; #mSL_Usr_log422 = ""; #mSL_Usr_log423 = ""; #mSL_Usr_log424 = "";
#mSL_Usr_log425 = ""; #mSL_Usr_log426 = ""; #mSL_Usr_log427 = ""; #mSL_Usr_log428 = ""; #mSL_Usr_log429 = "";
#mSL_Usr_log430 = ""; #mSL_Usr_log431 = ""; #mSL_Usr_log432 = ""; #mSL_Usr_log433 = ""; #mSL_Usr_log434 = "";
#mSL_Usr_log435 = ""; #mSL_Usr_log436 = ""; #mSL_Usr_log437 = ""; #mSL_Usr_log438 = ""; #mSL_Usr_log439 = "";
#mSL_Usr_log440 = ""; #mSL_Usr_log441 = ""; #mSL_Usr_log442 = ""; #mSL_Usr_log443 = ""; #mSL_Usr_log444 = "";
#mSL_Usr_log445 = ""; #mSL_Usr_log446 = ""; #mSL_Usr_log447 = ""; #mSL_Usr_log448 = ""; #mSL_Usr_log449 = "";
#mSL_Usr_log450 = ""; #mSL_Usr_log451 = ""; #mSL_Usr_log452 = ""; #mSL_Usr_log453 = ""; #mSL_Usr_log454 = "";
#mSL_Usr_log455 = ""; #mSL_Usr_log456 = ""; #mSL_Usr_log457 = ""; #mSL_Usr_log458 = ""; #mSL_Usr_log459 = "";
#mSL_Usr_log460 = ""; #mSL_Usr_log461 = ""; #mSL_Usr_log462 = ""; #mSL_Usr_log463 = ""; #mSL_Usr_log464 = "";
#mSL_Usr_log465 = ""; #mSL_Usr_log466 = ""; #mSL_Usr_log467 = ""; #mSL_Usr_log468 = ""; #mSL_Usr_log469 = "";
#mSL_Usr_log470 = ""; #mSL_Usr_log471 = ""; #mSL_Usr_log472 = ""; #mSL_Usr_log473 = ""; #mSL_Usr_log474 = "";
#mSL_Usr_log475 = ""; #mSL_Usr_log476 = ""; #mSL_Usr_log477 = ""; #mSL_Usr_log478 = ""; #mSL_Usr_log479 = "";
#mSL_Usr_log480 = ""; #mSL_Usr_log481 = ""; #mSL_Usr_log482 = ""; #mSL_Usr_log483 = ""; #mSL_Usr_log484 = "";
#mSL_Usr_log485 = ""; #mSL_Usr_log486 = ""; #mSL_Usr_log487 = ""; #mSL_Usr_log488 = ""; #mSL_Usr_log489 = "";
#mSL_Usr_log490 = ""; #mSL_Usr_log491 = ""; #mSL_Usr_log492 = ""; #mSL_Usr_log493 = ""; #mSL_Usr_log494 = "";
#mSL_Usr_log495 = ""; #mSL_Usr_log496 = ""; #mSL_Usr_log497 = ""; #mSL_Usr_log498 = ""; #mSL_Usr_log499 = "";
#mSL_Usr_logzzz = "";


SysLogBox = 0;
UsrLogBox = 0;
logTask = 0;



function init_log_boxes()
(
    SysLogBox = make_array(10);
    SysLogBox[0] = "System Log Box";
    SysLogBox[1] = #mSL_Sys_log000; // The address of the first string
    SysLogBox[2] = #mSL_Sys_logzzz - #mSL_Sys_log000 + 1; // size of the array
    SysLogBox[3] = 0; // pointer in
    SysLogBox[4] = 100; // max line to display
    SysLogBox[5] = 1; // use 1 column
    SysLogBox[6] = 6; // small addition. height
    SysLogBox[7] = 0;
    SysLogBox[8] = 0;
    SysLogBox[9] = "syslog";


    UsrLogBox = make_array(10);
    UsrLogBox[0] = "User Log Box";
    UsrLogBox[1] = #mSL_Usr_log000; // The address of the first string
    UsrLogBox[2] = #mSL_Usr_logzzz - #mSL_Usr_log000 + 1; // size of the array
    UsrLogBox[3] = 0; // pointer in
    UsrLogBox[4] = 100; // max line to display
    UsrLogBox[5] = 1; // use 1 column
    UsrLogBox[6] = 6; // small addition. height
    UsrLogBox[7] = 0;
    UsrLogBox[8] = 0;
    UsrLogBox[9] = "usrlog";
);


function mSL_log(box, str)
local (lnb)
(
    lnb = box[3];
    strcpy(box[1] + lnb, str);
    lnb = (lnb + 1) % box[2];
    strcpy(box[1] + lnb, "_________________");
    box[3] = lnb;
);

function mSL_log_reverse(box, l1, l2)
local (str, ba, sz)
(
    str = #; ba = box[1]; sz = box[2];
    (l2 > l1) ? (
        // keep exchanging
        while (l2 > l1) (
            strcpy(str, ba + l1); strcpy(ba + l1, ba + l2); strcpy(ba + l2, str);
            l1 = l1 + 1; l2 = l2 - 1;
        );
    ) : (
        //
        while (l1 > l2) (
            strcpy(str, ba + l1); strcpy(ba + l1, ba + l2); strcpy(ba + l2, str);
            l1 = (l1 + 1) % sz; l2 = (l2 + sz - 1) % sz;
        );
        // now positions are exchanged
        while (l2 > l1) (
            strcpy(str, ba + l1); strcpy(ba + l1, ba + l2); strcpy(ba + l2, str);
            l1 = l1 + 1; l2 = l2 - 1;
        );
    );
);



// Returns true if A and B are relatively primes
function are_Rel_Primes(A,B)
local (x)
(
    A = max(1,0|max(A, -A)); B = max(1,0|max(B, -B));
    while (A !== 0) (
        (A < B) ? (x = A; A = B; B = x;) : (A = A - B;);
    );
    B === 1;
);

//  The compacting algorithm
function init_idents()
(
    mSL_W_sidt = 128;
    mSL_W_idt = make_array(mSL_W_sidt+2); // editing the identifier
    mSL_W_fidt = make_array(mSL_W_sidt+2); // flags
    mSL_W_CAlgs = 40;
    mSL_W_Algs = make_array(mSL_W_CAlgs); //
    mSL_W_Algs[0] = 1; mSL_W_Algs[1] = 2; mSL_W_Algs[2] = 3; mSL_W_Algs[3] = 16;
    mSL_W_Algs[4] = 2; mSL_W_Algs[5] = 3; mSL_W_Algs[4] = 4; mSL_W_Algs[5] = 5;
    mSL_W_Algs[8] = 6; mSL_W_Algs[9] = 7; mSL_W_Algs[10] = 8; mSL_W_Algs[11] = 9;
    mSL_W_Algs[12] = 1; mSL_W_Algs[13] = 3; mSL_W_Algs[14] = 3; mSL_W_Algs[15] = 2;
    mSL_W_Algs[16] = 10; mSL_W_Algs[17] = 2; mSL_W_Algs[18] = 1; mSL_W_Algs[19] = 11;
    mSL_W_Algs[20] = 12; mSL_W_Algs[21] = 17; mSL_W_Algs[22] = 3; mSL_W_Algs[23] = 13;
    mSL_W_Algs[24] = 15; mSL_W_Algs[25] = 2; mSL_W_Algs[26] = 1; mSL_W_Algs[27] = 14;
    mSL_W_Algs[28] = 3; mSL_W_Algs[29] = 2; mSL_W_Algs[30] = 4; mSL_W_Algs[31] = 6;
    mSL_W_Algs[32] = 8; mSL_W_Algs[33] = 1; mSL_W_Algs[34] = 12; mSL_W_Algs[35] = 15;
    mSL_W_Algs[36] = 8; mSL_W_Algs[37] = 10; mSL_W_Algs[38] = 12; mSL_W_Algs[39] = 15;
    mSL_W_CPrs = 37;
    mSL_W_Pairs = make_array(mSL_W_CPrs); //
    mSL_W_PReps = make_array(mSL_W_CPrs); //
    idx = 0;
    mSL_W_Pairs[idx] = 'es'; mSL_W_PReps[idx] = '5'; idx += 1;
    mSL_W_Pairs[idx] = 'le'; mSL_W_PReps[idx] = '7'; idx += 1;
    mSL_W_Pairs[idx] = 'en'; mSL_W_PReps[idx] = 'W'; idx += 1;
    mSL_W_Pairs[idx] = 're'; mSL_W_PReps[idx] = '6'; idx += 1;
    mSL_W_Pairs[idx] = 'de'; mSL_W_PReps[idx] = '2'; idx += 1;
    mSL_W_Pairs[idx] = 'nt'; mSL_W_PReps[idx] = 'j'; idx += 1;
    mSL_W_Pairs[idx] = 'te'; mSL_W_PReps[idx] = 'b'; idx += 1;
    mSL_W_Pairs[idx] = 'ai'; mSL_W_PReps[idx] = 'Z'; idx += 1;
    mSL_W_Pairs[idx] = 'et'; mSL_W_PReps[idx] = 'K'; idx += 1;
    mSL_W_Pairs[idx] = 'er'; mSL_W_PReps[idx] = '9'; idx += 1;
    mSL_W_Pairs[idx] = 'se'; mSL_W_PReps[idx] = 'z'; idx += 1;
    mSL_W_Pairs[idx] = 'ct'; mSL_W_PReps[idx] = 'x'; idx += 1;
    mSL_W_Pairs[idx] = 'th'; mSL_W_PReps[idx] = '8'; idx += 1;
    mSL_W_Pairs[idx] = 'he'; mSL_W_PReps[idx] = '0'; idx += 1;
    mSL_W_Pairs[idx] = 'an'; mSL_W_PReps[idx] = 'h'; idx += 1;
    mSL_W_Pairs[idx] = 'ie'; mSL_W_PReps[idx] = 'y'; idx += 1;
    mSL_W_Pairs[idx] = 'ch'; mSL_W_PReps[idx] = 'H'; idx += 1;
    mSL_W_Pairs[idx] = 'au'; mSL_W_PReps[idx] = 'o'; idx += 1;
    mSL_W_Pairs[idx] = 'ou'; mSL_W_PReps[idx] = 'w'; idx += 1;
    mSL_W_Pairs[idx] = 'sl'; mSL_W_PReps[idx] = 'q'; idx += 1;
    mSL_W_Pairs[idx] = 'ph'; mSL_W_PReps[idx] = 'f'; idx += 1;
    mSL_W_Pairs[idx] = 'in'; mSL_W_PReps[idx] = 'v'; idx += 1;
    mSL_W_Pairs[idx] = 'nd'; mSL_W_PReps[idx] = 'X'; idx += 1;
    mSL_W_Pairs[idx] = 'st'; mSL_W_PReps[idx] = 'Y'; idx += 1;
    mSL_W_Pairs[idx] = 'bl'; mSL_W_PReps[idx] = 'B'; idx += 1;
    mSL_W_Pairs[idx] = 'ck'; mSL_W_PReps[idx] = 'k'; idx += 1;
    mSL_W_Pairs[idx] = 'qu'; mSL_W_PReps[idx] = 'Q'; idx += 1;
    mSL_W_Pairs[idx] = 'on'; mSL_W_PReps[idx] = 'V'; idx += 1;
    mSL_W_Pairs[idx] = 'eo'; mSL_W_PReps[idx] = 'O'; idx += 1;
    mSL_W_Pairs[idx] = 'to'; mSL_W_PReps[idx] = 'G'; idx += 1;
    mSL_W_Pairs[idx] = 'mq'; mSL_W_PReps[idx] = 'J'; idx += 1;
    mSL_W_Pairs[idx] = 'ed'; mSL_W_PReps[idx] = 'g'; idx += 1;
    mSL_W_Pairs[idx] = 'rd'; mSL_W_PReps[idx] = 'p'; idx += 1;
    mSL_W_Pairs[idx] = 'ha'; mSL_W_PReps[idx] = 'P'; idx += 1;
    mSL_W_Pairs[idx] = 'ea'; mSL_W_PReps[idx] = 'M'; idx += 1;
    mSL_W_Pairs[idx] = 'ol'; mSL_W_PReps[idx] = 'L'; idx += 1;
    mSL_W_Pairs[idx] = 'ns'; mSL_W_PReps[idx] = 'm'; idx += 1;
    mSL_W_CPrsV = idx;
);

function mSL_strclean(str, cfl)
local (p, q, lp, lq, k)
(
    (cfl & 1) ? (
        // clean start of string
        lp = 1; p = 0;
        while (lp) (
            (lp = (str_getchar(str, p, 'cu') == ' ')) ? p += 1;
        );
        p ? str_delsub(str, 0, p);
    );
    (cfl & 2) ? (
        // clean tail of string
        lp = 1; p = strlen(str) - 1; k = 0;
        while (lp) (
            (lp = (str_getchar(str, p, 'cu') == ' ')) ? (p -= 1; k += 1;);
        );
        k ? str_delsub(str, p+1, k);
    );
    (cfl & 4) ? (
        // clean zeros in the tail of string after a '.'
        lp = 1; p = strlen(str) - 1; k = 0;
        while (lp) (
            (lp = (str_getchar(str, p, 'cu') == '0')) ? (p -= 1; k += 1;);
        );
        q = p; lq = 0;
        while (q >= 0) (
            lq |= str_getchar(str, p, 'cu') == '.'; q -= 1;
        );
        (k && lq) ? str_delsub(str, p+1, k);
    );
    str;
);

// Extract in str a file name from a path in src
function mSL_extractFile(str, src)
local()
(
    strcpy(str, src);
    l = strlen(src); p = 0;
    i = 0; while (i < l) (
        (str_getchar(src, i, 'cu') === '/') ? p = i+1;
        i += 1;
    );
    strcpy_from(str,src, p);
);



function mSL_symhash(sym)
local (u, v)
(
    u = floor(sym/0x1000000);
    v = sym - u * 0x1000000;
    u ~ v;
);

// Build hash table and associated value, size and step defined
function mSL_makeHT(size, step)
local (addr)
(
    // Check that values are relatively prime
    while (!are_Rel_Primes(size,step)) (step += 1;);
    addr = make_array(size + size + 2);
    addr[0] = size;
    addr[1] = step;
    addr + 2; // return value
);


// get a compacted id in a hashtable
mSL_getinHTaux = 0; // auxiliary result
function mSL_getinHT(htb, name)
local (hsize, hstep, h, nt, lp, ent, cnt, res)
(
    hsize = htb[-2]; hstep = htb[-1];
    h = floor(name / 0x1000000);
    h = h ~ (name - h * 0x1000000); // the hashcode : a 24 bit values
    nt = h % hsize;
    cnt = hsize; res = -1;
    while (cnt > 0) (
        ent = htb[nt]; // current entry
        (ent == name) ? (
            // found, it is nt
            cnt = 0; res = nt;
        ) :
        (ent == 0) ? (
            // not found
            cnt = 0;
        ) : (
            nt = (nt + hstep) % hsize;
            cnt -= 1;
        );
    );
    mSL_getinHTaux = ((res >= 0) ? htb[res+hsize] : 0);
    res;
);


// Define a name in a hash table, with its value
function mSL_setinHT(htb, name, val)
local (hsize, hstep, h, nt, lp, ent, alt, cnt, res)
(
    hsize = htb[-2]; hstep = htb[-1];
    h = floor(name / 0x1000000);
    h = h ~ (name - h * 0x1000000); // the hashcode
    nt = h % hsize; // the first entry to try
    lp = 1; res = alt = -1; cnt = hsize;
    while (cnt > 0) (
        ent = htb[nt]; // current entry
        ((ent === name)) ? (
            // same entry => found => end of alg.
            cnt = lp = 0;
        ) :
        ((ent === 0)) ? (
            // free entry
            cnt = lp = -1;
        ) :
        ((ent === -1) && (alt === -1)) ? (
            // freed entry
            alt = nt;
        ) : (
            nt = (nt + hstep) % hsize;
            cnt -= 1;
        );
    );
    // what do we do ?
    (lp === 0) ? (
        // stop because found : this is the ent
        res = nt;
    ) :
    ((lp === -1) && (alt >= 0)) ? (
        // we will use this one
        res = alt;
    ) :
    (lp === -1) ? (
        // we will use this entry
        res = nt;
    );
    (res >= 0) ? (
        // set the entry
        htb[res] = name;
        htb[res+hsize] = val;
    );
    res;    // result / -1
);


// Code a string as an "integer" value
// An identifier is coded as 8 (6 bits) chars in a number.
// This is called only for identifiers longer than 8 chars
function mSL_symbol2(str)
local (lg, ch, pch, code, x, y, z, s, pa, del, p, cp, cg, alg, ik, jk, kk, cnt, fl16, fl17, rc, mf)
(
    #rez = ""; code = 0;
    ((lg = strlen(str)) > 0) ? (
        memset(mSL_W_idt, 0, mSL_W_sidt+2);
        memset(mSL_W_fidt, 0, mSL_W_sidt+2);

        // Step 1 : copy chars in work array
        cg = lg;
        pch = 0;
        ch = str_getchar(str, pch, 'cu');
        while ((pch < mSL_W_sidt) && (lg > 0)) (
            (((ch >= 'A') && (ch <= 'Z')) || ((ch >= 'a') && (ch <= 'z'))
            || ((ch >= '0') && (ch <= '9')))  ?  (
                ((ch >= 'A') && (ch <= 'Z')) ? (
                    mSL_W_fidt[pch] = 1;
                    ch = ch + 'a' - 'A';
                );
            ) :
            (
                cg = (cg * 3) + 17 + ch;
                ch = '_'; // change unrecognized chars to "_"
            );
            mSL_W_idt[pch] = ch;
            lg -= 1; pch += 1;
            ch = str_getchar(str, pch, 'cu');
        );
        lg = pch;

        // Step 2 : apply reducing algos
        fl16 = fl17 = 1;
        cp = pa = 2;
        (lg > 16) ? (
            rc = 5; mf = 64 * 64;
        ) : (
            rc = 6; mf = 64;
        );

        while (lg > rc) (
            del = -1; cp = cp % lg;
            alg = mSL_W_Algs[pa]; pa = (pa + 1) % mSL_W_CAlgs;
            (alg === 1) ? (
                // suppress a '_'
                while ((cp < lg) && (del < 0)) (
                    ch = mSL_W_idt[cp];
                    (ch === '_') ? del = cp;
                    cp += 1;
                );
            ) :
            (alg === 2) ? (
                // suppress some redundencies
                while ((cp < lg) && (del < 0)) (
                    (mSL_W_idt[cp] === mSL_W_idt[cp+1]) ? (del = cp;  cg += 3;);
                    cp += 1;
                );
            ) :
            (alg === 3) ? (
                // look for a replacable pair
                while ((cp < lg) && (del < 0)) (
                    kk = (mSL_W_idt[cp] << 8) | mSL_W_idt[cp+1];
                    p = 0;
                    while ((p < mSL_W_CPrs) && (del < 0)) (
                        (kk === mSL_W_Pairs[p]) ? (
                            del = cp+1; cg += 2;
                            ch = mSL_W_PReps[p];
                            ((ch >= 'A') && (ch <= 'Z')) ? (
                                ch = ch + 'a' - 'A';
                                mSL_W_fidt[cp] |= 1;
                            );
                            mSL_W_idt[cp] = ch;
                        ) ;
                        p += 1;
                    );
                    cp += 1;
                );
            ) :
            (alg === 4) ? (
                cnt = 0;
                // delete 3rd e
                while ((cp < lg) && (del < 0)) (
                    (mSL_W_idt[cp] === 'e') ? (
                        cnt += 1;
                        (cnt == 3) ? (del = cp; cg += 4;);
                    );
                    cp += 1;
                );
            ) :
            (alg === 5) ? (
                cnt = 0;
                // change 2nd e to '3'
                while ((cp < lg) && (del < 0)) (
                    (mSL_W_idt[cp] === 'e') ? (
                        cnt += 1;
                        (cnt == 2) ? (mSL_W_idt[cp] = '3'; cg += 3;)
                    );
                    cp += 1;
                );
            ) :
            (alg === 6) ? (
                cnt = 0;
                // delete 3rd a
                while ((cp < lg) && (del < 0)) (
                    (mSL_W_idt[cp] === 'a') ? (
                        cnt += 1;
                        (cnt == 3) ? (del = cp; cg += 7);
                    );
                    cp += 1;
                );
            ) :
            (alg === 7) ? (
                cnt = 0;
                // change 2nd a to '4'
                while ((cp < lg) && (del < 0)) (
                    (mSL_W_idt[cp] === 'a') ? (
                        cnt += 1;
                        (cnt == 2) ? (mSL_W_idt[cp] = '4';  cg += 4;)
                    );
                    cp += 1;
                );
            ) :
            (alg === 8) ? (
                cnt = 0;
                // delete 3rd i
                while ((cp < lg) && (del < 0)) (
                    (mSL_W_idt[cp] === 'i') ? (
                        cnt += 1;
                        (cnt == 3) ? (del = cp; cg += 9);
                    );
                    cp += 1;
                );
            ) :
            (alg === 9) ? (
                cnt = 0;
                // change 2nd i to '1'
                while ((cp < lg) && (del < 0)) (
                    (mSL_W_idt[cp] === 'i') ? (
                        cnt += 1;
                        (cnt == 2) ? (mSL_W_idt[cp] = '1';  cg += 5;)
                    );
                    cp += 1;
                );
            ) :
            (alg === 10) ? (
                // delete a letter nearer the end
                del = 0|(3 * lg / 4); cg += 4;
            ) :
            (alg === 11) ? (
                // delete a letter near the end
                del = 0|(2 * lg / 3); cg += 5;
            ) :
            (alg === 12) ? (
                // delete a letter near the middle
                del = 0|(lg / 2); cg += 8;
            ) :
            (alg === 13) ? (
                // delete a letter near the start
                del = 0|(lg / 3); cg += 6;
            ) :
            (alg === 14) ? (
                // delete preceding last letter
                del = lg - 2; cg += 1;
            ) :
            (alg === 15) ? (
                // delete last woyel
                while (cp < lg) (
                    ((mSL_W_idt[cp] === 'a') || (mSL_W_idt[cp] === 'e') || (mSL_W_idt[cp] === 'i') ||
                        (mSL_W_idt[cp] === 'o') || (mSL_W_idt[cp] === 'u') || (mSL_W_idt[cp] === '_')) ? del = cp;
                    cp += 1;
                );
            ) :
            (alg === 16) ? (
                // exchange last with a previous one
                fl16 ? (
                    ik = lg - 1; jk = 0|(lg / 4.2);
                    // AAAA_ik3 = AAAA_ik2; AAAA_jk3 = AAAA_jk2;
                    // AAAA_ik2 = AAAA_ik1; AAAA_jk2 = AAAA_jk1;
                    ///AAAA_ik1 = AAAA_ik; AAAA_jk1 = AAAA_jk;
                    /// AAAA_ik = ik; AAAA_jk = jk;
                    ch = mSL_W_idt[ik];  mSL_W_idt[ik] = mSL_W_idt[jk];  mSL_W_idt[jk] = ch;
                    fl16 = 0; cg += 1 + ch;
                );
            ) :
            (alg === 17) ? (
                // exchange last with a previous one
                fl17 ? (
                    ik = lg - 1; jk = 0|(lg / 2.7);
                    // AAAA_ik3 = AAAA_ik2; AAAA_jk3 = AAAA_jk2;
                    // AAAA_ik2 = AAAA_ik1; AAAA_jk2 = AAAA_jk1;
                    // AAAA_ik1 = AAAA_ik; AAAA_jk1 = AAAA_jk;
                    // AAAA_ik = ik; AAAA_jk = jk;
                    ch = mSL_W_idt[ik];  mSL_W_idt[ik] = mSL_W_idt[jk];  mSL_W_idt[jk] = ch;
                    fl17 = 0; cg += 2 + ch;
                );
            );

            (del >= 0) ? (
                mSL_W_fidt[del+1] |= mSL_W_fidt[del];
                cg = cg * 3 + 1 + mSL_W_idt[del];
                while (del < lg) (
                    mSL_W_idt[del] = mSL_W_idt[del+1];
                    mSL_W_fidt[del] = mSL_W_fidt[del+1];
                    del += 1;
                );
                lg -= 1;
            );

            cg = cg % 83886080;
        );

        // end of algorithm - restore capital letters
        p = 0; loop(lg,
            ch = mSL_W_idt[p];
            (mSL_W_fidt[p] && (ch >= 'a') && (ch <= 'z')) ? (
                ch = ch + 'A' - 'a';
            );
            str_setchar(#rez, p, ch, 'cu');
            p+= 1;
        );
        // code final value
        kktr ? (
            sprintf(#t, "\"%s\" => %d + \"%s\"", str, cg, #rez);
            mSL_log(SysLogBox, #t);
        );
        code = (cg % 10) + 1; // convert to '0' to 9'
        code = code * mf + floor(cg/10)%mf;
        s = 0;
        loop(rc,
            ch = str_getchar(#rez, s, 'cu');
            ((ch >= '0') && (ch <= '9')) ? (
                ch = ch - '0' + 1;
            ) :
            ((ch >= 'A') && (ch <= 'Z')) ? (
                ch = ch - 'A' + 11;
            ) :
            ((ch >= 'a') && (ch <= 'z')) ? (
                ch = ch - 'a' + 37;
            ) :
            (
                ch = 63; // for _ or any other char
            );
            code = code * 64 + ch; s += 1;
        );

    );
    code;
);

function mSL_symbol(str)
local (lg, ch, pch, code, x, y, z, s)
(
    code = 0; pch = s = 0;
    ((lg = strlen(str)) > 0) ? (
        ch = str_getchar(str, 0, 'cu');
        (((ch >= 'A') && (ch <= 'Z')) || ((ch >= 'a') && (ch <= 'z')) || (ch === '_') || (ch === '.') || (ch === '#')|| (ch === ':')) ? (
            ((lg <= 8) && (ch != '.') && (ch != '#') && (ch != ':')) ? (
                while ((lg > 0) && (((ch >= 'A') && (ch <= 'Z')) || ((ch >= 'a') && (ch <= 'z'))
                    || ((ch >= '0') && (ch <= '9')) || (ch == '_') || (ch == '.') || (ch == '#')))  (
                    ((ch >= '0') && (ch <= '9')) ? (
                        ch = ch - '0' + 1;
                    ) :
                    ((ch >= 'A') && (ch <= 'Z')) ? (
                        ch = ch - 'A' + 11;
                    ) :
                    ((ch >= 'a') && (ch <= 'z')) ? (
                        ch = ch - 'a' + 37;
                    ) :
                    (
                        ch = 63; // for _ or any other char
                    );
                    (s < 8) ? (
                        code = code * 64 + ch; s += 1;
                    );
                    lg -= 1; pch += 1;
                    ch = str_getchar(str, pch, 'cu');
                );
                while (s < 8) (
                    code = code * 64; s+= 1;
                );
            ) : (
                code = mSL_symbol2(str);
                lg = 0;
            );
        ) :
        ((ch > 0x20) && (ch < 0x7f)) ? (
            while ((lg > 0) && (ch > 0x20) && (ch < 0x7f)) (
                code = (code << 7) | ch;
                lg -= 1; pch += 1;
                ch = str_getchar(str, pch, 'cu');
            );
            code = (code << 8) | 0x40;
        ) :
        (ch >= 0x80) ? (
            // Multi byte char - other bytes follow...
            pch += 1; lg -= 1;
            ((ch & 0xE0) === 0xC0) ? (
                // a 2 bytes UNICODE char
                x = str_getchar(str, pch, 'cu'); pch += 1; lg -= 1;
                ch = ((ch & 0x1f) << 6) | (x & 0x3f);
            ) :
            ((ch & 0xF0) === 0xE0) ? (
                // a 3 bytes UNICODE char
                x = str_getchar(str, pch, 'cu'); pch += 1; lg -= 1;
                y = str_getchar(str, pch, 'cu'); pch += 1; lg -= 1;
                ch = ((ch & 0x0F) << 12) | ((x & 0x3F) << 6) | (y & 0x3F);
            ) :
            ((ch & 0xF8) === 0xF0) ? (
                // a 4 bytes UNICODE char
                x = str_getchar(str, pch, 'cu'); pch += 1; lg -= 1;
                y = str_getchar(str, pch, 'cu'); pch += 1; lg -= 1;
                z = str_getchar(str, pch, 'cu'); pch += 1; lg -= 1;
                ch = ((ch & 0x07) << 18) | ((x & 0x3F) << 12) | ((y & 0x3F) << 6) | (z & 0x3F);
            );
            code = (ch << 8) | 0x80;
        ) : (
            code = (ch << 8) | 0xC0;
            lg -= 1;
        );
    ) : (
        code = -1;
    );
    (lg != 0) ? code = -1;
    code;
);






// Decode in a temporary result a codified identifier
function mSL_id2Str(ident)
local(ip, A, B, c)
(
    A = 0 | (ident / 16777216) ; // 4 chars
    B = 0 | (ident - 16777216 * A) ; // 4 next chars
    ip = 0;
    mSL_wa1[0] = '?';
    strr = mSL_Str_Tmp(); // provide a temporary result
    // was = #mSL_wS1
    while ((A != 0) || (B != 0)) (
        (B == 0) ? (B = A; A = 0);
        d = B & 0x3f; B = (B >> 6);
        c = '?';
        ((d != 0) || (ip != 0)) ? (
            c = d;
            (c === 0) ? (
                c = ' ';
            ) :
            (c < 11) ? (
                c += '0' - 1;
            ) :
            (c < 37) ? (
                c += 'A' - 11;
            ) :
            (c < 63) ? (
                c += 'a' - 37;
            ) :
            (
                c = '_';
            );
            mSL_wa1[ip] = c; ip += 1;
        );
        kk2tr ? (
            sprintf(#az, "    ==> %x %x %x %d %d '%c'", A, B, d, ip-1, c, c);
            mSL_log(SysLogBox, #az);
        );
    );

    (ip <= 1) ? (
        sprintf(strr, "%c", mSL_wa1[0]);
    ) :
    (ip == 2) ? (
        sprintf(strr, "%c%c", mSL_wa1[1], mSL_wa1[0]);
    ) :
    (ip == 3) ? (
        sprintf(strr, "%c%c%c", mSL_wa1[2], mSL_wa1[1], mSL_wa1[0]);
    ) :
    (ip == 4) ? (
        sprintf(strr, "%c%c%c%c", mSL_wa1[3], mSL_wa1[2], mSL_wa1[1],
            mSL_wa1[0]);
    ) :
    (ip == 5) ? (
        sprintf(strr, "%c%c%c%c%c", mSL_wa1[4], mSL_wa1[3], mSL_wa1[2],
            mSL_wa1[1], mSL_wa1[0]);
    ) :
    (ip == 6) ? (
        sprintf(strr, "%c%c%c%c%c%c", mSL_wa1[5], mSL_wa1[4], mSL_wa1[3],
            mSL_wa1[2], mSL_wa1[1], mSL_wa1[0]);
    ) :
    (ip == 7) ? (
        sprintf(strr, "%c%c%c%c%c%c%c", mSL_wa1[6], mSL_wa1[5], mSL_wa1[4],
            mSL_wa1[3], mSL_wa1[2], mSL_wa1[1], mSL_wa1[0]);
    ) :
    (
        sprintf(strr, "%c%c%c%c%c%c%c%c", mSL_wa1[7], mSL_wa1[6], mSL_wa1[5],
            mSL_wa1[4], mSL_wa1[3], mSL_wa1[2], mSL_wa1[1], mSL_wa1[0]);
    );
    strr;
);


function mSL_edit_value(str, val, fmt)
local(a,b,c,d,z)
(
    (str == 0) ? (str = mSL_Str_Tmp(););
    (val === floor(val)) ? (
        ((val > mSL_Sym_Low) && (val < mSL_Sym_High)) ? (
            strcpy(str, mSL_id2Str(val));
        ) :
        (val === mSL_End_Mark) ? (
            strcpy(str, "_Mark_");
        ) :
        (val === mSL_Filler) ? (
            strcpy(str, "_Fill_");
        ) :
        (val === Undef) ? (
            strcpy(str, "_Undef_");
        ) :
        (val === Unavailable) ? (
            strcpy(str, "Unavail");
        ) :
        (val === mSL_MT_FreeSt) ? (
            strcpy(str, "_Free_");
        ) :
        (val === mSL_Eraser) ? (
            strcpy(str, "_XXXX_");
        ) :
        (val === mSL_MT_FreeNd) ? (
            strcpy(str, "~Free~");
        ) :
        (val === mSL_Separator) ? (
            strcpy(str, "==========");
        ) :
        ((val >= mSL_MKey_min) && (val <= mSL_MKey_max) && (val == (val & 0x7f7f7f7f)) &&
            ((a = 0xff & (val >> 24)) > 32) && (a < 127) &&
            ((b = 0xff & (val >> 16)) > 32) && (b < 127) &&
            ((c = 0xff & (val >> 8)) > 32) && (c < 127) &&
            ((d = 0xff & val) > 32) && (d < 127)) ? (
            sprintf(str, "'%c%c%c%c'", a, b, c, d);
        ) :
        (((z = val ~ mSL_CC_Chksum) >= mSL_MKey_min) && (z <= mSL_MKey_max) && (z === (z & 0x7f7f7f7f)) &&
            ((a = 0xff & (z >> 24)) > 32) && (a < 127) &&
            ((b = 0xff & (z >> 16)) > 32) && (b < 127) &&
            ((c = 0xff & (z >> 8)) > 32) && (c < 127) &&
            ((d = 0xff & z) > 32) && (d < 127)) ? (
            sprintf(str, "~'%c%c%c%c'~", a, b, c, d);
        ) :
        (fmt != 0) ? (
            sprintf(str, fmt, val);
        ) :
        (
            ((val < 100000000000000000) && (val > -100000000000000000)) ? // 1e17
                sprintf(str, "%18.0f", val) :
                sprintf(str, "%0.16g", val);
            mSL_strclean(str, 7);
        );
    ) : (
        (val === Undef) ? (
            strcpy(str, "_Undef_");
        ) :
        (fmt != 0) ? (
            sprintf(str, fmt, val);
        ) :
        ((val > -0.000001) && (val < 0.000001)) ? (
            sprintf(str, "%0.14g", val);
        ) :
        ((val < -100000000000000) || (val > 100000000000000)) ? ( // 1e14
            sprintf(str, "%0.12g", val);
        ) : (
            sprintf(str, "%0.16g", val);
        );
        mSL_strclean(str, 7);
    );
    str;
);

function mSL_edit_value(str, val) (mSL_edit_value(str, val, 0));

// Explode a string into a block
function mSL_str_explode(bl, str)
local (ty, s, l, ib, sz)
(
    sz = 0;
    ((bl > 2) && ((s = bl[-1]) >= 0) && ((ty = bl[-2]) >= mSL_MKey_min) && (ty <= mSL_MKey_max)
            && (s == bl[s]) && (bl[s+1] == (ty ~ mSL_CC_Chksum))) ? (
        // Copy the chars of string in the block
        l = strlen(str);
        ib = 0;
        while ((l > 0) && (ib < s)) (
            bl[ib] = str_getchar(str, ib, 'cu');
            ib += 1; l -= 1; sz += 1;
        );
        while (ib < s) (
            bl[ib] = 0; ib += 1;
        );
    );
    sz;
);

// Inpload a string out of a block
function mSL_str_implode(str, bl)
local (ty, s, l, ib)
(
    ((bl > 2) && ((s = bl[-1]) >= 0) && ((ty = bl[-2]) >= mSL_MKey_min) && (ty <= mSL_MKey_max)
            && (s == bl[s]) && (bl[s+1] == (ty ~ mSL_CC_Chksum))) ? (
        // Create the empty string
        (str === 0) ? str = #local_mSL_str_implode;
        strcpy(str, "");
        ib = 0;
        while (l > 0) (
            ch = bl[ib]; ib += 1; l -= 1;
            (ch > 0) ? str_setchar(str, -0.25, ch, 'cu') : l=0;
        );
        src;
    ) : (
        0;
    );
);

function mSL_search_elt(bl, item, pos)
local (ty, s, re, ib)
(
    res = -1;
    pos = 0|max(0, pos);
    ((bl > 2) && ((s = bl[-1]) >= 0) && ((ty = bl[-2]) >= mSL_MKey_min) && (ty <= mSL_MKey_max)
            && (s === bl[s]) && (bl[s+1] === (ty ~ mSL_CC_Chksum))) ? (
        // search the entry equal to item, starting at pos.
        ib = pos;
        while ((ib < s) && (res === -1)) (
            (item == bl[ib]) ? res = ib;
            ib += 1;
        );
    );
);






// Create a permanent array of "x" permanent strings
// Useful for pad text displaying....

#strAMW0000 = ""; #strAMW0001 = ""; #strAMW0002 = ""; #strAMW0003 = "";
#strAMW0004 = ""; #strAMW0005 = ""; #strAMW0006 = ""; #strAMW0007 = "";
#strAMW0008 = ""; #strAMW0009 = ""; #strAMW000A = ""; #strAMW000B = "";
#strAMW000C = ""; #strAMW000D = ""; #strAMW000E = ""; #strAMW000F = "";
#strAMW0010 = ""; #strAMW0011 = ""; #strAMW0012 = ""; #strAMW0013 = "";
#strAMW0014 = ""; #strAMW0015 = ""; #strAMW0016 = ""; #strAMW0017 = "";
#strAMW0018 = ""; #strAMW0019 = ""; #strAMW001A = ""; #strAMW001B = "";
#strAMW001C = ""; #strAMW001D = ""; #strAMW001E = ""; #strAMW001F = "";
#strAMW0020 = ""; #strAMW0021 = ""; #strAMW0022 = ""; #strAMW0023 = "";
#strAMW0024 = ""; #strAMW0025 = ""; #strAMW0026 = ""; #strAMW0027 = "";
#strAMW0028 = ""; #strAMW0029 = ""; #strAMW002A = ""; #strAMW002B = "";
#strAMW002C = ""; #strAMW002D = ""; #strAMW002E = ""; #strAMW002F = "";
#strAMW0030 = ""; #strAMW0031 = ""; #strAMW0032 = ""; #strAMW0033 = "";
#strAMW0034 = ""; #strAMW0035 = ""; #strAMW0036 = ""; #strAMW0037 = "";
#strAMW0038 = ""; #strAMW0039 = ""; #strAMW003A = ""; #strAMW003B = "";
#strAMW003C = ""; #strAMW003D = ""; #strAMW003E = ""; #strAMW003F = "";
#strAMW0040 = ""; #strAMW0041 = ""; #strAMW0042 = ""; #strAMW0043 = "";
#strAMW0044 = ""; #strAMW0045 = ""; #strAMW0046 = ""; #strAMW0047 = "";
#strAMW0048 = ""; #strAMW0049 = ""; #strAMW004A = ""; #strAMW004B = "";
#strAMW004C = ""; #strAMW004D = ""; #strAMW004E = ""; #strAMW004F = "";
#strAMW0050 = ""; #strAMW0051 = ""; #strAMW0052 = ""; #strAMW0053 = "";
#strAMW0054 = ""; #strAMW0055 = ""; #strAMW0056 = ""; #strAMW0057 = "";
#strAMW0058 = ""; #strAMW0059 = ""; #strAMW005A = ""; #strAMW005B = "";
#strAMW005C = ""; #strAMW005D = ""; #strAMW005E = ""; #strAMW005F = "";
#strAMW0060 = ""; #strAMW0061 = ""; #strAMW0062 = ""; #strAMW0063 = "";
#strAMW0064 = ""; #strAMW0065 = ""; #strAMW0066 = ""; #strAMW0067 = "";
#strAMW0068 = ""; #strAMW0069 = ""; #strAMW006A = ""; #strAMW006B = "";
#strAMW006C = ""; #strAMW006D = ""; #strAMW006E = ""; #strAMW006F = "";
#strAMW0070 = ""; #strAMW0071 = ""; #strAMW0072 = ""; #strAMW0073 = "";
#strAMW0074 = ""; #strAMW0075 = ""; #strAMW0076 = ""; #strAMW0077 = "";
#strAMW0078 = ""; #strAMW0079 = ""; #strAMW007A = ""; #strAMW007B = "";
#strAMW007C = ""; #strAMW007D = ""; #strAMW007E = ""; #strAMW007F = "";
#strAMW0100 = ""; #strAMW0101 = ""; #strAMW0102 = ""; #strAMW0103 = "";
#strAMW0104 = ""; #strAMW0105 = ""; #strAMW0106 = ""; #strAMW0107 = "";
#strAMW0108 = ""; #strAMW0109 = ""; #strAMW010A = ""; #strAMW010B = "";
#strAMW010C = ""; #strAMW010D = ""; #strAMW010E = ""; #strAMW010F = "";
strAMWcnt = #strAMW00ZZ - #strAMW0000 + 1;
strAMW = #strAMW0000;

// ======
function mSL_setStrArray(tab, cnt) local (i)
(
    ((cnt < 0) || (cnt > strAMWcnt)) ? err_sys_ini = 10207;
    cnt = max(0, min(strAMWcnt, cnt));
    i = 0;
    loop(cnt, tab[i] = #strAMW0000 + i;
        strcpy(tab[i], "");
        i+= 1;
    );
);



function mSL_Sort_Strings(size, start, strs, aux1, aux2, aux3)
local (ix, iy, u)
(
    ix = start;
    while (ix < size-1) (
        iy = ix + 1;
        while (iy < size) (
            (strcmp(strs[ix], strs[iy]) > 0) ? (
                u = strs[ix]; strs[ix] = strs[iy]; strs[iy] = u;
                aux1 ? (
                    u = aux1[ix]; aux1[ix] = aux1[iy]; aux1[iy] = u;
                    aux2 ? (
                        u = aux2[ix]; aux2[ix] = aux2[iy]; aux2[iy] = u;
                        aux3 ? (
                            u = aux3[ix]; aux3[ix] = aux3[iy]; aux3[iy] = u;
                        );
                    );
                );
            );
            iy +=1;
        );
        ix += 1;
    );
);


/*
    Pack a string in an array,
    keeping 3 chars in a word.
    Useful when the value is to be converted to a 32 bits float.
*/
maxPackStrLg = 127;
function mSL_packStr(array, str)
local (l, p, v, c)
(
    l = min(strlen(str), maxPackStrLg);
    p = c = v = 0;
    while (l > 0) (
        v = v + (str_getchar(str, p, 'cu') << c);
        l -= 1; p += 1; c += 8;
        (c >= 24) ? (
            array[0] = v;
            array += 1; v = c = 0;
        );
    );
    array[0] = v;
    (v != 0) ? array[1] = 0;
);


/*
    Unpack an array into a string
*/
function mSL_unpackArray(str, array)
local (v, c, ch)
(
    strcpy(str, "");
    v = array[0]; c = 0;
    while (v != 0) (
        ch = v & 0xff; v = (v >> 8); c += 1;
        str_setchar(str, -0.25, ch, 'cu');
        (c >= 3) ? (
            array += 1; v = array[0]; c = 0;
        );
    );
);

/*
    Pack a string in an array in gmem
*/
function mSL_gpackStr(array, str)
local (l, p, v, c)
(
    l = min(strlen(str), maxPackStrLg);
    p = c = v = 0;
    while (l > 0) (
        v = v + (str_getchar(str, p, 'cu') << c);
        l -= 1; p += 1; c += 8;
        (c >= 24) ? (
            gmem[array] = v;
            array += 1; v = c = 0;
        );
    );
    gmem[array] = v;
    (v != 0) ? gmem[array+1] = 0;
);


/*
    Unpack an array from gmem into a string
*/
function mSL_gunpackArray(str, array)
local (v, c, ch)
(
    strcpy(str, "");
    v = gmem[array]; c = 0;
    while (v != 0) (
        ch = v & 0xff; v = (v >> 8); c += 1;
        str_setchar(str, -0.25, ch, 'cu');
        (c >= 3) ? (
            array += 1; v = gmem[array]; c = 0;
        );
    );
);




function mSL_same_entries(targ, extt)
local (sze, szt, rz, rp, ip)
(
    (targ == extt) || (
        szt = targ[-1]; sze = extt[-1];
        ip = 0;
        rz = rp = 1;
        while (rp) (
            (targ[ip] == extt[ip]) ? (
                (targ[ip] == 0) ? (
                    rp = 0; // ok
                ) : (
                    targ[ip+1] = extt[ip+1];
                    ip += 2;
                );
            ) : (
                rz = rp = 0;
            );
        );
        rz;
    );
);


function mSL_fwdChain(targ, extt)
(
    sz = targ[-1];
    (sz >= 4) ? (
        sprintf(#sfc, "Fwrd chain %d to %d", targ, extt);
        mSL_log(SysLogBox, #sfc);
        targ[sz-2] = mSL_Fwrd_Link;
        targ[sz-1] = extt;
    );
);


function mSL_def_JSFX_var(num, vname)
local (code, k)
(
    code = mSL_symbol(vname); // code the symbol
    // is it already in the table ?
    ((k = mSL_getinHT(jvarsHashTbl, code)) > 0) ? (
        sprintf(#sfc, "  * var \"%s\"  (%d) already in JSFX vars with code %d", vname, num, mSL_getinHTaux);
        mSL_log(SysLogBox, #sfc);
    ) : (
        mSL_setinHT(jvarsHashTbl, code, num);
    );
);


function mSL_get_var_idt(vname)
local(e)
(
    // is this a string ?
    ((vname >= string_cst_first) && (vname <= string_tmp_last)) ? (
        // try to convert to a symbol
        vname = mSL_symbol(vname);
    );
    // Now, is this a symbol ?
    ((vname >= mSL_Sym_Low) && (vname <= mSL_Sym_High)) ? (
        e = mSL_getinHT(jvarsHashTbl, vname);
        (e >= 0) ? vname = mSL_getinHTaux;
    ) : (
        vname;
    );
);



//================= KEYWORDS ===================
// Some useful packed identifiers
// alphabetical order, case insensitive
// call _AFTER_ init_idents();
function mSL_Init_Keywords()
(

    mSL_KW_any = mSL_symbol("any");
    mSL_KW_ARR = mSL_symbol("ARR");
    mSL_KW_awake = mSL_symbol("awake");
    mSL_KW_Banks = mSL_symbol("Banks");
    mSL_KW_Bnk = mSL_symbol("Bnk");
    mSL_KW_box = mSL_symbol("box");
    mSL_KW_build = mSL_symbol("build");
    mSL_KW_ccflags = mSL_symbol("ccflags");
    mSL_KW_ccname = mSL_symbol("ccname");
    mSL_KW_ccode = mSL_symbol("ccode");
    mSL_KW_ccodesiz = mSL_symbol("ccodesiz");
    mSL_KW_ccparcnt = mSL_symbol("ccparcnt");
    mSL_KW_ccglbcnt = mSL_symbol("ccglbcnt");
    mSL_KW_ccglbtbl = mSL_symbol("ccglbtbl");
    mSL_KW_ccowntbl = mSL_symbol("ccowntbl");
    mSL_KW_ccptrtbl = mSL_symbol("ccptrtbl");
    mSL_KW_ccloccnt = mSL_symbol("ccloccnt");
    mSL_KW_change = mSL_symbol("change");
    mSL_KW_ChCnt = mSL_symbol("ChCnt");
    mSL_KW_check = mSL_symbol("check");
    mSL_KW_checkHPcnf = mSL_symbol("checkHPcnf");
    mSL_KW_Clear = mSL_symbol("Clear");
    mSL_KW_clear_ = mSL_symbol("clear"); // use final "_" to indicate low case
    mSL_KW_clearall = mSL_symbol("clearall");
    mSL_KW_clip = mSL_symbol("clip");
    mSL_KW_ClipDir = mSL_symbol("ClipDir");
    mSL_KW_ClipFmt = mSL_symbol("ClipFmt");
    mSL_KW_cliprange = mSL_symbol("cliprange");
    mSL_KW_Clips = mSL_symbol("Clips");
    mSL_KW_ClipSets = mSL_symbol("ClipSets");
    mSL_KW_Clps = mSL_symbol("Clps");
    mSL_KW_ClRange = mSL_symbol("ClRange");
    mSL_KW_ClVol = mSL_symbol("ClVol");
    mSL_KW_Copy = mSL_symbol("Copy");
    mSL_KW_count = mSL_symbol("count");
    mSL_KW_Cut = mSL_symbol("Cut");
    mSL_KW_data = mSL_symbol("data");
    mSL_KW_declare = mSL_symbol("declare");
    mSL_KW_Default = mSL_symbol("Default");
    mSL_KW_delete = mSL_symbol("delete");
    mSL_KW_DefM = mSL_symbol("DefM");
    mSL_KW_DefSeq = mSL_symbol("DefSeq");
    mSL_KW_Dly = mSL_symbol("Dly");
    mSL_KW_DoKmd= mSL_symbol("DoKmd");
    mSL_KW_dur = mSL_symbol("dur");
    mSL_KW_dynamic = mSL_symbol("dynamic");
    mSL_KW_e = mSL_symbol("e");
    mSL_KW_End = mSL_symbol("End");
    mSL_KW_endmark = mSL_symbol("endmark");
    mSL_KW_endNot = mSL_symbol("endNot");
    mSL_KW_Enter = mSL_symbol("Enter");
    mSL_KW_EofMark = mSL_symbol("EofMark");
    mSL_KW_event = mSL_symbol("event");
    mSL_KW_evnt_ttl = mSL_symbol("evnt_ttl");
    mSL_KW_evnt_ttw = mSL_symbol("evnt_ttw");
    mSL_KW_explode = mSL_symbol("explode");
    mSL_KW_FIdent = mSL_symbol("FIdent");
    mSL_KW_FdIn = mSL_symbol("FdIn");
    mSL_KW_FdOut = mSL_symbol("FdOut");
    mSL_KW_find = mSL_symbol("find");
    mSL_KW_FLM = mSL_symbol("FLM");
    mSL_KW_Free = mSL_symbol("Free");
    mSL_KW_fromSet = mSL_symbol("fromSet");
    mSL_KW_function = mSL_symbol("function");
    mSL_KW_FX1 = mSL_symbol("FX1");
    mSL_KW_FX2 = mSL_symbol("FX2");
    mSL_KW_GDepth = mSL_symbol("GDepth");
    mSL_KW_get = mSL_symbol("get");
    mSL_KW_getnext = mSL_symbol("getnext");
    mSL_KW_globals = mSL_symbol("globals");
    mSL_KW_gmem = mSL_symbol("gmem");
    mSL_KW_GM = mSL_symbol("GM");
    mSL_KW_GM_ = mSL_symbol("gm");
    mSL_KW_grfades = mSL_symbol("grfades");
    mSL_KW_GrFdIn = mSL_symbol("GrFdIn");
    mSL_KW_GrFdOut = mSL_symbol("GrFdOut");
    mSL_KW_GrFdTy = mSL_symbol("GrFdTy");
    mSL_KW_Grp = mSL_symbol("Grp");
    mSL_KW_Gsize = mSL_symbol("Gsize");
    mSL_KW_hbox = mSL_symbol("hbox");
    mSL_KW_Host = mSL_symbol("Host");
    mSL_KW_HPCnt = mSL_symbol("HPCnt");
    mSL_KW_HPConf = mSL_symbol("HPConf");
    mSL_KW_HPdisp = mSL_symbol("HPdisp");
    mSL_KW_HPATab = mSL_symbol("HPATab");
    mSL_KW_HPPTab = mSL_symbol("HPPTab");
    mSL_KW_hpent = mSL_symbol("hpent");
    mSL_KW_HPEv = mSL_symbol("HPEv");
    mSL_KW_HPFlags = mSL_symbol("HPFlags");
    mSL_KW_HPMode = mSL_symbol("HPMode");
    mSL_KW_HPSet = mSL_symbol("HPSet");
    mSL_KW_hpset_ = mSL_symbol("hpset");
    mSL_KW_hpset2 = mSL_symbol("hpset2");
    mSL_KW_ibox = mSL_symbol("ibox");
    mSL_KW_Idem = mSL_symbol("Idem");
    mSL_KW_id2str = mSL_symbol("id2str");
    mSL_KW_idt = mSL_symbol("idt");
    mSL_KW_iMac = mSL_symbol("iMac");
    mSL_KW_Imm = mSL_symbol("Imm");
    mSL_KW_implode = mSL_symbol("implode");
    mSL_KW_import = mSL_symbol("import");
    mSL_KW_JSFX = mSL_symbol("JSFX");
    mSL_KW_jsfx_ = mSL_symbol("jsfx");
    mSL_KW_JSFXref = mSL_symbol("JSFXref");
    mSL_KW_jsfxref_ = mSL_symbol("jsfxref");
    mSL_KW_Kmd = mSL_symbol("Kmd");
    mSL_KW_KmdDrone = mSL_symbol("KmdDrone");
    mSL_KW_KmdLoop = mSL_symbol("KmdLoop");
    mSL_KW_KmdPlay = mSL_symbol("KmdPlay");
    mSL_KW_KmdImm = mSL_symbol("KmdImm");
    mSL_KW_KmdDly = mSL_symbol("KmdDly");
    mSL_KW_loc = mSL_symbol("loc");
    mSL_KW_local = mSL_symbol("local");
    mSL_KW_locals = mSL_symbol("locals");
    mSL_KW_locs = mSL_symbol("locs");
    mSL_KW_log = mSL_symbol("log");
    mSL_KW_loop = mSL_symbol("loop");
    mSL_KW_Macros = mSL_symbol("Macros");
    mSL_KW_MaxDur = mSL_symbol("MaxDur");
    mSL_KW_memory = mSL_symbol("memory");
    mSL_KW_MIDI = mSL_symbol("MIDI");
    mSL_KW_MinDur = mSL_symbol("MinDur");
    mSL_KW_MMode = mSL_symbol("MMode");
    mSL_KW_modify = mSL_symbol("modify");
    mSL_KW_module = mSL_symbol("module");
    mSL_KW_modules = mSL_symbol("modules");
    mSL_KW_name = mSL_symbol("name");
    mSL_KW_new = mSL_symbol("new");
    mSL_KW_now = mSL_symbol("now");
    mSL_KW_notify = mSL_symbol("notify");
    mSL_KW_Param = mSL_symbol("param");
    mSL_KW_Params = mSL_symbol("params");
    mSL_KW_ParamV = mSL_symbol("pval");
    mSL_KW_part = mSL_symbol("part");
    mSL_KW_Partiel = mSL_symbol("Partiel");
    mSL_KW_Paste = mSL_symbol("Paste");
    mSL_KW_PBFlgs = mSL_symbol("PBFlgs");
    mSL_KW_PClass = mSL_symbol("PClass");
    mSL_KW_PDur = mSL_symbol("PDur");
    mSL_KW_pi = mSL_symbol("pi");
    mSL_KW_player = mSL_symbol("player");
    mSL_KW_PlM = mSL_symbol("PlM");
    mSL_KW_plmode = mSL_symbol("plmode");
    mSL_KW_PlModes = mSL_symbol("PlModes");
    mSL_KW_PLUC = mSL_symbol("PLUC");
    mSL_KW_PMd = mSL_symbol("PMd");
    mSL_KW_PMod = mSL_symbol("PMod");
    mSL_KW_PNum = mSL_symbol("pnum");
    mSL_KW_pointers = mSL_symbol("pointers");
    mSL_KW_Pool = mSL_symbol("Pool");
    mSL_KW_protect = mSL_symbol("protect");
    mSL_KW_prVol = mSL_symbol("prVol");
    mSL_KW_ptr = mSL_symbol("ptr");
    mSL_KW_PVol = mSL_symbol("PVol");
    mSL_KW_PWeight = mSL_symbol("PWeight");
    mSL_KW_kstop = mSL_symbol("kstop");
    mSL_KW_qstop = mSL_symbol("qstop");
    mSL_KW_Random = mSL_symbol("Random");
    mSL_KW_Range = mSL_symbol("Range");
    mSL_KW_rate = mSL_symbol("rate");
    mSL_KW_ready = mSL_symbol("ready");
    mSL_KW_Recheck = mSL_symbol("Recheck");
    mSL_KW_recycle = mSL_symbol("recycle");
    mSL_KW_remove = mSL_symbol("remove");
    mSL_KW_rprimes = mSL_symbol("rprimes");
    mSL_KW_RR = mSL_symbol("RR");
    mSL_KW_RRR = mSL_symbol("RRR");
    mSL_KW_run = mSL_symbol("run");
    mSL_KW_sbox = mSL_symbol("sbox");
    mSL_KW_SDur = mSL_symbol("SDur");
    mSL_KW_search = mSL_symbol("search");
    mSL_KW_send = mSL_symbol("send");
    mSL_KW_Sensors = mSL_symbol("Sensors");
    mSL_KW_SensorSz = mSL_symbol("SensorSz");
    mSL_KW_Seq = mSL_symbol("Seq");
    mSL_KW_Set = mSL_symbol("Set");
    mSL_KW_signal = mSL_symbol("signal");
    mSL_KW_size = mSL_symbol("size");
    mSL_KW_slider = mSL_symbol("slider");
    mSL_KW_sliders = mSL_symbol("sliders");
    mSL_KW_slowstop = mSL_symbol("slowstop");
    mSL_KW_SMd = mSL_symbol("SMd");
    mSL_KW_SPAlgo = mSL_symbol("SPAlgo");
    mSL_KW_SPAux = mSL_symbol("SPAux");
    mSL_KW_SPPar = mSL_symbol("SPPar");
    mSL_KW_Speed = mSL_symbol("Speed");
    mSL_KW_SpM = mSL_symbol("SpM");
    mSL_KW_spmode = mSL_symbol("spmode");
    mSL_KW_SpModes = mSL_symbol("SpModes");
    mSL_KW_static = mSL_symbol("static");
    mSL_KW_status = mSL_symbol("status");
    mSL_KW_stop = mSL_symbol("stop");
    mSL_KW_strclean = mSL_symbol("strclean");
    mSL_KW_Table = mSL_symbol("Table");
    mSL_KW_tbox = mSL_symbol("tbox");
    mSL_KW_type = mSL_symbol("type");
    mSL_KW_unchain = mSL_symbol("unchain");
    mSL_KW_undef = mSL_symbol("undef");
    mSL_KW_usep = mSL_symbol("usep");
    mSL_KW_unit = mSL_symbol("unit");
    mSL_KW_update = mSL_symbol("update");
    mSL_KW_var = mSL_symbol("var");
    mSL_KW_vars = mSL_symbol("vars");
    mSL_KW_vbox = mSL_symbol("vbox");
    mSL_KW_Version = mSL_symbol("Version");
    mSL_KW_vol = mSL_symbol("vol");
    mSL_KW_wait = mSL_symbol("wait");
    mSL_KW_while = mSL_symbol("while");
    mSL_KW_Xcept = mSL_symbol("Xcept");
    mSL_KW_Xclude = mSL_symbol("Xclude");
    mSL_KW_xsliders = mSL_symbol("xsliders");

);



function mSL_Init_long_Keywords()
(
    mSL_KW_SensorSize =  mSL_symbol("SensorSize");
    mSL_KW_globals2 = mSL_symbol("globalsbals");
    mSL_KW_GameMaster = mSL_symbol("GameMaster");
    mSL_KW_FilePlayer = mSL_symbol("FilePlayer");
    mSL_KW_ScriptMaster = mSL_symbol("ScriptMaster");
    mSL_KW_schLstSize = mSL_symbol("schLstSize");

);
