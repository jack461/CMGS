/*

   Version 1 --

*/

// Important parameters
// dmin. : valeur minimale
// nombre de "ticks" pendant lesquels les HP n'ont pas joué.
var dmin = 12; // soit x" à 1 tick par seconde
var HPcnt = 14; // nombre de haut-parleurs au total
var imgchgdelay = 97; // (s) change image sensor every 90 seconds  // imgchgdelay
var playvol = -6; // play volume (en dB)
var clipsetswitch = 71; // (s) change clip set used (clips longs/cours)
var imgmaxdur = 28; // (s) stop imgage playing afer this delay
var displaystatusdelay = 5*60; // (s) display status every 5 minutes
var inactimages = 10; // (s) secondes d'inactivité après action du senseur images
var inactsons0 = 8; // (s) secondes d'inactivité après une "salve" de sons courts
var inactsons1 = 12; // (s) secondes d'inactivité après une "salve" de sons longs
var markercount = 17; // nombre de marqueurs dans le projet
var pausemarker = 18; // pour quand on a fini...






//===========================================================



var currtime = ptime();
var timelastsalv = 0;
var timelastiseq = 0;
var inactsons;
var pid = thread(``idt);
var aux = gmem[get(``versionGMScript)];
var thrname = ``Chazel;


var s = stralloc(); // chaîne de caractères de travail
var hpu = malloc(64);  // utilisation des haut-parleurs
var pairs = malloc(12); // nous y mettrons les paires trouvées
// Représentent 1: OOXXOO  2: OOXOXOO  3: OOXOOXOO
// (déplacement du premier X au second X)
var intervalles = data(1 2 1 3 2 1 2 1 3 2 1 1 2 1 2 3 1 2 2 1);
var hpset = array(2, 0, 0, 0);
var salvnb = 0;
var clset = 0;

var hp = get(``HP_usage);
var sz, msg;
var ptpairs;
var seq = -1;
var prvseq = -1;
var prvseq1 = -2;
var prvseq2 = -3;
var prvseq3 = -3;
var prvseq4 = -3;
var evn, snb;
var imgsnb = 0;
var imgint = 1;
var repeat = 1;
var imgseqnum = 0;
var cntims=0;
var cntclset = 0;
var cntstat = 0;
var cntmax = 600;
var prvmsg = 0;

var actimgread = data(``StrtRead, ``Wait, 0.3, ``GoMark, 8);


// Stop any previous Chazelles script
event(``notify, 0, 0, ``Stopper, 0, ``Chazel, ``stop,
            0, 100, 0, 0, 0, 0, 0);



function exiterror(msg)
(
    GM_Log("", "", msg, "", "");
    exit(0);
);

// Vérifions que l'on a bien lancé le script auxiliaire
(aux == 0) ? (
    exiterror("WARNING : AUX SCRIPT NON RUNNING"); // pas de script, on ferme la baraque
) : (
    GM_Log("", "Aux Script Running", "");
);

wait(1); // stop for 1 second before changing name


thread(``name, thrname);




// provide a few messages to avoid garbage collecting
(call(``schLstSize, get(``SchedRcyclPts)) < 5) ? (
    loop(5,
        msg =  malloc(16, 'mess');
        // call(``protect, msg);
        event(``recycle, msg););
);



function changeimagesensor()
(
    // alternate images interval
    imgint = 3 - imgint;
    imgsnb = (imgsnb + imgint) % 4;
    sprintf(s, "{%d}  Image sensor: %d", cntims, 1+imgsnb); GM_Log(s); cntims += 1;
    // program a change in a few seconds
    //(cntims < 16) ?
    event(``notify, 0, pid, thrname, pid, thrname, ``imgchg,
            imgchgdelay, 100, 0, 0, 0, 0, 0);
);


function changeclipset()
(
    // alternate clips sets: 100 (courts) et 101 (longs)
    clset = (clset === 100) ? 101 : 100;
    inactsons = (clset === 100) ? inactsons0 : inactsons1;
    sprintf(s, "[%d]  Clip set: %d   w:%d", cntclset, clset, inactsons); GM_Log(s); cntclset += 1;
    // program a change in a few seconds
    //(cntclset < 16) ?
    event(``notify, 0, pid, thrname, pid, thrname, ``clset,
            clipsetswitch, 100, 0, 0, 0, 0, 0);
);


function displaystatus()
local(rcy)
(
    // (Re)Set some appropriate values
    call(``SensorSize, 2); // 2 by 2 sensors pad
    set(``SensorsActive, 1); // make it active
    set(``MIDISensMinWRep, 1.5);
    action(``SensPadX, 0); // choose sensor Pad  0
    set(``UplayControl, 0); // suppress play control
    rcy = call(``schLstSize, get(``SchedRcyclPts));
    sprintf(s, "(%d)  Status: mlist:%d  salv:%d", cntstat, rcy, salvnb); GM_Log(s); cntstat += 1;
    // program a new execution in "displaystatusdelay" seconds
    //(cntstat < 16) ?
    event(``notify, 0, pid, thrname, pid, thrname, ``status,
            displaystatusdelay, 100, 0, 0, 0, 0, 0);
);


// Warning: HP are numbered from 0 to 13
/*

   Recherche de paires, algorithmes "ad hoc" pour Chazelles

*/
function searchpairs()
local(sz, p, pv, E, fnd, tries, change, q, q1, i, j)
(
    // GM_Log("");
    call(``clear, pairs);  //
    sz = memcpy(hpu, -get(``HP_usage), -1);
    (sz != 64) ? exiterror("ERREUR HP Use");
    /*
    sprintf(s, "U:   %4d  %4d  %4d  %4d  | %4d  %4d  %4d  %4d  || %4d  %4d  %4d  %4d  | %4d  %4d  %4d  %4d",
                hpu[0],  hpu[1], hpu[2], hpu[3],
                hpu[4], hpu[5], hpu[6], hpu[7],
                hpu[8],  hpu[9], hpu[10], hpu[11],
                hpu[12], hpu[13], hpu[14], hpu[15]);
                GM_Log(s);
    */
    i = 0; p = 0; pv = 0; loop(HPcnt, (hpu[i] > pv) ? (p = i; pv = hpu[i];); i += 1;);
    // p = irand(HPcnt); // start at random
    E = intervalles[irand(intervalles[-1])]; // one of 3 configs
    change = fnd = tries = 0;
    while ((fnd < 6) && (tries < 64)) (
        q = p + E; q1 = q % HPcnt;
        // do p and q are a pair ?
        ((hpu[p] > dmin) && (hpu[q1] > dmin)) ? (
            // found a pair. keep it
            pairs[fnd] = p+1; fnd += 1; pairs[fnd] = q1+1; fnd += 1;
            // sprintf(s, "Pair:  %d, %d", p+1, q1+1);  GM_Log(s);
            // Reset sequences
            (q1 > p) ? (
                i = max(0, p-2); j = min(HPcnt-1, q+2);
                while (i <= j) (hpu[i] = 0; i+= 1;);
            ) : (
                // p à droite, q1 à gauche. 2 séquences à faire.
                i = max(0, p-2); while (i < HPcnt) (hpu[i] = 0; i+= 1;);
                i = 0; j = min(HPcnt-1, q1+2); while (i <= j) (hpu[i] = 0; i+= 1;);
            );
            /*
            sprintf(s, "U:   %4d  %4d  %4d  %4d  | %4d  %4d  %4d  %4d  || %4d  %4d  %4d  %4d  | %4d  %4d  %4d  %4d",
                        hpu[0],  hpu[1], hpu[2], hpu[3],
                        hpu[4], hpu[5], hpu[6], hpu[7],
                        hpu[8],  hpu[9], hpu[10], hpu[11],
                        hpu[12], hpu[13], hpu[14], hpu[15]);
                        GM_Log(s);
            */
            // On continue à partir du dernier remis à zéro
            (E === 3) ? (change = 999;);
            p = q+2;
        );
        p = (p+1) % HPcnt; tries += 1; change += 1;
        (change > 8) ? (E = intervalles[irand(intervalles[-1])]; change = 0;);
    );
    ptpairs = 0; salvnb += 1; // numero de la salve
);

displaystatus();
changeimagesensor();
changeclipset();
action(``GoMark, pausemarker); wait(0.1); action(``StrtRead);
GM_Log("",  "Chazelles Script Running", "");


ptpairs = 8;
while (repeat  &&  (cntmax > 0)) (
    // cntmax -= 1;
    msg = event(``wait, 120); // wait for an event, max time to live 120 seconds
    (msg > 0) ? (
        currtime = ptime(); // get current time
        evn = msg[2];
        /*
        */
        sprintf(s, "Message/%d: msg[%s  %d |  %s  =>  %s : %s  %d  %d  %d  %d]", msg, edn(0, msg[-2]),
                    msg[-1], edn(0, msg[9]), edn(0, msg[11]),edn(0, msg[2]),
                    msg[12],  msg[13],  msg[14],  msg[15]);
        GM_Log("", s);
        (evn === ``Sensors) ? (
            // A sensor message
            snb = msg[14]-1; // sensor number [in 0-3]
            (snb === imgsnb) ? (
                (currtime > timelastiseq+inactimages) ? (
                    timelastiseq = currtime;
                    // start a new sequence
                    prvseq4 = prvseq3; prvseq3 = prvseq2; prvseq2 = prvseq1; prvseq1 = prvseq; prvseq = seq;
                    while ((seq == prvseq) || (seq == prvseq1) || (seq == prvseq2) ||  (seq == prvseq3) ||
                            (seq == prvseq4)) (seq = 1+irand(markercount); );
                    // action(``StrtRead); wait(0.1);
                    action(``GoMark, seq);
                    sprintf(s, "Going to marker: %d", seq); GM_Log(s);
                    // actimgread[4] = seq; action(actimgread);
                    // sprintf(s, "Going to marker: %d / %d", seq, actimgread[4]); GM_Log(s);
                    imgseqnum += 1;
                    event(``notify, 0, pid, thrname, pid, thrname, ``imgstp,
                        imgmaxdur, 100, 0, 0, 0, imgseqnum, 0);
                );
            ) : (
                // play a clip
                (pairs[ptpairs] === 0) ? (
                    (currtime > timelastsalv+inactsons) ? (
                        timelastsalv = currtime;
                        // compute a new pair set
                        searchpairs();
                    );
                );
                (pairs[ptpairs] !== 0) ? (
                    hpset[1] = pairs[ptpairs]; ptpairs += 1;
                    hpset[2] = pairs[ptpairs]; ptpairs += 1;
                    sprintf(s, "Play on: %d & %d", hpset[1], hpset[2]); GM_Log(s);
                    play(``clip, call(``fromSet, clset), ``vol, playvol, ``hpset, hpset);
                );
            );
        ) :
        (evn === ``imgstp) ? (
            sprintf(s, "Stop image playing - seq %d/%d", msg[14], imgseqnum );GM_Log(s);
            (msg[14] === imgseqnum) ? (action(``GoMark, pausemarker); );
        ) :
        (evn === ``imgchg) ? (
            // sprintf(s, "Change images sensor");GM_Log(s);
            changeimagesensor();
        ) :
        (evn === ``clset) ? (
            // sprintf(s, "Change clip set choice");GM_Log(s);
            changeclipset();
        ) :
        (evn === ``status) ? (
            displaystatus();
        ) :
        (evn === ``stop) ? (
            sprintf(s, "Stopping on Stop command");GM_Log(s);
            action(``GoMark, pausemarker);
            repeat = 0;
        );
        // let's recycle the message
        (prvmsg > 0) ? event(``recycle, prvmsg);
        prvmsg = msg;
    );

);

strfree(s);
mfree(hpu);
mfree(pairs);
(prvmsg > 0) ? event(``recycle, prvmsg);
GM_Log("", "", "Script over", "", "");
